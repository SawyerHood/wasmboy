{"version":3,"file":"getWasmBoyTsCore.esm.js","sources":["core.esm.js","../../core/portable/getTsCore.js"],"sourcesContent":["// Banner placed by rollup to mock out some items on our esm build\n// This is useful for things like wasmmemory\n\nconst wasmboyMemorySize = 0x8b0000;\n\n// Simply initialized to the size we need\nconst wasmByteMemory = new Uint8ClampedArray(wasmboyMemorySize);\n\n// Memory mock\nexport const memory = {\n  size: () => {\n    return wasmboyMemorySize;\n  },\n  grow: () => {},\n  wasmByteMemory: wasmByteMemory\n};\n\nconst load = offset => {\n  return wasmByteMemory[offset];\n};\n\nconst store = (offset, value) => {\n  wasmByteMemory[offset] = value;\n};\n\nconst abs = value => {\n  return Math.abs(value);\n};\n\nconst ceil = value => {\n  return Math.ceil(value);\n};\n\n// Constants that will be shared by the wasm core of the emulator\n// And libraries built around the wasm (such as the official JS), or @CryZe wasmboy-rs\n// ----------------------------------\n// Wasmboy Memory Map\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// ----------------------------------\n// AssemblyScript\nvar ASSEMBLYSCRIPT_MEMORY_LOCATION = 0x000000;\nvar ASSEMBLYSCRIPT_MEMORY_SIZE = 0x000400;\n// WasmBoy States\nvar WASMBOY_STATE_LOCATION = ASSEMBLYSCRIPT_MEMORY_LOCATION + ASSEMBLYSCRIPT_MEMORY_SIZE;\nvar WASMBOY_STATE_SIZE = 0x000400;\n// Gameboy Internal Memory\nvar VIDEO_RAM_LOCATION = WASMBOY_STATE_LOCATION + WASMBOY_STATE_SIZE;\nvar VIDEO_RAM_SIZE = 0x004000;\nvar WORK_RAM_LOCATION = VIDEO_RAM_LOCATION + VIDEO_RAM_SIZE;\nvar WORK_RAM_SIZE = 0x008000;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION = WORK_RAM_LOCATION + WORK_RAM_SIZE;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE = 0x004000;\n// General Gameboy Internal Memory\nvar GAMEBOY_INTERNAL_MEMORY_LOCATION = VIDEO_RAM_LOCATION;\nvar GAMEBOY_INTERNAL_MEMORY_SIZE = OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION - VIDEO_RAM_LOCATION + OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE;\n// Graphics Output\nvar GBC_PALETTE_LOCATION = OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION + OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE;\nvar GBC_PALETTE_SIZE = 0x000080;\nvar BG_PRIORITY_MAP_LOCATION = GBC_PALETTE_LOCATION + GBC_PALETTE_SIZE;\nvar BG_PRIORITY_MAP_SIZE = 0x005c00;\nvar FRAME_LOCATION = BG_PRIORITY_MAP_LOCATION + BG_PRIORITY_MAP_SIZE;\nvar FRAME_SIZE = 0x016c00;\nvar BACKGROUND_MAP_LOCATION = FRAME_LOCATION + FRAME_SIZE;\nvar BACKGROUND_MAP_SIZE = 0x030000;\nvar TILE_DATA_LOCATION = BACKGROUND_MAP_LOCATION + BACKGROUND_MAP_SIZE;\nvar TILE_DATA_SIZE = 0x024000;\nvar OAM_TILES_LOCATION = TILE_DATA_LOCATION + TILE_DATA_SIZE;\nvar OAM_TILES_SIZE = 0x003c00;\n// General Graphics Output\nvar GRAPHICS_OUTPUT_LOCATION = GBC_PALETTE_LOCATION;\nvar GRAPHICS_OUTPUT_SIZE = OAM_TILES_LOCATION - GBC_PALETTE_LOCATION + OAM_TILES_SIZE;\n// Audio Output\nvar CHANNEL_1_BUFFER_LOCATION = OAM_TILES_LOCATION + OAM_TILES_SIZE;\nvar CHANNEL_1_BUFFER_SIZE = 0x020000;\nvar CHANNEL_2_BUFFER_LOCATION = CHANNEL_1_BUFFER_LOCATION + CHANNEL_1_BUFFER_SIZE;\nvar CHANNEL_2_BUFFER_SIZE = 0x020000;\nvar CHANNEL_3_BUFFER_LOCATION = CHANNEL_2_BUFFER_LOCATION + CHANNEL_2_BUFFER_SIZE;\nvar CHANNEL_3_BUFFER_SIZE = 0x020000;\nvar CHANNEL_4_BUFFER_LOCATION = CHANNEL_3_BUFFER_LOCATION + CHANNEL_3_BUFFER_SIZE;\nvar CHANNEL_4_BUFFER_SIZE = 0x020000;\nvar AUDIO_BUFFER_LOCATION = CHANNEL_4_BUFFER_LOCATION + CHANNEL_4_BUFFER_SIZE;\nvar AUDIO_BUFFER_SIZE = 0x020000;\n// Catridge Ram\nvar CARTRIDGE_RAM_LOCATION = AUDIO_BUFFER_LOCATION + AUDIO_BUFFER_SIZE;\nvar CARTRIDGE_RAM_SIZE = 0x020000;\n// Boot ROM\n// http://gbdev.gg8.se/files/roms/bootroms/\n// Largest Boot rom is GBC, at 2.5KB\nvar BOOT_ROM_LOCATION = CARTRIDGE_RAM_LOCATION + CARTRIDGE_RAM_SIZE;\nvar BOOT_ROM_SIZE = 0x000a00;\n// Cartridge ROM\nvar CARTRIDGE_ROM_LOCATION = BOOT_ROM_LOCATION + BOOT_ROM_SIZE;\nvar CARTRIDGE_ROM_SIZE = 0x7e0400;\n// Debug Memory\nvar DEBUG_GAMEBOY_MEMORY_LOCATION = CARTRIDGE_ROM_LOCATION + CARTRIDGE_ROM_SIZE;\nvar DEBUG_GAMEBOY_MEMORY_SIZE = 0xffff;\n// Final General Size\nvar WASMBOY_MEMORY_LOCATION = 0x000000;\nvar WASMBOY_MEMORY_SIZE = DEBUG_GAMEBOY_MEMORY_LOCATION + DEBUG_GAMEBOY_MEMORY_SIZE + 1;\nvar WASMBOY_WASM_PAGES = ceil(WASMBOY_MEMORY_SIZE / 1024 / 64) + 1;\n\nvar Config = /** @class */ (function () {\n    function Config() {\n    }\n    // Boot Rom\n    Config.enableBootRom = false;\n    // GBC Options\n    Config.useGbcWhenAvailable = true;\n    // Batch Processing\n    Config.audioBatchProcessing = false;\n    Config.graphicsBatchProcessing = false;\n    Config.timersBatchProcessing = false;\n    // Scanline Rendering\n    Config.graphicsDisableScanlineRendering = false;\n    // Acumulate Sound Samples\n    Config.audioAccumulateSamples = false;\n    // Tile Rednering\n    Config.tileRendering = false;\n    Config.tileCaching = false;\n    // Audio Debugging\n    Config.enableAudioDebugging = false;\n    return Config;\n}());\n\n// Portable Code for JS Wasm Benchmarking\n// https://github.com/AssemblyScript/assemblyscript/wiki/Writing-portable-code\n// https://github.com/AssemblyScript/assemblyscript/blob/master/std/portable/index.js\nfunction u8Portable(param) {\n    return param & 0xff;\n}\nfunction u16Portable(param) {\n    return param & 0xffff;\n}\nfunction i8Portable(param) {\n    return (param << 24) >> 24;\n}\nfunction i32Portable(param) {\n    return param | 0;\n}\n\n// Set flag bit on on register F. For instance set zero flag to zero -> (7, 0)\nfunction setFlagBit(flagBit, flagValue) {\n    var bitwiseOperand = u8Portable(1 << flagBit);\n    if (flagValue > 0) {\n        Cpu.registerF = Cpu.registerF | bitwiseOperand;\n    }\n    else {\n        // XOR out the two ones\n        bitwiseOperand = 0xff ^ bitwiseOperand;\n        Cpu.registerF = Cpu.registerF & bitwiseOperand;\n    }\n    return Cpu.registerF;\n}\n// Overload the set flag bit for ease of use\nfunction setZeroFlag$$1(value) {\n    setFlagBit(7, value);\n}\nfunction setSubtractFlag(value) {\n    setFlagBit(6, value);\n}\nfunction setHalfCarryFlag(value) {\n    setFlagBit(5, value);\n}\nfunction setCarryFlag(value) {\n    setFlagBit(4, value);\n}\n// Getters for flags\nfunction getZeroFlag$$1() {\n    return (Cpu.registerF >> 7) & 0x01;\n}\nfunction getSubtractFlag() {\n    return (Cpu.registerF >> 6) & 0x01;\n}\nfunction getHalfCarryFlag() {\n    return (Cpu.registerF >> 5) & 0x01;\n}\nfunction getCarryFlag$$1() {\n    return (Cpu.registerF >> 4) & 0x01;\n}\n// Must be run before the register actually performs the add\n// amountToAdd i16, since max number can be an u8\nfunction checkAndSetEightBitHalfCarryFlag(value, amountToAdd) {\n    if (amountToAdd >= 0) {\n        // https://robdor.com/2016/08/10/gameboy-emulator-half-carry-flag/\n        var result = u8Portable((value & 0x0f) + (amountToAdd & 0x0f)) & 0x10;\n        setHalfCarryFlag((result !== 0x00));\n    }\n    else {\n        // From: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n        // CTRL+F \"subBytes(a, b byte)\"\n        setHalfCarryFlag(((abs(amountToAdd) & 0x0f) > (value & 0x0f)));\n    }\n}\nfunction checkAndSetEightBitCarryFlag(value, amountToAdd) {\n    if (amountToAdd >= 0) {\n        var result = u8Portable(value + amountToAdd);\n        setCarryFlag((value > result));\n    }\n    else {\n        setCarryFlag((abs(amountToAdd) > value));\n    }\n}\n// Function to handle 16 bit addition overflow, and set the carry flags accordingly\n// i32 on valueTwo to support passing signed immedaite values\nfunction checkAndSetSixteenBitFlagsAddOverflow(valueOne, valueTwo, useStackPointerBits) {\n    // need to differentiate between HL and SP\n    // HL carries are at 11 and 15, SP carries are at 3 and 7 :p\n    if (useStackPointerBits) {\n        // Logic from : https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n        // CTRL+F add_sp_n\n        // using the stack pointer bits means we can safely assume the value is signed\n        var signedValueOne = valueOne;\n        var result = signedValueOne + valueTwo;\n        var flagXor = signedValueOne ^ valueTwo ^ result;\n        setHalfCarryFlag(((flagXor & 0x10) !== 0));\n        setCarryFlag(((flagXor & 0x100) !== 0));\n    }\n    else {\n        // Logic from: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n        // CTRL+F addWords\n        // Value two is not signed\n        var result = u16Portable(valueOne + valueTwo);\n        // Check the carry flag by allowing the overflow\n        setCarryFlag((result < valueOne));\n        // To check for half carry flag (bit 15), by XOR'ing valyes, and and'ing the bit in question\n        var halfCarryXor = valueOne ^ valueTwo ^ result;\n        var halfCarryAnd = u16Portable(halfCarryXor & 0x1000);\n        setHalfCarryFlag((halfCarryAnd !== 0x00));\n    }\n}\n\n// File for all of the colors for different GB Palletes\n// https://i.imgur.com/HupBY.png\n// https://www.libretro.com/index.php/gambatte-progress-report/\n// https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM\n// Our default wasmboy gb colors\nvar WasmBoyGBColors = /** @class */ (function () {\n    function WasmBoyGBColors() {\n    }\n    //Bg\n    WasmBoyGBColors.bgWhite = 0xf2f2f2;\n    WasmBoyGBColors.bgLightGrey = 0xa0a0a0;\n    WasmBoyGBColors.bgDarkGrey = 0x585858;\n    WasmBoyGBColors.bgBlack = 0x080808;\n    // Obj 0\n    WasmBoyGBColors.obj0White = 0xf2f2f2;\n    WasmBoyGBColors.obj0LightGrey = 0xa0a0a0;\n    WasmBoyGBColors.obj0DarkGrey = 0x585858;\n    WasmBoyGBColors.obj0Black = 0x080808;\n    // Obj1\n    WasmBoyGBColors.obj1White = 0xf2f2f2;\n    WasmBoyGBColors.obj1LightGrey = 0xa0a0a0;\n    WasmBoyGBColors.obj1DarkGrey = 0x585858;\n    WasmBoyGBColors.obj1Black = 0x080808;\n    return WasmBoyGBColors;\n}());\n// Action Button: Right\nvar GreenColors = /** @class */ (function () {\n    function GreenColors() {\n    }\n    //Bg\n    GreenColors.bgWhite = 0xffffff;\n    GreenColors.bgLightGrey = 0x52ff00;\n    GreenColors.bgDarkGrey = 0xff4200;\n    GreenColors.bgBlack = 0x000000;\n    // Obj 0\n    GreenColors.obj0White = 0xffffff;\n    GreenColors.obj0LightGrey = 0x52ff00;\n    GreenColors.obj0DarkGrey = 0xff4200;\n    GreenColors.obj0Black = 0x000000;\n    // Obj1\n    GreenColors.obj1White = 0xffffff;\n    GreenColors.obj1LightGrey = 0x52ff00;\n    GreenColors.obj1DarkGrey = 0xff4200;\n    GreenColors.obj1Black = 0x000000;\n    return GreenColors;\n}());\n// Action Button: A + Down\nvar OrangeColors = /** @class */ (function () {\n    function OrangeColors() {\n    }\n    //Bg\n    OrangeColors.bgWhite = 0xffffff;\n    OrangeColors.bgLightGrey = 0xffff00;\n    OrangeColors.bgDarkGrey = 0xff0000;\n    OrangeColors.bgBlack = 0x000000;\n    // Obj 0\n    OrangeColors.obj0White = 0xffffff;\n    OrangeColors.obj0LightGrey = 0xffff00;\n    OrangeColors.obj0DarkGrey = 0xff0000;\n    OrangeColors.obj0Black = 0x000000;\n    // Obj1\n    OrangeColors.obj1White = 0xffffff;\n    OrangeColors.obj1LightGrey = 0xffff00;\n    OrangeColors.obj1DarkGrey = 0xff0000;\n    OrangeColors.obj1Black = 0x000000;\n    return OrangeColors;\n}());\n// Action Button: Up\nvar BrownColors = /** @class */ (function () {\n    function BrownColors() {\n    }\n    //Bg\n    BrownColors.bgWhite = 0xffffff;\n    BrownColors.bgLightGrey = 0xffad63;\n    BrownColors.bgDarkGrey = 0x843100;\n    BrownColors.bgBlack = 0x000000;\n    // Obj 0\n    BrownColors.obj0White = 0xffffff;\n    BrownColors.obj0LightGrey = 0xffad63;\n    BrownColors.obj0DarkGrey = 0x843100;\n    BrownColors.obj0Black = 0x000000;\n    // Obj1\n    BrownColors.obj1White = 0xffffff;\n    BrownColors.obj1LightGrey = 0xffad63;\n    BrownColors.obj1DarkGrey = 0x843100;\n    BrownColors.obj1Black = 0x000000;\n    return BrownColors;\n}());\n// Action Button: B + Right\nvar InvertedColors = /** @class */ (function () {\n    function InvertedColors() {\n    }\n    //Bg\n    InvertedColors.bgWhite = 0x000000;\n    InvertedColors.bgLightGrey = 0x008484;\n    InvertedColors.bgDarkGrey = 0xffde00;\n    InvertedColors.bgBlack = 0xffffff;\n    // Obj 0\n    InvertedColors.obj0White = 0x000000;\n    InvertedColors.obj0LightGrey = 0x008484;\n    InvertedColors.obj0DarkGrey = 0xffde00;\n    InvertedColors.obj0Black = 0xffffff;\n    // Obj1\n    InvertedColors.obj1White = 0x000000;\n    InvertedColors.obj1LightGrey = 0x008484;\n    InvertedColors.obj1DarkGrey = 0xffde00;\n    InvertedColors.obj1Black = 0xffffff;\n    return InvertedColors;\n}());\n// Action Button: B + Left\nvar GrayscaleColors = /** @class */ (function () {\n    function GrayscaleColors() {\n    }\n    //Bg\n    GrayscaleColors.bgWhite = 0xffffff;\n    GrayscaleColors.bgLightGrey = 0xa5a5a5;\n    GrayscaleColors.bgDarkGrey = 0x525252;\n    GrayscaleColors.bgBlack = 0x000000;\n    // Obj 0\n    GrayscaleColors.obj0White = 0xffffff;\n    GrayscaleColors.obj0LightGrey = 0xa5a5a5;\n    GrayscaleColors.obj0DarkGrey = 0x525252;\n    GrayscaleColors.obj0Black = 0x000000;\n    // Obj1\n    GrayscaleColors.obj1White = 0xffffff;\n    GrayscaleColors.obj1LightGrey = 0xa5a5a5;\n    GrayscaleColors.obj1DarkGrey = 0x525252;\n    GrayscaleColors.obj1Black = 0x000000;\n    return GrayscaleColors;\n}());\n// Action Button: Down\nvar PastelMixColors = /** @class */ (function () {\n    function PastelMixColors() {\n    }\n    //Bg\n    PastelMixColors.bgWhite = 0xffffa5;\n    PastelMixColors.bgLightGrey = 0xff9494;\n    PastelMixColors.bgDarkGrey = 0x9494ff;\n    PastelMixColors.bgBlack = 0x000000;\n    // Obj 0\n    PastelMixColors.obj0White = 0xffffa5;\n    PastelMixColors.obj0LightGrey = 0xff9494;\n    PastelMixColors.obj0DarkGrey = 0x9494ff;\n    PastelMixColors.obj0Black = 0x000000;\n    // Obj1\n    PastelMixColors.obj1White = 0xffffa5;\n    PastelMixColors.obj1LightGrey = 0xff9494;\n    PastelMixColors.obj1DarkGrey = 0x9494ff;\n    PastelMixColors.obj1Black = 0x000000;\n    return PastelMixColors;\n}());\n// Action Button: B + Up\nvar DarkBrownColors = /** @class */ (function () {\n    function DarkBrownColors() {\n    }\n    //Bg\n    DarkBrownColors.bgWhite = 0xffe6c5;\n    DarkBrownColors.bgLightGrey = 0xce9c84;\n    DarkBrownColors.bgDarkGrey = 0x846b29;\n    DarkBrownColors.bgBlack = 0x5a3108;\n    // Obj 0\n    DarkBrownColors.obj0White = 0xffffff;\n    DarkBrownColors.obj0LightGrey = 0xffad63;\n    DarkBrownColors.obj0DarkGrey = 0x843100;\n    DarkBrownColors.obj0Black = 0x000000;\n    // Obj1\n    DarkBrownColors.obj1White = 0xffffff;\n    DarkBrownColors.obj1LightGrey = 0xffad63;\n    DarkBrownColors.obj1DarkGrey = 0x843100;\n    DarkBrownColors.obj1Black = 0x000000;\n    return DarkBrownColors;\n}());\n// Action Button: A + Right\nvar DarkGreenColors = /** @class */ (function () {\n    function DarkGreenColors() {\n    }\n    //Bg\n    DarkGreenColors.bgWhite = 0xffffff;\n    DarkGreenColors.bgLightGrey = 0x7bff31;\n    DarkGreenColors.bgDarkGrey = 0x0063c5;\n    DarkGreenColors.bgBlack = 0x000000;\n    // Obj 0\n    DarkGreenColors.obj0White = 0xffffff;\n    DarkGreenColors.obj0LightGrey = 0xff8484;\n    DarkGreenColors.obj0DarkGrey = 0x943a3a;\n    DarkGreenColors.obj0Black = 0x000000;\n    // Obj1\n    DarkGreenColors.obj1White = 0xffffff;\n    DarkGreenColors.obj1LightGrey = 0xff8484;\n    DarkGreenColors.obj1DarkGrey = 0x943a3a;\n    DarkGreenColors.obj1Black = 0x000000;\n    return DarkGreenColors;\n}());\n// Action Button: A + Left\nvar DarkBlueColors = /** @class */ (function () {\n    function DarkBlueColors() {\n    }\n    //Bg\n    DarkBlueColors.bgWhite = 0xffffff;\n    DarkBlueColors.bgLightGrey = 0x8c8cde;\n    DarkBlueColors.bgDarkGrey = 0x52528c;\n    DarkBlueColors.bgBlack = 0x000000;\n    // Obj 0\n    DarkBlueColors.obj0White = 0xffffff;\n    DarkBlueColors.obj0LightGrey = 0xff8484;\n    DarkBlueColors.obj0DarkGrey = 0x943a3a;\n    DarkBlueColors.obj0Black = 0x000000;\n    // Obj1\n    DarkBlueColors.obj1White = 0xffffff;\n    DarkBlueColors.obj1LightGrey = 0xffad63;\n    DarkBlueColors.obj1DarkGrey = 0x843100;\n    DarkBlueColors.obj1Black = 0x000000;\n    return DarkBlueColors;\n}());\n// Action Button: A + Up\nvar RedColors = /** @class */ (function () {\n    function RedColors() {\n    }\n    //Bg\n    RedColors.bgWhite = 0xffffff;\n    RedColors.bgLightGrey = 0xff8484;\n    RedColors.bgDarkGrey = 0x943a3a;\n    RedColors.bgBlack = 0x000000;\n    // Obj 0\n    RedColors.obj0White = 0xffffff;\n    RedColors.obj0LightGrey = 0x7bff31;\n    RedColors.obj0DarkGrey = 0x008400;\n    RedColors.obj0Black = 0x000000;\n    // Obj1\n    RedColors.obj1White = 0xffffff;\n    RedColors.obj1LightGrey = 0x63a5ff;\n    RedColors.obj1DarkGrey = 0x0000ff;\n    RedColors.obj1Black = 0x000000;\n    return RedColors;\n}());\n// Action Button: Left\nvar BlueColors = /** @class */ (function () {\n    function BlueColors() {\n    }\n    //Bg\n    BlueColors.bgWhite = 0xffffff;\n    BlueColors.bgLightGrey = 0x63a5ff;\n    BlueColors.bgDarkGrey = 0x0000ff;\n    BlueColors.bgBlack = 0x000000;\n    // Obj 0\n    BlueColors.obj0White = 0xffffff;\n    BlueColors.obj0LightGrey = 0xff8484;\n    BlueColors.obj0DarkGrey = 0x943a3a;\n    BlueColors.obj0Black = 0x000000;\n    // Obj1\n    BlueColors.obj1White = 0xffffff;\n    BlueColors.obj1LightGrey = 0x7bff31;\n    BlueColors.obj1DarkGrey = 0x008400;\n    BlueColors.obj1Black = 0x000000;\n    return BlueColors;\n}());\n// Action Button: B + Down\nvar YellowColors = /** @class */ (function () {\n    function YellowColors() {\n    }\n    //Bg\n    YellowColors.bgWhite = 0xffffff;\n    YellowColors.bgLightGrey = 0xffff00;\n    YellowColors.bgDarkGrey = 0x7b4a00;\n    YellowColors.bgBlack = 0x000000;\n    // Obj 0\n    YellowColors.obj0White = 0xffffff;\n    YellowColors.obj0LightGrey = 0x63a5ff;\n    YellowColors.obj0DarkGrey = 0x0000ff;\n    YellowColors.obj0Black = 0x000000;\n    // Obj1\n    YellowColors.obj1White = 0xffffff;\n    YellowColors.obj1LightGrey = 0x7bff31;\n    YellowColors.obj1DarkGrey = 0x008400;\n    YellowColors.obj1Black = 0x000000;\n    return YellowColors;\n}());\n// Assigned Color Palettes\n// Alleyway\nvar Table00Entry08Colors = /** @class */ (function () {\n    function Table00Entry08Colors() {\n    }\n    //Bg\n    Table00Entry08Colors.bgWhite = 0xa59cff;\n    Table00Entry08Colors.bgLightGrey = 0xffff00;\n    Table00Entry08Colors.bgDarkGrey = 0x006300;\n    Table00Entry08Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table00Entry08Colors.obj0White = 0xa59cff;\n    Table00Entry08Colors.obj0LightGrey = 0xffff00;\n    Table00Entry08Colors.obj0DarkGrey = 0x006300;\n    Table00Entry08Colors.obj0Black = 0x000000;\n    // Obj1\n    Table00Entry08Colors.obj1White = 0xa59cff;\n    Table00Entry08Colors.obj1LightGrey = 0xffff00;\n    Table00Entry08Colors.obj1DarkGrey = 0x006300;\n    Table00Entry08Colors.obj1Black = 0x000000;\n    return Table00Entry08Colors;\n}());\n// Pokemon Blue\nvar Table01Entry0BColors = /** @class */ (function () {\n    function Table01Entry0BColors() {\n    }\n    //Bg\n    Table01Entry0BColors.bgWhite = 0xffffff;\n    Table01Entry0BColors.bgLightGrey = 0x63a5ff;\n    Table01Entry0BColors.bgDarkGrey = 0x0000ff;\n    Table01Entry0BColors.bgBlack = 0x000000;\n    // Obj 0\n    Table01Entry0BColors.obj0White = 0xffffff;\n    Table01Entry0BColors.obj0LightGrey = 0xff8484;\n    Table01Entry0BColors.obj0DarkGrey = 0x943a3a;\n    Table01Entry0BColors.obj0Black = 0x000000;\n    // Obj1\n    Table01Entry0BColors.obj1White = 0xffffff;\n    Table01Entry0BColors.obj1LightGrey = 0x63a5ff;\n    Table01Entry0BColors.obj1DarkGrey = 0x0000ff;\n    Table01Entry0BColors.obj1Black = 0x000000;\n    return Table01Entry0BColors;\n}());\n// Pokemon Red\nvar Table01Entry10Colors = /** @class */ (function () {\n    function Table01Entry10Colors() {\n    }\n    //Bg\n    Table01Entry10Colors.bgWhite = 0xffffff;\n    Table01Entry10Colors.bgLightGrey = 0xff8484;\n    Table01Entry10Colors.bgDarkGrey = 0x943a3a;\n    Table01Entry10Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table01Entry10Colors.obj0White = 0xffffff;\n    Table01Entry10Colors.obj0LightGrey = 0x7bff31;\n    Table01Entry10Colors.obj0DarkGrey = 0x008400;\n    Table01Entry10Colors.obj0Black = 0x000000;\n    // Obj1\n    Table01Entry10Colors.obj1White = 0xffffff;\n    Table01Entry10Colors.obj1LightGrey = 0xff8484;\n    Table01Entry10Colors.obj1DarkGrey = 0x943a3a;\n    Table01Entry10Colors.obj1Black = 0x000000;\n    return Table01Entry10Colors;\n}());\n// Super Mario Land\nvar Table03Entry0AColors = /** @class */ (function () {\n    function Table03Entry0AColors() {\n    }\n    //Bg\n    Table03Entry0AColors.bgWhite = 0xb5b5ff;\n    Table03Entry0AColors.bgLightGrey = 0xffff94;\n    Table03Entry0AColors.bgDarkGrey = 0xad5a42;\n    Table03Entry0AColors.bgBlack = 0x000000;\n    // Obj 0\n    Table03Entry0AColors.obj0White = 0x000000;\n    Table03Entry0AColors.obj0LightGrey = 0xffffff;\n    Table03Entry0AColors.obj0DarkGrey = 0xff8484;\n    Table03Entry0AColors.obj0Black = 0x943a3a;\n    // Obj1\n    Table03Entry0AColors.obj1White = 0x000000;\n    Table03Entry0AColors.obj1LightGrey = 0xffffff;\n    Table03Entry0AColors.obj1DarkGrey = 0xff8484;\n    Table03Entry0AColors.obj1Black = 0x943a3a;\n    return Table03Entry0AColors;\n}());\n// Super Mario Land 3 - WarioLand\nvar Table05Entry00Colors = /** @class */ (function () {\n    function Table05Entry00Colors() {\n    }\n    //Bg\n    Table05Entry00Colors.bgWhite = 0xffffff;\n    Table05Entry00Colors.bgLightGrey = 0xadad84;\n    Table05Entry00Colors.bgDarkGrey = 0x42737b;\n    Table05Entry00Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry00Colors.obj0White = 0xffffff;\n    Table05Entry00Colors.obj0LightGrey = 0xff7300;\n    Table05Entry00Colors.obj0DarkGrey = 0x944200;\n    Table05Entry00Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry00Colors.obj1White = 0xffffff;\n    Table05Entry00Colors.obj1LightGrey = 0x5abdff;\n    Table05Entry00Colors.obj1DarkGrey = 0xff0000;\n    Table05Entry00Colors.obj1Black = 0x0000ff;\n    return Table05Entry00Colors;\n}());\n// Donkey Kong\nvar Table05Entry01Colors = /** @class */ (function () {\n    function Table05Entry01Colors() {\n    }\n    //Bg\n    Table05Entry01Colors.bgWhite = 0xffff9c;\n    Table05Entry01Colors.bgLightGrey = 0x94b5ff;\n    Table05Entry01Colors.bgDarkGrey = 0x639473;\n    Table05Entry01Colors.bgBlack = 0x003a3a;\n    // Obj 0\n    Table05Entry01Colors.obj0White = 0xffc542;\n    Table05Entry01Colors.obj0LightGrey = 0xffd600;\n    Table05Entry01Colors.obj0DarkGrey = 0x943a00;\n    Table05Entry01Colors.obj0Black = 0x4a0000;\n    // Obj1\n    Table05Entry01Colors.obj1White = 0xffffff;\n    Table05Entry01Colors.obj1LightGrey = 0xff8484;\n    Table05Entry01Colors.obj1DarkGrey = 0x943a3a;\n    Table05Entry01Colors.obj1Black = 0x000000;\n    return Table05Entry01Colors;\n}());\n// Tennis\nvar Table05Entry02Colors = /** @class */ (function () {\n    function Table05Entry02Colors() {\n    }\n    //Bg\n    Table05Entry02Colors.bgWhite = 0x6bff00;\n    Table05Entry02Colors.bgLightGrey = 0xffffff;\n    Table05Entry02Colors.bgDarkGrey = 0xff524a;\n    Table05Entry02Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry02Colors.obj0White = 0xffffff;\n    Table05Entry02Colors.obj0LightGrey = 0xffffff;\n    Table05Entry02Colors.obj0DarkGrey = 0x63a5ff;\n    Table05Entry02Colors.obj0Black = 0x0000ff;\n    // Obj1\n    Table05Entry02Colors.obj1White = 0xffffff;\n    Table05Entry02Colors.obj1LightGrey = 0xffad63;\n    Table05Entry02Colors.obj1DarkGrey = 0x843100;\n    Table05Entry02Colors.obj1Black = 0x000000;\n    return Table05Entry02Colors;\n}());\n// Kirby's Dream Land\nvar Table05Entry08Colors = /** @class */ (function () {\n    function Table05Entry08Colors() {\n    }\n    //Bg\n    Table05Entry08Colors.bgWhite = 0xa59cff;\n    Table05Entry08Colors.bgLightGrey = 0xffff00;\n    Table05Entry08Colors.bgDarkGrey = 0x006300;\n    Table05Entry08Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry08Colors.obj0White = 0xff6352;\n    Table05Entry08Colors.obj0LightGrey = 0xd60000;\n    Table05Entry08Colors.obj0DarkGrey = 0x630000;\n    Table05Entry08Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry08Colors.obj1White = 0x0000ff;\n    Table05Entry08Colors.obj1LightGrey = 0xffffff;\n    Table05Entry08Colors.obj1DarkGrey = 0xffff7b;\n    Table05Entry08Colors.obj1Black = 0x0084ff;\n    return Table05Entry08Colors;\n}());\n// Super Mario Land 2 BAYYYBEEE\nvar Table05Entry09Colors = /** @class */ (function () {\n    function Table05Entry09Colors() {\n    }\n    //Bg\n    Table05Entry09Colors.bgWhite = 0xffffce;\n    Table05Entry09Colors.bgLightGrey = 0x63efef;\n    Table05Entry09Colors.bgDarkGrey = 0x9c8431;\n    Table05Entry09Colors.bgBlack = 0x5a5a5a;\n    // Obj 0\n    Table05Entry09Colors.obj0White = 0xffffff;\n    Table05Entry09Colors.obj0LightGrey = 0xff7300;\n    Table05Entry09Colors.obj0DarkGrey = 0x944200;\n    Table05Entry09Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry09Colors.obj1White = 0xffffff;\n    Table05Entry09Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry09Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry09Colors.obj1Black = 0x000000;\n    return Table05Entry09Colors;\n}());\n// Link's Awakening\nvar Table05Entry11Colors = /** @class */ (function () {\n    function Table05Entry11Colors() {\n    }\n    // Bg\n    Table05Entry11Colors.bgWhite = 0xffffff;\n    Table05Entry11Colors.bgLightGrey = 0xff8484;\n    Table05Entry11Colors.bgDarkGrey = 0x943a3a;\n    Table05Entry11Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry11Colors.obj0White = 0xffffff;\n    Table05Entry11Colors.obj0LightGrey = 0x00ff00;\n    Table05Entry11Colors.obj0DarkGrey = 0x318400;\n    Table05Entry11Colors.obj0Black = 0x004a00;\n    // Obj1\n    Table05Entry11Colors.obj1White = 0xffffff;\n    Table05Entry11Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry11Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry11Colors.obj1Black = 0x000000;\n    return Table05Entry11Colors;\n}());\n// Metroid 2\nvar Table05Entry14Colors = /** @class */ (function () {\n    function Table05Entry14Colors() {\n    }\n    //Bg\n    Table05Entry14Colors.bgWhite = 0xffffff;\n    Table05Entry14Colors.bgLightGrey = 0x63a5ff;\n    Table05Entry14Colors.bgDarkGrey = 0x0000ff;\n    Table05Entry14Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry14Colors.obj0White = 0xffff00;\n    Table05Entry14Colors.obj0LightGrey = 0xff0000;\n    Table05Entry14Colors.obj0DarkGrey = 0x630000;\n    Table05Entry14Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry14Colors.obj1White = 0xffffff;\n    Table05Entry14Colors.obj1LightGrey = 0x7bff31;\n    Table05Entry14Colors.obj1DarkGrey = 0x008400;\n    Table05Entry14Colors.obj1Black = 0x000000;\n    return Table05Entry14Colors;\n}());\n// WarioLand 2\nvar Table05Entry15Colors = /** @class */ (function () {\n    function Table05Entry15Colors() {\n    }\n    //Bg\n    Table05Entry15Colors.bgWhite = 0xffffff;\n    Table05Entry15Colors.bgLightGrey = 0xadad84;\n    Table05Entry15Colors.bgDarkGrey = 0x42737b;\n    Table05Entry15Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry15Colors.obj0White = 0xffffff;\n    Table05Entry15Colors.obj0LightGrey = 0xffad63;\n    Table05Entry15Colors.obj0DarkGrey = 0xffad63;\n    Table05Entry15Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry15Colors.obj1White = 0xffffff;\n    Table05Entry15Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry15Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry15Colors.obj1Black = 0x000000;\n    return Table05Entry15Colors;\n}());\n\n// File for all of the logic of setting gameboy color plaettes\n// Current / exported color\nvar Colors = /** @class */ (function () {\n    function Colors() {\n    }\n    //Bg\n    Colors.bgWhite = WasmBoyGBColors.bgWhite;\n    Colors.bgLightGrey = WasmBoyGBColors.bgLightGrey;\n    Colors.bgDarkGrey = WasmBoyGBColors.bgDarkGrey;\n    Colors.bgBlack = WasmBoyGBColors.bgBlack;\n    // Obj 0\n    Colors.obj0White = WasmBoyGBColors.obj0White;\n    Colors.obj0LightGrey = WasmBoyGBColors.obj0LightGrey;\n    Colors.obj0DarkGrey = WasmBoyGBColors.obj0DarkGrey;\n    Colors.obj0Black = WasmBoyGBColors.obj0Black;\n    // Obj1\n    Colors.obj1White = WasmBoyGBColors.obj1White;\n    Colors.obj1LightGrey = WasmBoyGBColors.obj1LightGrey;\n    Colors.obj1DarkGrey = WasmBoyGBColors.obj1DarkGrey;\n    Colors.obj1Black = WasmBoyGBColors.obj1Black;\n    return Colors;\n}());\n// Inlined because closure compiler inlines\nfunction initializeColors() {\n    setManualColorizationPalette(0);\n    if (Cpu.GBCEnabled) {\n        // Don't need to continue this if a GBC game\n        return;\n    }\n    if (Cpu.BootROMEnabled) {\n        if (!Cpu.GBCEnabled) {\n            // GB\n            return;\n        }\n    }\n    // Do some automatic color palette swapping if we have a loaded ROM\n    var titleChecksum = 0x00;\n    for (var i = 0x0134; i <= 0x0143; i++) {\n        titleChecksum += eightBitLoadFromGBMemory(i);\n    }\n    // Set the colorization for the game automatically if assigned\n    // https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM\n    var hash = titleChecksum & 0xff;\n    setHashColorizationPalette(hash);\n}\nfunction getRedFromHexColor(color) {\n    return (color & 0xff0000) >> 16;\n}\nfunction getGreenFromHexColor(color) {\n    return (color & 0x00ff00) >> 8;\n}\nfunction getBlueFromHexColor(color) {\n    return color & 0x0000ff;\n}\n// Function to set the colorization\n// By manually pressing buttons\nfunction setManualColorizationPalette(colorizationId) {\n    // Set the colorizationId clockwise according to:\n    // https://en.wikipedia.org/wiki/Game_Boy_Color\n    switch (colorizationId) {\n        case 0:\n            Colors.bgWhite = WasmBoyGBColors.bgWhite;\n            Colors.bgLightGrey = WasmBoyGBColors.bgLightGrey;\n            Colors.bgDarkGrey = WasmBoyGBColors.bgDarkGrey;\n            Colors.bgBlack = WasmBoyGBColors.bgBlack;\n            Colors.obj0White = WasmBoyGBColors.obj0White;\n            Colors.obj0LightGrey = WasmBoyGBColors.obj0LightGrey;\n            Colors.obj0DarkGrey = WasmBoyGBColors.obj0DarkGrey;\n            Colors.obj0Black = WasmBoyGBColors.obj0Black;\n            Colors.obj1White = WasmBoyGBColors.obj1White;\n            Colors.obj1LightGrey = WasmBoyGBColors.obj1LightGrey;\n            Colors.obj1DarkGrey = WasmBoyGBColors.obj1DarkGrey;\n            Colors.obj1Black = WasmBoyGBColors.obj1Black;\n            break;\n        case 1:\n            // Up, Brown\n            Colors.bgWhite = BrownColors.bgWhite;\n            Colors.bgLightGrey = BrownColors.bgLightGrey;\n            Colors.bgDarkGrey = BrownColors.bgDarkGrey;\n            Colors.bgBlack = BrownColors.bgBlack;\n            Colors.obj0White = BrownColors.obj0White;\n            Colors.obj0LightGrey = BrownColors.obj0LightGrey;\n            Colors.obj0DarkGrey = BrownColors.obj0DarkGrey;\n            Colors.obj0Black = BrownColors.obj0Black;\n            Colors.obj1White = BrownColors.obj1White;\n            Colors.obj1LightGrey = BrownColors.obj1LightGrey;\n            Colors.obj1DarkGrey = BrownColors.obj1DarkGrey;\n            Colors.obj1Black = BrownColors.obj1Black;\n            break;\n        case 2:\n            // Up + A, Red\n            Colors.bgWhite = RedColors.bgWhite;\n            Colors.bgLightGrey = RedColors.bgLightGrey;\n            Colors.bgDarkGrey = RedColors.bgDarkGrey;\n            Colors.bgBlack = RedColors.bgBlack;\n            Colors.obj0White = RedColors.obj0White;\n            Colors.obj0LightGrey = RedColors.obj0LightGrey;\n            Colors.obj0DarkGrey = RedColors.obj0DarkGrey;\n            Colors.obj0Black = RedColors.obj0Black;\n            Colors.obj1White = RedColors.obj1White;\n            Colors.obj1LightGrey = RedColors.obj1LightGrey;\n            Colors.obj1DarkGrey = RedColors.obj1DarkGrey;\n            Colors.obj1Black = RedColors.obj1Black;\n            break;\n        case 3:\n            // Up + B, DarkBrown\n            Colors.bgWhite = DarkBrownColors.bgWhite;\n            Colors.bgLightGrey = DarkBrownColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkBrownColors.bgDarkGrey;\n            Colors.bgBlack = DarkBrownColors.bgBlack;\n            Colors.obj0White = DarkBrownColors.obj0White;\n            Colors.obj0LightGrey = DarkBrownColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkBrownColors.obj0DarkGrey;\n            Colors.obj0Black = DarkBrownColors.obj0Black;\n            Colors.obj1White = DarkBrownColors.obj1White;\n            Colors.obj1LightGrey = DarkBrownColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkBrownColors.obj1DarkGrey;\n            Colors.obj1Black = DarkBrownColors.obj1Black;\n            break;\n        case 4:\n            // Right, Green\n            Colors.bgWhite = GreenColors.bgWhite;\n            Colors.bgLightGrey = GreenColors.bgLightGrey;\n            Colors.bgDarkGrey = GreenColors.bgDarkGrey;\n            Colors.bgBlack = GreenColors.bgBlack;\n            Colors.obj0White = GreenColors.obj0White;\n            Colors.obj0LightGrey = GreenColors.obj0LightGrey;\n            Colors.obj0DarkGrey = GreenColors.obj0DarkGrey;\n            Colors.obj0Black = GreenColors.obj0Black;\n            Colors.obj1White = GreenColors.obj1White;\n            Colors.obj1LightGrey = GreenColors.obj1LightGrey;\n            Colors.obj1DarkGrey = GreenColors.obj1DarkGrey;\n            Colors.obj1Black = GreenColors.obj1Black;\n            break;\n        case 5:\n            // Right + A, DarkGreenColors\n            Colors.bgWhite = DarkGreenColors.bgWhite;\n            Colors.bgLightGrey = DarkGreenColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkGreenColors.bgDarkGrey;\n            Colors.bgBlack = DarkGreenColors.bgBlack;\n            Colors.obj0White = DarkGreenColors.obj0White;\n            Colors.obj0LightGrey = DarkGreenColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkGreenColors.obj0DarkGrey;\n            Colors.obj0Black = DarkGreenColors.obj0Black;\n            Colors.obj1White = DarkGreenColors.obj1White;\n            Colors.obj1LightGrey = DarkGreenColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkGreenColors.obj1DarkGrey;\n            Colors.obj1Black = DarkGreenColors.obj1Black;\n            break;\n        case 6:\n            // Right + B, InvertedColors\n            Colors.bgWhite = InvertedColors.bgWhite;\n            Colors.bgLightGrey = InvertedColors.bgLightGrey;\n            Colors.bgDarkGrey = InvertedColors.bgDarkGrey;\n            Colors.bgBlack = InvertedColors.bgBlack;\n            Colors.obj0White = InvertedColors.obj0White;\n            Colors.obj0LightGrey = InvertedColors.obj0LightGrey;\n            Colors.obj0DarkGrey = InvertedColors.obj0DarkGrey;\n            Colors.obj0Black = InvertedColors.obj0Black;\n            Colors.obj1White = InvertedColors.obj1White;\n            Colors.obj1LightGrey = InvertedColors.obj1LightGrey;\n            Colors.obj1DarkGrey = InvertedColors.obj1DarkGrey;\n            Colors.obj1Black = InvertedColors.obj1Black;\n            break;\n        case 7:\n            // Down, PastelMixColors\n            Colors.bgWhite = PastelMixColors.bgWhite;\n            Colors.bgLightGrey = PastelMixColors.bgLightGrey;\n            Colors.bgDarkGrey = PastelMixColors.bgDarkGrey;\n            Colors.bgBlack = PastelMixColors.bgBlack;\n            Colors.obj0White = PastelMixColors.obj0White;\n            Colors.obj0LightGrey = PastelMixColors.obj0LightGrey;\n            Colors.obj0DarkGrey = PastelMixColors.obj0DarkGrey;\n            Colors.obj0Black = PastelMixColors.obj0Black;\n            Colors.obj1White = PastelMixColors.obj1White;\n            Colors.obj1LightGrey = PastelMixColors.obj1LightGrey;\n            Colors.obj1DarkGrey = PastelMixColors.obj1DarkGrey;\n            Colors.obj1Black = PastelMixColors.obj1Black;\n            break;\n        case 8:\n            // Down + A, Orange\n            Colors.bgWhite = OrangeColors.bgWhite;\n            Colors.bgLightGrey = OrangeColors.bgLightGrey;\n            Colors.bgDarkGrey = OrangeColors.bgDarkGrey;\n            Colors.bgBlack = OrangeColors.bgBlack;\n            Colors.obj0White = OrangeColors.obj0White;\n            Colors.obj0LightGrey = OrangeColors.obj0LightGrey;\n            Colors.obj0DarkGrey = OrangeColors.obj0DarkGrey;\n            Colors.obj0Black = OrangeColors.obj0Black;\n            Colors.obj1White = OrangeColors.obj1White;\n            Colors.obj1LightGrey = OrangeColors.obj1LightGrey;\n            Colors.obj1DarkGrey = OrangeColors.obj1DarkGrey;\n            Colors.obj1Black = OrangeColors.obj1Black;\n            break;\n        case 9:\n            // Down + B, Yellow\n            Colors.bgWhite = YellowColors.bgWhite;\n            Colors.bgLightGrey = YellowColors.bgLightGrey;\n            Colors.bgDarkGrey = YellowColors.bgDarkGrey;\n            Colors.bgBlack = YellowColors.bgBlack;\n            Colors.obj0White = YellowColors.obj0White;\n            Colors.obj0LightGrey = YellowColors.obj0LightGrey;\n            Colors.obj0DarkGrey = YellowColors.obj0DarkGrey;\n            Colors.obj0Black = YellowColors.obj0Black;\n            Colors.obj1White = YellowColors.obj1White;\n            Colors.obj1LightGrey = YellowColors.obj1LightGrey;\n            Colors.obj1DarkGrey = YellowColors.obj1DarkGrey;\n            Colors.obj1Black = YellowColors.obj1Black;\n            break;\n        case 10:\n            // Left, Blue\n            Colors.bgWhite = BlueColors.bgWhite;\n            Colors.bgLightGrey = BlueColors.bgLightGrey;\n            Colors.bgDarkGrey = BlueColors.bgDarkGrey;\n            Colors.bgBlack = BlueColors.bgBlack;\n            Colors.obj0White = BlueColors.obj0White;\n            Colors.obj0LightGrey = BlueColors.obj0LightGrey;\n            Colors.obj0DarkGrey = BlueColors.obj0DarkGrey;\n            Colors.obj0Black = BlueColors.obj0Black;\n            Colors.obj1White = BlueColors.obj1White;\n            Colors.obj1LightGrey = BlueColors.obj1LightGrey;\n            Colors.obj1DarkGrey = BlueColors.obj1DarkGrey;\n            Colors.obj1Black = BlueColors.obj1Black;\n            break;\n        case 11:\n            // Left + A, Dark Blue\n            Colors.bgWhite = DarkBlueColors.bgWhite;\n            Colors.bgLightGrey = DarkBlueColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkBlueColors.bgDarkGrey;\n            Colors.bgBlack = DarkBlueColors.bgBlack;\n            Colors.obj0White = DarkBlueColors.obj0White;\n            Colors.obj0LightGrey = DarkBlueColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkBlueColors.obj0DarkGrey;\n            Colors.obj0Black = DarkBlueColors.obj0Black;\n            Colors.obj1White = DarkBlueColors.obj1White;\n            Colors.obj1LightGrey = DarkBlueColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkBlueColors.obj1DarkGrey;\n            Colors.obj1Black = DarkBlueColors.obj1Black;\n            break;\n        case 12:\n            // Left + B, GrayScale\n            Colors.bgWhite = GrayscaleColors.bgWhite;\n            Colors.bgLightGrey = GrayscaleColors.bgLightGrey;\n            Colors.bgDarkGrey = GrayscaleColors.bgDarkGrey;\n            Colors.bgBlack = GrayscaleColors.bgBlack;\n            Colors.obj0White = GrayscaleColors.obj0White;\n            Colors.obj0LightGrey = GrayscaleColors.obj0LightGrey;\n            Colors.obj0DarkGrey = GrayscaleColors.obj0DarkGrey;\n            Colors.obj0Black = GrayscaleColors.obj0Black;\n            Colors.obj1White = GrayscaleColors.obj1White;\n            Colors.obj1LightGrey = GrayscaleColors.obj1LightGrey;\n            Colors.obj1DarkGrey = GrayscaleColors.obj1DarkGrey;\n            Colors.obj1Black = GrayscaleColors.obj1Black;\n            break;\n    }\n}\n// Function to set the colorization\n// By checksum of the title\n// https://forums.nesdev.com/viewtopic.php?f=20&t=10226\n// TODO: torch2424 need to find how to get the \"disambiguation\"\n// Inlined because closure compiler inlines\nfunction setHashColorizationPalette(hash) {\n    switch (hash) {\n        case 0x88:\n            Colors.bgWhite = Table00Entry08Colors.bgWhite;\n            Colors.bgLightGrey = Table00Entry08Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table00Entry08Colors.bgDarkGrey;\n            Colors.bgBlack = Table00Entry08Colors.bgBlack;\n            Colors.obj0White = Table00Entry08Colors.obj0White;\n            Colors.obj0LightGrey = Table00Entry08Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table00Entry08Colors.obj0DarkGrey;\n            Colors.obj0Black = Table00Entry08Colors.obj0Black;\n            Colors.obj1White = Table00Entry08Colors.obj1White;\n            Colors.obj1LightGrey = Table00Entry08Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table00Entry08Colors.obj1DarkGrey;\n            Colors.obj1Black = Table00Entry08Colors.obj1Black;\n            break;\n        case 0x61:\n            Colors.bgWhite = Table01Entry0BColors.bgWhite;\n            Colors.bgLightGrey = Table01Entry0BColors.bgLightGrey;\n            Colors.bgDarkGrey = Table01Entry0BColors.bgDarkGrey;\n            Colors.bgBlack = Table01Entry0BColors.bgBlack;\n            Colors.obj0White = Table01Entry0BColors.obj0White;\n            Colors.obj0LightGrey = Table01Entry0BColors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table01Entry0BColors.obj0DarkGrey;\n            Colors.obj0Black = Table01Entry0BColors.obj0Black;\n            Colors.obj1White = Table01Entry0BColors.obj1White;\n            Colors.obj1LightGrey = Table01Entry0BColors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table01Entry0BColors.obj1DarkGrey;\n            Colors.obj1Black = Table01Entry0BColors.obj1Black;\n            break;\n        case 0x14:\n            Colors.bgWhite = Table01Entry10Colors.bgWhite;\n            Colors.bgLightGrey = Table01Entry10Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table01Entry10Colors.bgDarkGrey;\n            Colors.bgBlack = Table01Entry10Colors.bgBlack;\n            Colors.obj0White = Table01Entry10Colors.obj0White;\n            Colors.obj0LightGrey = Table01Entry10Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table01Entry10Colors.obj0DarkGrey;\n            Colors.obj0Black = Table01Entry10Colors.obj0Black;\n            Colors.obj1White = Table01Entry10Colors.obj1White;\n            Colors.obj1LightGrey = Table01Entry10Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table01Entry10Colors.obj1DarkGrey;\n            Colors.obj1Black = Table01Entry10Colors.obj1Black;\n            break;\n        case 0x46:\n            Colors.bgWhite = Table03Entry0AColors.bgWhite;\n            Colors.bgLightGrey = Table03Entry0AColors.bgLightGrey;\n            Colors.bgDarkGrey = Table03Entry0AColors.bgDarkGrey;\n            Colors.bgBlack = Table03Entry0AColors.bgBlack;\n            Colors.obj0White = Table03Entry0AColors.obj0White;\n            Colors.obj0LightGrey = Table03Entry0AColors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table03Entry0AColors.obj0DarkGrey;\n            Colors.obj0Black = Table03Entry0AColors.obj0Black;\n            Colors.obj1White = Table03Entry0AColors.obj1White;\n            Colors.obj1LightGrey = Table03Entry0AColors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table03Entry0AColors.obj1DarkGrey;\n            Colors.obj1Black = Table03Entry0AColors.obj1Black;\n            break;\n        case 0x59:\n        case 0xc6:\n            Colors.bgWhite = Table05Entry00Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry00Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry00Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry00Colors.bgBlack;\n            Colors.obj0White = Table05Entry00Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry00Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry00Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry00Colors.obj0Black;\n            Colors.obj1White = Table05Entry00Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry00Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry00Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry00Colors.obj1Black;\n            break;\n        case 0x86:\n        case 0xa8:\n            Colors.bgWhite = Table05Entry01Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry01Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry01Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry01Colors.bgBlack;\n            Colors.obj0White = Table05Entry01Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry01Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry01Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry01Colors.obj0Black;\n            Colors.obj1White = Table05Entry01Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry01Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry01Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry01Colors.obj1Black;\n            break;\n        case 0xbf:\n        case 0xce:\n        case 0xd1:\n        case 0xf0:\n            Colors.bgWhite = Table05Entry02Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry02Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry02Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry02Colors.bgBlack;\n            Colors.obj0White = Table05Entry02Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry02Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry02Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry02Colors.obj0Black;\n            Colors.obj1White = Table05Entry02Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry02Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry02Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry02Colors.obj1Black;\n            break;\n        case 0x27:\n        case 0x49:\n        case 0x5c:\n        case 0xb3:\n            Colors.bgWhite = Table05Entry08Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry08Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry08Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry08Colors.bgBlack;\n            Colors.obj0White = Table05Entry08Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry08Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry08Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry08Colors.obj0Black;\n            Colors.obj1White = Table05Entry08Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry08Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry08Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry08Colors.obj1Black;\n            break;\n        case 0xc9:\n            Colors.bgWhite = Table05Entry09Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry09Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry09Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry09Colors.bgBlack;\n            Colors.obj0White = Table05Entry09Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry09Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry09Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry09Colors.obj0Black;\n            Colors.obj1White = Table05Entry09Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry09Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry09Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry09Colors.obj1Black;\n            break;\n        case 0x70:\n            Colors.bgWhite = Table05Entry11Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry11Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry11Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry11Colors.bgBlack;\n            Colors.obj0White = Table05Entry11Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry11Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry11Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry11Colors.obj0Black;\n            Colors.obj1White = Table05Entry11Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry11Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry11Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry11Colors.obj1Black;\n            break;\n        case 0x46:\n            Colors.bgWhite = Table05Entry14Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry14Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry14Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry14Colors.bgBlack;\n            Colors.obj0White = Table05Entry14Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry14Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry14Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry14Colors.obj0Black;\n            Colors.obj1White = Table05Entry14Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry14Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry14Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry14Colors.obj1Black;\n            break;\n        case 0xd3:\n            Colors.bgWhite = Table05Entry15Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry15Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry15Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry15Colors.bgBlack;\n            Colors.obj0White = Table05Entry15Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry15Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry15Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry15Colors.obj0Black;\n            Colors.obj1White = Table05Entry15Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry15Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry15Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry15Colors.obj1Black;\n            break;\n    }\n}\n\n// Grouped registers\n// possible overload these later to performace actions\n// AF, BC, DE, HL\nfunction concatenateBytes(highByte, lowByte) {\n    //https://stackoverflow.com/questions/38298412/convert-two-bytes-into-signed-16-bit-integer-in-javascript\n    return ((highByte & 0xff) << 8) | (lowByte & 0xff);\n}\nfunction splitHighByte(groupedByte) {\n    return (groupedByte & 0xff00) >> 8;\n}\nfunction splitLowByte(groupedByte) {\n    return groupedByte & 0x00ff;\n}\nfunction rotateByteLeft(value) {\n    // Rotate left\n    // https://stackoverflow.com/questions/19204750/how-do-i-perform-a-circular-rotation-of-a-byte\n    // 4-bit example:\n    // 1010 -> 0100 | 0001\n    return u8Portable((value << 1) | (value >> 7));\n}\nfunction rotateByteLeftThroughCarry(value) {\n    // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Through carry meaning, instead of raotating the bit that gets dropped off, but the carry there instead\n    return u8Portable((value << 1) | getCarryFlag$$1());\n}\nfunction rotateByteRight(value) {\n    // Rotate right\n    // 4-bit example:\n    // 1010 -> 0101 | 0000\n    return u8Portable((value >> 1) | (value << 7));\n}\nfunction rotateByteRightThroughCarry(value) {\n    // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Through carry meaning, instead of raotating the bit that gets dropped off, put the carry there instead\n    return u8Portable((value >> 1) | (getCarryFlag$$1() << 7));\n}\nfunction setBitOnByte(bitPosition, byte) {\n    return byte | (0x01 << bitPosition);\n}\nfunction resetBitOnByte(bitPosition, byte) {\n    return byte & ~(0x01 << bitPosition);\n}\nfunction checkBitOnByte(bitPosition, byte) {\n    // Perforamnce improvements\n    // https://github.com/AssemblyScript/assemblyscript/issues/40\n    return (byte & (1 << bitPosition)) != 0;\n}\n\n// Class for GBC Color palletes\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\nvar Palette = /** @class */ (function () {\n    function Palette() {\n    }\n    Palette.memoryLocationBackgroundPaletteIndex = 0xff68;\n    Palette.memoryLocationBackgroundPaletteData = 0xff69;\n    Palette.memoryLocationSpritePaletteIndex = 0xff6a;\n    Palette.memoryLocationSpritePaletteData = 0xff6b;\n    // Palettes\n    Palette.memoryLocationBackgroundPalette = 0xff47;\n    Palette.memoryLocationSpritePaletteOne = 0xff48;\n    Palette.memoryLocationSpritePaletteTwo = 0xff49;\n    return Palette;\n}());\n// Inlined because closure compiler inlines\nfunction initializePalette() {\n    if (Cpu.GBCEnabled) {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff68, 0xc0);\n        eightBitStoreIntoGBMemory(0xff69, 0xff);\n        eightBitStoreIntoGBMemory(0xff6a, 0xc1);\n        eightBitStoreIntoGBMemory(0xff6b, 0x0d);\n    }\n    else {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff68, 0xff);\n        eightBitStoreIntoGBMemory(0xff69, 0xff);\n        eightBitStoreIntoGBMemory(0xff6a, 0xff);\n        eightBitStoreIntoGBMemory(0xff6b, 0xff);\n    }\n    // Override some values if using the bootrom\n    if (Cpu.BootROMEnabled && Cpu.GBCEnabled) {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff69, 0x20);\n        eightBitStoreIntoGBMemory(0xff6b, 0x8a);\n    }\n}\n// Simple get pallete color or monochrome GB\n// shouldRepresentColorByColorId is good for debugging tile data for GBC games that don't have\n// monochromePalettes\n// Inlined because closure compiler inlines\nfunction getMonochromeColorFromPalette(colorId, paletteMemoryLocation, shouldRepresentColorByColorId) {\n    if (shouldRepresentColorByColorId === void 0) { shouldRepresentColorByColorId = false; }\n    // Shift our paletteByte, 2 times for each color ID\n    // And off any extra bytes\n    // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n    var color = colorId;\n    if (!shouldRepresentColorByColorId) {\n        color = (eightBitLoadFromGBMemory(paletteMemoryLocation) >> (colorId << 1)) & 0x03;\n    }\n    // Since our max is 254, and max is 3.\n    // monochrome color palette is modified from bgb\n    // TODO: Make these colors into a constant\n    var rgbColor = 242;\n    switch (color) {\n        case 0:\n            break;\n        case 1:\n            rgbColor = 160;\n            break;\n        case 2:\n            rgbColor = 88;\n            break;\n        case 3:\n            rgbColor = 8;\n            break;\n    }\n    return rgbColor;\n}\n// Function to returns the Colorized color for a GB games\nfunction getColorizedGbHexColorFromPalette(colorId, paletteMemoryLocation) {\n    // Shift our paletteByte, 2 times for each color ID\n    // And off any extra bytes\n    // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n    var color = (eightBitLoadFromGBMemory(paletteMemoryLocation) >> (colorId * 2)) & 0x03;\n    // Check which palette we got, to apply the right color layer\n    var hexColor = 0;\n    if (paletteMemoryLocation === Palette.memoryLocationSpritePaletteOne) {\n        hexColor = Colors.obj0White;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.obj0LightGrey;\n                break;\n            case 2:\n                hexColor = Colors.obj0DarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.obj0Black;\n                break;\n        }\n    }\n    else if (paletteMemoryLocation === Palette.memoryLocationSpritePaletteTwo) {\n        hexColor = Colors.obj1White;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.obj1LightGrey;\n                break;\n            case 2:\n                hexColor = Colors.obj1DarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.obj1Black;\n                break;\n        }\n    }\n    else {\n        hexColor = Colors.bgWhite;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.bgLightGrey;\n                break;\n            case 2:\n                hexColor = Colors.bgDarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.bgBlack;\n                break;\n        }\n    }\n    return hexColor;\n}\n// Inlined because closure compiler inlines\nfunction writeColorPaletteToMemory(offset, value) {\n    // FF68\n    //  Bit 0-5   Index (00-3F)\n    var memoryLocationSpritePaletteData = Palette.memoryLocationSpritePaletteData;\n    if (offset === Palette.memoryLocationBackgroundPaletteData || offset === memoryLocationSpritePaletteData) {\n        // Get the palette index\n        var paletteIndex = eightBitLoadFromGBMemory(offset - 1);\n        // Clear the 6th bit, as it does nothing\n        paletteIndex = resetBitOnByte(6, paletteIndex);\n        // Check if we are changing the sprite pallete data\n        var isSprite = offset === memoryLocationSpritePaletteData;\n        storePaletteByteInWasmMemory(paletteIndex, value, isSprite);\n        incrementPaletteIndexIfSet(paletteIndex, offset - 1);\n    }\n}\n// Functions to Handle Write to pallete data registers\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\n// Function to handle incrementing the pallete index if required\n// Inlined because closure compiler inlines\nfunction incrementPaletteIndexIfSet(paletteIndex, offset) {\n    // Check ther auto increment box\n    if (checkBitOnByte(7, paletteIndex)) {\n        // Increment the index, and return the value before the increment\n        // Ensure we don't ouverflow our auto increment bit\n        paletteIndex += 1;\n        paletteIndex = setBitOnByte(7, paletteIndex);\n        eightBitStoreIntoGBMemory(offset, paletteIndex);\n    }\n}\n// FF68\n// Bit 0-5   Index (00-3F)\n// Bit 7     Auto Increment  (0=Disabled, 1=Increment after Writing)\n// Index is 00-0x3F because the means 0 - 63 (64),\n// and apparently there are 8 bytes per pallete to describe Color 0-3 (4 colors),\n// and 0-7 (8 palltetes). Therefore, 64!\nfunction getRgbColorFromPalette(paletteId, colorId, isSprite) {\n    // Each Pallete takes 8 bytes, so multiply by 8 to get the pallete\n    // And Each color takes 2 bytes, therefore, multiple by 2 for the correct color bytes in the palette\n    var paletteIndex = paletteId * 8 + colorId * 2;\n    // Load the Color that is seperated into two bytes\n    var paletteHighByte = loadPaletteByteFromWasmMemory(paletteIndex + 1, isSprite);\n    var paletteLowByte = loadPaletteByteFromWasmMemory(paletteIndex, isSprite);\n    // Return the concatenated color byte\n    return concatenateBytes(paletteHighByte, paletteLowByte);\n}\n// Function to return the color from a passed 16 bit color pallette\nfunction getColorComponentFromRgb(colorId, colorRgb) {\n    // Get our bitmask for the color ID\n    // bit mask tested good :)\n    colorId *= 5;\n    var bitMask = 0x1f << colorId;\n    var colorValue = (colorRgb & bitMask) >> colorId;\n    // Goal is to reach 254 for each color, so 255 / 31 (0x1F) ~8 TODO: Make exact\n    // Want 5 bits for each\n    return colorValue * 8;\n}\n// Function to load a byte from our Gbc Palette memory\nfunction loadPaletteByteFromWasmMemory(paletteIndexByte, isSprite) {\n    // Clear the top two bits to just get the bottom palette Index\n    var paletteIndex = paletteIndexByte & 0x3f;\n    // Move over the palette index to not overlap the background has 0x3F, so Zero for Sprites is 0x40)\n    if (isSprite) {\n        paletteIndex += 0x40;\n    }\n    return load(GBC_PALETTE_LOCATION + paletteIndex);\n}\n// Function to store a byte to our Gbc Palette memory\n// Inlined because closure compiler inlines\nfunction storePaletteByteInWasmMemory(paletteIndexByte, value, isSprite) {\n    // Clear the top two bits to just get the bottom palette Index\n    var paletteIndex = paletteIndexByte & 0x3f;\n    // Move over the palette index to not overlap the background (has 0x3F, so Zero for Sprites is 0x40)\n    if (isSprite) {\n        paletteIndex += 0x40;\n    }\n    store(GBC_PALETTE_LOCATION + paletteIndex, value);\n}\n\n// https://github.com/torch2424/wasmBoy/issues/51\nfunction addPriorityforPixel(x, y, colorId, hasGbcBgPriority) {\n    if (colorId === void 0) { colorId = 0; }\n    if (hasGbcBgPriority === void 0) { hasGbcBgPriority = false; }\n    var bgPriorityByte = colorId & 0x03;\n    if (hasGbcBgPriority) {\n        bgPriorityByte = setBitOnByte(2, bgPriorityByte);\n    }\n    store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), bgPriorityByte);\n}\n// Inlined because closure compiler inlines\nfunction getPriorityforPixel(x, y) {\n    return load(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y));\n}\n// Inlined because closure compiler inlines\nfunction clearPriorityMap() {\n    for (var y = 0; y < 144; ++y) {\n        for (var x = 0; x < 160; ++x) {\n            store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), 0);\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction getPixelStart(x, y) {\n    // Get the pixel number\n    return y * 160 + x;\n}\n\n// Functions for performance hacks, and debugging tiles\nvar TileCache = /** @class */ (function () {\n    function TileCache() {\n    }\n    TileCache.tileId = -1;\n    TileCache.horizontalFlip = false;\n    TileCache.nextXIndexToPerformCacheCheck = -1;\n    return TileCache;\n}());\n// Inlined because closure compiler inlines\nfunction resetTileCache() {\n    TileCache.tileId = -1;\n    TileCache.nextXIndexToPerformCacheCheck = -1;\n}\nfunction drawPixelsFromLineOfTile(tileId, tileDataMemoryLocation, vramBankId, tileLineXStart, tileLineXEnd, tileLineY, outputLineX, outputLineY, outputWidth, wasmMemoryStart, shouldRepresentMonochromeColorByColorId, paletteLocation, bgMapAttributes, spriteAttributes) {\n    // Get our number of pixels drawn\n    var pixelsDrawn = 0;\n    // Get our tile data address\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileId);\n    // Get the bytes for our tile\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2, vramBankId);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2 + 1, vramBankId);\n    // Loop through our X values to draw\n    for (var x = tileLineXStart; x <= tileLineXEnd; ++x) {\n        // First find where we are going to do our final output x\n        // And don't allow any width overflow\n        var iteratedOutputX = outputLineX + (x - tileLineXStart);\n        if (iteratedOutputX < outputWidth) {\n            // However, We need to reverse our byte (if not horizontally flipped),\n            // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n            // Therefore, is pixelX was 2, then really is need to be 5\n            // So 2 - 7 = -5, * 1 = 5\n            // Or to simplify, 7 - 2 = 5 haha!\n            var pixelXInTile = x;\n            if (bgMapAttributes < 0 || !checkBitOnByte(5, bgMapAttributes)) {\n                pixelXInTile = 7 - pixelXInTile;\n            }\n            // Get our pallete colors for the tile\n            var paletteColorId = 0;\n            if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n                // Byte one represents the second bit in our color id, so bit shift\n                paletteColorId += 1;\n                paletteColorId = paletteColorId << 1;\n            }\n            if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n                paletteColorId += 1;\n            }\n            // Get the pallete\n            var red = 0;\n            var green = 0;\n            var blue = 0;\n            // Check if we should draw color or not\n            if (Cpu.GBCEnabled && (bgMapAttributes >= 0 || spriteAttributes >= 0)) {\n                // Draw C O L O R\n                var isSprite = spriteAttributes >= 0;\n                // Call the helper function to grab the correct color from the palette\n                // Get the palette index byte\n                var bgPalette = bgMapAttributes & 0x07;\n                if (isSprite) {\n                    bgPalette = spriteAttributes & 0x07;\n                }\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, isSprite);\n                // Split off into red green and blue\n                red = getColorComponentFromRgb(0, rgbColorPalette);\n                green = getColorComponentFromRgb(1, rgbColorPalette);\n                blue = getColorComponentFromRgb(2, rgbColorPalette);\n            }\n            else {\n                // Draw Monochrome\n                // Get the default palette if none\n                if (paletteLocation <= 0) {\n                    paletteLocation = Graphics.memoryLocationBackgroundPalette;\n                }\n                if (shouldRepresentMonochromeColorByColorId) {\n                    var monochromeColor = getMonochromeColorFromPalette(paletteColorId, paletteLocation, shouldRepresentMonochromeColorByColorId);\n                    red = monochromeColor;\n                    green = monochromeColor;\n                    blue = monochromeColor;\n                }\n                else {\n                    var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, paletteLocation);\n                    red = getRedFromHexColor(hexColor);\n                    green = getGreenFromHexColor(hexColor);\n                    blue = getBlueFromHexColor(hexColor);\n                }\n            }\n            // Finally Lets place a pixel in memory\n            // Find where our tile line would start\n            var pixelStart = getTilePixelStart(iteratedOutputX, outputLineY, outputWidth);\n            // Can not optimize wasmMemoryStart any further, as this is in a loop.\n            store(wasmMemoryStart + pixelStart + 0, red);\n            store(wasmMemoryStart + pixelStart + 1, green);\n            store(wasmMemoryStart + pixelStart + 2, blue);\n            var gbcBgPriority = false;\n            if (bgMapAttributes >= 0) {\n                gbcBgPriority = checkBitOnByte(7, bgMapAttributes);\n            }\n            // Lastly, add the pixel to our background priority map\n            // https://github.com/torch2424/wasmBoy/issues/51\n            // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n            // Bit 2 will represent if the Bg/Window has GBC priority.\n            addPriorityforPixel(iteratedOutputX, outputLineY, paletteColorId, gbcBgPriority);\n            pixelsDrawn++;\n        }\n    }\n    return pixelsDrawn;\n}\n// Inlined because closure compiler inlines\nfunction getTilePixelStart(outputLineX, outputLineY, outputWidth) {\n    // Finally Lets place a pixel in memory\n    var pixelStart = outputLineY * outputWidth + outputLineX;\n    // Each pixel takes 3 slots, therefore, multiply by 3!\n    return pixelStart * 3;\n}\nfunction getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap) {\n    // Watch this part of The ultimate gameboy talk: https://youtu.be/HyzD8pNlpwI?t=30m50s\n    // A line of 8 pixels on a single tile, is represented by 2 bytes.\n    // since a single tile is 8x8 pixels, 8 * 2 = 16 bytes\n    // Get the tile ID's tile addess from tile data.\n    // For instance, let's say our first line of tile data represents tiles for letters:\n    // a b c d e f g\n    // And we have tileId 0x02. That means we want the tile for the 'c' character\n    // Since each tile is 16 bytes, it would be the starting tileDataAddress + (tileId * tileSize), to skip over tiles we dont want\n    // The whole signed thing is weird, and has something to do how the second set of tile data is stored :p\n    if (tileDataMemoryLocation === Graphics.memoryLocationTileDataSelectZeroStart) {\n        // Treat the tile Id as a signed int, subtract an offset of 128\n        // if the tileId was 0 then the tile would be in memory region 0x9000-0x900F\n        if (checkBitOnByte(7, tileIdFromTileMap)) {\n            tileIdFromTileMap -= 128;\n        }\n        else {\n            tileIdFromTileMap += 128;\n        }\n    }\n    // if the background layout gave us the tileId 0, then the tile data would be between 0x8000-0x800F.\n    return tileDataMemoryLocation + tileIdFromTileMap * 16;\n}\n\n// Functions to help with Handling Duty on Square Channels\n// Since there are no 2d arrays, we will use a byte to represent duty cycles (wave form from percentages)\nfunction isDutyCycleClockPositiveOrNegativeForWaveform(channelDuty, waveFormPositionOnDuty) {\n    // Get our Wave Form According to the Duty\n    // Default to a duty of 1\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n    switch (channelDuty) {\n        case 0x01:\n            // 1000 0001\n            return checkBitOnByte(waveFormPositionOnDuty, 0x81);\n        case 0x02:\n            // 1000 0111\n            return checkBitOnByte(waveFormPositionOnDuty, 0x87);\n        case 0x03:\n            // 0111 1110\n            return checkBitOnByte(waveFormPositionOnDuty, 0x7e);\n        default:\n            // 0000 0001\n            return checkBitOnByte(waveFormPositionOnDuty, 0x01);\n    }\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel1 = /** @class */ (function () {\n    function Channel1() {\n    }\n    Channel1.updateNRx0 = function (value) {\n        Channel1.NRx0SweepPeriod = (value & 0x70) >> 4;\n        Channel1.NRx0Negate = checkBitOnByte(3, value);\n        Channel1.NRx0SweepShift = value & 0x07;\n    };\n    Channel1.updateNRx1 = function (value) {\n        Channel1.NRx1Duty = (value >> 6) & 0x03;\n        Channel1.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel1.lengthCounter = 64 - Channel1.NRx1LengthLoad;\n    };\n    Channel1.updateNRx2 = function (value) {\n        Channel1.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel1.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel1.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        Channel1.isDacEnabled = (value & 0xf8) > 0;\n    };\n    Channel1.updateNRx3 = function (value) {\n        Channel1.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel1.frequency = (Channel1.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel1.updateNRx4 = function (value) {\n        Channel1.NRx4LengthEnabled = checkBitOnByte(6, value);\n        value &= 0x07;\n        Channel1.NRx4FrequencyMSB = value;\n        // Update Channel Frequency\n        Channel1.frequency = (value << 8) | Channel1.NRx3FrequencyLSB;\n    };\n    // Function to save the state of the class\n    Channel1.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot), Channel1.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel1.saveStateSlot), Channel1.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot), Channel1.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot), Channel1.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot), Channel1.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel1.saveStateSlot), Channel1.dutyCycle);\n        store(getSaveStateMemoryOffset(0x14, Channel1.saveStateSlot), Channel1.waveFormPositionOnDuty);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x19, Channel1.saveStateSlot), Channel1.isSweepEnabled);\n        store(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot), Channel1.sweepCounter);\n        store(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot), Channel1.sweepShadowFrequency);\n    };\n    // Function to load the save state from memory\n    Channel1.loadState = function () {\n        Channel1.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot));\n        Channel1.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel1.saveStateSlot));\n        Channel1.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot));\n        Channel1.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot));\n        Channel1.volume = load(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot));\n        Channel1.dutyCycle = load(getSaveStateMemoryOffset(0x13, Channel1.saveStateSlot));\n        Channel1.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x14, Channel1.saveStateSlot));\n        Channel1.isSweepEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x19, Channel1.saveStateSlot));\n        Channel1.sweepCounter = load(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot));\n        Channel1.sweepShadowFrequency = load(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot));\n    };\n    Channel1.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx0, 0x80);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx1, 0xbf);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx2, 0xf3);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, 0xc1);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, 0xbf);\n        // Override/reset some variables if the boot ROM is enabled\n        // For GBC and GB\n        if (Cpu.BootROMEnabled) {\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx1, 0x3f);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx2, 0x00);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, 0x00);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, 0xb8);\n        }\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel1.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel1.cycleCounter;\n        Channel1.cycleCounter = 0;\n        return Channel1.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel1.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel1.frequency) << 2;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        if (Cpu.GBCDoubleSpeed) {\n            frequencyTimer = frequencyTimer << 2;\n        }\n        Channel1.frequencyTimer = frequencyTimer;\n    };\n    Channel1.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel1.frequencyTimer - numberOfCycles;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            Channel1.frequencyTimer = frequencyTimer;\n            // Reset our timer\n            // A square channel's frequency timer period is set to (2048-frequency)*4.\n            // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n            Channel1.resetTimer();\n            Channel1.frequencyTimer -= overflowAmount;\n            // Also increment our duty cycle\n            // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n            // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n            Channel1.waveFormPositionOnDuty = (Channel1.waveFormPositionOnDuty + 1) & 7;\n        }\n        else {\n            Channel1.frequencyTimer = frequencyTimer;\n        }\n        // Get our ourput volume\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel1.isEnabled && Channel1.isDacEnabled) {\n            outputVolume = Channel1.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sampleValue\n        var sample = 1;\n        if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel1.NRx1Duty, Channel1.waveFormPositionOnDuty)) {\n            sample = -sample;\n        }\n        sample *= outputVolume;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel1.trigger = function () {\n        Channel1.isEnabled = true;\n        if (Channel1.lengthCounter === 0) {\n            Channel1.lengthCounter = 64;\n        }\n        // Reset our timer\n        // A square channel's frequency timer period is set to (2048-frequency)*4.\n        // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n        Channel1.resetTimer();\n        Channel1.envelopeCounter = Channel1.NRx2EnvelopePeriod;\n        Channel1.volume = Channel1.NRx2StartingVolume;\n        // Handle Channel Sweep\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        Channel1.sweepShadowFrequency = Channel1.frequency;\n        // Reset back to the sweep period\n        Channel1.sweepCounter = Channel1.NRx0SweepPeriod;\n        // The internal enabled flag is set if either the sweep period or shift are non-zero, cleared otherwise.\n        Channel1.isSweepEnabled = Channel1.NRx0SweepPeriod > 0 && Channel1.NRx0SweepShift > 0;\n        // If the sweep shift is non-zero, frequency calculation and the overflow check are performed immediately.\n        if (Channel1.NRx0SweepShift > 0) {\n            calculateSweepAndCheckOverflow();\n        }\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel1.isDacEnabled) {\n            Channel1.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel1.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        var cycleCounter = Channel1.cycleCounter + numberOfCycles;\n        Channel1.cycleCounter = cycleCounter;\n        // Dac enabled status cached by accumulator\n        return !(Channel1.frequencyTimer - cycleCounter > 0);\n    };\n    Channel1.updateSweep = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        // Decrement the sweep counter\n        var sweepCounter = Channel1.sweepCounter - 1;\n        if (sweepCounter <= 0) {\n            // Reset back to the sweep period\n            Channel1.sweepCounter = Channel1.NRx0SweepPeriod;\n            // Calculate our sweep\n            // When it generates a clock and the sweep's internal enabled flag is set and the sweep period is not zero,\n            // a new frequency is calculated and the overflow check is performed.\n            if (Channel1.isSweepEnabled && Channel1.NRx0SweepPeriod > 0) {\n                calculateSweepAndCheckOverflow();\n            }\n        }\n        else {\n            Channel1.sweepCounter = sweepCounter;\n        }\n    };\n    Channel1.updateLength = function () {\n        var lengthCounter = Channel1.lengthCounter;\n        if (lengthCounter > 0 && Channel1.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel1.isEnabled = false;\n        }\n        Channel1.lengthCounter = lengthCounter;\n    };\n    Channel1.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel1.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel1.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            // If notes are sustained for too long, this is probably why\n            if (envelopeCounter !== 0) {\n                var volume = Channel1.volume;\n                if (Channel1.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel1.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel1.volume = volume;\n            }\n        }\n        Channel1.envelopeCounter = envelopeCounter;\n    };\n    Channel1.setFrequency = function (frequency) {\n        // Get the high and low bits\n        var passedFrequencyHighBits = frequency >> 8;\n        var passedFrequencyLowBits = frequency & 0xff;\n        // Get the new register 4\n        var register4 = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx4);\n        // Knock off lower 3 bits, and Or on our high bits\n        var newRegister4 = register4 & 0xf8;\n        newRegister4 = newRegister4 | passedFrequencyHighBits;\n        // Set the registers\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, passedFrequencyLowBits);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, newRegister4);\n        // Save the frequency for ourselves without triggering memory traps\n        Channel1.NRx3FrequencyLSB = passedFrequencyLowBits;\n        Channel1.NRx4FrequencyMSB = passedFrequencyHighBits;\n        Channel1.frequency = (Channel1.NRx4FrequencyMSB << 8) | Channel1.NRx3FrequencyLSB;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel1.cycleCounter = 0;\n    // Squarewave channel with volume envelope and frequency sweep functions.\n    // NR10 -> Sweep Register R/W\n    Channel1.memoryLocationNRx0 = 0xff10;\n    // -PPP NSSS Sweep period, negate, shift\n    Channel1.NRx0SweepPeriod = 0;\n    Channel1.NRx0Negate = false;\n    Channel1.NRx0SweepShift = 0;\n    // NR11 -> Sound length/Wave pattern duty (R/W)\n    Channel1.memoryLocationNRx1 = 0xff11;\n    // DDLL LLLL Duty, Length load (64-L)\n    Channel1.NRx1Duty = 0;\n    Channel1.NRx1LengthLoad = 0;\n    // NR12 -> Volume Envelope (R/W)\n    Channel1.memoryLocationNRx2 = 0xff12;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel1.NRx2StartingVolume = 0;\n    Channel1.NRx2EnvelopeAddMode = false;\n    Channel1.NRx2EnvelopePeriod = 0;\n    // NR13 -> Frequency lo (W)\n    Channel1.memoryLocationNRx3 = 0xff13;\n    // FFFF FFFF Frequency LSB\n    Channel1.NRx3FrequencyLSB = 0;\n    // NR14 -> Frequency hi (R/W)\n    Channel1.memoryLocationNRx4 = 0xff14;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel1.NRx4LengthEnabled = false;\n    Channel1.NRx4FrequencyMSB = 0;\n    // Channel Properties\n    Channel1.channelNumber = 1;\n    Channel1.isEnabled = false;\n    Channel1.isDacEnabled = false;\n    Channel1.frequency = 0;\n    Channel1.frequencyTimer = 0x00;\n    Channel1.envelopeCounter = 0x00;\n    Channel1.lengthCounter = 0x00;\n    Channel1.volume = 0x00;\n    // Square Wave properties\n    Channel1.dutyCycle = 0x00;\n    Channel1.waveFormPositionOnDuty = 0x00;\n    // Channel 1 Sweep\n    Channel1.isSweepEnabled = false;\n    Channel1.sweepCounter = 0x00;\n    Channel1.sweepShadowFrequency = 0x00;\n    // Save States\n    Channel1.saveStateSlot = 7;\n    return Channel1;\n}());\n// Sweep Specific functions\nfunction calculateSweepAndCheckOverflow() {\n    var newFrequency = getNewFrequencyFromSweep();\n    // 7FF is the highest value of the frequency: 111 1111 1111\n    if (newFrequency <= 0x7ff && Channel1.NRx0SweepShift > 0) {\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // If the new frequency is 2047 or less and the sweep shift is not zero,\n        // this new frequency is written back to the shadow frequency and square 1's frequency in NR13 and NR14,\n        // then frequency calculation and overflow check are run AGAIN immediately using this new value,\n        // but this second new frequency is not written back.\n        Channel1.sweepShadowFrequency = newFrequency;\n        Channel1.setFrequency(newFrequency);\n        // Re calculate the new frequency\n        newFrequency = getNewFrequencyFromSweep();\n    }\n    // Next check if the new Frequency is above 0x7FF\n    // if So, disable our sweep\n    if (newFrequency > 0x7ff) {\n        Channel1.isEnabled = false;\n    }\n}\n// Function to determing a new sweep in the current context\nfunction getNewFrequencyFromSweep() {\n    // Start our new frequency, by making it equal to the \"shadow frequency\"\n    var oldFrequency = Channel1.sweepShadowFrequency;\n    var newFrequency = oldFrequency;\n    newFrequency = newFrequency >> Channel1.NRx0SweepShift;\n    // Check for sweep negation\n    if (Channel1.NRx0Negate) {\n        newFrequency = oldFrequency - newFrequency;\n    }\n    else {\n        newFrequency = oldFrequency + newFrequency;\n    }\n    return newFrequency;\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel2 = /** @class */ (function () {\n    function Channel2() {\n    }\n    Channel2.updateNRx1 = function (value) {\n        Channel2.NRx1Duty = (value >> 6) & 0x03;\n        Channel2.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel2.lengthCounter = 64 - Channel2.NRx1LengthLoad;\n    };\n    Channel2.updateNRx2 = function (value) {\n        Channel2.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel2.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel2.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        Channel2.isDacEnabled = (value & 0xf8) > 0;\n    };\n    Channel2.updateNRx3 = function (value) {\n        Channel2.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel2.frequency = (Channel2.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel2.updateNRx4 = function (value) {\n        Channel2.NRx4LengthEnabled = checkBitOnByte(6, value);\n        value &= 0x07;\n        Channel2.NRx4FrequencyMSB = value;\n        // Update Channel Frequency\n        Channel2.frequency = (value << 8) | Channel2.NRx3FrequencyLSB;\n    };\n    // Function to save the state of the class\n    Channel2.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot), Channel2.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel2.saveStateSlot), Channel2.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel2.saveStateSlot), Channel2.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel2.saveStateSlot), Channel2.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot), Channel2.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel2.saveStateSlot), Channel2.dutyCycle);\n        store(getSaveStateMemoryOffset(0x14, Channel2.saveStateSlot), Channel2.waveFormPositionOnDuty);\n    };\n    // Function to load the save state from memory\n    Channel2.loadState = function () {\n        Channel2.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot));\n        Channel2.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel2.saveStateSlot));\n        Channel2.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel2.saveStateSlot));\n        Channel2.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel2.saveStateSlot));\n        Channel2.volume = load(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot));\n        Channel2.dutyCycle = load(getSaveStateMemoryOffset(0x13, Channel2.saveStateSlot));\n        Channel2.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x14, Channel2.saveStateSlot));\n    };\n    Channel2.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1 - 1, 0xff);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1, 0x3f);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx2, 0x00);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, 0xb8);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel2.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel2.cycleCounter;\n        Channel2.cycleCounter = 0;\n        return Channel2.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel2.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel2.frequency) << 2;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        Channel2.frequencyTimer = frequencyTimer << Cpu.GBCDoubleSpeed;\n    };\n    Channel2.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel2.frequencyTimer - numberOfCycles;\n        Channel2.frequencyTimer = frequencyTimer;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            // A square channel's frequency timer period is set to (2048-frequency)*4.\n            // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n            Channel2.resetTimer();\n            Channel2.frequencyTimer -= overflowAmount;\n            // Also increment our duty cycle\n            // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n            // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n            Channel2.waveFormPositionOnDuty = (Channel2.waveFormPositionOnDuty + 1) & 7;\n        }\n        // Get our ourput volume\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel2.isEnabled && Channel2.isDacEnabled) {\n            outputVolume = Channel2.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sampleValue\n        var sample = 1;\n        if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel2.NRx1Duty, Channel2.waveFormPositionOnDuty)) {\n            sample = -sample;\n        }\n        sample = sample * outputVolume;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel2.trigger = function () {\n        Channel2.isEnabled = true;\n        if (Channel2.lengthCounter === 0) {\n            Channel2.lengthCounter = 64;\n        }\n        // Reset our timer\n        // A square channel's frequency timer period is set to (2048-frequency)*4.\n        // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n        Channel2.resetTimer();\n        Channel2.envelopeCounter = Channel2.NRx2EnvelopePeriod;\n        Channel2.volume = Channel2.NRx2StartingVolume;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel2.isDacEnabled) {\n            Channel2.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel2.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        var cycleCounter = Channel2.cycleCounter + numberOfCycles;\n        Channel2.cycleCounter = cycleCounter;\n        // Dac enabled status cached by accumulator\n        return !(Channel2.frequencyTimer - cycleCounter > 0);\n    };\n    Channel2.updateLength = function () {\n        var lengthCounter = Channel2.lengthCounter;\n        if (lengthCounter > 0 && Channel2.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel2.isEnabled = false;\n        }\n        Channel2.lengthCounter = lengthCounter;\n    };\n    Channel2.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel2.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel2.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            if (envelopeCounter !== 0) {\n                var volume = Channel2.volume;\n                if (Channel2.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel2.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel2.volume = volume;\n            }\n        }\n        Channel2.envelopeCounter = envelopeCounter;\n    };\n    Channel2.setFrequency = function (frequency) {\n        // Get the high and low bits\n        var passedFrequencyHighBits = frequency >> 8;\n        var passedFrequencyLowBits = frequency & 0xff;\n        // Get the new register 4\n        var register4 = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx4);\n        // Knock off lower 3 bits, and Or on our high bits\n        var newRegister4 = register4 & 0xf8;\n        newRegister4 = newRegister4 | passedFrequencyHighBits;\n        // Set the registers\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, passedFrequencyLowBits);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, newRegister4);\n        // Save the frequency for ourselves without triggering memory traps\n        Channel2.NRx3FrequencyLSB = passedFrequencyLowBits;\n        Channel2.NRx4FrequencyMSB = passedFrequencyHighBits;\n        Channel2.frequency = (passedFrequencyHighBits << 8) | passedFrequencyLowBits;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel2.cycleCounter = 0;\n    // Squarewave channel with volume envelope functions only.\n    // NR21 -> Sound length/Wave pattern duty (R/W)\n    Channel2.memoryLocationNRx1 = 0xff16;\n    // DDLL LLLL Duty, Length load (64-L)\n    Channel2.NRx1Duty = 0;\n    Channel2.NRx1LengthLoad = 0;\n    // NR22 -> Volume Envelope (R/W)\n    Channel2.memoryLocationNRx2 = 0xff17;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel2.NRx2StartingVolume = 0;\n    Channel2.NRx2EnvelopeAddMode = false;\n    Channel2.NRx2EnvelopePeriod = 0;\n    // NR23 -> Frequency lo (W)\n    Channel2.memoryLocationNRx3 = 0xff18;\n    // FFFF FFFF Frequency LSB\n    Channel2.NRx3FrequencyLSB = 0;\n    // NR24 -> Frequency hi (R/W)\n    Channel2.memoryLocationNRx4 = 0xff19;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel2.NRx4LengthEnabled = false;\n    Channel2.NRx4FrequencyMSB = 0;\n    // Channel Properties\n    Channel2.channelNumber = 2;\n    Channel2.isEnabled = false;\n    Channel2.isDacEnabled = false;\n    Channel2.frequency = 0;\n    Channel2.frequencyTimer = 0x00;\n    Channel2.envelopeCounter = 0x00;\n    Channel2.lengthCounter = 0x00;\n    Channel2.volume = 0x00;\n    // Square Wave properties\n    Channel2.dutyCycle = 0x00;\n    Channel2.waveFormPositionOnDuty = 0x00;\n    // Save States\n    Channel2.saveStateSlot = 8;\n    return Channel2;\n}());\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel3 = /** @class */ (function () {\n    function Channel3() {\n    }\n    // E--- ---- DAC power\n    Channel3.updateNRx0 = function (value) {\n        Channel3.isDacEnabled = checkBitOnByte(7, value);\n    };\n    Channel3.updateNRx1 = function (value) {\n        Channel3.NRx1LengthLoad = value;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        // Supposed to be 256, so subtracting 255 and then adding 1 if that makes sense\n        Channel3.lengthCounter = 256 - Channel3.NRx1LengthLoad;\n    };\n    Channel3.updateNRx2 = function (value) {\n        Channel3.NRx2VolumeCode = (value >> 5) & 0x0f;\n    };\n    Channel3.updateNRx3 = function (value) {\n        Channel3.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel3.frequency = (Channel3.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel3.updateNRx4 = function (value) {\n        Channel3.NRx4LengthEnabled = checkBitOnByte(6, value);\n        value &= 0x07;\n        Channel3.NRx4FrequencyMSB = value;\n        // Update Channel Frequency\n        Channel3.frequency = (value << 8) | Channel3.NRx3FrequencyLSB;\n    };\n    // Function to save the state of the class\n    Channel3.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot), Channel3.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel3.saveStateSlot), Channel3.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel3.saveStateSlot), Channel3.lengthCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel3.saveStateSlot), Channel3.waveTablePosition);\n    };\n    // Function to load the save state from memory\n    Channel3.loadState = function () {\n        Channel3.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot));\n        Channel3.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel3.saveStateSlot));\n        Channel3.lengthCounter = load(getSaveStateMemoryOffset(0x05, Channel3.saveStateSlot));\n        Channel3.waveTablePosition = load(getSaveStateMemoryOffset(0x09, Channel3.saveStateSlot));\n    };\n    Channel3.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx0, 0x7f);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx1, 0xff);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx2, 0x9f);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx4, 0xb8);\n        // The volume code changed\n        Channel3.volumeCodeChanged = true;\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel3.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel3.cycleCounter;\n        Channel3.cycleCounter = 0;\n        return Channel3.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel3.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel3.frequency) << 1;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        Channel3.frequencyTimer = frequencyTimer << Cpu.GBCDoubleSpeed;\n    };\n    Channel3.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel3.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            Channel3.frequencyTimer = frequencyTimer;\n            // Reset our timer\n            // A wave channel's frequency timer period is set to (2048-frequency) * 2.\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n            Channel3.resetTimer();\n            Channel3.frequencyTimer -= overflowAmount;\n            // Advance the wave table position, and loop back if needed\n            Channel3.waveTablePosition = (Channel3.waveTablePosition + 1) & 31;\n        }\n        else {\n            Channel3.frequencyTimer = frequencyTimer;\n        }\n        // Get our output volume\n        var volumeCode = Channel3.volumeCode;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel3.isEnabled && Channel3.isDacEnabled) {\n            // Get our volume code\n            if (Channel3.volumeCodeChanged) {\n                volumeCode = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx2);\n                volumeCode = volumeCode >> 5;\n                volumeCode = volumeCode & 0x0f;\n                Channel3.volumeCode = volumeCode;\n                Channel3.volumeCodeChanged = false;\n            }\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sample\n        var sample = 0;\n        // Will Find the position, and knock off any remainder\n        var waveTablePosition = Channel3.waveTablePosition;\n        var positionIndexToAdd = i32Portable(waveTablePosition >> 1);\n        var memoryLocationWaveSample = Channel3.memoryLocationWaveTable + positionIndexToAdd;\n        sample = eightBitLoadFromGBMemory(memoryLocationWaveSample);\n        // Need to grab the top or lower half for the correct sample\n        sample >>= ((waveTablePosition & 1) === 0) << 2;\n        sample &= 0x0f;\n        // Shift our sample and set our volume depending on the volume code\n        // Since we can't multiply by float, simply divide by 4, 2, 1\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n        var outputVolume = 0;\n        switch (volumeCode) {\n            case 0:\n                sample >>= 4;\n                break;\n            case 1:\n                // Dont Shift sample\n                outputVolume = 1;\n                break;\n            case 2:\n                sample >>= 1;\n                outputVolume = 2;\n                break;\n            default:\n                sample >>= 2;\n                outputVolume = 4;\n                break;\n        }\n        // Spply out output volume\n        sample = outputVolume > 0 ? sample / outputVolume : 0;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel3.trigger = function () {\n        Channel3.isEnabled = true;\n        if (Channel3.lengthCounter === 0) {\n            Channel3.lengthCounter = 256;\n        }\n        // Reset our timer\n        // A wave channel's frequency timer period is set to (2048-frequency)*2.\n        Channel3.resetTimer();\n        // Reset our wave table position\n        Channel3.waveTablePosition = 0;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel3.isDacEnabled) {\n            Channel3.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel3.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        Channel3.cycleCounter += numberOfCycles;\n        // Dac enabled status cached by accumulator\n        return !(!Channel3.volumeCodeChanged && Channel3.frequencyTimer - Channel3.cycleCounter > 0);\n    };\n    Channel3.updateLength = function () {\n        var lengthCounter = Channel3.lengthCounter;\n        if (lengthCounter > 0 && Channel3.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel3.isEnabled = false;\n        }\n        Channel3.lengthCounter = lengthCounter;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel3.cycleCounter = 0;\n    // Voluntary Wave channel with 32 4-bit programmable samples, played in sequence.\n    // NR30 -> Sound on/off (R/W)\n    Channel3.memoryLocationNRx0 = 0xff1a;\n    // NR31 -> Sound length (R/W)\n    Channel3.memoryLocationNRx1 = 0xff1b;\n    // LLLL LLLL Length load (256-L)\n    Channel3.NRx1LengthLoad = 0;\n    // NR32 -> Select ouput level (R/W)\n    Channel3.memoryLocationNRx2 = 0xff1c;\n    // -VV- ---- Volume code (00=0%, 01=100%, 10=50%, 11=25%)\n    Channel3.NRx2VolumeCode = 0;\n    // NR33 -> Frequency lower data (W)\n    Channel3.memoryLocationNRx3 = 0xff1d;\n    // FFFF FFFF Frequency LSB\n    Channel3.NRx3FrequencyLSB = 0;\n    // NR34 -> Frequency higher data (R/W)\n    Channel3.memoryLocationNRx4 = 0xff1e;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel3.NRx4LengthEnabled = false;\n    Channel3.NRx4FrequencyMSB = 0;\n    // Our wave table location\n    Channel3.memoryLocationWaveTable = 0xff30;\n    // Channel Properties\n    Channel3.channelNumber = 3;\n    Channel3.isEnabled = false;\n    Channel3.isDacEnabled = false;\n    Channel3.frequency = 0;\n    Channel3.frequencyTimer = 0x00;\n    Channel3.lengthCounter = 0x00;\n    Channel3.waveTablePosition = 0x00;\n    Channel3.volumeCode = 0x00;\n    Channel3.volumeCodeChanged = false;\n    // Save States\n    Channel3.saveStateSlot = 9;\n    return Channel3;\n}());\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel4 = /** @class */ (function () {\n    function Channel4() {\n    }\n    Channel4.updateNRx1 = function (value) {\n        Channel4.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel4.lengthCounter = 64 - Channel4.NRx1LengthLoad;\n    };\n    Channel4.updateNRx2 = function (value) {\n        Channel4.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel4.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel4.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        Channel4.isDacEnabled = (value & 0xf8) > 0;\n    };\n    Channel4.updateNRx3 = function (value) {\n        var divisorCode = value & 0x07;\n        Channel4.NRx3ClockShift = value >> 4;\n        Channel4.NRx3WidthMode = checkBitOnByte(3, value);\n        Channel4.NRx3DivisorCode = divisorCode;\n        // Also, get our divisor\n        divisorCode <<= 1;\n        if (divisorCode < 1)\n            divisorCode = 1;\n        Channel4.divisor = divisorCode << 3;\n    };\n    Channel4.updateNRx4 = function (value) {\n        Channel4.NRx4LengthEnabled = checkBitOnByte(6, value);\n    };\n    // Function to save the state of the class\n    Channel4.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot), Channel4.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel4.saveStateSlot), Channel4.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel4.saveStateSlot), Channel4.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot), Channel4.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel4.saveStateSlot), Channel4.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel4.saveStateSlot), Channel4.linearFeedbackShiftRegister);\n    };\n    // Function to load the save state from memory\n    Channel4.loadState = function () {\n        Channel4.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot));\n        Channel4.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel4.saveStateSlot));\n        Channel4.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel4.saveStateSlot));\n        Channel4.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot));\n        Channel4.volume = load(getSaveStateMemoryOffset(0x0e, Channel4.saveStateSlot));\n        Channel4.linearFeedbackShiftRegister = load(getSaveStateMemoryOffset(0x13, Channel4.saveStateSlot));\n    };\n    Channel4.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1 - 1, 0xff);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1, 0xff);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx2, 0x00);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx4, 0xbf);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel4.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel4.cycleCounter;\n        Channel4.cycleCounter = 0;\n        return Channel4.getSample(accumulatedCycles);\n    };\n    Channel4.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel4.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n            frequencyTimer -= overflowAmount;\n            // Do some cool stuff with lfsr\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Noise_Channel\n            // First XOR bit zero and one\n            var linearFeedbackShiftRegister = Channel4.linearFeedbackShiftRegister;\n            var lfsrBitZero = linearFeedbackShiftRegister & 0x01;\n            var lfsrBitOne = linearFeedbackShiftRegister >> 1;\n            lfsrBitOne = lfsrBitOne & 0x01;\n            var xorLfsrBitZeroOne = lfsrBitZero ^ lfsrBitOne;\n            // Shift all lsfr bits by one\n            linearFeedbackShiftRegister = linearFeedbackShiftRegister >> 1;\n            // Place the XOR result on bit 15\n            linearFeedbackShiftRegister = linearFeedbackShiftRegister | (xorLfsrBitZeroOne << 14);\n            // If the width mode is set, set xor on bit 6, and make lfsr 7 bit\n            if (Channel4.NRx3WidthMode) {\n                // Make 7 bit, by knocking off lower bits. Want to keeps bits 8 - 16, and then or on 7\n                linearFeedbackShiftRegister = linearFeedbackShiftRegister & ~0x40;\n                linearFeedbackShiftRegister = linearFeedbackShiftRegister | (xorLfsrBitZeroOne << 6);\n            }\n            Channel4.linearFeedbackShiftRegister = linearFeedbackShiftRegister;\n        }\n        Channel4.frequencyTimer = frequencyTimer;\n        // Get our ourput volume, set to zero for silence\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel4.isEnabled && Channel4.isDacEnabled) {\n            outputVolume = Channel4.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Declare our sample\n        var sample = 0;\n        // Wave form output is bit zero of lfsr, INVERTED\n        sample = !checkBitOnByte(0, Channel4.linearFeedbackShiftRegister) ? 1 : -1;\n        sample = sample * outputVolume;\n        // Noise Can range from -15 - 15. Therefore simply add 15\n        sample = sample + 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel4.trigger = function () {\n        Channel4.isEnabled = true;\n        if (Channel4.lengthCounter === 0) {\n            Channel4.lengthCounter = 64;\n        }\n        // Reset our timers\n        Channel4.frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n        Channel4.envelopeCounter = Channel4.NRx2EnvelopePeriod;\n        Channel4.volume = Channel4.NRx2StartingVolume;\n        // Noise channel's LFSR bits are all set to 1.\n        Channel4.linearFeedbackShiftRegister = 0x7fff;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel4.isDacEnabled) {\n            Channel4.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel4.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        Channel4.cycleCounter += numberOfCycles;\n        // Dac enabled status cached by accumulator\n        return !(Channel4.frequencyTimer - Channel4.cycleCounter > 0);\n    };\n    Channel4.getNoiseChannelFrequencyPeriod = function () {\n        // Get our divisor from the divisor code, and shift by the clock shift\n        var response = Channel4.divisor << Channel4.NRx3ClockShift;\n        return response << Cpu.GBCDoubleSpeed;\n    };\n    Channel4.updateLength = function () {\n        var lengthCounter = Channel4.lengthCounter;\n        if (lengthCounter > 0 && Channel4.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel4.isEnabled = false;\n        }\n        Channel4.lengthCounter = lengthCounter;\n    };\n    Channel4.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel4.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel4.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            if (envelopeCounter !== 0) {\n                var volume = Channel4.volume;\n                if (Channel4.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel4.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel4.volume = volume;\n            }\n        }\n        Channel4.envelopeCounter = envelopeCounter;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel4.cycleCounter = 0;\n    // Channel 4\n    // 'white noise' channel with volume envelope functions.\n    // NR41 -> Sound length (R/W)\n    Channel4.memoryLocationNRx1 = 0xff20;\n    // --LL LLLL Length load (64-L)\n    Channel4.NRx1LengthLoad = 0;\n    // NR42 -> Volume Envelope (R/W)\n    Channel4.memoryLocationNRx2 = 0xff21;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel4.NRx2StartingVolume = 0;\n    Channel4.NRx2EnvelopeAddMode = false;\n    Channel4.NRx2EnvelopePeriod = 0;\n    // NR43 -> Polynomial Counter (R/W)\n    Channel4.memoryLocationNRx3 = 0xff22;\n    // SSSS WDDD Clock shift, Width mode of LFSR, Divisor code\n    Channel4.NRx3ClockShift = 0;\n    Channel4.NRx3WidthMode = false;\n    Channel4.NRx3DivisorCode = 0;\n    // NR44 -> Trigger, Length Enable\n    Channel4.memoryLocationNRx4 = 0xff23;\n    // TL-- ---- Trigger, Length enable\n    Channel4.NRx4LengthEnabled = false;\n    // Channel Properties\n    Channel4.channelNumber = 4;\n    Channel4.isEnabled = false;\n    Channel4.isDacEnabled = false;\n    Channel4.frequencyTimer = 0x00;\n    Channel4.envelopeCounter = 0x00;\n    Channel4.lengthCounter = 0x00;\n    Channel4.volume = 0x00;\n    Channel4.divisor = 0;\n    // Noise properties\n    // NOTE: Is only 15 bits\n    Channel4.linearFeedbackShiftRegister = 0x00;\n    // Save States\n    Channel4.saveStateSlot = 10;\n    return Channel4;\n}());\n\n// Another class simply for accumulating samples\n// Default everything to silence\nvar SoundAccumulator = /** @class */ (function () {\n    function SoundAccumulator() {\n    }\n    SoundAccumulator.channel1Sample = 15;\n    SoundAccumulator.channel2Sample = 15;\n    SoundAccumulator.channel3Sample = 15;\n    SoundAccumulator.channel4Sample = 15;\n    SoundAccumulator.channel1DacEnabled = false;\n    SoundAccumulator.channel2DacEnabled = false;\n    SoundAccumulator.channel3DacEnabled = false;\n    SoundAccumulator.channel4DacEnabled = false;\n    SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n    SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n    SoundAccumulator.mixerVolumeChanged = false;\n    SoundAccumulator.mixerEnabledChanged = false;\n    //If a channel was updated, need to also track if we need to need to mix them again\n    SoundAccumulator.needToRemixSamples = false;\n    return SoundAccumulator;\n}());\n// Inlined because closure compiler inlines\nfunction initializeSoundAccumulator() {\n    SoundAccumulator.channel1Sample = 15;\n    SoundAccumulator.channel2Sample = 15;\n    SoundAccumulator.channel3Sample = 15;\n    SoundAccumulator.channel4Sample = 15;\n    SoundAccumulator.channel1DacEnabled = false;\n    SoundAccumulator.channel2DacEnabled = false;\n    SoundAccumulator.channel3DacEnabled = false;\n    SoundAccumulator.channel4DacEnabled = false;\n    SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n    SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n    SoundAccumulator.mixerVolumeChanged = true;\n    SoundAccumulator.mixerEnabledChanged = true;\n    SoundAccumulator.needToRemixSamples = false;\n}\n// Inlined because closure compiler inlines\nfunction accumulateSound(numberOfCycles) {\n    // Check if any of the individual channels will update\n    var channel1WillUpdate = Channel1.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel1.channelNumber);\n    var channel2WillUpdate = Channel2.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel2.channelNumber);\n    var channel3WillUpdate = Channel3.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel3.channelNumber);\n    var channel4WillUpdate = Channel4.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel4.channelNumber);\n    if (channel1WillUpdate) {\n        SoundAccumulator.channel1Sample = Channel1.getSampleFromCycleCounter();\n    }\n    if (channel2WillUpdate) {\n        SoundAccumulator.channel2Sample = Channel2.getSampleFromCycleCounter();\n    }\n    if (channel3WillUpdate) {\n        SoundAccumulator.channel3Sample = Channel3.getSampleFromCycleCounter();\n    }\n    if (channel4WillUpdate) {\n        SoundAccumulator.channel4Sample = Channel4.getSampleFromCycleCounter();\n    }\n    // If any channel updated, we need to re-mix our samples\n    if (channel1WillUpdate || channel2WillUpdate || channel3WillUpdate || channel4WillUpdate) {\n        SoundAccumulator.needToRemixSamples = true;\n    }\n    // Do Some downsampling magic\n    var downSampleCycleCounter = Sound.downSampleCycleCounter;\n    downSampleCycleCounter += numberOfCycles * Sound.downSampleCycleMultiplier;\n    var maxDownSampleCycles = Sound.maxDownSampleCycles();\n    if (downSampleCycleCounter >= maxDownSampleCycles) {\n        // Reset the downsample counter\n        // Don't set to zero to catch overflowed cycles\n        downSampleCycleCounter -= maxDownSampleCycles;\n        if (SoundAccumulator.needToRemixSamples || SoundAccumulator.mixerVolumeChanged || SoundAccumulator.mixerEnabledChanged) {\n            mixChannelSamples(SoundAccumulator.channel1Sample, SoundAccumulator.channel2Sample, SoundAccumulator.channel3Sample, SoundAccumulator.channel4Sample);\n        }\n        else {\n            Sound.downSampleCycleCounter = downSampleCycleCounter;\n        }\n        // Finally Simply place the accumulated sample in memory\n        // Set our volumes in memory\n        // +1 so it can not be zero\n        setLeftAndRightOutputForAudioQueue(SoundAccumulator.leftChannelSampleUnsignedByte + 1, SoundAccumulator.rightChannelSampleUnsignedByte + 1, AUDIO_BUFFER_LOCATION);\n        var audioQueueIndex = Sound.audioQueueIndex + 1;\n        // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n        // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n        // Not 0xFFFF because we need half of 64kb since we store left and right channel\n        var maxIndex = i32Portable(Sound.wasmBoyMemoryMaxBufferSize >> 1) - 1;\n        if (audioQueueIndex >= maxIndex) {\n            audioQueueIndex -= 1;\n        }\n        Sound.audioQueueIndex = audioQueueIndex;\n    }\n    Sound.downSampleCycleCounter = downSampleCycleCounter;\n}\n// Function used by SoundAccumulator to find out if a channel Dac Changed\nfunction didChannelDacChange(channelNumber) {\n    switch (channelNumber) {\n        case Channel1.channelNumber: {\n            var isDacEnabled = Channel1.isDacEnabled;\n            var channel1EnabledChanged = SoundAccumulator.channel1DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel1DacEnabled = isDacEnabled;\n            return channel1EnabledChanged;\n        }\n        case Channel2.channelNumber: {\n            var isDacEnabled = Channel2.isDacEnabled;\n            var channel2EnabledChanged = SoundAccumulator.channel2DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel2DacEnabled = isDacEnabled;\n            return channel2EnabledChanged;\n        }\n        case Channel3.channelNumber: {\n            var isDacEnabled = Channel3.isDacEnabled;\n            var channel3EnabledChanged = SoundAccumulator.channel3DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel3DacEnabled = isDacEnabled;\n            return channel3EnabledChanged;\n        }\n        case Channel4.channelNumber: {\n            var isDacEnabled = Channel4.isDacEnabled;\n            var channel4EnabledChanged = SoundAccumulator.channel4DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel4DacEnabled = isDacEnabled;\n            return channel4EnabledChanged;\n        }\n    }\n    return false;\n}\n\n// https://emu-docs.org/Game%20Boy/gb_sound.txt\nvar Sound = /** @class */ (function () {\n    function Sound() {\n    }\n    // Number of cycles to run in each batch process\n    // This number should be in sync so that sound doesn't run too many cyles at once\n    // and does not exceed the minimum number of cyles for either down sampling, or\n    // How often we change the frame, or a channel's update process\n    // Number of cycles is 87, because:\n    // Number of cycles before downsampling a single sample\n    // TODO: Find out how to make this number bigger\n    // Or, don't call this in syncCycles, and make the lib responsible.\n    Sound.batchProcessCycles = function () {\n        // return Cpu.GBCDoubleSpeed ? 174 : 87;\n        return 87 << Cpu.GBCDoubleSpeed;\n    };\n    Sound.updateNR50 = function (value) {\n        Sound.NR50LeftMixerVolume = (value >> 4) & 0x07;\n        Sound.NR50RightMixerVolume = value & 0x07;\n    };\n    Sound.updateNR51 = function (value) {\n        Sound.NR51IsChannel4EnabledOnLeftOutput = checkBitOnByte(7, value);\n        Sound.NR51IsChannel3EnabledOnLeftOutput = checkBitOnByte(6, value);\n        Sound.NR51IsChannel2EnabledOnLeftOutput = checkBitOnByte(5, value);\n        Sound.NR51IsChannel1EnabledOnLeftOutput = checkBitOnByte(4, value);\n        Sound.NR51IsChannel4EnabledOnRightOutput = checkBitOnByte(3, value);\n        Sound.NR51IsChannel3EnabledOnRightOutput = checkBitOnByte(2, value);\n        Sound.NR51IsChannel2EnabledOnRightOutput = checkBitOnByte(1, value);\n        Sound.NR51IsChannel1EnabledOnRightOutput = checkBitOnByte(0, value);\n    };\n    Sound.updateNR52 = function (value) {\n        Sound.NR52IsSoundEnabled = checkBitOnByte(7, value);\n    };\n    Sound.maxFrameSequenceCycles = function () {\n        // return Cpu.GBCDoubleSpeed ? 16384 : 8192;\n        return 8192 << Cpu.GBCDoubleSpeed;\n    };\n    Sound.maxDownSampleCycles = function () {\n        return Cpu.CLOCK_SPEED();\n    };\n    // Function to save the state of the class\n    Sound.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot), Sound.frameSequenceCycleCounter);\n        store(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot), Sound.downSampleCycleCounter);\n        store(getSaveStateMemoryOffset(0x05, Sound.saveStateSlot), Sound.frameSequencer);\n    };\n    // Function to load the save state from memory\n    Sound.loadState = function () {\n        Sound.frameSequenceCycleCounter = load(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot));\n        Sound.downSampleCycleCounter = load(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot));\n        Sound.frameSequencer = load(getSaveStateMemoryOffset(0x05, Sound.saveStateSlot));\n        clearAudioBuffer();\n    };\n    // Current cycles\n    // This will be used for batch processing\n    // https://github.com/binji/binjgb/commit/e028f45e805bc0b0aa4697224a209f9ae514c954\n    // TODO: May Also need to do this for Reads\n    Sound.currentCycles = 0;\n    // Channel control / On-OFF / Volume (RW)\n    Sound.memoryLocationNR50 = 0xff24;\n    Sound.NR50LeftMixerVolume = 0;\n    Sound.NR50RightMixerVolume = 0;\n    // 0xFF25 selects which output each channel goes to, Referred to as NR51\n    Sound.memoryLocationNR51 = 0xff25;\n    Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel1EnabledOnRightOutput = true;\n    Sound.NR51IsChannel2EnabledOnRightOutput = true;\n    Sound.NR51IsChannel3EnabledOnRightOutput = true;\n    Sound.NR51IsChannel4EnabledOnRightOutput = true;\n    // Sound on/off\n    Sound.memoryLocationNR52 = 0xff26;\n    Sound.NR52IsSoundEnabled = true;\n    // $FF30 -- $FF3F is the load register space for the 4-bit samples for channel 3\n    Sound.memoryLocationChannel3LoadRegisterStart = 0xff30;\n    // Need to count how often we need to increment our frame sequencer\n    // Which you can read about below\n    Sound.frameSequenceCycleCounter = 0x0000;\n    // Also need to downsample our audio to average audio qualty\n    // https://www.reddit.com/r/EmuDev/comments/5gkwi5/gb_apu_sound_emulation/\n    // Want to do 48000hz, so CpuRate / Sound Rate, 4194304 / 48000 ~ 87 cycles\n    Sound.downSampleCycleCounter = 0x00;\n    Sound.downSampleCycleMultiplier = 48000;\n    // Frame sequencer controls what should be updated and and ticked\n    // Every time the sound is updated :) It is updated everytime the\n    // Cycle counter reaches the max cycle\n    Sound.frameSequencer = 0x00;\n    // Our current sample number we are passing back to the wasmboy memory map\n    // Found that a static number of samples doesn't work well on mobile\n    // Will just update the queue index, grab as much as we can whenever we need more audio, then reset\n    // NOTE: Giving a really large sample rate gives more latency, but less pops!\n    //static readonly MAX_NUMBER_OF_SAMPLES: i32 = 4096;\n    Sound.audioQueueIndex = 0x0000;\n    Sound.wasmBoyMemoryMaxBufferSize = 0x20000;\n    // Save States\n    Sound.saveStateSlot = 6;\n    return Sound;\n}());\n// Initialize sound registers\n// From: https://emu-docs.org/Game%20Boy/gb_sound.txt\n// Inlined because closure compiler inlines\nfunction initializeSound() {\n    // Reset Stateful variables\n    Sound.currentCycles = 0;\n    Sound.NR50LeftMixerVolume = 0;\n    Sound.NR50RightMixerVolume = 0;\n    Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel1EnabledOnRightOutput = true;\n    Sound.NR51IsChannel2EnabledOnRightOutput = true;\n    Sound.NR51IsChannel3EnabledOnRightOutput = true;\n    Sound.NR51IsChannel4EnabledOnRightOutput = true;\n    Sound.NR52IsSoundEnabled = true;\n    Sound.frameSequenceCycleCounter = 0x0000;\n    Sound.downSampleCycleCounter = 0x00;\n    Sound.frameSequencer = 0x00;\n    Sound.audioQueueIndex = 0x0000;\n    // intiialize our channels\n    Channel1.initialize();\n    Channel2.initialize();\n    Channel3.initialize();\n    Channel4.initialize();\n    // Other Sound Registers\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR50, 0x77);\n    Sound.updateNR50(0x77);\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR51, 0xf3);\n    Sound.updateNR51(0xf3);\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR52, 0xf1);\n    Sound.updateNR52(0xf1);\n    // Override/reset some variables if the boot ROM is enabled\n    // For both GB and GBC\n    if (Cpu.BootROMEnabled) {\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR50, 0x00);\n        Sound.updateNR50(0x00);\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR51, 0x00);\n        Sound.updateNR51(0x00);\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR52, 0x70);\n        Sound.updateNR52(0x70);\n    }\n    initializeSoundAccumulator();\n}\n// Function to batch process our audio after we skipped so many cycles\nfunction batchProcessAudio() {\n    var batchProcessCycles = Sound.batchProcessCycles();\n    var currentCycles = Sound.currentCycles;\n    while (currentCycles >= batchProcessCycles) {\n        updateSound(batchProcessCycles);\n        currentCycles -= batchProcessCycles;\n    }\n    Sound.currentCycles = currentCycles;\n}\n// Function for updating sound\nfunction updateSound(numberOfCycles) {\n    // Check if our frameSequencer updated\n    var frameSequencerUpdated = updateFrameSequencer(numberOfCycles);\n    if (Config.audioAccumulateSamples && !frameSequencerUpdated) {\n        accumulateSound(numberOfCycles);\n    }\n    else {\n        calculateSound(numberOfCycles);\n    }\n}\n// Funciton to get the current Audio Queue index\nfunction getNumberOfSamplesInAudioBuffer() {\n    return Sound.audioQueueIndex;\n}\n// Function to reset the audio queue\nfunction clearAudioBuffer() {\n    Sound.audioQueueIndex = 0;\n}\n// Inlined because closure compiler inlines\nfunction calculateSound(numberOfCycles) {\n    // Update all of our channels\n    // All samples will be returned as 0 to 30\n    // 0 being -1.0, and 30 being 1.0\n    // (see blurb at top)\n    var channel1Sample = i32Portable(Channel1.getSample(numberOfCycles));\n    var channel2Sample = i32Portable(Channel2.getSample(numberOfCycles));\n    var channel3Sample = i32Portable(Channel3.getSample(numberOfCycles));\n    var channel4Sample = i32Portable(Channel4.getSample(numberOfCycles));\n    // TODO: Allow individual channels to be muted\n    // let channel1Sample: i32 = 15;\n    // let channel2Sample: i32 = 15;\n    // let channel3Sample: i32 = 15;\n    // let channel4Sample: i32 = 15;\n    // Save the samples in the accumulator\n    SoundAccumulator.channel1Sample = channel1Sample;\n    SoundAccumulator.channel2Sample = channel2Sample;\n    SoundAccumulator.channel3Sample = channel3Sample;\n    SoundAccumulator.channel4Sample = channel4Sample;\n    // Do Some downsampling magic\n    var downSampleCycleCounter = Sound.downSampleCycleCounter + numberOfCycles * Sound.downSampleCycleMultiplier;\n    if (downSampleCycleCounter >= Sound.maxDownSampleCycles()) {\n        // Reset the downsample counter\n        // Don't set to zero to catch overflowed cycles\n        downSampleCycleCounter -= Sound.maxDownSampleCycles();\n        // Mix our samples\n        var mixedSample = mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample);\n        var leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n        var rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n        // Set our volumes in memory\n        // +1 so it can not be zero\n        setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, AUDIO_BUFFER_LOCATION);\n        if (Config.enableAudioDebugging) {\n            // Channel 1\n            mixedSample = mixChannelSamples(channel1Sample, 15, 15, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_1_BUFFER_LOCATION);\n            // Channel 2\n            mixedSample = mixChannelSamples(15, channel2Sample, 15, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_2_BUFFER_LOCATION);\n            // Channel 3\n            mixedSample = mixChannelSamples(15, 15, channel3Sample, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_3_BUFFER_LOCATION);\n            // Channel 4\n            mixedSample = mixChannelSamples(15, 15, 15, channel4Sample);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_4_BUFFER_LOCATION);\n        }\n        var audioQueueIndex = Sound.audioQueueIndex + 1;\n        // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n        // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n        // Not 0xFFFF because we need half of 64kb since we store left and right channel\n        var maxIndex = i32Portable(Sound.wasmBoyMemoryMaxBufferSize >> 1) - 1;\n        if (audioQueueIndex >= maxIndex) {\n            audioQueueIndex -= 1;\n        }\n        Sound.audioQueueIndex = audioQueueIndex;\n    }\n    Sound.downSampleCycleCounter = downSampleCycleCounter;\n}\n// Inlined because closure compiler inlines\nfunction updateFrameSequencer(numberOfCycles) {\n    // APU runs at 4194304 / 512\n    // Or Cpu.clockSpeed / 512\n    // Which means, we need to update once every 8192 cycles :)\n    var maxFrameSequenceCycles = Sound.maxFrameSequenceCycles();\n    var frameSequenceCycleCounter = Sound.frameSequenceCycleCounter + numberOfCycles;\n    if (frameSequenceCycleCounter >= maxFrameSequenceCycles) {\n        // Reset the frameSequenceCycleCounter\n        // Not setting to zero as we do not want to drop cycles\n        frameSequenceCycleCounter -= maxFrameSequenceCycles;\n        Sound.frameSequenceCycleCounter = frameSequenceCycleCounter;\n        // Check our frame sequencer\n        // https://gist.github.com/drhelius/3652407\n        var frameSequencer = Sound.frameSequencer;\n        switch (frameSequencer) {\n            case 0:\n                // Update Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                break;\n            /* Do Nothing on one */\n            case 2:\n                // Update Sweep and Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                Channel1.updateSweep();\n                break;\n            /* Do Nothing on three */\n            case 4:\n                // Update Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                break;\n            /* Do Nothing on five */\n            case 6:\n                // Update Sweep and Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                Channel1.updateSweep();\n                break;\n            case 7:\n                // Update Envelope on channels\n                Channel1.updateEnvelope();\n                Channel2.updateEnvelope();\n                Channel4.updateEnvelope();\n                break;\n        }\n        // Update our frame sequencer\n        Sound.frameSequencer = (frameSequencer + 1) & 7;\n        return true;\n    }\n    else {\n        Sound.frameSequenceCycleCounter = frameSequenceCycleCounter;\n    }\n    return false;\n}\nfunction mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample) {\n    // Do Some Cool mixing\n    // NR50 FF24 ALLL BRRR Vin L enable, Left vol, Vin R enable, Right vol\n    // NR51 FF25 NW21 NW21 Left enables, Right enables\n    // NR52 FF26 P--- NW21 Power control/status, Channel length statuses\n    // NW21 = 4 bits on byte\n    // 3 -> Channel 4, 2 -> Channel 3, 1 -> Channel 2, 0 -> Channel 1\n    if (channel1Sample === void 0) { channel1Sample = 15; }\n    if (channel2Sample === void 0) { channel2Sample = 15; }\n    if (channel3Sample === void 0) { channel3Sample = 15; }\n    if (channel4Sample === void 0) { channel4Sample = 15; }\n    // Matt's Proccess\n    // I push out 1024 samples at a time and use 96000 hz sampling rate, so I guess i'm a bit less than one frame,\n    // but I let the queue fill up with 4 x 1024 samples before I start waiting for the audio\n    // TODO: Vin Mixing\n    SoundAccumulator.mixerVolumeChanged = false;\n    // Get our channel volume for left/right\n    var leftChannelSample = 0;\n    var rightChannelSample = 0;\n    // Find the sample for the left if enabled\n    // other wise add silence (15) for the channel\n    leftChannelSample += Sound.NR51IsChannel1EnabledOnLeftOutput ? channel1Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel2EnabledOnLeftOutput ? channel2Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel3EnabledOnLeftOutput ? channel3Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel4EnabledOnLeftOutput ? channel4Sample : 15;\n    // Find the sample for the right if enabled\n    // other wise add silence (15) for the channel\n    rightChannelSample += Sound.NR51IsChannel1EnabledOnRightOutput ? channel1Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel2EnabledOnRightOutput ? channel2Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel3EnabledOnRightOutput ? channel3Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel4EnabledOnRightOutput ? channel4Sample : 15;\n    // Update our accumulator\n    SoundAccumulator.mixerEnabledChanged = false;\n    SoundAccumulator.needToRemixSamples = false;\n    // Finally multiply our volumes by the mixer volume\n    // Mixer volume can be at most 7 + 1\n    // Can be at most 7, because we only have 3 bits, 111 = 7\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Mixer\n    // Done in the getSampleAsUnsignedByte(), since we are doing some weirdness there :)\n    // Convert our samples from unsigned 32 to unsigned byte\n    // Reason being, We want to be able to pass in wasm memory as usigned byte. Javascript will handle the conversion back\n    var leftChannelSampleUnsignedByte = getSampleAsUnsignedByte(leftChannelSample, Sound.NR50LeftMixerVolume + 1);\n    var rightChannelSampleUnsignedByte = getSampleAsUnsignedByte(rightChannelSample, Sound.NR50RightMixerVolume + 1);\n    // Save these samples in the accumulator\n    SoundAccumulator.leftChannelSampleUnsignedByte = leftChannelSampleUnsignedByte;\n    SoundAccumulator.rightChannelSampleUnsignedByte = rightChannelSampleUnsignedByte;\n    return concatenateBytes(leftChannelSampleUnsignedByte, rightChannelSampleUnsignedByte);\n}\nfunction getSampleAsUnsignedByte(sample, mixerVolume) {\n    // If the sample is silence, return silence as unsigned byte\n    // Silence is common, and should be checked for performance\n    if (sample === 60) {\n        return 127;\n    }\n    // convert to a signed, precise scale of -6000 to 6000 (cheap way of -1.0 to 1.0)\n    // Multiply by the mixer volume fraction (to find the actual volume)\n    var precision = 100000;\n    var convertedSample = sample - 60;\n    convertedSample = convertedSample * precision;\n    // Multiply by the mixer volume fraction (to find the actual volume)\n    convertedSample = (convertedSample * mixerVolume) >> 3;\n    // Convert back to scale of 0 to 120\n    convertedSample = i32Portable(convertedSample / precision) + 60;\n    // Finally, convert to an unsigned byte scale\n    // With Four Channels (0 to 30) and no global volume. Max is 120\n    // max unsigned byte goal is 254 (see blurb at top).\n    // 120 / 254 should give the correct conversion\n    // For example, 120 / 254 = 0.47244094488188976\n    // Multiply by 1000 to increase the float into an int\n    // so, 120 * 1000 / (0.47244094488188976 * 1000) should give approximate answer for max mixer volume\n    var maxDivider = i32Portable((120 * precision) / 254);\n    convertedSample = i32Portable((convertedSample * precision) / maxDivider);\n    // Ensure we have an i32 and not a float for JS builds\n    convertedSample = i32Portable(convertedSample);\n    return convertedSample;\n}\n// Function to set our left and right channels at the correct queue index\nfunction setLeftAndRightOutputForAudioQueue(leftVolume, rightVolume, bufferLocation) {\n    // Get our stereo index\n    var audioQueueOffset = bufferLocation + (Sound.audioQueueIndex << 1);\n    // Store our volumes\n    // +1 that way we don't have empty data to ensure that the value is set\n    store(audioQueueOffset + 0, (leftVolume + 1));\n    store(audioQueueOffset + 1, (rightVolume + 1));\n}\n\n// Functions involved in R/W of sound registers\n// Function to check and handle writes to sound registers\n// Inlined because closure compiler inlines\nfunction SoundRegisterWriteTraps(offset, value) {\n    if (offset !== Sound.memoryLocationNR52 && !Sound.NR52IsSoundEnabled) {\n        // Block all writes to any sound register EXCEPT NR52!\n        // This is under the assumption that the check for\n        // offset >= 0xFF10 && offset <= 0xFF26\n        // is done in writeTraps.ts (which it is)\n        // NOTE: Except on DMG, length can still be written (whatever that means)\n        return false;\n    }\n    switch (offset) {\n        // Handle NRx0 on Channels\n        case Channel1.memoryLocationNRx0:\n            Channel1.updateNRx0(value);\n            return true;\n        case Channel3.memoryLocationNRx0:\n            Channel3.updateNRx0(value);\n            return true;\n        // Handle NRx1 (Length Counter) on Channels\n        case Channel1.memoryLocationNRx1:\n            Channel1.updateNRx1(value);\n            return true;\n        case Channel2.memoryLocationNRx1:\n            Channel2.updateNRx1(value);\n            return true;\n        case Channel3.memoryLocationNRx1:\n            Channel3.updateNRx1(value);\n            return true;\n        case Channel4.memoryLocationNRx1:\n            Channel4.updateNRx1(value);\n            return true;\n        // Handle NRx2 (Envelope / Volume) on Channels\n        case Channel1.memoryLocationNRx2:\n            Channel1.updateNRx2(value);\n            return true;\n        case Channel2.memoryLocationNRx2:\n            Channel2.updateNRx2(value);\n            return true;\n        case Channel3.memoryLocationNRx2:\n            // Check if channel 3's volume code was written too\n            // This is handcy to know for accumulation of samples\n            Channel3.volumeCodeChanged = true;\n            Channel3.updateNRx2(value);\n            return true;\n        case Channel4.memoryLocationNRx2:\n            Channel4.updateNRx2(value);\n            return true;\n        // Handle NRx3 (Frequency / Noise Properties) on Channels\n        case Channel1.memoryLocationNRx3:\n            Channel1.updateNRx3(value);\n            return true;\n        case Channel2.memoryLocationNRx3:\n            Channel2.updateNRx3(value);\n            return true;\n        case Channel3.memoryLocationNRx3:\n            Channel3.updateNRx3(value);\n            return true;\n        case Channel4.memoryLocationNRx3:\n            Channel4.updateNRx3(value);\n            return true;\n        // Check our NRx4 registers to trap our trigger bits\n        case Channel1.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel1.updateNRx4(value);\n                Channel1.trigger();\n            }\n            return true;\n        case Channel2.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel2.updateNRx4(value);\n                Channel2.trigger();\n            }\n            return true;\n        case Channel3.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel3.updateNRx4(value);\n                Channel3.trigger();\n            }\n            return true;\n        case Channel4.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel4.updateNRx4(value);\n                Channel4.trigger();\n            }\n            return true;\n        // Tell the sound accumulator if volumes changes\n        case Sound.memoryLocationNR50:\n            Sound.updateNR50(value);\n            SoundAccumulator.mixerVolumeChanged = true;\n            return true;\n        // Tell the sound accumulator if volumes changes\n        case Sound.memoryLocationNR51:\n            Sound.updateNR51(value);\n            SoundAccumulator.mixerEnabledChanged = true;\n            return true;\n        case Sound.memoryLocationNR52:\n            // Reset all registers except NR52\n            Sound.updateNR52(value);\n            if (!checkBitOnByte(7, value)) {\n                for (var i = 0xff10; i < 0xff26; ++i) {\n                    eightBitStoreIntoGBMemory(i, 0x00);\n                }\n            }\n            return true;\n    }\n    // We did not handle the write, Allow the write\n    return true;\n}\n// http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n// Inlined because closure compiler inlines\nfunction SoundRegisterReadTraps(offset) {\n    // TODO: OR All Registers\n    // This will fix bugs in orcale of ages :)\n    if (offset === Sound.memoryLocationNR52) {\n        // Get our registerNR52\n        var registerNR52 = eightBitLoadFromGBMemory(Sound.memoryLocationNR52);\n        // Knock off lower 7 bits\n        registerNR52 &= 0x80;\n        // Or from the table\n        registerNR52 |= 0x70;\n        return registerNR52;\n    }\n    return -1;\n}\n\nvar Interrupts = /** @class */ (function () {\n    function Interrupts() {\n    }\n    Interrupts.updateInterruptEnabled = function (value) {\n        Interrupts.isVBlankInterruptEnabled = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n        Interrupts.isLcdInterruptEnabled = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n        Interrupts.isTimerInterruptEnabled = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n        Interrupts.isSerialInterruptEnabled = checkBitOnByte(Interrupts.bitPositionSerialInterrupt, value);\n        Interrupts.isJoypadInterruptEnabled = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n        Interrupts.interruptsEnabledValue = value;\n    };\n    Interrupts.updateInterruptRequested = function (value) {\n        Interrupts.isVBlankInterruptRequested = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n        Interrupts.isLcdInterruptRequested = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n        Interrupts.isTimerInterruptRequested = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n        Interrupts.isSerialInterruptRequested = checkBitOnByte(Interrupts.bitPositionSerialInterrupt, value);\n        Interrupts.isJoypadInterruptRequested = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n        Interrupts.interruptsRequestedValue = value;\n    };\n    // Function to return if we have any pending interrupts\n    Interrupts.areInterruptsPending = function () {\n        return (Interrupts.interruptsRequestedValue & Interrupts.interruptsEnabledValue & 0x1f) > 0;\n    };\n    // Function to save the state of the class\n    Interrupts.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitch);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitchDelay);\n        // Interrupts enabled and requested are stored in actual GB memory, thus, don't need to be saved\n    };\n    // Function to load the save state from memory\n    Interrupts.loadState = function () {\n        Interrupts.masterInterruptSwitch = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot));\n        Interrupts.masterInterruptSwitchDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot));\n        Interrupts.updateInterruptEnabled(eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptEnabled));\n        Interrupts.updateInterruptRequested(eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest));\n    };\n    Interrupts.masterInterruptSwitch = false;\n    // According to mooneye, interrupts are not handled until AFTER\n    // Next instruction\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown\n    Interrupts.masterInterruptSwitchDelay = false;\n    // Biut position for each part of the interrupts HW registers\n    Interrupts.bitPositionVBlankInterrupt = 0;\n    Interrupts.bitPositionLcdInterrupt = 1;\n    Interrupts.bitPositionTimerInterrupt = 2;\n    Interrupts.bitPositionSerialInterrupt = 3;\n    Interrupts.bitPositionJoypadInterrupt = 4;\n    Interrupts.memoryLocationInterruptEnabled = 0xffff; // A.K.A interrupt Flag (IE)\n    // Cache which Interrupts are enabled\n    Interrupts.interruptsEnabledValue = 0;\n    Interrupts.isVBlankInterruptEnabled = false;\n    Interrupts.isLcdInterruptEnabled = false;\n    Interrupts.isTimerInterruptEnabled = false;\n    Interrupts.isSerialInterruptEnabled = false;\n    Interrupts.isJoypadInterruptEnabled = false;\n    Interrupts.memoryLocationInterruptRequest = 0xff0f; // A.K.A interrupt Flag (IF)\n    // Cache which Interrupts are requested\n    Interrupts.interruptsRequestedValue = 0;\n    Interrupts.isVBlankInterruptRequested = false;\n    Interrupts.isLcdInterruptRequested = false;\n    Interrupts.isTimerInterruptRequested = false;\n    Interrupts.isSerialInterruptRequested = false;\n    Interrupts.isJoypadInterruptRequested = false;\n    // Save States\n    Interrupts.saveStateSlot = 2;\n    return Interrupts;\n}());\n// Inlined because closure compiler inlines\nfunction initializeInterrupts() {\n    // Values from BGB\n    // IE\n    Interrupts.updateInterruptEnabled(0x00);\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptEnabled, Interrupts.interruptsEnabledValue);\n    // IF\n    Interrupts.updateInterruptRequested(0xe1);\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, Interrupts.interruptsRequestedValue);\n}\n// NOTE: Interrupts should be handled before reading an opcode\n// Inlined because closure compiler inlines\nfunction checkInterrupts() {\n    // First check for our delay was enabled\n    if (Interrupts.masterInterruptSwitchDelay) {\n        Interrupts.masterInterruptSwitch = true;\n        Interrupts.masterInterruptSwitchDelay = false;\n    }\n    // Check if we have an enabled and requested interrupt\n    var isAnInterruptRequestedAndEnabledValue = Interrupts.interruptsEnabledValue & Interrupts.interruptsRequestedValue & 0x1f;\n    if (isAnInterruptRequestedAndEnabledValue > 0) {\n        // Boolean to track if interrupts were handled\n        // Interrupt handling requires 20 cycles\n        // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n        var wasInterruptHandled = false;\n        // Service our interrupts, if we have the master switch enabled\n        // https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/\n        if (Interrupts.masterInterruptSwitch && !Cpu.isHaltNoJump) {\n            if (Interrupts.isVBlankInterruptEnabled && Interrupts.isVBlankInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionVBlankInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isLcdInterruptEnabled && Interrupts.isLcdInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionLcdInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isTimerInterruptEnabled && Interrupts.isTimerInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionTimerInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isSerialInterruptEnabled && Interrupts.isSerialInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionSerialInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isJoypadInterruptEnabled && Interrupts.isJoypadInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionJoypadInterrupt);\n                wasInterruptHandled = true;\n            }\n        }\n        var interuptHandlerCycles = 0;\n        if (wasInterruptHandled) {\n            // Interrupt handling requires 20 cycles, TCAGBD\n            interuptHandlerCycles = 20;\n            if (Cpu.isHalted()) {\n                // If the CPU was halted, now is the time to un-halt\n                // Should be done here when the jump occurs according to:\n                // https://www.reddit.com/r/EmuDev/comments/6fmjch/gb_glitches_in_links_awakening_and_pok%C3%A9mon_gold/\n                Cpu.exitHaltAndStop();\n                interuptHandlerCycles += 4;\n            }\n        }\n        if (Cpu.isHalted()) {\n            Cpu.exitHaltAndStop();\n        }\n        return interuptHandlerCycles;\n    }\n    return 0;\n}\nfunction _handleInterrupt(bitPosition) {\n    // Disable the master switch\n    setInterrupts(false);\n    // Disable the bit on the interruptRequest\n    var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n    interruptRequest = resetBitOnByte(bitPosition, interruptRequest);\n    Interrupts.interruptsRequestedValue = interruptRequest;\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n    // Push the programCounter onto the stacks\n    // Push the next instruction, not the halt itself (TCAGBD).\n    Cpu.stackPointer = Cpu.stackPointer - 2;\n    if (Cpu.isHalted()) {\n        // TODO: This breaks Pokemon Yellow, And OG Link's awakening. Find out why...\n        // sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter + 1);\n        sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter);\n    }\n    else {\n        sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter);\n    }\n    // Jump to the correct interrupt location\n    // Also piggyback off of the switch to reset our HW Register caching\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/interupts.html\n    switch (bitPosition) {\n        case Interrupts.bitPositionVBlankInterrupt:\n            Interrupts.isVBlankInterruptRequested = false;\n            Cpu.programCounter = 0x40;\n            break;\n        case Interrupts.bitPositionLcdInterrupt:\n            Interrupts.isLcdInterruptRequested = false;\n            Cpu.programCounter = 0x48;\n            break;\n        case Interrupts.bitPositionTimerInterrupt:\n            Interrupts.isTimerInterruptRequested = false;\n            Cpu.programCounter = 0x50;\n            break;\n        case Interrupts.bitPositionSerialInterrupt:\n            Interrupts.isSerialInterruptRequested = false;\n            Cpu.programCounter = 0x58;\n            break;\n        case Interrupts.bitPositionJoypadInterrupt:\n            Interrupts.isJoypadInterruptRequested = false;\n            Cpu.programCounter = 0x60;\n            break;\n    }\n}\nfunction _requestInterrupt(bitPosition) {\n    var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n    // Pass to set the correct interrupt bit on interruptRequest\n    interruptRequest = setBitOnByte(bitPosition, interruptRequest);\n    Interrupts.interruptsRequestedValue = interruptRequest;\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n}\nfunction setInterrupts(value) {\n    // If we are enabling interrupts,\n    // we want to wait 4 cycles before enabling\n    if (value) {\n        Interrupts.masterInterruptSwitchDelay = true;\n    }\n    else {\n        Interrupts.masterInterruptSwitch = false;\n    }\n}\n// Inlined because closure compiler inlines\nfunction requestVBlankInterrupt() {\n    Interrupts.isVBlankInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionVBlankInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestLcdInterrupt() {\n    Interrupts.isLcdInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionLcdInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestTimerInterrupt() {\n    Interrupts.isTimerInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionTimerInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestJoypadInterrupt() {\n    Interrupts.isJoypadInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionJoypadInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestSerialInterrupt() {\n    Interrupts.isSerialInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionSerialInterrupt);\n}\n\nvar Timers = /** @class */ (function () {\n    function Timers() {\n    }\n    // Number of cycles to run in each batch process\n    Timers.batchProcessCycles = function () {\n        return 256;\n    };\n    Timers.updateDividerRegister = function () {\n        var oldDividerRegister = Timers.dividerRegister;\n        Timers.dividerRegister = 0;\n        eightBitStoreIntoGBMemory(Timers.memoryLocationDividerRegister, 0);\n        if (Timers.timerEnabled && _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, 0)) {\n            _incrementTimerCounter();\n        }\n    };\n    Timers.updateTimerCounter = function (value) {\n        if (Timers.timerEnabled) {\n            // From binjgb, dont write TIMA if we were just reset\n            if (Timers.timerCounterWasReset) {\n                return;\n            }\n            // Mooneye Test, tima_write_reloading\n            // Writing in this strange delay cycle, will cancel\n            // Both the interrupt and the TMA reload\n            if (Timers.timerCounterOverflowDelay) {\n                Timers.timerCounterOverflowDelay = false;\n            }\n        }\n        Timers.timerCounter = value;\n    };\n    Timers.updateTimerModulo = function (value) {\n        Timers.timerModulo = value;\n        // Mooneye Test, tma_write_reloading\n        // Don't update if we were reloading\n        if (Timers.timerEnabled && Timers.timerCounterWasReset) {\n            Timers.timerCounter = value;\n            Timers.timerCounterWasReset = false;\n        }\n    };\n    Timers.updateTimerControl = function (value) {\n        // Get some initial values\n        var oldTimerEnabled = Timers.timerEnabled;\n        Timers.timerEnabled = checkBitOnByte(2, value);\n        var newTimerInputClock = value & 0x03;\n        // Do some obscure behavior for if we should increment TIMA\n        // This does the timer increments from rapid_toggle mooneye tests\n        if (!oldTimerEnabled) {\n            var oldTimerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n            var newTimerCounterMaskBit = _getTimerCounterMaskBit(newTimerInputClock);\n            var shouldIncrementTimerCounter = false;\n            var dividerRegister = Timers.dividerRegister;\n            if (Timers.timerEnabled) {\n                shouldIncrementTimerCounter = checkBitOnByte(oldTimerCounterMaskBit, dividerRegister);\n            }\n            else {\n                shouldIncrementTimerCounter =\n                    checkBitOnByte(oldTimerCounterMaskBit, dividerRegister) && checkBitOnByte(newTimerCounterMaskBit, dividerRegister);\n            }\n            if (shouldIncrementTimerCounter) {\n                _incrementTimerCounter();\n            }\n        }\n        Timers.timerInputClock = newTimerInputClock;\n    };\n    // Function to save the state of the class\n    // TODO: Save state for new properties on Timers\n    Timers.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot), Timers.currentCycles);\n        store(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot), Timers.dividerRegister);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot), Timers.timerCounterOverflowDelay);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0b, Timers.saveStateSlot), Timers.timerCounterWasReset);\n        eightBitStoreIntoGBMemory(Timers.memoryLocationTimerCounter, Timers.timerCounter);\n    };\n    // Function to load the save state from memory\n    Timers.loadState = function () {\n        Timers.currentCycles = load(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot));\n        Timers.dividerRegister = load(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot));\n        Timers.timerCounterOverflowDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot));\n        Timers.timerCounterWasReset = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0b, Timers.saveStateSlot));\n        Timers.timerCounter = eightBitLoadFromGBMemory(Timers.memoryLocationTimerCounter);\n        Timers.timerModulo = eightBitLoadFromGBMemory(Timers.memoryLocationTimerModulo);\n        Timers.timerInputClock = eightBitLoadFromGBMemory(Timers.memoryLocationTimerControl);\n    };\n    // Current cycles\n    // This will be used for batch processing\n    Timers.currentCycles = 0;\n    // Divider Register = DIV\n    // Divider Register is 16 bits.\n    // Divider Register when read is just the upper 8 bits\n    // But internally is used as the full 16\n    // Essentially dividerRegister is an always counting clock\n    // DIV Drives everything, it is the heart of the timer.\n    // All other timing registers base them selves relative to the DIV register\n    // Think of the div register as like a cycle counter :)\n    // DIV will increment TIMA, whenever there is a falling edge, see below for that.\n    Timers.memoryLocationDividerRegister = 0xff04; // DIV\n    Timers.dividerRegister = 0;\n    // timerCounter = TIMA\n    // TIMA is the actual counter.\n    // Whenever the DIV gets the falling edge, and other obscure cases,\n    // This is incremented. When this overflows, we need to fire an interrupt.\n    Timers.memoryLocationTimerCounter = 0xff05;\n    Timers.timerCounter = 0;\n    Timers.timerCounterOverflowDelay = false;\n    Timers.timerCounterWasReset = false;\n    Timers.timerCounterMask = 0;\n    // Timer Modulo = TMA\n    // TMA is what TIMA (Notice the I :p) is counting from, and TIMA will load\n    // Whenever TIMA overflow.\n    // For instance, we count like 1,2,3,4,5,6,7,8,9, and then overflow to 10.\n    // TMA would be like \"Hey, start counting from 5 whenever we reset\"\n    // Then we would be like 5,6,7,8,9...5,6,7,8,9...etc...\n    Timers.memoryLocationTimerModulo = 0xff06;\n    Timers.timerModulo = 0;\n    // Timer Control = TAC\n    // TAC Says how fast we are counting.\n    // TAC controls which bit we are watching for the falling edge on the DIV register\n    // And whenever the bit has the falling edge, we increment TIMA (The thing counting).\n    // Therefore, depending on the value, we will either count faster or slower.\n    Timers.memoryLocationTimerControl = 0xff07;\n    // Bit 2    - Timer Stop  (0=Stop, 1=Start)\n    // Bits 1-0 - Input Clock Select\n    //            00:   4096 Hz    (~4194 Hz SGB) (1024 cycles)\n    //            01: 262144 Hz  (~268400 Hz SGB) (16 cycles)\n    //            10:  65536 Hz   (~67110 Hz SGB) (64 cycles)\n    //            11:  16384 Hz   (~16780 Hz SGB) (256 cycles)\n    Timers.timerEnabled = false;\n    Timers.timerInputClock = 0;\n    // Save States\n    Timers.saveStateSlot = 5;\n    return Timers;\n}());\n// Inlined because closure compiler inlines\nfunction initializeTimers() {\n    // Reset stateful Variables\n    Timers.currentCycles = 0;\n    Timers.dividerRegister = 0;\n    Timers.timerCounter = 0;\n    Timers.timerModulo = 0;\n    Timers.timerEnabled = false;\n    Timers.timerInputClock = 0;\n    Timers.timerCounterOverflowDelay = false;\n    Timers.timerCounterWasReset = false;\n    if (Cpu.GBCEnabled) {\n        // DIV\n        eightBitStoreIntoGBMemory(0xff04, 0x1e);\n        Timers.dividerRegister = 0x1ea0;\n        // 0xFF05 -> 0xFF06 = 0x00\n        // TAC\n        eightBitStoreIntoGBMemory(0xff07, 0xf8);\n        Timers.timerInputClock = 0xf8;\n    }\n    else {\n        // DIV\n        eightBitStoreIntoGBMemory(0xff04, 0xab);\n        Timers.dividerRegister = 0xabcc;\n        // 0xFF05 -> 0xFF06 = 0x00\n        // TAC\n        eightBitStoreIntoGBMemory(0xff07, 0xf8);\n        Timers.timerInputClock = 0xf8;\n    }\n    // Override/reset some variables if the boot ROM is enabled\n    if (Cpu.BootROMEnabled) {\n        if (Cpu.GBCEnabled) ;\n        else {\n            // GB\n            // DIV\n            eightBitStoreIntoGBMemory(0xff04, 0x00);\n            Timers.dividerRegister = 0x0004;\n        }\n    }\n}\n// Batch Process Timers\n// Only checked on writes\n// Function to batch process our Timers after we skipped so many cycles\nfunction batchProcessTimers() {\n    // TODO: Did a timer rewrite, make a proper batch processing\n    // For timers\n    updateTimers(Timers.currentCycles);\n    Timers.currentCycles = 0;\n}\nfunction updateTimers(numberOfCycles) {\n    // Want to increment 4 cycles at a time like an actual GB would\n    var cyclesIncreased = 0;\n    while (cyclesIncreased < numberOfCycles) {\n        var oldDividerRegister = Timers.dividerRegister;\n        var curDividerRegister = oldDividerRegister;\n        cyclesIncreased += 4;\n        curDividerRegister += 4;\n        curDividerRegister &= 0xffff;\n        Timers.dividerRegister = curDividerRegister;\n        if (Timers.timerEnabled) {\n            var timerCounterWasReset = Timers.timerCounterWasReset;\n            if (Timers.timerCounterOverflowDelay) {\n                Timers.timerCounter = Timers.timerModulo;\n                // Fire off timer interrupt\n                requestTimerInterrupt();\n                Timers.timerCounterOverflowDelay = false;\n                Timers.timerCounterWasReset = true;\n            }\n            else if (timerCounterWasReset) {\n                Timers.timerCounterWasReset = false;\n            }\n            if (_checkDividerRegisterFallingEdgeDetector(oldDividerRegister, curDividerRegister)) {\n                _incrementTimerCounter();\n            }\n        }\n    }\n}\n// Function to increment our Timer Counter\n// This fires off interrupts once we overflow\nfunction _incrementTimerCounter() {\n    var counter = Timers.timerCounter;\n    if (++counter > 255) {\n        // Whenever the timer overflows, there is a slight delay (4 cycles)\n        // Of when TIMA gets TMA's value, and the interrupt is fired.\n        // Thus we will set the delay, which can be handled in the update timer or write trap\n        Timers.timerCounterOverflowDelay = true;\n        counter = 0;\n    }\n    Timers.timerCounter = counter;\n}\n// Function to act as our falling edge detector\n// Whenever we have a falling edge, we need to increment TIMA\n// http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n// https://github.com/binji/binjgb/blob/master/src/emulator.c#L1944\nfunction _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, newDividerRegister) {\n    // Get our mask\n    var timerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n    // If the old register's watched bit was zero,\n    // but after adding the new registers wastch bit is now 1\n    return checkBitOnByte(timerCounterMaskBit, oldDividerRegister) && !checkBitOnByte(timerCounterMaskBit, newDividerRegister);\n}\n// Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\nfunction _getTimerCounterMaskBit(timerInputClock) {\n    switch (timerInputClock) {\n        case 0x00:\n            return 9;\n        case 0x01:\n            return 3;\n        case 0x02:\n            return 5;\n        case 0x03:\n            return 7;\n    }\n    return 0;\n}\n\n// Link cable / serial implementation\nvar Serial = /** @class */ (function () {\n    function Serial() {\n    }\n    Serial.updateTransferControl = function (value) {\n        Serial.isShiftClockInternal = checkBitOnByte(0, value);\n        Serial.isClockSpeedFast = checkBitOnByte(1, value);\n        Serial.transferStartFlag = checkBitOnByte(7, value);\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    };\n    // Cycle counter\n    Serial.currentCycles = 0x00;\n    // Register locations\n    Serial.memoryLocationSerialTransferData = 0xff01; // SB\n    Serial.memoryLocationSerialTransferControl = 0xff02; // SC\n    // Number of bits transferred\n    Serial.numberOfBitsTransferred = 0;\n    // Transfer control variables\n    Serial.isShiftClockInternal = false;\n    Serial.isClockSpeedFast = false;\n    Serial.transferStartFlag = false;\n    return Serial;\n}());\n// Function to initialize our serial values\n// Inlined because closure compiler inlines\nfunction initializeSerial() {\n    Serial.currentCycles = 0x00;\n    Serial.numberOfBitsTransferred = 0;\n    if (Cpu.GBCEnabled) {\n        // FF01 = 0x00\n        eightBitStoreIntoGBMemory(0xff02, 0x7c);\n        Serial.updateTransferControl(0x7c);\n    }\n    else {\n        // FF01 = 0x00\n        eightBitStoreIntoGBMemory(0xff02, 0x7e);\n        Serial.updateTransferControl(0x7e);\n    }\n}\n// TODO: Finish serial\n// See minimal serial: https://github.com/binji/binjgb/commit/64dece05c4ef5a052c4b9b75eb3ddbbfc6677cbe\n// Inlined because closure compiler inlines\nfunction updateSerial(numberOfCycles) {\n    // If we aren't starting our transfer, or transferring,\n    // return\n    if (!Serial.transferStartFlag) {\n        return;\n    }\n    // Want to increment 4 cycles at a time like an actual GB would\n    var cyclesIncreased = 0;\n    while (cyclesIncreased < numberOfCycles) {\n        var oldCycles = Serial.currentCycles;\n        var curCycles = oldCycles;\n        cyclesIncreased += 4;\n        curCycles += 4;\n        if (curCycles > 0xffff) {\n            curCycles -= 0x10000;\n        }\n        Serial.currentCycles = curCycles;\n        if (_checkFallingEdgeDetector(oldCycles, curCycles)) {\n            // TODO: Since no actual connection, always transfer 1\n            // Need to fix this\n            var memoryLocationSerialTransferData = Serial.memoryLocationSerialTransferData;\n            var transferData = eightBitLoadFromGBMemory(memoryLocationSerialTransferData);\n            transferData = (transferData << 1) + 1;\n            transferData = transferData & 0xff;\n            eightBitStoreIntoGBMemory(memoryLocationSerialTransferData, transferData);\n            var numberOfBitsTransferred = Serial.numberOfBitsTransferred;\n            if (++numberOfBitsTransferred === 8) {\n                Serial.numberOfBitsTransferred = 0;\n                requestSerialInterrupt();\n                // Disable transfer start\n                var memoryLocationSerialTransferControl = Serial.memoryLocationSerialTransferControl;\n                var transferControl = eightBitLoadFromGBMemory(memoryLocationSerialTransferControl);\n                eightBitStoreIntoGBMemory(memoryLocationSerialTransferControl, resetBitOnByte(7, transferControl));\n                Serial.transferStartFlag = false;\n            }\n            else {\n                Serial.numberOfBitsTransferred = numberOfBitsTransferred;\n            }\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction _checkFallingEdgeDetector(oldCycles, newCycles) {\n    // Get our mask\n    var maskBit = _getFallingEdgeMaskBit();\n    // If the old register's watched bit was zero,\n    // but after adding the new registers wastch bit is now 1\n    return checkBitOnByte(maskBit, oldCycles) && !checkBitOnByte(maskBit, newCycles);\n}\n// Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\n// Inlined because closure compiler inlines\nfunction _getFallingEdgeMaskBit() {\n    return Serial.isClockSpeedFast ? 2 : 7;\n}\n\n// http://www.codeslinger.co.uk/pages/projects/gameboy/joypad.html\n// Joypad Register\n// Taken from pandocs\n// Bit 7 - Not used\n// Bit 6 - Not used\n// Bit 5 - P15 Select Button Keys (0=Select)\n// Bit 4 - P14 Select Direction Keys (0=Select)\n// Bit 3 - P13 Input Down or Start (0=Pressed) (Read Only)\n// Bit 2 - P12 Input Up or Select (0=Pressed) (Read Only)\n// Bit 1 - P11 Input Left or Button B (0=Pressed) (Read Only)\n// Bit 0 - P10 Input Right or Button A (0=Pressed) (Read Only)\n// Button Ids will be the following:\n// UP - 0\n// RIGHT - 1\n// DOWN - 2\n// LEFT - 3\n// A - 4\n// B - 5\n// SELECT - 6\n// START - 7\nvar Joypad = /** @class */ (function () {\n    function Joypad() {\n    }\n    Joypad.updateJoypad = function (value) {\n        Joypad.joypadRegisterFlipped = value ^ 0xff;\n        Joypad.isDpadType = checkBitOnByte(4, Joypad.joypadRegisterFlipped);\n        Joypad.isButtonType = checkBitOnByte(5, Joypad.joypadRegisterFlipped);\n    };\n    // Function to save the state of the class\n    Joypad.saveState = function () { };\n    // Function to load the save state from memory\n    Joypad.loadState = function () {\n        Joypad.updateJoypad(eightBitLoadFromGBMemory(Joypad.memoryLocationJoypadRegister));\n    };\n    Joypad.up = false;\n    Joypad.down = false;\n    Joypad.left = false;\n    Joypad.right = false;\n    Joypad.a = false;\n    Joypad.b = false;\n    Joypad.select = false;\n    Joypad.start = false;\n    Joypad.memoryLocationJoypadRegister = 0xff00;\n    // Cache some values on the Joypad register\n    Joypad.joypadRegisterFlipped = 0;\n    Joypad.isDpadType = false;\n    Joypad.isButtonType = false;\n    // Save States\n    // Not doing anything for Joypad for now\n    Joypad.saveStateSlot = 3;\n    return Joypad;\n}());\n// Inlined because closure compiler inlines\nfunction getJoypadState() {\n    // Get the joypad register\n    var joypadRegister = Joypad.joypadRegisterFlipped;\n    if (Joypad.isDpadType) {\n        // D-pad buttons\n        // Up\n        if (Joypad.up) {\n            joypadRegister = resetBitOnByte(2, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(2, joypadRegister);\n        }\n        // Right\n        if (Joypad.right) {\n            joypadRegister = resetBitOnByte(0, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(0, joypadRegister);\n        }\n        // Down\n        if (Joypad.down) {\n            joypadRegister = resetBitOnByte(3, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(3, joypadRegister);\n        }\n        // Left\n        if (Joypad.left) {\n            joypadRegister = resetBitOnByte(1, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(1, joypadRegister);\n        }\n    }\n    else if (Joypad.isButtonType) {\n        // A\n        if (Joypad.a) {\n            joypadRegister = resetBitOnByte(0, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(0, joypadRegister);\n        }\n        // B\n        if (Joypad.b) {\n            joypadRegister = resetBitOnByte(1, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(1, joypadRegister);\n        }\n        // Select\n        if (Joypad.select) {\n            joypadRegister = resetBitOnByte(2, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(2, joypadRegister);\n        }\n        // Start\n        if (Joypad.start) {\n            joypadRegister = resetBitOnByte(3, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(3, joypadRegister);\n        }\n    }\n    // Set the top 4 bits to on\n    joypadRegister = joypadRegister | 0xf0;\n    return joypadRegister;\n}\nfunction setJoypadState(up, right, down, left, a, b, select, start) {\n    if (up > 0) {\n        _pressJoypadButton(0);\n    }\n    else {\n        _releaseJoypadButton(0);\n    }\n    if (right > 0) {\n        _pressJoypadButton(1);\n    }\n    else {\n        _releaseJoypadButton(1);\n    }\n    if (down > 0) {\n        _pressJoypadButton(2);\n    }\n    else {\n        _releaseJoypadButton(2);\n    }\n    if (left > 0) {\n        _pressJoypadButton(3);\n    }\n    else {\n        _releaseJoypadButton(3);\n    }\n    if (a > 0) {\n        _pressJoypadButton(4);\n    }\n    else {\n        _releaseJoypadButton(4);\n    }\n    if (b > 0) {\n        _pressJoypadButton(5);\n    }\n    else {\n        _releaseJoypadButton(5);\n    }\n    if (select > 0) {\n        _pressJoypadButton(6);\n    }\n    else {\n        _releaseJoypadButton(6);\n    }\n    if (start > 0) {\n        _pressJoypadButton(7);\n    }\n    else {\n        _releaseJoypadButton(7);\n    }\n}\nfunction _pressJoypadButton(buttonId) {\n    // Un stop the CPU\n    Cpu.isStopped = false;\n    // Check if the button state changed from not pressed\n    var isButtonStateChanging = false;\n    if (!_getJoypadButtonStateFromButtonId(buttonId)) {\n        isButtonStateChanging = true;\n    }\n    // Set our joypad state\n    _setJoypadButtonStateFromButtonId(buttonId, true);\n    // If the button state is changing, check for an interrupt\n    if (isButtonStateChanging) {\n        // Determine if it is a button or a dpad button\n        var isDpadTypeButton = false;\n        if (buttonId <= 3) {\n            isDpadTypeButton = true;\n        }\n        // Determine if we should request an interrupt\n        var shouldRequestInterrupt = false;\n        // Check if the game is looking for a dpad type button press\n        if (Joypad.isDpadType && isDpadTypeButton) {\n            shouldRequestInterrupt = true;\n        }\n        // Check if the game is looking for a button type button press\n        if (Joypad.isButtonType && !isDpadTypeButton) {\n            shouldRequestInterrupt = true;\n        }\n        // Finally, request the interrupt, if the button state actually changed\n        if (shouldRequestInterrupt) {\n            requestJoypadInterrupt();\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction _releaseJoypadButton(buttonId) {\n    // Set our joypad state\n    _setJoypadButtonStateFromButtonId(buttonId, false);\n}\nfunction _getJoypadButtonStateFromButtonId(buttonId) {\n    switch (buttonId) {\n        case 0:\n            return Joypad.up;\n        case 1:\n            return Joypad.right;\n        case 2:\n            return Joypad.down;\n        case 3:\n            return Joypad.left;\n        case 4:\n            return Joypad.a;\n        case 5:\n            return Joypad.b;\n        case 6:\n            return Joypad.select;\n        case 7:\n            return Joypad.start;\n        default:\n            return false;\n    }\n}\nfunction _setJoypadButtonStateFromButtonId(buttonId, isPressed) {\n    switch (buttonId) {\n        case 0:\n            Joypad.up = isPressed;\n            break;\n        case 1:\n            Joypad.right = isPressed;\n            break;\n        case 2:\n            Joypad.down = isPressed;\n            break;\n        case 3:\n            Joypad.left = isPressed;\n            break;\n        case 4:\n            Joypad.a = isPressed;\n            break;\n        case 5:\n            Joypad.b = isPressed;\n            break;\n        case 6:\n            Joypad.select = isPressed;\n            break;\n        case 7:\n            Joypad.start = isPressed;\n            break;\n    }\n}\n\n// Function to handle rom/rambanking\n// Inlined because closure compiler inlines\nfunction handleBanking(offset, value) {\n    // Is rom Only does not bank\n    if (Memory.isRomOnly) {\n        return;\n    }\n    var isMBC1 = Memory.isMBC1;\n    var isMBC2 = Memory.isMBC2;\n    // Enable Ram Banking\n    if (offset <= 0x1fff) {\n        if (isMBC2 && !checkBitOnByte(4, value)) {\n            // Do Nothing\n            return;\n        }\n        else {\n            var romEnableByte = value & 0x0f;\n            if (romEnableByte === 0x00) {\n                Memory.isRamBankingEnabled = false;\n            }\n            else if (romEnableByte === 0x0a) {\n                Memory.isRamBankingEnabled = true;\n            }\n        }\n    }\n    else if (offset <= 0x3fff) {\n        var isMBC5 = Memory.isMBC5;\n        if (!isMBC5 || offset <= 0x2fff) {\n            // Change Low Bits on the Current Rom Bank\n            var currentRomBank = Memory.currentRomBank;\n            if (isMBC2) {\n                currentRomBank = value & 0x0f;\n            }\n            // Set the number of bottom bytes from the MBC type\n            var romBankLowerBits = value;\n            if (isMBC1) {\n                // Only want the bottom 5\n                romBankLowerBits = romBankLowerBits & 0x1f;\n                currentRomBank &= 0xe0;\n            }\n            else if (Memory.isMBC3) {\n                // Only Want the bottom 7\n                romBankLowerBits = romBankLowerBits & 0x7f;\n                currentRomBank &= 0x80;\n            }\n            else if (isMBC5) {\n                // Going to switch the whole thing\n                currentRomBank &= 0x00;\n            }\n            // Set the lower bytes\n            currentRomBank |= romBankLowerBits;\n            Memory.currentRomBank = currentRomBank;\n            return;\n        }\n        else {\n            // TODO: MBC5 High bits Rom bank, check if this works, not sure about the value\n            var lowByte = splitLowByte(Memory.currentRomBank);\n            var highByte = (value > 0);\n            Memory.currentRomBank = concatenateBytes(highByte, lowByte);\n        }\n    }\n    else if (!isMBC2 && offset <= 0x5fff) {\n        // ROM / RAM Banking, MBC2 doesn't do this\n        if (isMBC1 && Memory.isMBC1RomModeEnabled) {\n            // Do an upper bit rom bank for MBC 1\n            // Remove upper bits of currentRomBank\n            var currentRomBank = Memory.currentRomBank & 0x1f;\n            var romBankHigherBits = value & 0xe0;\n            currentRomBank |= romBankHigherBits;\n            Memory.currentRomBank = currentRomBank;\n            return;\n        }\n        var ramBankBits = value;\n        if (!Memory.isMBC5) {\n            // Get the bottom 2 bits\n            ramBankBits &= 0x03;\n        }\n        else {\n            // Get the bottom nibble\n            ramBankBits &= 0x0f;\n        }\n        // Set our ram bank\n        Memory.currentRamBank = ramBankBits;\n        return;\n    }\n    else if (!isMBC2 && offset <= 0x7fff) {\n        if (isMBC1) {\n            Memory.isMBC1RomModeEnabled = checkBitOnByte(0, value);\n        }\n        // TODO: MBC3 Latch Clock Data\n    }\n}\n// Inlined because closure compiler inlines\nfunction getRomBankAddress(gameboyOffset) {\n    var currentRomBank = Memory.currentRomBank;\n    if (!Memory.isMBC5 && currentRomBank === 0) {\n        currentRomBank = 1;\n    }\n    // Adjust our gameboy offset relative to zero for the gameboy memory map\n    return (0x4000 * currentRomBank + (gameboyOffset - Memory.switchableCartridgeRomLocation));\n}\n// Inlined because closure compiler inlines\nfunction getRamBankAddress(gameboyOffset) {\n    // Adjust our gameboy offset relative to zero for the gameboy memory map\n    return (0x2000 * Memory.currentRamBank + (gameboyOffset - Memory.cartridgeRamLocation));\n}\n\n// Inlined because closure compiler inlines\nfunction initializeDma() {\n    if (Cpu.GBCEnabled) {\n        // GBC DMA\n        eightBitStoreIntoGBMemory(0xff51, 0xff);\n        eightBitStoreIntoGBMemory(0xff52, 0xff);\n        eightBitStoreIntoGBMemory(0xff53, 0xff);\n        eightBitStoreIntoGBMemory(0xff54, 0xff);\n        eightBitStoreIntoGBMemory(0xff55, 0xff);\n    }\n    else {\n        // GB DMA\n        eightBitStoreIntoGBMemory(0xff51, 0xff);\n        eightBitStoreIntoGBMemory(0xff52, 0xff);\n        eightBitStoreIntoGBMemory(0xff53, 0xff);\n        eightBitStoreIntoGBMemory(0xff54, 0xff);\n        eightBitStoreIntoGBMemory(0xff55, 0xff);\n    }\n}\n// Inlined because closure compiler inlines\nfunction startDmaTransfer(sourceAddressOffset) {\n    var sourceAddress = sourceAddressOffset << 8;\n    for (var i = 0; i <= 0x9f; ++i) {\n        var spriteInformationByte = eightBitLoadFromGBMemory(sourceAddress + i);\n        var spriteInformationAddress = Memory.spriteInformationTableLocation + i;\n        eightBitStoreIntoGBMemory(spriteInformationAddress, spriteInformationByte);\n    }\n    // TCAGBD:  This copy (DMA) needs 160 × 4 + 4 clocks to complete in both double speed and single speeds modes\n    // Increment all of our Cycle coiunters in ../cpu/opcodes\n    Memory.DMACycles = 644;\n}\n// https://gist.github.com/drhelius/3394856\n// http://bgb.bircd.org/pandocs.htm\n// Inlined because closure compiler inlines\nfunction startHdmaTransfer(hdmaTriggerByteToBeWritten) {\n    // Check if we are Gbc\n    if (!Cpu.GBCEnabled) {\n        return;\n    }\n    // Check if we are trying to terminate an already active HBLANK HDMA\n    if (Memory.isHblankHdmaActive && !checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n        // Don't reset anything, just set bit 7 to 1 on the trigger byte\n        Memory.isHblankHdmaActive = false;\n        var hdmaTriggerByte = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaTrigger);\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, setBitOnByte(7, hdmaTriggerByte));\n        return;\n    }\n    // Get our source and destination for the HDMA\n    var hdmaSource = getHdmaSourceFromMemory();\n    var hdmaDestination = getHdmaDestinationFromMemory();\n    // Get the length from the trigger\n    // Lower 7 bits, Add 1, times 16\n    // https://gist.github.com/drhelius/3394856\n    var transferLength = resetBitOnByte(7, hdmaTriggerByteToBeWritten);\n    transferLength = (transferLength + 1) << 4;\n    // Get bit 7 of the trigger for the HDMA type\n    if (checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n        // H-Blank DMA\n        Memory.isHblankHdmaActive = true;\n        Memory.hblankHdmaTransferLengthRemaining = transferLength;\n        Memory.hblankHdmaSource = hdmaSource;\n        Memory.hblankHdmaDestination = hdmaDestination;\n        // This will be handled in updateHblankHdma()\n        // Since we return false in write traps, we need to now write the byte\n        // Be sure to reset bit 7, to show that the hdma is active\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, resetBitOnByte(7, hdmaTriggerByteToBeWritten));\n    }\n    else {\n        // General DMA\n        hdmaTransfer(hdmaSource, hdmaDestination, transferLength);\n        // Stop the DMA\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, 0xff);\n    }\n}\n// Inlined because closure compiler inlines\nfunction updateHblankHdma() {\n    if (!Memory.isHblankHdmaActive) {\n        return;\n    }\n    // Get our amount of bytes to transfer (Only 0x10 bytes at a time)\n    var bytesToTransfer = 0x10;\n    var hblankHdmaTransferLengthRemaining = Memory.hblankHdmaTransferLengthRemaining;\n    if (hblankHdmaTransferLengthRemaining < bytesToTransfer) {\n        // Set to the difference\n        bytesToTransfer = hblankHdmaTransferLengthRemaining;\n    }\n    // Do the transfer (Only 0x10 bytes at a time)\n    hdmaTransfer(Memory.hblankHdmaSource, Memory.hblankHdmaDestination, bytesToTransfer);\n    // Update our source and destination\n    Memory.hblankHdmaSource += bytesToTransfer;\n    Memory.hblankHdmaDestination += bytesToTransfer;\n    hblankHdmaTransferLengthRemaining -= bytesToTransfer;\n    Memory.hblankHdmaTransferLengthRemaining = hblankHdmaTransferLengthRemaining;\n    var memoryLocationHdmaTrigger = Memory.memoryLocationHdmaTrigger;\n    if (hblankHdmaTransferLengthRemaining <= 0) {\n        // End the transfer\n        Memory.isHblankHdmaActive = false;\n        // Need to clear the HDMA with 0xFF, which sets bit 7 to 1 to show the HDMA has ended\n        eightBitStoreIntoGBMemory(memoryLocationHdmaTrigger, 0xff);\n    }\n    else {\n        // Set our new transfer length, make sure it is in the weird format,\n        // and make sure bit 7 is 0, to show that the HDMA is Active\n        var remainingTransferLength = hblankHdmaTransferLengthRemaining;\n        var transferLengthAsByte = (remainingTransferLength >> 4) - 1;\n        eightBitStoreIntoGBMemory(memoryLocationHdmaTrigger, resetBitOnByte(7, transferLengthAsByte));\n    }\n}\n// Simple Function to transfer the bytes from a destination to a source for a general pourpose or Hblank HDMA\nfunction hdmaTransfer(hdmaSource, hdmaDestination, transferLength) {\n    for (var i = 0; i < transferLength; ++i) {\n        var sourceByte = eightBitLoadFromGBMemoryWithTraps(hdmaSource + i);\n        // get the hdmaDestination with wrapping\n        // See issue #61: https://github.com/torch2424/wasmBoy/issues/61\n        var hdmaDestinationWithWrapping = hdmaDestination + i;\n        while (hdmaDestinationWithWrapping > 0x9fff) {\n            // Simply clear the top 3 bits\n            hdmaDestinationWithWrapping -= 0x2000;\n        }\n        eightBitStoreIntoGBMemoryWithTraps(hdmaDestinationWithWrapping, sourceByte);\n    }\n    // Set our Cycles used for the HDMA\n    // Since DMA in GBC Double Speed Mode takes 80 micro seconds,\n    // And HDMA takes 8 micro seconds per 0x10 bytes in GBC Double Speed mode (and GBC Normal Mode)\n    // Will assume (644 / 10) cycles for GBC Double Speed Mode,\n    // and (644 / 10 / 2) for GBC Normal Mode\n    var hdmaCycles = 32 << Cpu.GBCDoubleSpeed;\n    hdmaCycles = hdmaCycles * (transferLength >> 4);\n    Memory.DMACycles += hdmaCycles;\n}\n// Function to get our HDMA Source\n// Follows the poan docs\n// Inlined because closure compiler inlines\nfunction getHdmaSourceFromMemory() {\n    // Get our source for the HDMA\n    var hdmaSourceHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceHigh);\n    var hdmaSourceLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceLow);\n    var hdmaSource = concatenateBytes(hdmaSourceHigh, hdmaSourceLow);\n    // And off the appopriate bits for the source and destination\n    // And off the bottom 4 bits\n    hdmaSource = hdmaSource & 0xfff0;\n    return hdmaSource;\n}\n// Function to get our HDMA Destination\n// Follows the poan docs\n// Inlined because closure compiler inlines\nfunction getHdmaDestinationFromMemory() {\n    var hdmaDestinationHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationHigh);\n    var hdmaDestinationLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationLow);\n    var hdmaDestination = concatenateBytes(hdmaDestinationHigh, hdmaDestinationLow);\n    // Can only be in VRAM, 0x8000 -> 0x9FF0\n    // Pan docs says to knock off upper 3 bits, and lower 4 bits\n    // Which gives us: 0001111111110000 or 0x1FF0\n    // Meaning we must add 0x8000\n    hdmaDestination = hdmaDestination & 0x1ff0;\n    hdmaDestination += Memory.videoRamLocation;\n    return hdmaDestination;\n}\n\n// Internal function to trap any modify data trying to be written to Gameboy memory\n// Follows the Gameboy memory map\n// Return true if you want to continue the write, return false to end it here\nfunction checkWriteTraps(offset, value) {\n    // Cpu\n    if (offset === Cpu.memoryLocationSpeedSwitch) {\n        // TCAGBD, only Bit 0 is writable\n        eightBitStoreIntoGBMemory(Cpu.memoryLocationSpeedSwitch, value & 0x01);\n        // We did the write, dont need to\n        return false;\n    }\n    // Handle Boot ROM Switch\n    if (Cpu.BootROMEnabled && offset === Cpu.memoryLocationBootROMSwitch) {\n        // Disable the boot rom\n        Cpu.BootROMEnabled = false;\n        // Set the program counter to be incremented after this command\n        Cpu.programCounter = 0x00ff;\n        // Allow the write\n        return true;\n    }\n    // Graphics\n    // Cache globals used multiple times for performance\n    var videoRamLocation = Memory.videoRamLocation;\n    var spriteInformationTableLocation = Memory.spriteInformationTableLocation;\n    // Handle banking\n    if (offset < videoRamLocation) {\n        handleBanking(offset, value);\n        return false;\n    }\n    // Check the graphics mode to see if we can write to VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n    if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n        // Can only read/write from VRAM During Modes 0 - 2\n        // See graphics/lcd.ts\n        // TODO: This can do more harm than good in a beta emulator,\n        // requires precise timing disabling for now\n        // if (Graphics.currentLcdMode > 2) {\n        //   return false;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Be sure to copy everything in EchoRam to Work Ram\n    // Codeslinger: The ECHO memory region (0xE000-0xFDFF) is quite different because any data written here is also written in the equivelent ram memory region 0xC000-0xDDFF.\n    // Hence why it is called echo\n    if (offset >= Memory.echoRamLocation && offset < spriteInformationTableLocation) {\n        var wramOffset = offset - 0x2000;\n        eightBitStoreIntoGBMemory(wramOffset, value);\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Also check for individal writes\n    // Can only read/write from OAM During Modes 0 - 1\n    // See graphics/lcd.ts\n    if (offset >= spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n        // Can only read/write from OAM During Mode 2\n        // See graphics/lcd.ts\n        // if (Lcd.currentLcdMode < 2) {\n        // return false;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // Allow the original write, and return since we dont need to look anymore\n        // return true;\n        return Lcd.currentLcdMode >= 2;\n    }\n    if (offset >= Memory.unusableMemoryLocation && offset <= Memory.unusableMemoryEndLocation) {\n        return false;\n    }\n    // Serial\n    if (offset === Serial.memoryLocationSerialTransferControl) {\n        // SC\n        return Serial.updateTransferControl(value);\n    }\n    // Sound\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    if (offset >= 0xff10 && offset <= 0xff26) {\n        batchProcessAudio();\n        return SoundRegisterWriteTraps(offset, value);\n    }\n    // FF27 - FF2F not used\n    // Final Wave Table for Channel 3\n    if (offset >= 0xff30 && offset <= 0xff3f) {\n        batchProcessAudio();\n    }\n    // Other Memory effects fomr read/write to Lcd/Graphics\n    if (offset >= Lcd.memoryLocationLcdControl && offset <= Graphics.memoryLocationWindowX) {\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        if (offset === Lcd.memoryLocationLcdControl) {\n            // Shorcut for isLCD Enabled since it gets \"hot\"\n            Lcd.updateLcdControl(value);\n            return true;\n        }\n        if (offset === Lcd.memoryLocationLcdStatus) {\n            // We are handling the write here\n            Lcd.updateLcdStatus(value);\n            return false;\n        }\n        // reset the current scanline if the game tries to write to it\n        if (offset === Graphics.memoryLocationScanlineRegister) {\n            Graphics.scanlineRegister = 0;\n            eightBitStoreIntoGBMemory(offset, 0);\n            return false;\n        }\n        // Cache our coincidence compare\n        if (offset === Lcd.memoryLocationCoincidenceCompare) {\n            Lcd.coincidenceCompare = value;\n            return true;\n        }\n        // Do the direct memory access transfer for spriteInformationTable\n        // Check the graphics mode to see if we can write to VRAM\n        // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n        if (offset === Graphics.memoryLocationDmaTransfer) {\n            // otherwise, perform a DMA transfer\n            // And allow the original write\n            startDmaTransfer(value);\n            return true;\n        }\n        // Scroll and Window XY\n        switch (offset) {\n            case Graphics.memoryLocationScrollX:\n                Graphics.scrollX = value;\n                return true;\n            case Graphics.memoryLocationScrollY:\n                Graphics.scrollY = value;\n                return true;\n            case Graphics.memoryLocationWindowX:\n                Graphics.windowX = value;\n                return true;\n            case Graphics.memoryLocationWindowY:\n                Graphics.windowY = value;\n                return true;\n        }\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Do an HDMA\n    if (offset === Memory.memoryLocationHdmaTrigger) {\n        startHdmaTransfer(value);\n        return false;\n    }\n    // Don't allow banking if we are doing an Hblank HDM transfer\n    // https://gist.github.com/drhelius/3394856\n    if (offset === Memory.memoryLocationGBCWRAMBank || offset === Memory.memoryLocationGBCVRAMBank) {\n        if (Memory.isHblankHdmaActive) {\n            var hblankHdmaSource = Memory.hblankHdmaSource;\n            if ((hblankHdmaSource >= 0x4000 && hblankHdmaSource <= 0x7fff) || (hblankHdmaSource >= 0xd000 && hblankHdmaSource <= 0xdfff)) {\n                return false;\n            }\n        }\n    }\n    // Handle GBC Pallete Write\n    if (offset >= Palette.memoryLocationBackgroundPaletteIndex && offset <= Palette.memoryLocationSpritePaletteData) {\n        // Incremeenting the palette handled by the write\n        writeColorPaletteToMemory(offset, value);\n        return true;\n    }\n    // Handle timer writes\n    if (offset >= Timers.memoryLocationDividerRegister && offset <= Timers.memoryLocationTimerControl) {\n        // Batch Process\n        batchProcessTimers();\n        switch (offset) {\n            case Timers.memoryLocationDividerRegister:\n                Timers.updateDividerRegister();\n                return false;\n            case Timers.memoryLocationTimerCounter:\n                Timers.updateTimerCounter(value);\n                return true;\n            case Timers.memoryLocationTimerModulo:\n                Timers.updateTimerModulo(value);\n                return true;\n            case Timers.memoryLocationTimerControl:\n                Timers.updateTimerControl(value);\n                return true;\n        }\n        return true;\n    }\n    // Handle Joypad writes for HW reg caching\n    if (offset === Joypad.memoryLocationJoypadRegister) {\n        Joypad.updateJoypad(value);\n    }\n    // Handle Interrupt writes\n    if (offset === Interrupts.memoryLocationInterruptRequest) {\n        Interrupts.updateInterruptRequested(value);\n        return true;\n    }\n    if (offset === Interrupts.memoryLocationInterruptEnabled) {\n        Interrupts.updateInterruptEnabled(value);\n        return true;\n    }\n    // Allow the original write\n    return true;\n}\n\n// WasmBoy memory map:\n// Private function to translate a offset meant for the gameboy memory map\n// To the wasmboy memory map\n// Following: http://gameboy.mongenel.com/dmg/asmmemmap.html\n// And https://github.com/Dooskington/GameLad/wiki/Part-11---Memory-Bank-Controllers\n// Performance help from @dcodeIO, and awesome-gbdev\nfunction getWasmBoyOffsetFromGameBoyOffset(gameboyOffset) {\n    // Get the top byte and switch\n    var gameboyOffsetHighByte = gameboyOffset >> 12;\n    switch (gameboyOffsetHighByte) {\n        case 0x00:\n            // Check if we are currently executing the boot rom\n            // Otherwise, bottom 0x0000 -> 0x03FF is Cartridge ROM Ram Bank 1\n            if (Cpu.BootROMEnabled) {\n                if (Cpu.GBCEnabled) {\n                    // See: http://gbdev.gg8.se/wiki/articles/Gameboy_Bootstrap_ROM\n                    // \"The rom dump includes the 256 byte rom (0x0000-0x00FF) and the,\n                    // 1792 byte rom (0x0200-0x08FF) which Dr. Decapitator observed,\n                    // but not the 512 byte rom,\n                    // which may be cpu microcode or lcd color lookup related.\"\n                    // First 0xFF bytes are BOOT rom\n                    if (gameboyOffset < 0x0100) {\n                        return gameboyOffset + BOOT_ROM_LOCATION;\n                    }\n                    // 0x100 -> 0x1FF is the actual ROM\n                    // Everything from 0x200 -> 0x8FF is BOOT ROM Again\n                    if (gameboyOffset > 0x01ff && gameboyOffset < 0x0900) {\n                        return gameboyOffset + BOOT_ROM_LOCATION;\n                    }\n                }\n                else if (!Cpu.GBCEnabled && gameboyOffset < 0x0100) {\n                    return gameboyOffset + BOOT_ROM_LOCATION;\n                }\n            }\n        case 0x01:\n        case 0x02:\n        case 0x03:\n            // Cartridge ROM - Bank 0 (fixed)\n            // 0x0000 -> 0x0D2400\n            return gameboyOffset + CARTRIDGE_ROM_LOCATION;\n        case 0x04:\n        case 0x05:\n        case 0x06:\n        case 0x07:\n            // Cartridge ROM - Switchable Banks 1-xx\n            // 0x4000 -> (0x0D2400 + 0x4000)\n            return getRomBankAddress(gameboyOffset) + CARTRIDGE_ROM_LOCATION;\n        case 0x08:\n        case 0x09:\n            // Video RAM\n            // 0x8000 -> 0x000400\n            var vramBankId = 0;\n            if (Cpu.GBCEnabled) {\n                // Find our current VRAM Bank\n                vramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCVRAMBank) & 0x01;\n                // Even though We added another 0x2000, the Cartridge ram is pulled out of our Internal Memory Space\n                // Therefore, we do not need to adjust for this extra 0x2000\n            }\n            return gameboyOffset - Memory.videoRamLocation + VIDEO_RAM_LOCATION + 0x2000 * vramBankId;\n        case 0x0a:\n        case 0x0b:\n            // Cartridge RAM - A.K.A External RAM\n            // 0xA000 -> 0x008400\n            return getRamBankAddress(gameboyOffset) + CARTRIDGE_RAM_LOCATION;\n        case 0x0c:\n            // Gameboy Ram Bank 0\n            // 0xC000 -> 0x000400\n            // Don't need to add head, since we move out 0x200 from the cartridge ram\n            return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION;\n        case 0x0d:\n            // Gameboy Ram Banks, Switchable in GBC Mode\n            // 0xD000 -> 0x000400\n            // In CGB Mode 32 KBytes internal RAM are available.\n            // This memory is divided into 8 banks of 4 KBytes each.\n            // Bank 0 is always available in memory at C000-CFFF,\n            // Bank 1-7 can be selected into the address space at D000-DFFF.\n            // http://gbdev.gg8.se/wiki/articles/CGB_Registers#FF70_-_SVBK_-_CGB_Mode_Only_-_WRAM_Bank\n            // Get the last 3 bits to find our wram ID\n            var wramBankId = 0;\n            if (Cpu.GBCEnabled) {\n                wramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCWRAMBank) & 0x07;\n            }\n            wramBankId = wramBankId < 1 ? 1 : wramBankId;\n            // (0x1000 * (wramBankId - 1)) -> To find the correct wram bank.\n            // wramBankId - 1, because we alreayd have the space for wramBank 1, and are currently in it\n            // So need to address space for 6 OTHER banks\n            return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION + 0x1000 * (wramBankId - 1);\n        default:\n            // Everything Else after Gameboy Ram Banks\n            // 0xE000 -> 0x000400\n            // 0x6000 For the Extra WRAM Banks\n            return gameboyOffset - Memory.echoRamLocation + OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION;\n    }\n}\n\n// Breakpoints for memory / cpu\nvar Breakpoints = /** @class */ (function () {\n    function Breakpoints() {\n    }\n    Breakpoints.programCounter = -1;\n    Breakpoints.readGbMemory = -1;\n    Breakpoints.writeGbMemory = -1;\n    Breakpoints.reachedBreakpoint = false;\n    return Breakpoints;\n}());\nfunction setProgramCounterBreakpoint(breakpoint) {\n    Breakpoints.programCounter = breakpoint;\n}\nfunction resetProgramCounterBreakpoint() {\n    Breakpoints.programCounter = -1;\n}\nfunction setReadGbMemoryBreakpoint(breakpoint) {\n    Breakpoints.readGbMemory = breakpoint;\n}\nfunction resetReadGbMemoryBreakpoint() {\n    Breakpoints.readGbMemory = -1;\n}\nfunction setWriteGbMemoryBreakpoint(breakpoint) {\n    Breakpoints.writeGbMemory = breakpoint;\n}\nfunction resetWriteGbMemoryBreakpoint() {\n    Breakpoints.writeGbMemory = -1;\n}\n\n// Store / Write memory access\nfunction eightBitStoreIntoGBMemory(gameboyOffset, value) {\n    store(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset), value);\n}\nfunction eightBitStoreIntoGBMemoryWithTraps(offset, value) {\n    if (offset === Breakpoints.writeGbMemory) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    if (checkWriteTraps(offset, value)) {\n        eightBitStoreIntoGBMemory(offset, value);\n    }\n}\nfunction sixteenBitStoreIntoGBMemoryWithTraps(offset, value) {\n    // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n    // Split the value into two seperate bytes\n    var highByte = splitHighByte(value);\n    var lowByte = splitLowByte(value);\n    if (checkWriteTraps(offset, lowByte)) {\n        eightBitStoreIntoGBMemory(offset, lowByte);\n    }\n    var nextOffset = offset + 1;\n    if (checkWriteTraps(nextOffset, highByte)) {\n        eightBitStoreIntoGBMemory(nextOffset, highByte);\n    }\n}\nfunction sixteenBitStoreIntoGBMemory(offset, value) {\n    // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n    // Split the value into two seperate bytes\n    var highByte = splitHighByte(value);\n    var lowByte = splitLowByte(value);\n    eightBitStoreIntoGBMemory(offset + 0, lowByte);\n    eightBitStoreIntoGBMemory(offset + 1, highByte);\n}\nfunction storeBooleanDirectlyToWasmMemory(offset, value) {\n    store(offset, value);\n}\n\n// Funcitons for setting and checking the LCD\nvar Lcd = /** @class */ (function () {\n    function Lcd() {\n    }\n    // Function called in write traps to update our hardware registers\n    Lcd.updateLcdStatus = function (value) {\n        // Bottom three bits are read only\n        var currentLcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        var valueNoBottomBits = value & 0xf8;\n        var lcdStatusOnlyBottomBits = currentLcdStatus & 0x07;\n        value = valueNoBottomBits | lcdStatusOnlyBottomBits;\n        // Top bit is always 1\n        value = setBitOnByte(7, value);\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, value);\n    };\n    // Function called in write traps to update our hardware registers\n    Lcd.updateLcdControl = function (value) {\n        var wasLcdEnabled = Lcd.enabled;\n        Lcd.enabled = checkBitOnByte(7, value);\n        Lcd.windowTileMapDisplaySelect = checkBitOnByte(6, value);\n        Lcd.windowDisplayEnabled = checkBitOnByte(5, value);\n        Lcd.bgWindowTileDataSelect = checkBitOnByte(4, value);\n        Lcd.bgTileMapDisplaySelect = checkBitOnByte(3, value);\n        Lcd.tallSpriteSize = checkBitOnByte(2, value);\n        Lcd.spriteDisplayEnable = checkBitOnByte(1, value);\n        Lcd.bgDisplayEnabled = checkBitOnByte(0, value);\n        if (wasLcdEnabled && !Lcd.enabled) {\n            // Disable the LCD\n            resetLcd(true);\n        }\n        if (!wasLcdEnabled && Lcd.enabled) {\n            // Re-enable the LCD\n            resetLcd(false);\n        }\n    };\n    // Memory Locations\n    // Also known at STAT\n    // LCD Status (0xFF41) bits Explanation\n    // 0                0                    000                    0             00\n    //       |Coicedence Interrupt|     |Mode Interrupts|  |coincidence flag|  | Mode |\n    // Modes:\n    // 0 or 00: H-Blank\n    // 1 or 01: V-Blank\n    // 2 or 10: Searching Sprites Atts\n    // 3 or 11: Transfering Data to LCD Driver\n    Lcd.memoryLocationLcdStatus = 0xff41;\n    Lcd.currentLcdMode = 0;\n    Lcd.memoryLocationCoincidenceCompare = 0xff45;\n    Lcd.coincidenceCompare = 0;\n    // Also known as LCDC\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    // Bit 7 - LCD Display Enable (0=Off, 1=On)\n    // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 5 - Window Display Enable (0=Off, 1=On)\n    // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n    // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n    // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n    // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On\n    Lcd.memoryLocationLcdControl = 0xff40;\n    // Decoupled LCDC for caching\n    Lcd.enabled = true;\n    Lcd.windowTileMapDisplaySelect = false;\n    Lcd.windowDisplayEnabled = false;\n    Lcd.bgWindowTileDataSelect = false;\n    Lcd.bgTileMapDisplaySelect = false;\n    Lcd.tallSpriteSize = false;\n    Lcd.spriteDisplayEnable = false;\n    Lcd.bgDisplayEnabled = false;\n    return Lcd;\n}());\nfunction resetLcd(shouldBlankScreen) {\n    // Reset scanline cycle counter\n    Graphics.scanlineCycleCounter = 0;\n    Graphics.scanlineRegister = 0;\n    eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, 0);\n    // Set to mode 0\n    // https://www.reddit.com/r/EmuDev/comments/4w6479/gb_dr_mario_level_generation_issues/\n    var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n    lcdStatus = resetBitOnByte(1, lcdStatus);\n    lcdStatus = resetBitOnByte(0, lcdStatus);\n    Lcd.currentLcdMode = 0;\n    // Store the status in memory\n    eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    // Blank the screen\n    if (shouldBlankScreen) {\n        for (var i = 0; i < FRAME_SIZE; ++i) {\n            store(FRAME_LOCATION + i, 255);\n        }\n    }\n}\n// Pass in the lcd status for performance\n// Inlined because closure compiler inlines\nfunction setLcdStatus() {\n    // Check if the Lcd was disabled\n    if (!Lcd.enabled) {\n        return;\n    }\n    // Get our current scanline, and lcd mode\n    var scanlineRegister = Graphics.scanlineRegister;\n    var lcdMode = Lcd.currentLcdMode;\n    // Default to  H-Blank\n    var newLcdMode = 0;\n    // Find our newLcd mode\n    if (scanlineRegister >= 144) {\n        // VBlank mode\n        newLcdMode = 1;\n    }\n    else {\n        var scanlineCycleCounter = Graphics.scanlineCycleCounter;\n        var MIN_CYCLES_SPRITES_LCD_MODE = Graphics.MIN_CYCLES_SPRITES_LCD_MODE();\n        if (scanlineCycleCounter >= MIN_CYCLES_SPRITES_LCD_MODE) {\n            // Searching Sprites Atts\n            newLcdMode = 2;\n        }\n        else if (scanlineCycleCounter >= MIN_CYCLES_SPRITES_LCD_MODE) {\n            // Transferring data to lcd\n            newLcdMode = 3;\n        }\n    }\n    if (lcdMode !== newLcdMode) {\n        // Get our lcd status\n        var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        // Save our lcd mode\n        Lcd.currentLcdMode = newLcdMode;\n        var shouldRequestInterrupt = false;\n        // Set our LCD Status accordingly\n        switch (newLcdMode) {\n            case 0x00:\n                lcdStatus = resetBitOnByte(0, lcdStatus);\n                lcdStatus = resetBitOnByte(1, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(3, lcdStatus);\n                break;\n            case 0x01:\n                lcdStatus = resetBitOnByte(1, lcdStatus);\n                lcdStatus = setBitOnByte(0, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(4, lcdStatus);\n                break;\n            case 0x02:\n                lcdStatus = resetBitOnByte(0, lcdStatus);\n                lcdStatus = setBitOnByte(1, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(5, lcdStatus);\n                break;\n            case 0x03:\n                lcdStatus = setBitOnByte(0, lcdStatus);\n                lcdStatus = setBitOnByte(1, lcdStatus);\n                break;\n        }\n        // Check if we want to request an interrupt, and we JUST changed modes\n        if (shouldRequestInterrupt) {\n            requestLcdInterrupt();\n        }\n        // Check for updating the Hblank HDMA\n        if (newLcdMode === 0) {\n            // Update the Hblank DMA, will simply return if not active\n            updateHblankHdma();\n        }\n        // Check for requesting a VBLANK interrupt\n        if (newLcdMode === 1) {\n            requestVBlankInterrupt();\n        }\n        // Check for the coincidence\n        lcdStatus = checkCoincidence(newLcdMode, lcdStatus);\n        // Finally, save our status\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    }\n    else if (scanlineRegister === 153) {\n        // Special Case, need to check LYC\n        // Fix prehistorik man freeze\n        var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        lcdStatus = checkCoincidence(newLcdMode, lcdStatus);\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    }\n}\nfunction checkCoincidence(lcdMode, lcdStatus) {\n    // Check for the coincidence flag\n    // Need to check on every mode, and not just HBLANK, as checking on hblank breaks shantae, which checks on vblank\n    if ((lcdMode === 0 || lcdMode === 1) && Graphics.scanlineRegister === Lcd.coincidenceCompare) {\n        lcdStatus = setBitOnByte(2, lcdStatus);\n        if (checkBitOnByte(6, lcdStatus)) {\n            requestLcdInterrupt();\n        }\n    }\n    else {\n        lcdStatus = resetBitOnByte(2, lcdStatus);\n    }\n    return lcdStatus;\n}\n\n// Functions for rendering the background\n// NOTE: i32Portable wraps modulo here as somehow it gets converted to a double:\n// https://github.com/torch2424/wasmboy/issues/216\n// Inlined because closure compiler inlines\nfunction renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n    // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n    // Get our scrollX and scrollY (u16 to play nice with assemblyscript)\n    // let scrollX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollX);\n    // let scrollY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollY);\n    var scrollX = Graphics.scrollX;\n    var scrollY = Graphics.scrollY;\n    // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n    // this is done by getting the current scroll Y position,\n    // and adding it do what Y Value the scanline is drawing on the camera.\n    var pixelYPositionInMap = scanlineRegister + scrollY;\n    // Gameboy camera will \"wrap\" around the background map,\n    // meaning that if the pixelValue is 350, then we need to subtract 256 (decimal) to get it's actual value\n    // pixel values (scrollX and scrollY) range from 0x00 - 0xFF\n    pixelYPositionInMap &= 0x100 - 1;\n    // Draw the Background scanline\n    drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, 0, scrollX);\n}\n// Inlined because closure compiler inlines\nfunction renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n    // Get our windowX and windowY\n    // let windowX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowX);\n    // let windowY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowY);\n    var windowX = Graphics.windowX;\n    var windowY = Graphics.windowY;\n    // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n    // First ensure that the scanline is greater than our window\n    if (scanlineRegister < windowY) {\n        // Window is not within the current camera view\n        return;\n    }\n    // WindowX is offset by 7\n    windowX -= 7;\n    // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n    var pixelYPositionInMap = scanlineRegister - windowY;\n    // xOffset is simply a neagative window x\n    // NOTE: This can become negative zero?\n    // https://github.com/torch2424/wasmboy/issues/216\n    var xOffset = i32Portable(-windowX);\n    // Draw the Background scanline\n    drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, windowX, xOffset);\n}\n// Function frankenstein'd together to allow background and window to share the same draw scanline function\nfunction drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, iStart, xOffset) {\n    // Get our tile Y position in the map\n    var tileYPositionInMap = pixelYPositionInMap >> 3;\n    // Loop through x to draw the line like a CRT\n    for (var i = iStart; i < 160; ++i) {\n        // Get our Current X position of our pixel on the on the 160x144 camera\n        // this is done by getting the current scroll X position,\n        // and adding it do what X Value the scanline is drawing on the camera.\n        var pixelXPositionInMap = i + xOffset;\n        // This is to compensate wrapping, same as pixelY\n        if (pixelXPositionInMap >= 0x100) {\n            pixelXPositionInMap -= 0x100;\n        }\n        // Divide our pixel position by 8 to get our tile.\n        // Since, there are 256x256 pixels, and 32x32 tiles.\n        // 256 / 8 = 32.\n        // Also, bitshifting by 3, do do a division by 8\n        // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n        var tileXPositionInMap = pixelXPositionInMap >> 3;\n        // Get our tile address on the tileMap\n        // NOTE: (tileMap represents where each tile is displayed on the screen)\n        // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n        // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n        // And we have x pixel 160. 160 / 8 = 20.\n        // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n        // Think like indexing a 2d array, as a 1d array and it make sense :)\n        var tileMapAddress = tileMapMemoryLocation + (tileYPositionInMap << 5) + tileXPositionInMap;\n        // Get the tile Id on the Tile Map\n        var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n        // Now that we have our Tile Id, let's check our Tile Cache\n        var usedTileCache = false;\n        if (Config.tileCaching) {\n            var pixelsDrawn = drawLineOfTileFromTileCache(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            // Increment i by 7, not 8 because i will be incremented at end of for loop\n            if (pixelsDrawn > 0) {\n                i += pixelsDrawn - 1;\n                usedTileCache = true;\n            }\n        }\n        if (Config.tileRendering && !usedTileCache) {\n            var pixelsDrawn = drawLineOfTileFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            // A line of a tile is 8 pixels wide, therefore increase i by (pixelsDrawn - 1), and then the for loop will increment by 1\n            // For a net increment for 8\n            if (pixelsDrawn > 0) {\n                i += pixelsDrawn - 1;\n            }\n        }\n        else if (!usedTileCache) {\n            if (Cpu.GBCEnabled) {\n                // Draw the individual pixel\n                drawColorPixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            }\n            else {\n                // Draw the individual pixel\n                drawMonochromePixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap);\n            }\n        }\n    }\n}\n// Function to draw a pixel for the standard GB\n// Inlined because closure compiler inlines\nfunction drawMonochromePixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Now we can process the the individual bytes that represent the pixel on a tile\n    // Now get our tileDataAddress for the corresponding tileID we found in the map\n    // Read the comments in _getTileDataAddress() to see what's going on.\n    // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n    // This funcitons returns the start of memory locaiton for the tile 'c'.\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n    // Get the y pixel of the 8 by 8 tile.\n    // Simply modulo the scanline.\n    // For instance, let's say we are printing the first line of pixels on our camera,\n    // And the first line of pixels on our tile.\n    // yPixel = 1. 1 % 8 = 1.\n    // And for the last line\n    // yPixel = 144. 144 % 8 = 0.\n    // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n    // Because remember, we are counting lines on the display NOT including zero\n    var pixelYInTile = i32Portable(pixelYPositionInMap & 7);\n    // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n    // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n    // Again, think like you had to map a 2d array as a 1d.\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, 0);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, 0);\n    // Same logic as pixelYInTile.\n    // However, We need to reverse our byte,\n    // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n    // Therefore, is pixelX was 2, then really is need to be 5\n    // So 2 - 7 = -5, * 1 = 5\n    // Or to simplify, 7 - 2 = 5 haha!\n    var pixelXInTile = i32Portable(pixelXPositionInMap & 7);\n    pixelXInTile = 7 - pixelXInTile;\n    // Now we can get the color for that pixel\n    // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n    // To Get the color Id.\n    // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n    // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    var paletteColorId = 0;\n    if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n    }\n    if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n    }\n    // Not checking u8 Portability overflow here, since it can't be greater than i32 over :p\n    // Now get the colorId from the pallete, to get our final color\n    // Developers could change colorIds to represents different colors\n    // in their palette, thus we need to grab the color from there\n    //let pixelColorInTileFromPalette: u8 = getColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n    // Moved below for perofrmance\n    // FINALLY, RENDER THAT PIXEL!\n    // Only rendering camera for now, so coordinates are for the camera.\n    // Get the rgb value for the color Id, will be repeated into R, G, B. if not colorized\n    var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n    setPixelOnFrame(xPixel, yPixel, 0, getRedFromHexColor(hexColor));\n    setPixelOnFrame(xPixel, yPixel, 1, getGreenFromHexColor(hexColor));\n    setPixelOnFrame(xPixel, yPixel, 2, getBlueFromHexColor(hexColor));\n    // Lastly, add the pixel to our background priority map\n    // https://github.com/torch2424/wasmBoy/issues/51\n    // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n    // Bit 2 will represent if the Bg/Window has GBC priority.\n    addPriorityforPixel(xPixel, yPixel, paletteColorId);\n}\n// Function to draw a pixel from a tile in C O L O R\n// See above for more context on some variables\n// Inlined because closure compiler inlines\nfunction drawColorPixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Now get our tileDataAddress for the corresponding tileID we found in the map\n    // Read the comments in _getTileDataAddress() to see what's going on.\n    // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n    // This funcitons returns the start of memory locaiton for the tile 'c'.\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n    // Get the GB Map Attributes\n    // Bit 0-2  Background Palette number  (BGP0-7)\n    // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n    // Bit 4    Not used\n    // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n    // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n    // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n    var bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n    // See above for explanation\n    var pixelYInTile = i32Portable(pixelYPositionInMap & 7);\n    if (checkBitOnByte(6, bgMapAttributes)) {\n        // We are mirroring the tile, therefore, we need to opposite byte\n        // So if our pixel was 0 our of 8, it wild become 7 :)\n        pixelYInTile = 7 - pixelYInTile;\n    }\n    // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n    // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n    // But we need to load the time from a specific Vram bank\n    var vramBankId = i32Portable(checkBitOnByte(3, bgMapAttributes));\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId);\n    // Get our X pixel. Need to NOT reverse it if it was flipped.\n    // See above, you have to reverse this normally\n    var pixelXInTile = i32Portable(pixelXPositionInMap & 7);\n    if (!checkBitOnByte(5, bgMapAttributes)) {\n        pixelXInTile = 7 - pixelXInTile;\n    }\n    // Now we can get the color for that pixel\n    // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n    // To Get the color Id.\n    // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n    // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    var paletteColorId = 0;\n    if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n    }\n    if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n    }\n    // Finally lets add some, C O L O R\n    // Want the botom 3 bits\n    var bgPalette = bgMapAttributes & 0x07;\n    // Call the helper function to grab the correct color from the palette\n    var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false);\n    // Split off into red green and blue\n    var red = getColorComponentFromRgb(0, rgbColorPalette);\n    var green = getColorComponentFromRgb(1, rgbColorPalette);\n    var blue = getColorComponentFromRgb(2, rgbColorPalette);\n    // Finally Place our colors on the things\n    setPixelOnFrame(xPixel, yPixel, 0, red);\n    setPixelOnFrame(xPixel, yPixel, 1, green);\n    setPixelOnFrame(xPixel, yPixel, 2, blue);\n    // Lastly, add the pixel to our background priority map\n    // https://github.com/torch2424/wasmBoy/issues/51\n    // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n    // Bit 2 will represent if the Bg/Window has GBC priority.\n    addPriorityforPixel(xPixel, yPixel, paletteColorId, checkBitOnByte(7, bgMapAttributes));\n}\n// Function to attempt to draw the tile from the tile cache\n// Inlined because closure compiler inlines\nfunction drawLineOfTileFromTileCache(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // First, initialize how many pixels we have drawn\n    var pixelsDrawn = 0;\n    // Check if the current tile matches our tileId\n    // TODO: Allow the first line to use the tile cache, for some odd reason it doesn't work when scanline is 0\n    var nextXIndexToPerformCacheCheck = TileCache.nextXIndexToPerformCacheCheck;\n    if (yPixel > 0 && xPixel > 8 && tileIdFromTileMap === TileCache.tileId && xPixel === nextXIndexToPerformCacheCheck) {\n        // Was last tile flipped\n        var wasLastTileHorizontallyFlipped = checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress - 1));\n        var isCurrentTileHorizontallyFlipped = checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress));\n        // Simply copy the last 8 pixels from memory to copy the line from the tile\n        for (var tileCacheIndex = 0; tileCacheIndex < 8; ++tileCacheIndex) {\n            // Check if we need to render backwards for flipping\n            if (wasLastTileHorizontallyFlipped !== isCurrentTileHorizontallyFlipped) {\n                tileCacheIndex = 7 - tileCacheIndex;\n            }\n            var xPos = xPixel + tileCacheIndex;\n            // First check for overflow\n            if (xPos <= 160) {\n                // Get the pixel location in memory of the tile\n                var previousXPixel = xPixel - (8 - tileCacheIndex);\n                var previousTilePixelLocation = FRAME_LOCATION + getRgbPixelStart(xPos, yPixel);\n                // Cycle through the RGB\n                // for (let tileCacheRgb = 0; tileCacheRgb < 3; ++tileCacheRgb) {\n                //  setPixelOnFrame(xPixel + tileCacheIndex, yPixel, tileCacheRgb, load<u8>(previousTilePixelLocation + tileCacheRgb));\n                // }\n                // unroll\n                setPixelOnFrame(xPos, yPixel, 0, load(previousTilePixelLocation, 0));\n                setPixelOnFrame(xPos, yPixel, 1, load(previousTilePixelLocation, 1));\n                setPixelOnFrame(xPos, yPixel, 2, load(previousTilePixelLocation, 2));\n                // Copy the priority for the pixel\n                var pixelPriority = getPriorityforPixel(previousXPixel, yPixel);\n                addPriorityforPixel(xPos, yPixel, resetBitOnByte(2, pixelPriority), checkBitOnByte(2, pixelPriority));\n                pixelsDrawn++;\n            }\n        }\n    }\n    else {\n        // Save our current tile Id, and the next x value we should check the x index\n        TileCache.tileId = tileIdFromTileMap;\n    }\n    // Calculate when we should do the tileCache calculation again\n    if (xPixel >= nextXIndexToPerformCacheCheck) {\n        nextXIndexToPerformCacheCheck = xPixel + 8;\n        var xOffsetTileWidthRemainder = i32Portable(pixelXPositionInMap & 7);\n        if (xPixel < xOffsetTileWidthRemainder) {\n            nextXIndexToPerformCacheCheck += xOffsetTileWidthRemainder;\n        }\n    }\n    TileCache.nextXIndexToPerformCacheCheck = nextXIndexToPerformCacheCheck;\n    return pixelsDrawn;\n}\n// Function to draw a line of a tile in Color\n// This is for tile rendering shortcuts\n// Inlined because closure compiler inlines\nfunction drawLineOfTileFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Get the which line of the tile we are rendering\n    var tileLineY = i32Portable(pixelYPositionInMap & 7);\n    // Now lets find our tileX start and end\n    // This is for the case where i = 0, but scroll X was 3.\n    // Or i is 157, and our camera is only 160 pixels wide\n    var tileXStart = 0;\n    if (xPixel == 0) {\n        tileXStart = pixelXPositionInMap - ((pixelXPositionInMap >> 3) << 3);\n    }\n    var tileXEnd = 7;\n    if (xPixel + 8 > 160) {\n        tileXEnd = 160 - xPixel;\n    }\n    // initialize some variables for GBC\n    var bgMapAttributes = -1;\n    var vramBankId = 0;\n    if (Cpu.GBCEnabled) {\n        // Get Our GBC properties\n        bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n        vramBankId = i32Portable(checkBitOnByte(3, bgMapAttributes));\n        if (checkBitOnByte(6, bgMapAttributes)) {\n            // We are mirroring the tile, therefore, we need to opposite byte\n            // So if our pixel was 0 our of 8, it wild become 7 :)\n            tileLineY = 7 - tileLineY;\n        }\n    }\n    // Return the number of pixels drawn\n    return drawPixelsFromLineOfTile(tileIdFromTileMap, tileDataMemoryLocation, vramBankId, tileXStart, tileXEnd, tileLineY, xPixel, yPixel, 160, FRAME_LOCATION, false, 0, bgMapAttributes, -1);\n}\n\n// Functions for rendering the sprites\n// Inlined because closure compiler inlines\nfunction renderSprites(scanlineRegister, useLargerSprites) {\n    // Need to loop through all 40 sprites to check their status\n    // Going backwards since lower sprites draw over higher ones\n    // Will fix dragon warrior 3 intro\n    for (var i = 39; i >= 0; --i) {\n        // Sprites occupy 4 bytes in the sprite attribute table\n        var spriteTableIndex = i * 4;\n        // Y positon is offset by 16, X position is offset by 8\n        var index = Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex;\n        var spriteYPosition = eightBitLoadFromGBMemory(index + 0);\n        var spriteXPosition = eightBitLoadFromGBMemory(index + 1);\n        var spriteTileId = eightBitLoadFromGBMemory(index + 2);\n        // Pan docs of sprite attirbute table\n        // Bit7   OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3)\n        //      (Used for both BG and Window. BG color 0 is always behind OBJ)\n        // Bit6   Y flip          (0=Normal, 1=Vertically mirrored)\n        // Bit5   X flip          (0=Normal, 1=Horizontally mirrored)\n        // Bit4   Palette number  **Non CGB Mode Only** (0=OBP0, 1=OBP1)\n        // Bit3   Tile VRAM-Bank  **CGB Mode Only**     (0=Bank 0, 1=Bank 1)\n        // Bit2-0 Palette number  **CGB Mode Only**     (OBP0-7)\n        // Apply sprite X and Y offset\n        // TODO: Sprites are overflowing on x if less than 8\n        spriteYPosition -= 16;\n        spriteXPosition -= 8;\n        // Find our sprite height\n        var spriteHeight = 8;\n        if (useLargerSprites) {\n            spriteHeight = 16;\n            // @binji says in 8x16 mode, even tileId always drawn first\n            // This will fix shantae sprites which always uses odd numbered indexes\n            // TODO: Do the actual Pandocs thing:\n            // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n            // So just knock off the last bit? :)\n            spriteTileId -= spriteTileId & 1;\n        }\n        // Find if our sprite is on the current scanline\n        if (scanlineRegister >= spriteYPosition && scanlineRegister < spriteYPosition + spriteHeight) {\n            // Then we need to draw the current sprite\n            // Get our sprite attributes since we know we shall be drawing the tile\n            var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n            // Check sprite Priority\n            var isSpritePriorityBehindWindowAndBackground = checkBitOnByte(7, spriteAttributes);\n            // Check if we should flip the sprite on the x or y axis\n            var flipSpriteY = checkBitOnByte(6, spriteAttributes);\n            var flipSpriteX = checkBitOnByte(5, spriteAttributes);\n            // TODO: Torch2424 continue here.\n            // Find which line on the sprite we are on\n            var currentSpriteLine = scanlineRegister - spriteYPosition;\n            // If we fliiped the Y axis on our sprite, need to read from memory backwards to acheive the same effect\n            if (flipSpriteY) {\n                currentSpriteLine = spriteHeight - currentSpriteLine;\n                // Bug fix for the flipped flies in link's awakening\n                currentSpriteLine -= 1;\n            }\n            // Each line of a tile takes two bytes of memory\n            currentSpriteLine <<= 1;\n            // Get our sprite tile address, need to also add the current sprite line to get the correct bytes\n            var spriteTileAddressStart = getTileDataAddress(Graphics.memoryLocationTileDataSelectOneStart, spriteTileId);\n            spriteTileAddressStart += currentSpriteLine;\n            var spriteTileAddress = spriteTileAddressStart;\n            // Find which VRAM Bank to load from\n            var vramBankId = (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes));\n            var spriteDataByteOneForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 0, vramBankId);\n            var spriteDataByteTwoForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 1, vramBankId);\n            // Iterate over the width of our sprite to find our individual pixels\n            for (var tilePixel = 7; tilePixel >= 0; --tilePixel) {\n                // Get our spritePixel, and check for flipping\n                var spritePixelXInTile = tilePixel;\n                if (flipSpriteX) {\n                    spritePixelXInTile -= 7;\n                    spritePixelXInTile = -spritePixelXInTile;\n                }\n                // Get the color Id of our sprite, similar to renderBackground()\n                // With the first byte, and second byte lined up method thing\n                // Yes, the second byte comes before the first, see ./background.ts\n                var spriteColorId = 0;\n                if (checkBitOnByte(spritePixelXInTile, spriteDataByteTwoForLineOfTilePixels)) {\n                    // Byte one represents the second bit in our color id, so bit shift\n                    spriteColorId = (spriteColorId + 1) << 1;\n                }\n                if (checkBitOnByte(spritePixelXInTile, spriteDataByteOneForLineOfTilePixels)) {\n                    spriteColorId += 1;\n                }\n                // ColorId zero (last two bits of pallette) are transparent\n                // http://gbdev.gg8.se/wiki/articles/Video_Display\n                if (spriteColorId !== 0) {\n                    // Find our actual X pixel location on the gameboy \"camera\" view\n                    // This cannot be less than zero, i32 will overflow\n                    var spriteXPixelLocationInCameraView = spriteXPosition + (7 - tilePixel);\n                    if (spriteXPixelLocationInCameraView >= 0 && spriteXPixelLocationInCameraView <= 160) {\n                        // There are two cases where wouldnt draw the pixel on top of the Bg/window\n                        // 1. if isSpritePriorityBehindWindowAndBackground, sprite can only draw over color 0\n                        // 2. if bit 2 of our priority is set, then BG-to-OAM Priority from pandoc\n                        //  is active, meaning BG tile will have priority above all OBJs\n                        //  (regardless of the priority bits in OAM memory)\n                        // But if GBC and Bit 0 of LCDC is set, we always draw the object\n                        var shouldShowFromLcdcPriority = Cpu.GBCEnabled && !Lcd.bgDisplayEnabled; // LCDC Priority\n                        var shouldHideFromOamPriority = false;\n                        var shouldHideFromBgPriority = false;\n                        if (!shouldShowFromLcdcPriority) {\n                            // Now that we have our coordinates, check for sprite priority\n                            // Lets get the priority byte we put in memory\n                            var bgPriorityByte = getPriorityforPixel(spriteXPixelLocationInCameraView, scanlineRegister);\n                            var bgColorFromPriorityByte = bgPriorityByte & 0x03;\n                            // Doing an else if, since either will automatically stop drawing the pixel\n                            if (isSpritePriorityBehindWindowAndBackground && bgColorFromPriorityByte > 0) {\n                                // OAM Priority\n                                shouldHideFromOamPriority = true;\n                            }\n                            else if (Cpu.GBCEnabled && checkBitOnByte(2, bgPriorityByte) && bgColorFromPriorityByte > 0) {\n                                // Bg priority\n                                shouldHideFromBgPriority = true;\n                            }\n                        }\n                        if (shouldShowFromLcdcPriority || (!shouldHideFromOamPriority && !shouldHideFromBgPriority)) {\n                            if (!Cpu.GBCEnabled) {\n                                // Get our monochrome color RGB from the current sprite pallete\n                                // Get our sprite pallete\n                                var spritePaletteLocation = Graphics.memoryLocationSpritePaletteOne;\n                                if (checkBitOnByte(4, spriteAttributes)) {\n                                    spritePaletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                                }\n                                var hexColor = getColorizedGbHexColorFromPalette(spriteColorId, spritePaletteLocation);\n                                // Finally set the pixel!\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, getRedFromHexColor(hexColor));\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, getGreenFromHexColor(hexColor));\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, getBlueFromHexColor(hexColor));\n                            }\n                            else {\n                                // Get our RGB Color\n                                // Finally lets add some, C O L O R\n                                // Want the botom 3 bits\n                                var bgPalette = spriteAttributes & 0x07;\n                                // Call the helper function to grab the correct color from the palette\n                                var rgbColorPalette = getRgbColorFromPalette(bgPalette, spriteColorId, true);\n                                // Split off into red green and blue\n                                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                                var blue = getColorComponentFromRgb(2, rgbColorPalette);\n                                // Finally Place our colors on the things\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, red);\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, green);\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, blue);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main Class and funcitons for rendering the gameboy display\nvar Graphics = /** @class */ (function () {\n    function Graphics() {\n    }\n    // Number of cycles to run in each batch process\n    // This number should be in sync so that graphics doesn't run too many cyles at once\n    // and does not exceed the minimum number of cyles for either scanlines, or\n    // How often we change the frame, or a channel's update process\n    Graphics.batchProcessCycles = function () {\n        return Graphics.MAX_CYCLES_PER_SCANLINE();\n    };\n    // TCAGBD says 456 per scanline, but 153 only a handful\n    Graphics.MAX_CYCLES_PER_SCANLINE = function () {\n        if (Graphics.scanlineRegister === 153) {\n            return 4 << Cpu.GBCDoubleSpeed;\n        }\n        else {\n            return 456 << Cpu.GBCDoubleSpeed;\n        }\n    };\n    Graphics.MIN_CYCLES_SPRITES_LCD_MODE = function () {\n        // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n        return 376 << Cpu.GBCDoubleSpeed;\n    };\n    Graphics.MIN_CYCLES_TRANSFER_DATA_LCD_MODE = function () {\n        // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n        return 249 << Cpu.GBCDoubleSpeed;\n    };\n    // Function to save the state of the class\n    Graphics.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot), Graphics.scanlineCycleCounter);\n        store(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot), Lcd.currentLcdMode);\n        eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, Graphics.scanlineRegister);\n    };\n    // Function to load the save state from memory\n    Graphics.loadState = function () {\n        Graphics.scanlineCycleCounter = load(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot));\n        Lcd.currentLcdMode = load(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot));\n        Graphics.scanlineRegister = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n        Lcd.updateLcdControl(eightBitLoadFromGBMemory(Lcd.memoryLocationLcdControl));\n    };\n    // Current cycles\n    // This will be used for batch processing\n    Graphics.currentCycles = 0;\n    // Count the number of cycles to keep synced with cpu cycles\n    // Found GBC cycles by finding clock speed from Gb Cycles\n    // See TCAGBD For cycles\n    Graphics.scanlineCycleCounter = 0x00;\n    // LCD\n    // scanlineRegister also known as LY\n    // See: http://bgb.bircd.org/pandocs.txt , and search \" LY \"\n    Graphics.memoryLocationScanlineRegister = 0xff44;\n    Graphics.scanlineRegister = 0;\n    Graphics.memoryLocationDmaTransfer = 0xff46;\n    // Scroll and Window\n    Graphics.memoryLocationScrollX = 0xff43;\n    Graphics.scrollX = 0;\n    Graphics.memoryLocationScrollY = 0xff42;\n    Graphics.scrollY = 0;\n    Graphics.memoryLocationWindowX = 0xff4b;\n    Graphics.windowX = 0;\n    Graphics.memoryLocationWindowY = 0xff4a;\n    Graphics.windowY = 0;\n    // Tile Maps And Data\n    Graphics.memoryLocationTileMapSelectZeroStart = 0x9800;\n    Graphics.memoryLocationTileMapSelectOneStart = 0x9c00;\n    Graphics.memoryLocationTileDataSelectZeroStart = 0x8800;\n    Graphics.memoryLocationTileDataSelectOneStart = 0x8000;\n    // Sprites\n    Graphics.memoryLocationSpriteAttributesTable = 0xfe00;\n    // Palettes\n    Graphics.memoryLocationBackgroundPalette = 0xff47;\n    Graphics.memoryLocationSpritePaletteOne = 0xff48;\n    Graphics.memoryLocationSpritePaletteTwo = 0xff49;\n    // Screen data needs to be stored in wasm memory\n    // Save States\n    Graphics.saveStateSlot = 1;\n    return Graphics;\n}());\n// Batch Process Graphics\n// http://gameboy.mongenel.com/dmg/asmmemmap.html and http://gbdev.gg8.se/wiki/articles/Video_Display\n// Function to batch process our graphics after we skipped so many cycles\n// This is not currently checked in memory read/write\nfunction batchProcessGraphics() {\n    var batchProcessCycles = Graphics.batchProcessCycles();\n    while (Graphics.currentCycles >= batchProcessCycles) {\n        updateGraphics(batchProcessCycles);\n        Graphics.currentCycles -= batchProcessCycles;\n    }\n}\n// Inlined because closure compiler inlines\nfunction initializeGraphics() {\n    // Reset Stateful Variables\n    Graphics.currentCycles = 0;\n    Graphics.scanlineCycleCounter = 0x00;\n    Graphics.scanlineRegister = 0;\n    Graphics.scrollX = 0;\n    Graphics.scrollY = 0;\n    Graphics.windowX = 0;\n    Graphics.windowY = 0;\n    Graphics.scanlineRegister = 0x90;\n    if (Cpu.GBCEnabled) {\n        eightBitStoreIntoGBMemory(0xff41, 0x81);\n        // 0xFF42 -> 0xFF43 = 0x00\n        eightBitStoreIntoGBMemory(0xff44, 0x90);\n        // 0xFF45 -> 0xFF46 = 0x00\n        eightBitStoreIntoGBMemory(0xff47, 0xfc);\n        // 0xFF48 -> 0xFF4B = 0x00\n    }\n    else {\n        eightBitStoreIntoGBMemory(0xff41, 0x85);\n        // 0xFF42 -> 0xFF45 = 0x00\n        eightBitStoreIntoGBMemory(0xff46, 0xff);\n        eightBitStoreIntoGBMemory(0xff47, 0xfc);\n        eightBitStoreIntoGBMemory(0xff48, 0xff);\n        eightBitStoreIntoGBMemory(0xff49, 0xff);\n        // 0xFF4A -> 0xFF4B = 0x00\n        // GBC VRAM Banks (Handled by Memory, initializeCartridge)\n    }\n    // Scanline\n    // Bgb says LY is 90 on boot\n    Graphics.scanlineRegister = 0x90;\n    eightBitStoreIntoGBMemory(0xff40, 0x90);\n    // GBC VRAM Banks\n    eightBitStoreIntoGBMemory(0xff4f, 0x00);\n    eightBitStoreIntoGBMemory(0xff70, 0x01);\n    // Override/reset some variables if the boot ROM is enabled\n    if (Cpu.BootROMEnabled) {\n        if (Cpu.GBCEnabled) {\n            // GBC\n            Graphics.scanlineRegister = 0x00;\n            eightBitStoreIntoGBMemory(0xff40, 0x00);\n            eightBitStoreIntoGBMemory(0xff41, 0x80);\n            eightBitStoreIntoGBMemory(0xff44, 0x00);\n        }\n        else {\n            // GB\n            Graphics.scanlineRegister = 0x00;\n            eightBitStoreIntoGBMemory(0xff40, 0x00);\n            eightBitStoreIntoGBMemory(0xff41, 0x84);\n        }\n    }\n    initializeColors();\n}\nfunction updateGraphics(numberOfCycles) {\n    if (Lcd.enabled) {\n        Graphics.scanlineCycleCounter += numberOfCycles;\n        var graphicsDisableScanlineRendering = Config.graphicsDisableScanlineRendering;\n        while (Graphics.scanlineCycleCounter >= Graphics.MAX_CYCLES_PER_SCANLINE()) {\n            // Reset the scanlineCycleCounter\n            // Don't set to zero to catch extra cycles\n            Graphics.scanlineCycleCounter -= Graphics.MAX_CYCLES_PER_SCANLINE();\n            // Move to next scanline\n            // let scanlineRegister: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n            var scanlineRegister = Graphics.scanlineRegister;\n            // Check if we've reached the last scanline\n            if (scanlineRegister === 144) {\n                // Draw the scanline\n                if (!graphicsDisableScanlineRendering) {\n                    _drawScanline(scanlineRegister);\n                }\n                else {\n                    _renderEntireFrame();\n                }\n                // Clear the priority map\n                clearPriorityMap();\n                // Reset the tile cache\n                resetTileCache();\n            }\n            else if (scanlineRegister < 144) {\n                // Draw the scanline\n                if (!graphicsDisableScanlineRendering) {\n                    _drawScanline(scanlineRegister);\n                }\n            }\n            // Post increment the scanline register after drawing\n            // TODO: Need to fix graphics timing\n            if (scanlineRegister > 153) {\n                // Check if we overflowed scanlines\n                // if so, reset our scanline number\n                scanlineRegister = 0;\n            }\n            else {\n                scanlineRegister += 1;\n            }\n            // Store our new scanline value\n            Graphics.scanlineRegister = scanlineRegister;\n            // eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, scanlineRegister);\n        }\n    }\n    // Games like Pokemon crystal want the vblank right as it turns to the value, and not have it increment after\n    // It will break and lead to an infinite loop in crystal\n    // Therefore, we want to be checking/Setting our LCD status after the scanline updates\n    setLcdStatus();\n}\n// TODO: Make this a _drawPixelOnScanline, as values can be updated while drawing a scanline\nfunction _drawScanline(scanlineRegister) {\n    // Get our seleted tile data memory location\n    var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n    if (Lcd.bgWindowTileDataSelect) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n    }\n    // Check if the background is enabled\n    // NOTE: On Gameboy color, Pandocs says this does something completely different\n    // LCDC.0 - 2) CGB in CGB Mode: BG and Window Master Priority\n    // When Bit 0 is cleared, the background and window lose their priority -\n    // the sprites will be always displayed on top of background and window,\n    // independently of the priority flags in OAM and BG Map attributes.\n    // TODO: Enable this different feature for GBC\n    if (Cpu.GBCEnabled || Lcd.bgDisplayEnabled) {\n        // Get our map memory location\n        var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n        if (Lcd.bgTileMapDisplaySelect) {\n            tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n        }\n        // Finally, pass everything to draw the background\n        renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n    }\n    // Check if the window is enabled, and we are currently\n    // Drawing lines on the window\n    if (Lcd.windowDisplayEnabled) {\n        // Get our map memory location\n        var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n        if (Lcd.windowTileMapDisplaySelect) {\n            tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n        }\n        // Finally, pass everything to draw the background\n        renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n    }\n    if (Lcd.spriteDisplayEnable) {\n        // Sprites are enabled, render them!\n        renderSprites(scanlineRegister, Lcd.tallSpriteSize);\n    }\n}\n// Function to render everything for a frame at once\n// This is to improve performance\n// See above for comments on how things are donw\nfunction _renderEntireFrame() {\n    // Scanline needs to be in sync while we draw, thus, we can't shortcut anymore than here\n    for (var i = 0; i <= 144; ++i) {\n        _drawScanline(i);\n    }\n}\n// Function to get the start of a RGB pixel (R, G, B)\n// Inlined because closure compiler inlines\nfunction getRgbPixelStart(x, y) {\n    // Get the pixel number\n    // let pixelNumber: i32 = (y * 160) + x;\n    // Each pixel takes 3 slots, therefore, multiply by 3!\n    return (y * 160 + x) * 3;\n}\n// Also need to store current frame in memory to be read by JS\nfunction setPixelOnFrame(x, y, colorId, color) {\n    // Currently only supports 160x144\n    // Storing in X, then y\n    // So need an offset\n    store(FRAME_LOCATION + getRgbPixelStart(x, y) + colorId, color);\n}\n// Function to shortcut the memory map, and load directly from the VRAM Bank\nfunction loadFromVramBank(gameboyOffset, vramBankId) {\n    var wasmBoyAddress = gameboyOffset - Memory.videoRamLocation + GAMEBOY_INTERNAL_MEMORY_LOCATION + 0x2000 * (vramBankId & 0x01);\n    return load(wasmBoyAddress);\n}\n\n// Returns -1 if no trap found, otherwise returns a value that should be fed for the address\nfunction checkReadTraps(offset) {\n    // Cache globals used multiple times for performance\n    var videoRamLocation = Memory.videoRamLocation;\n    // Try to break early for most common scenario\n    if (offset < videoRamLocation) {\n        return -1;\n    }\n    // Check the graphics mode to see if we can read VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n    if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n        // Can only read/write from VRAM During Modes 0 - 2\n        // See graphics/lcd.ts\n        // TODO: This can do more harm than good in a beta emulator,\n        // requres precise timing, disabling for now\n        // if (Graphics.currentLcdMode > 2) {\n        //   return 0xFF;\n        // }\n        return -1;\n    }\n    // ECHO Ram, E000\tFDFF\tMirror of C000~DDFF (ECHO RAM)\n    // http://gbdev.gg8.se/wiki/articles/Memory_Map\n    if (offset >= Memory.echoRamLocation && offset < Memory.spriteInformationTableLocation) {\n        // Simply return the mirror'd value\n        return eightBitLoadFromGBMemory(offset - 0x2000);\n    }\n    // Check for individal writes\n    // Can only read/write from OAM During Modes 0 - 1\n    // See graphics/lcd.ts\n    if (offset >= Memory.spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n        // Can only read/write from OAM During Mode 2\n        // See graphics/lcd.ts\n        // if (Lcd.currentLcdMode < 2) {\n        // return 0xff;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // return -1;\n        return Lcd.currentLcdMode < 2 ? 0xff : -1;\n    }\n    // CPU\n    if (offset === Cpu.memoryLocationSpeedSwitch) {\n        // TCAGBD, only Bit 7 and 0 are readable, all others are 1\n        var response = 0xff;\n        var currentSpeedSwitchRegister = eightBitLoadFromGBMemory(Cpu.memoryLocationSpeedSwitch);\n        if (!checkBitOnByte(0, currentSpeedSwitchRegister)) {\n            response = resetBitOnByte(0, response);\n        }\n        if (!Cpu.GBCDoubleSpeed) {\n            response = resetBitOnByte(7, response);\n        }\n        return response;\n    }\n    // Graphics\n    // Not batch processing here for performance\n    // batchProcessGraphics();\n    if (offset === Graphics.memoryLocationScanlineRegister) {\n        eightBitStoreIntoGBMemory(offset, Graphics.scanlineRegister);\n        return Graphics.scanlineRegister;\n    }\n    // Sound\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    // TODO: Put these bounds on the Sound Class\n    if (offset >= 0xff10 && offset <= 0xff26) {\n        batchProcessAudio();\n        return SoundRegisterReadTraps(offset);\n    }\n    // FF27 - FF2F not used\n    // Final Wave Table for Channel 3\n    if (offset >= 0xff30 && offset <= 0xff3f) {\n        batchProcessAudio();\n        return -1;\n    }\n    // Timers\n    if (offset === Timers.memoryLocationDividerRegister) {\n        // Divider register in memory is just the upper 8 bits\n        // http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n        var upperDividerRegisterBits = splitHighByte(Timers.dividerRegister);\n        eightBitStoreIntoGBMemory(offset, upperDividerRegisterBits);\n        return upperDividerRegisterBits;\n    }\n    if (offset === Timers.memoryLocationTimerCounter) {\n        eightBitStoreIntoGBMemory(offset, Timers.timerCounter);\n        return Timers.timerCounter;\n    }\n    // Interrupts\n    if (offset === Interrupts.memoryLocationInterruptRequest) {\n        // TCAGB and BGB say the top 5 bits are always 1.\n        return 0xe0 | Interrupts.interruptsRequestedValue;\n    }\n    // Joypad\n    if (offset === Joypad.memoryLocationJoypadRegister) {\n        return getJoypadState();\n    }\n    return -1;\n}\n\n// Load/Read functionality for memory\nfunction eightBitLoadFromGBMemory(gameboyOffset) {\n    return load(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset));\n}\nfunction eightBitLoadFromGBMemoryWithTraps(offset) {\n    if (offset === Breakpoints.readGbMemory) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    var readTrapResult = checkReadTraps(offset);\n    return readTrapResult === -1 ? eightBitLoadFromGBMemory(offset) : readTrapResult;\n}\n// TODO: Rename this to sixteenBitLoadFromGBMemoryWithTraps\n// Inlined because closure compiler inlines\nfunction sixteenBitLoadFromGBMemory(offset) {\n    // Get our low byte\n    var lowByteReadTrapResult = checkReadTraps(offset);\n    var lowByte = lowByteReadTrapResult === -1 ? eightBitLoadFromGBMemory(offset) : lowByteReadTrapResult;\n    // Get the next offset for the second byte\n    var nextOffset = offset + 1;\n    // Get our high byte\n    var highByteReadTrapResult = checkReadTraps(nextOffset);\n    var highByte = highByteReadTrapResult === -1 ? eightBitLoadFromGBMemory(nextOffset) : highByteReadTrapResult;\n    // Concatenate the bytes and return\n    return concatenateBytes(highByte, lowByte);\n}\nfunction loadBooleanDirectlyFromWasmMemory(offset) {\n    return load(offset) > 0;\n}\n\n// WasmBoy memory map:\nvar Memory = /** @class */ (function () {\n    function Memory() {\n    }\n    // Function to save the state of the class\n    Memory.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot), Memory.currentRomBank);\n        store(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot), Memory.currentRamBank);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot), Memory.isRamBankingEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot), Memory.isMBC1RomModeEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot), Memory.isRomOnly);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot), Memory.isMBC1);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot), Memory.isMBC2);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot), Memory.isMBC3);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot), Memory.isMBC5);\n    };\n    // Function to load the save state from memory\n    Memory.loadState = function () {\n        Memory.currentRomBank = load(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot));\n        Memory.currentRamBank = load(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot));\n        Memory.isRamBankingEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot));\n        Memory.isMBC1RomModeEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot));\n        Memory.isRomOnly = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot));\n        Memory.isMBC1 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot));\n        Memory.isMBC2 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot));\n        Memory.isMBC3 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot));\n        Memory.isMBC5 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot));\n    };\n    // ----------------------------------\n    // Gameboy Memory Map\n    // ----------------------------------\n    // https://github.com/AntonioND/giibiiadvance/blob/master/docs/TCAGBD.pdf\n    // http://gameboy.mongenel.com/dmg/asmmemmap.html\n    // using Arrays, first index is start, second is end\n    Memory.cartridgeRomLocation = 0x0000;\n    Memory.switchableCartridgeRomLocation = 0x4000;\n    Memory.videoRamLocation = 0x8000;\n    Memory.cartridgeRamLocation = 0xa000;\n    Memory.internalRamBankZeroLocation = 0xc000;\n    // This ram bank is switchable\n    Memory.internalRamBankOneLocation = 0xd000;\n    Memory.echoRamLocation = 0xe000;\n    Memory.spriteInformationTableLocation = 0xfe00;\n    Memory.spriteInformationTableLocationEnd = 0xfe9f;\n    Memory.unusableMemoryLocation = 0xfea0;\n    Memory.unusableMemoryEndLocation = 0xfeff;\n    // Hardware I/O, 0xFF00 -> 0xFF7F\n    // Zero Page, 0xFF80 -> 0xFFFE\n    // Intterupt Enable Flag, 0xFFFF\n    // ----------------------------------\n    // Rom/Ram Banking\n    // ----------------------------------\n    // http://gbdev.gg8.se/wiki/articles/Memory_Bank_Controllers#MBC3_.28max_2MByte_ROM_and.2For_32KByte_RAM_and_Timer.29\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/banking.html\n    Memory.currentRomBank = 0x00;\n    Memory.currentRamBank = 0x00;\n    Memory.isRamBankingEnabled = false;\n    Memory.isMBC1RomModeEnabled = true;\n    // Cartridge Types\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    Memory.isRomOnly = true;\n    Memory.isMBC1 = false;\n    Memory.isMBC2 = false;\n    Memory.isMBC3 = false;\n    Memory.isMBC5 = false;\n    // DMA\n    Memory.memoryLocationHdmaSourceHigh = 0xff51;\n    Memory.memoryLocationHdmaSourceLow = 0xff52;\n    Memory.memoryLocationHdmaDestinationHigh = 0xff53;\n    Memory.memoryLocationHdmaDestinationLow = 0xff54;\n    Memory.memoryLocationHdmaTrigger = 0xff55;\n    // Cycles accumulated for DMA\n    Memory.DMACycles = 0;\n    // Boolean we will mirror to indicate if Hdma is active\n    Memory.isHblankHdmaActive = false;\n    Memory.hblankHdmaTransferLengthRemaining = 0x00;\n    // Store the source and destination for performance, and update as needed\n    Memory.hblankHdmaSource = 0x00;\n    Memory.hblankHdmaDestination = 0x00;\n    // GBC Registers\n    Memory.memoryLocationGBCVRAMBank = 0xff4f;\n    Memory.memoryLocationGBCWRAMBank = 0xff70;\n    // Save States\n    Memory.saveStateSlot = 4;\n    return Memory;\n}());\n// Inlined because closure compiler inlines\nfunction initializeCartridge() {\n    // Reset stateful variables\n    Memory.isRamBankingEnabled = false;\n    Memory.isMBC1RomModeEnabled = true;\n    // Get our game MBC type from the cartridge header\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    var cartridgeType = eightBitLoadFromGBMemory(0x0147);\n    // Reset our Cartridge types\n    Memory.isRomOnly = cartridgeType === 0x00;\n    Memory.isMBC1 = cartridgeType >= 0x01 && cartridgeType <= 0x03;\n    Memory.isMBC2 = cartridgeType >= 0x05 && cartridgeType <= 0x06;\n    Memory.isMBC3 = cartridgeType >= 0x0f && cartridgeType <= 0x13;\n    Memory.isMBC5 = cartridgeType >= 0x19 && cartridgeType <= 0x1e;\n    Memory.currentRomBank = 0x01;\n    Memory.currentRamBank = 0x00;\n    // Set our GBC Banks\n    eightBitStoreIntoGBMemory(Memory.memoryLocationGBCVRAMBank, 0x00);\n    eightBitStoreIntoGBMemory(Memory.memoryLocationGBCWRAMBank, 0x01);\n}\n\n// WasmBoy memory map:\n\n// Everything Static as class instances just aren't quite there yet\n// https://github.com/AssemblyScript/assemblyscript/blob/master/tests/compiler/showcase.ts\nvar Cpu = /** @class */ (function () {\n    function Cpu() {\n    }\n    Cpu.CLOCK_SPEED = function () {\n        // 2^23, thanks binji!\n        // return Cpu.GBCDoubleSpeed ? 8388608 : 4194304;\n        return 4194304 << Cpu.GBCDoubleSpeed;\n    };\n    // Cycles Per Frame = Clock Speed / fps\n    // So: 4194304 / 59.73\n    Cpu.MAX_CYCLES_PER_FRAME = function () {\n        // return Cpu.GBCDoubleSpeed ? 140448 : 70224;\n        return 70224 << Cpu.GBCDoubleSpeed;\n    };\n    // See section 4.10 of TCAGBD\n    // Cpu Halting explained: https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/db7xnbe/\n    Cpu.enableHalt = function () {\n        if (Interrupts.masterInterruptSwitch) {\n            Cpu.isHaltNormal = true;\n            return;\n        }\n        var haltTypeValue = Interrupts.interruptsEnabledValue & Interrupts.interruptsRequestedValue & 0x1f;\n        if (haltTypeValue === 0) {\n            Cpu.isHaltNoJump = true;\n            return;\n        }\n        Cpu.isHaltBug = true;\n    };\n    Cpu.exitHaltAndStop = function () {\n        Cpu.isHaltNoJump = false;\n        Cpu.isHaltNormal = false;\n        Cpu.isHaltBug = false;\n        Cpu.isStopped = false;\n    };\n    Cpu.isHalted = function () {\n        return Cpu.isHaltNormal || Cpu.isHaltNoJump;\n    };\n    // Function to save the state of the class\n    Cpu.saveState = function () {\n        // Registers\n        store(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot), Cpu.registerA);\n        store(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot), Cpu.registerB);\n        store(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot), Cpu.registerC);\n        store(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot), Cpu.registerD);\n        store(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot), Cpu.registerE);\n        store(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot), Cpu.registerH);\n        store(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot), Cpu.registerL);\n        store(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot), Cpu.registerF);\n        store(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot), Cpu.stackPointer);\n        store(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot), Cpu.programCounter);\n        store(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot), Cpu.currentCycles);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot), Cpu.isHaltNormal);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot), Cpu.isHaltNoJump);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x13, Cpu.saveStateSlot), Cpu.isHaltBug);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x14, Cpu.saveStateSlot), Cpu.isStopped);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x15, Cpu.saveStateSlot), Cpu.BootROMEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x16, Cpu.saveStateSlot), Cpu.GBCEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x17, Cpu.saveStateSlot), Cpu.GBCDoubleSpeed);\n    };\n    // Function to load the save state from memory\n    Cpu.loadState = function () {\n        // Registers\n        Cpu.registerA = load(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot));\n        Cpu.registerB = load(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot));\n        Cpu.registerC = load(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot));\n        Cpu.registerD = load(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot));\n        Cpu.registerE = load(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot));\n        Cpu.registerH = load(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot));\n        Cpu.registerL = load(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot));\n        Cpu.registerF = load(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot));\n        Cpu.stackPointer = load(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot));\n        Cpu.programCounter = load(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot));\n        Cpu.currentCycles = load(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot));\n        Cpu.isHaltNormal = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot));\n        Cpu.isHaltNoJump = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot));\n        Cpu.isHaltBug = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x13, Cpu.saveStateSlot));\n        Cpu.isStopped = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x14, Cpu.saveStateSlot));\n        Cpu.BootROMEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x15, Cpu.saveStateSlot));\n        Cpu.GBCEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x16, Cpu.saveStateSlot));\n        Cpu.GBCDoubleSpeed = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x17, Cpu.saveStateSlot));\n    };\n    // Status to track if we are currently executing the boot rom\n    Cpu.memoryLocationBootROMSwitch = 0xff50;\n    Cpu.BootROMEnabled = false;\n    // Status to track if we are in Gameboy Color Mode, and GBC State\n    Cpu.GBCEnabled = false;\n    // Memory Location for the GBC Speed switch\n    // And the current status\n    Cpu.memoryLocationSpeedSwitch = 0xff4d;\n    Cpu.GBCDoubleSpeed = false;\n    // 8-bit Cpu.registers\n    Cpu.registerA = 0;\n    Cpu.registerB = 0;\n    Cpu.registerC = 0;\n    Cpu.registerD = 0;\n    Cpu.registerE = 0;\n    Cpu.registerH = 0;\n    Cpu.registerL = 0;\n    Cpu.registerF = 0;\n    // 16-bit Cpu.registers\n    Cpu.stackPointer = 0;\n    // Boot rom from 0x00 to 0x99, all games start at 0x100\n    Cpu.programCounter = 0x00;\n    // Current number of cycles, shouldn't execeed max number of cycles\n    Cpu.currentCycles = 0;\n    // HALT and STOP instructions need to stop running opcodes, but simply check timers\n    // https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Matt said is should work to, so it must work!\n    // TCAGBD shows three different HALT states. Therefore, we need to handle each\n    Cpu.isHaltNormal = false;\n    Cpu.isHaltNoJump = false;\n    Cpu.isHaltBug = false;\n    Cpu.isStopped = false;\n    // Save States\n    Cpu.saveStateSlot = 0;\n    return Cpu;\n}());\n// Inlined because closure compiler does so\nfunction initializeCpu() {\n    // Reset all stateful Cpu variables\n    // Cpu.GBCEnabled is done by core/initialize\n    Cpu.GBCDoubleSpeed = false;\n    Cpu.registerA = 0;\n    Cpu.registerB = 0;\n    Cpu.registerC = 0;\n    Cpu.registerD = 0;\n    Cpu.registerE = 0;\n    Cpu.registerH = 0;\n    Cpu.registerL = 0;\n    Cpu.registerF = 0;\n    Cpu.stackPointer = 0;\n    Cpu.programCounter = 0x00;\n    Cpu.currentCycles = 0;\n    Cpu.isHaltNormal = false;\n    Cpu.isHaltNoJump = false;\n    Cpu.isHaltBug = false;\n    Cpu.isStopped = false;\n    // Everything is done by Boot ROM is enabled.\n    if (Cpu.BootROMEnabled) {\n        return;\n    }\n    if (Cpu.GBCEnabled) {\n        // CPU Registers\n        Cpu.registerA = 0x11;\n        Cpu.registerF = 0x80;\n        Cpu.registerB = 0x00;\n        Cpu.registerC = 0x00;\n        Cpu.registerD = 0xff;\n        Cpu.registerE = 0x56;\n        Cpu.registerH = 0x00;\n        Cpu.registerL = 0x0d;\n    }\n    else {\n        // Cpu Registers\n        Cpu.registerA = 0x01;\n        Cpu.registerF = 0xb0;\n        Cpu.registerB = 0x00;\n        Cpu.registerC = 0x13;\n        Cpu.registerD = 0x00;\n        Cpu.registerE = 0xd8;\n        Cpu.registerH = 0x01;\n        Cpu.registerL = 0x4d;\n    }\n    // Cpu Control Flow\n    Cpu.programCounter = 0x100;\n    Cpu.stackPointer = 0xfffe;\n}\n\n// Imports\n// General Logic Instructions\n// Such as the ones found on the CB table and 0x40 - 0xBF\n// NOTE: Only CB table uses these for now, was mostly me realizing that I messed up, trying to be all cute and verbose :p\n// NOTE: TODO: Refactor honestly shouldn't take that long, and may happen once assembly script is improved\nfunction addARegister(register) {\n    var registerA = Cpu.registerA;\n    checkAndSetEightBitHalfCarryFlag(registerA, register);\n    checkAndSetEightBitCarryFlag(registerA, register);\n    registerA = u8Portable(registerA + register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n}\nfunction addAThroughCarryRegister(register) {\n    // Handling flags manually as they require some special overflow\n    // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F adc\n    var registerA = Cpu.registerA;\n    var result = u8Portable(registerA + register + getCarryFlag$$1());\n    setHalfCarryFlag(((u8Portable(registerA ^ register ^ result) & 0x10) != 0));\n    var overflowedResult = u16Portable(registerA + register + getCarryFlag$$1());\n    setCarryFlag(((overflowedResult & 0x100) > 0));\n    Cpu.registerA = result;\n    setZeroFlag$$1((result === 0));\n    setSubtractFlag(0);\n}\nfunction subARegister(register) {\n    // Need to convert the register on one line, and flip the sign on another\n    var negativeRegister = register;\n    negativeRegister = negativeRegister * -1;\n    var registerA = Cpu.registerA;\n    checkAndSetEightBitHalfCarryFlag(registerA, negativeRegister);\n    checkAndSetEightBitCarryFlag(registerA, negativeRegister);\n    registerA = u8Portable(registerA - register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(1);\n}\nfunction subAThroughCarryRegister(register) {\n    // Handling flags manually as they require some special overflow\n    // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F adc\n    var registerA = Cpu.registerA;\n    var result = u8Portable(registerA - register - getCarryFlag$$1());\n    var carryRegisterCheck = u8Portable((registerA ^ register ^ result) & 0x10);\n    setHalfCarryFlag((carryRegisterCheck != 0));\n    var overflowedResult = u16Portable(registerA - register - getCarryFlag$$1());\n    setCarryFlag(((overflowedResult & 0x100) > 0));\n    Cpu.registerA = result;\n    setZeroFlag$$1((result === 0));\n    setSubtractFlag(1);\n}\nfunction andARegister(register) {\n    var registerA = Cpu.registerA & register;\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(1);\n    setCarryFlag(0);\n}\nfunction xorARegister(register) {\n    var registerA = u8Portable(Cpu.registerA ^ register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n}\nfunction orARegister(register) {\n    var registerA = Cpu.registerA | register;\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n}\nfunction cpARegister(register) {\n    // 0xB8 - 0xBF\n    // CP B\n    // 1  4\n    // Z 1 H C\n    var registerA = Cpu.registerA;\n    var negativeRegister = register;\n    negativeRegister = negativeRegister * -1;\n    checkAndSetEightBitHalfCarryFlag(registerA, negativeRegister);\n    checkAndSetEightBitCarryFlag(registerA, negativeRegister);\n    var tempResult = registerA + negativeRegister;\n    setZeroFlag$$1((tempResult === 0));\n    setSubtractFlag(1);\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterLeft(register) {\n    // RLC register 8-bit\n    // Z 0 0 C\n    setCarryFlag(((register & 0x80) === 0x80));\n    register = rotateByteLeft(register);\n    setZeroFlag$$1((register === 0));\n    // Set all other flags to zero\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    // Return the register\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterRight(register) {\n    // RLC register 8-bit\n    // Z 0 0 C\n    // Check for the last bit, to see if it will be carried\n    setCarryFlag(((register & 0x01) > 0));\n    register = rotateByteRight(register);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    // Return the register\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterLeftThroughCarry(register) {\n    // RL register 8-bit\n    // Z 0 0 C\n    // setting has first bit since we need to use carry\n    var hasHighbit = (register & 0x80) === 0x80;\n    register = rotateByteLeftThroughCarry(register);\n    setCarryFlag(hasHighbit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterRightThroughCarry(register) {\n    // RR register 8-bit\n    // Z 0 0 C\n    var hasLowBit = (register & 0x01) === 0x01;\n    register = rotateByteRightThroughCarry(register);\n    setCarryFlag(hasLowBit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftLeftRegister(register) {\n    // SLA register 8-bit\n    // Z 0 0 C\n    var hasHighbit = (register & 0x80) === 0x80;\n    register = u8Portable(register << 1);\n    setCarryFlag(hasHighbit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftRightArithmeticRegister(register) {\n    // SRA register 8-bit\n    // Z 0 0 C\n    // NOTE: This C flag may need to be set to 0;\n    // This preserves the MSB (Most significant bit)\n    var hasHighbit = (register & 0x80) === 0x80;\n    var hasLowbit = (register & 0x01) === 0x01;\n    register = u8Portable(register >> 1);\n    if (hasHighbit) {\n        register = register | 0x80;\n    }\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(hasLowbit);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction swapNibblesOnRegister(register) {\n    // SWAP register 8-bit\n    // Z 0 0 0\n    var highNibble = register & 0xf0;\n    var lowNibble = register & 0x0f;\n    register = u8Portable((lowNibble << 4) | (highNibble >> 4));\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftRightLogicalRegister(register) {\n    // SRA register 8-bit\n    // Z 0 0 C\n    // NOTE: This C flag may need to be set to 0;\n    // This does NOT preserve MSB (most significant bit)\n    var hasLowbit = (register & 0x01) === 0x01;\n    register = u8Portable(register >> 1);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(hasLowbit);\n    return register;\n}\nfunction testBitOnRegister(bitPosition, register) {\n    // BIT bitPosition ,register 8-bit\n    // Z 0 1 -\n    var testByte = 0x01 << bitPosition;\n    var result = register & testByte;\n    setZeroFlag$$1((result === 0x00));\n    setSubtractFlag(0);\n    setHalfCarryFlag(1);\n    return register;\n}\nfunction setBitOnRegister(bitPosition, bitValue, register) {\n    // RES 0,B or SET 0,B depending on bit value\n    if (bitValue > 0) {\n        var setByte = 0x01 << bitPosition;\n        register = register | setByte;\n    }\n    else {\n        // NOT (byte we want)\n        // 0000 0100 becomes 1111 1011\n        var setByte = ~(0x01 << bitPosition);\n        register = register & setByte;\n    }\n    return register;\n}\n// Private function for our relative jumps\nfunction relativeJump(value) {\n    // Need to convert the value to i8, since in this case, u8 can be negative\n    var relativeJumpOffset = i8Portable(value);\n    var programCounter = Cpu.programCounter;\n    programCounter = u16Portable(programCounter + relativeJumpOffset);\n    // Realtive jump, using bgb debugger\n    // and my debugger shows,\n    // on JR you need to jump to the relative jump offset,\n    // However, if the jump fails (such as conditional), only jump +2 in total\n    programCounter = u16Portable(programCounter + 1);\n    Cpu.programCounter = programCounter;\n}\n\n// Imports\n// Handle CB Opcodes\n// NOTE: Program stpes and cycles are standardized depending on the register type\n// NOTE: Doing some funny stuff to get around not having arrays or objects\n// Inlined because closure compiler inlines.\nfunction handleCbOpcode(cbOpcode) {\n    var numberOfCycles = -1;\n    var handledOpcode = false;\n    // The result of our cb logic instruction\n    var instructionRegisterValue = 0;\n    var instructionRegisterResult = 0;\n    // Get our register number by modulo 0x08 (number of registers)\n    // cbOpcode % 0x08\n    var registerNumber = cbOpcode & 0x07;\n    // NOTE: registerNumber = register on CB table. Cpu.registerB = 0, Cpu.registerC = 1....Cpu.registerA = 7\n    switch (registerNumber) {\n        case 0:\n            instructionRegisterValue = Cpu.registerB;\n            break;\n        case 1:\n            instructionRegisterValue = Cpu.registerC;\n            break;\n        case 2:\n            instructionRegisterValue = Cpu.registerD;\n            break;\n        case 3:\n            instructionRegisterValue = Cpu.registerE;\n            break;\n        case 4:\n            instructionRegisterValue = Cpu.registerH;\n            break;\n        case 5:\n            instructionRegisterValue = Cpu.registerL;\n            break;\n        case 6:\n            // Value at register HL\n            // 4 cycles\n            instructionRegisterValue = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            break;\n        case 7:\n            instructionRegisterValue = Cpu.registerA;\n            break;\n    }\n    // Grab the high nibble to perform skips to speed up performance\n    var opcodeHighNibble = cbOpcode & 0xf0;\n    opcodeHighNibble = opcodeHighNibble >> 4;\n    // Send to the correct function\n    switch (opcodeHighNibble) {\n        case 0x00:\n            if (cbOpcode <= 0x07) {\n                // RLC register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterLeft(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x0f) {\n                // RRC register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterRight(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x01:\n            if (cbOpcode <= 0x17) {\n                // RL register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterLeftThroughCarry(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x1f) {\n                // RR register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterRightThroughCarry(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x02:\n            if (cbOpcode <= 0x27) {\n                // SLA register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = shiftLeftRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x2f) {\n                // SRA register 8-bit\n                // Z 0 0 0\n                instructionRegisterResult = shiftRightArithmeticRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x03:\n            if (cbOpcode <= 0x37) {\n                // SWAP register 8-bit\n                // Z 0 0 0\n                instructionRegisterResult = swapNibblesOnRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x3f) {\n                // SRL B\n                // Z 0 0 C\n                instructionRegisterResult = shiftRightLogicalRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x04:\n            if (cbOpcode <= 0x47) {\n                // BIT 0,register 8-bit\n                // Z 0 1 -\n                //TODO: Optimize this not to do logic of setting register back\n                instructionRegisterResult = testBitOnRegister(0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x4f) {\n                // BIT 1,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x05:\n            if (cbOpcode <= 0x57) {\n                // BIT 2,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(2, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x5f) {\n                // BIT 3,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(3, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x06:\n            if (cbOpcode <= 0x67) {\n                // BIT 4,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(4, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x6f) {\n                // BIT 5,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(5, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x07:\n            if (cbOpcode <= 0x77) {\n                // BIT 6,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(6, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x7f) {\n                // BIT 7,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(7, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x08:\n            if (cbOpcode <= 0x87) {\n                // Res 0,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(0, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x8f) {\n                // Res 1,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(1, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x09:\n            if (cbOpcode <= 0x97) {\n                // Res 2,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(2, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x9f) {\n                // Res 3,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(3, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0a:\n            if (cbOpcode <= 0xa7) {\n                // Res 4,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(4, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xaf) {\n                // Res 5,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(5, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0b:\n            if (cbOpcode <= 0xb7) {\n                // Res 6,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(6, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xbf) {\n                // Res 7,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(7, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0c:\n            if (cbOpcode <= 0xc7) {\n                // SET 0,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(0, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xcf) {\n                // SET 1,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(1, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0d:\n            if (cbOpcode <= 0xd7) {\n                // SET 2,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(2, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xdf) {\n                // SET 3,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(3, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0e:\n            if (cbOpcode <= 0xe7) {\n                // SET 4,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(4, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xef) {\n                // SET 5,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(5, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0f:\n            if (cbOpcode <= 0xf7) {\n                // SET 6,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(6, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xff) {\n                // SET 7,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(7, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n    }\n    // Finally Pass back into the correct register\n    switch (registerNumber) {\n        case 0:\n            Cpu.registerB = instructionRegisterResult;\n            break;\n        case 1:\n            Cpu.registerC = instructionRegisterResult;\n            break;\n        case 2:\n            Cpu.registerD = instructionRegisterResult;\n            break;\n        case 3:\n            Cpu.registerE = instructionRegisterResult;\n            break;\n        case 4:\n            Cpu.registerH = instructionRegisterResult;\n            break;\n        case 5:\n            Cpu.registerL = instructionRegisterResult;\n            break;\n        case 6:\n            // Value at register HL\n            // Opcodes 0x40 -> 0x7F only do simple\n            // Bit test, and don't need to be stored back in memory\n            // Thus they take 4 less cycles to run\n            if (opcodeHighNibble < 0x04 || opcodeHighNibble > 0x07) {\n                // Store the result back\n                // 4 cycles\n                eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), instructionRegisterResult);\n            }\n            break;\n        case 7:\n            Cpu.registerA = instructionRegisterResult;\n            break;\n    }\n    // Finally our number of cycles\n    // Set if we handled the opcode\n    if (handledOpcode) {\n        numberOfCycles = 4;\n    }\n    // Return our number of cycles\n    return numberOfCycles;\n}\n\n// Imports\n// Take in any opcode, and decode it, and return the number of cycles\n// Program counter can be gotten from getProgramCounter();\n// Setting return value to i32 instead of u16, as we want to return a negative number on error\n// https://rednex.github.io/rgbds/gbz80.7.html\n// http://pastraiser.com/cpu/gameboy/gameboyopcodes.html\nfunction executeOpcode$$1(opcode) {\n    // Always implement the program counter by one\n    // Any other value can just subtract or add however much offset before reaching this line\n    var programCounter = Cpu.programCounter;\n    programCounter = u16Portable(programCounter + 1);\n    // Check if we are in the halt bug\n    if (Cpu.isHaltBug) {\n        // Need to not increment program counter,\n        // thus, running the next opcode twice\n        // E.g\n        // 0x76 - halt\n        // FA 34 12 - ld a,(1234)\n        // Becomes\n        // FA FA 34 ld a,(34FA)\n        // 12 ld (de),a\n        programCounter = u16Portable(programCounter - 1);\n    }\n    Cpu.programCounter = programCounter;\n    // Split our opcode into a high nibble to speed up performance\n    // Running 255 if statements is slow, even in wasm haha!\n    var opcodeHighNibble = opcode & 0xf0;\n    opcodeHighNibble = opcodeHighNibble >> 4;\n    // NOTE: @binji rule of thumb: it takes 4 cpu cycles to read one byte\n    // Therefore isntructions that use more than just the opcode (databyte one and two) will take at least\n    // 8 cyckles to use getDataByteOne(), and two cycles to use the concatented\n    // Not using a switch statement to avoid cannot redeclare this variable errors\n    // And it would be a ton of work :p\n    switch (opcodeHighNibble) {\n        case 0x00:\n            return handleOpcode0x(opcode);\n        case 0x01:\n            return handleOpcode1x(opcode);\n        case 0x02:\n            return handleOpcode2x(opcode);\n        case 0x03:\n            return handleOpcode3x(opcode);\n        case 0x04:\n            return handleOpcode4x(opcode);\n        case 0x05:\n            return handleOpcode5x(opcode);\n        case 0x06:\n            return handleOpcode6x(opcode);\n        case 0x07:\n            return handleOpcode7x(opcode);\n        case 0x08:\n            return handleOpcode8x(opcode);\n        case 0x09:\n            return handleOpcode9x(opcode);\n        case 0x0a:\n            return handleOpcodeAx(opcode);\n        case 0x0b:\n            return handleOpcodeBx(opcode);\n        case 0x0c:\n            return handleOpcodeCx(opcode);\n        case 0x0d:\n            return handleOpcodeDx(opcode);\n        case 0x0e:\n            return handleOpcodeEx(opcode);\n        default:\n            return handleOpcodeFx(opcode);\n    }\n}\n// Wrapper functions around loading and storing memory, and syncing those cycles\nfunction eightBitLoadSyncCycles(gameboyOffset) {\n    syncCycles(4);\n    return eightBitLoadFromGBMemoryWithTraps(gameboyOffset);\n}\nfunction eightBitStoreSyncCycles(gameboyOffset, value) {\n    syncCycles(4);\n    eightBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\nfunction sixteenBitLoadSyncCycles(gameboyOffset) {\n    syncCycles(8);\n    // sixteen bit load has traps even though it has no label\n    return sixteenBitLoadFromGBMemory(gameboyOffset);\n}\nfunction sixteenBitStoreSyncCycles(gameboyOffset, value) {\n    syncCycles(8);\n    sixteenBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\n// Functions to access the next operands of a opcode, reffering to them as \"dataBytes\"\nfunction getDataByteOne() {\n    syncCycles(4);\n    return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\nfunction getDataByteTwo() {\n    syncCycles(4);\n    return eightBitLoadFromGBMemory(u16Portable(Cpu.programCounter + 1));\n}\n// Get our concatenated databyte one and getDataByteTwo()\n// Find and replace with : getConcatenatedDataByte()\nfunction getConcatenatedDataByte() {\n    return concatenateBytes(getDataByteTwo(), getDataByteOne());\n}\nfunction handleOpcode0x(opcode) {\n    switch (opcode) {\n        case 0x00:\n            // NOP\n            // 1  4\n            // No Operation\n            return 4;\n        case 0x01: {\n            // LD BC,d16\n            // 3  12\n            // 8 cycles\n            var concatenatedDataByte = getConcatenatedDataByte();\n            Cpu.registerB = splitHighByte(concatenatedDataByte);\n            Cpu.registerC = splitLowByte(concatenatedDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x02: {\n            // LD (BC),A\n            // 1  8\n            // () means load into address pointed by BC\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC), Cpu.registerA);\n            return 4;\n        }\n        case 0x03: {\n            // INC BC\n            // 1  8\n            var registerBC3 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            registerBC3++;\n            Cpu.registerB = splitHighByte(registerBC3);\n            Cpu.registerC = splitLowByte(registerBC3);\n            return 8;\n        }\n        case 0x04: {\n            // INC B\n            // 1  4\n            // Z 0 H -\n            var registerB = Cpu.registerB;\n            checkAndSetEightBitHalfCarryFlag(registerB, 1);\n            registerB = u8Portable(registerB + 1);\n            Cpu.registerB = registerB;\n            setZeroFlag$$1((registerB === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x05: {\n            // DEC B\n            // 1  4\n            // Z 1 H -\n            var registerB = Cpu.registerB;\n            checkAndSetEightBitHalfCarryFlag(registerB, -1);\n            registerB = u8Portable(registerB - 1);\n            Cpu.registerB = registerB;\n            setZeroFlag$$1((registerB === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x06: {\n            // LD B,d8\n            // 2  8\n            // 4 cycles\n            Cpu.registerB = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x07: {\n            // RLCA\n            // 1  4\n            // 0 0 0 C\n            // Check for the carry\n            var registerA = Cpu.registerA;\n            setCarryFlag(((registerA & 0x80) === 0x80));\n            Cpu.registerA = rotateByteLeft(registerA);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n        case 0x08: {\n            // LD (a16),SP\n            // 3  20\n            // Load the stack pointer into the 16 bit address represented by the two data bytes\n            // 16 cycles, 8 from data byte, 8 from sixteenbit store\n            sixteenBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.stackPointer);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x09: {\n            // ADD HL,BC\n            // 1 8\n            // - 0 H C\n            var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            var registerBC9 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerBC9, false);\n            var result = u16Portable((registerHL + registerBC9));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x0a: {\n            // LD A,(BC)\n            // 1 8\n            // 4 cycles from load\n            Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC));\n            return 4;\n        }\n        case 0x0b: {\n            // DEC BC\n            // 1  8\n            var registerBCB = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            registerBCB = u16Portable(registerBCB - 1);\n            Cpu.registerB = splitHighByte(registerBCB);\n            Cpu.registerC = splitLowByte(registerBCB);\n            return 8;\n        }\n        case 0x0c: {\n            // INC C\n            // 1  4\n            // Z 0 H -\n            var registerC = Cpu.registerC;\n            checkAndSetEightBitHalfCarryFlag(registerC, 1);\n            registerC = u8Portable(registerC + 1);\n            Cpu.registerC = registerC;\n            setZeroFlag$$1((registerC === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x0d: {\n            // DEC C\n            // 1  4\n            // Z 1 H -\n            var registerC = Cpu.registerC;\n            checkAndSetEightBitHalfCarryFlag(registerC, -1);\n            registerC = u8Portable(registerC - 1);\n            Cpu.registerC = registerC;\n            setZeroFlag$$1((registerC === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x0e: {\n            // LD C,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerC = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x0f: {\n            // RRCA\n            // 1 4\n            // 0 0 0 C\n            // Check for the last bit, to see if it will be carried\n            var registerA = Cpu.registerA;\n            setCarryFlag(((registerA & 0x01) > 0));\n            Cpu.registerA = rotateByteRight(registerA);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode1x(opcode) {\n    switch (opcode) {\n        case 0x10: {\n            // STOP 0\n            // 2 4\n            // Enter CPU very low power mode. Also used to switch between double and normal speed CPU modes in GBC.\n            // Meaning Don't Decode anymore opcodes , or updated the LCD until joypad interrupt (or when button is pressed if I am wrong)\n            // See HALT\n            // If we are in gameboy color mode, set the new speed\n            if (Cpu.GBCEnabled) {\n                // 4 cycles\n                var speedSwitch = eightBitLoadSyncCycles(Cpu.memoryLocationSpeedSwitch);\n                if (checkBitOnByte(0, speedSwitch)) {\n                    // Reset the prepare bit\n                    speedSwitch = resetBitOnByte(0, speedSwitch);\n                    // Switch to the new mode, and set the speed switch to the OTHER speed, to represent our new speed\n                    if (!checkBitOnByte(7, speedSwitch)) {\n                        Cpu.GBCDoubleSpeed = true;\n                        speedSwitch = setBitOnByte(7, speedSwitch);\n                    }\n                    else {\n                        Cpu.GBCDoubleSpeed = false;\n                        speedSwitch = resetBitOnByte(7, speedSwitch);\n                    }\n                    // Store the final speed switch\n                    // 4 cycles\n                    eightBitStoreSyncCycles(Cpu.memoryLocationSpeedSwitch, speedSwitch);\n                    // Cycle accurate gameboy docs says this takes 76 clocks\n                    // 76 - 8 cycles (from load/store) = 68\n                    return 68;\n                }\n            }\n            // NOTE: This breaks Blarggs CPU tests if CGB Stop is not implemented\n            Cpu.isStopped = true;\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x11: {\n            // LD DE,d16\n            // 3  12\n            // 8 cycles\n            var concatenatedDataByte = getConcatenatedDataByte();\n            Cpu.registerD = splitHighByte(concatenatedDataByte);\n            Cpu.registerE = splitLowByte(concatenatedDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x12: {\n            // LD (DE),A\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerD, Cpu.registerE), Cpu.registerA);\n            return 4;\n        }\n        case 0x13: {\n            // INC DE\n            // 1 8\n            var registerDE3 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            registerDE3 = u16Portable(registerDE3 + 1);\n            Cpu.registerD = splitHighByte(registerDE3);\n            Cpu.registerE = splitLowByte(registerDE3);\n            return 8;\n        }\n        case 0x14: {\n            // INC D\n            // 1  4\n            // Z 0 H -\n            var registerD = Cpu.registerD;\n            checkAndSetEightBitHalfCarryFlag(registerD, 1);\n            registerD = u8Portable(registerD + 1);\n            Cpu.registerD = registerD;\n            setZeroFlag$$1((Cpu.registerD === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x15: {\n            // DEC D\n            // 1  4\n            // Z 1 H -\n            var registerD = Cpu.registerD;\n            checkAndSetEightBitHalfCarryFlag(registerD, -1);\n            registerD = u8Portable(registerD - 1);\n            Cpu.registerD = registerD;\n            setZeroFlag$$1((Cpu.registerD === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x16: {\n            // LD D,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerD = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x17: {\n            // RLA\n            // 1 4\n            // 0 0 0 C\n            // Check for the carry\n            // setting has first bit since we need to use carry\n            var hasHighbit = (Cpu.registerA & 0x80) === 0x80;\n            Cpu.registerA = rotateByteLeftThroughCarry(Cpu.registerA);\n            // OR the carry flag to the end\n            setCarryFlag(hasHighbit);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n        case 0x18: {\n            // JR r8\n            // 2  12\n            // NOTE: Discoved dataByte is signed\n            // However the relative Jump Function handles this\n            // 4 cycles\n            relativeJump(getDataByteOne());\n            return 8;\n        }\n        // Relative Jump Function Handles program counter\n        case 0x19: {\n            // ADD HL,DE\n            // 1  8\n            // - 0 H C\n            var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            var registerDE9 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerDE9, false);\n            var result = u16Portable((registerHL + registerDE9));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x1a: {\n            // LD A,(DE)\n            // 1 8\n            var registerDEA = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerDEA);\n            return 4;\n        }\n        case 0x1b: {\n            // DEC DE\n            // 1 8\n            var registerDEB = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            registerDEB = u16Portable(registerDEB - 1);\n            Cpu.registerD = splitHighByte(registerDEB);\n            Cpu.registerE = splitLowByte(registerDEB);\n            return 8;\n        }\n        case 0x1c: {\n            // INC E\n            // 1  4\n            // Z 0 H -\n            var registerE = Cpu.registerE;\n            checkAndSetEightBitHalfCarryFlag(registerE, 1);\n            registerE = u8Portable(registerE + 1);\n            Cpu.registerE = registerE;\n            setZeroFlag$$1((registerE === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x1d: {\n            // DEC E\n            // 1  4\n            // Z 1 H -\n            var registerE = Cpu.registerE;\n            checkAndSetEightBitHalfCarryFlag(registerE, -1);\n            registerE = u8Portable(registerE - 1);\n            Cpu.registerE = registerE;\n            setZeroFlag$$1((registerE === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x1e: {\n            // LD E,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerE = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x1f: {\n            // RRA\n            // 1 4\n            // 0 0 0 C\n            // Check for the carry\n            // setting has low bit since we need to use carry\n            var hasLowBit = (Cpu.registerA & 0x01) === 0x01;\n            Cpu.registerA = rotateByteRightThroughCarry(Cpu.registerA);\n            setCarryFlag(hasLowBit);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode2x(opcode) {\n    switch (opcode) {\n        case 0x20: {\n            // JR NZ,r8\n            // 2  12/8\n            // NOTE: NZ stands for not [flag], so in this case, not zero flag\n            // Also, / means, if condition. so if met, 12 cycles, otherwise 8 cycles\n            if (getZeroFlag$$1() === 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump Funciton handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x21: {\n            // LD HL,d16\n            // 3  12\n            // 8 cycles\n            var sixteenBitDataByte = getConcatenatedDataByte();\n            Cpu.registerH = splitHighByte(sixteenBitDataByte);\n            Cpu.registerL = splitLowByte(sixteenBitDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x22: {\n            // LD (HL+),A\n            // 1 8\n            var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n            registerHL2 = u16Portable(registerHL2 + 1);\n            Cpu.registerH = splitHighByte(registerHL2);\n            Cpu.registerL = splitLowByte(registerHL2);\n            return 4;\n        }\n        case 0x23: {\n            // INC HL\n            // 1  8\n            var registerHL3 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            registerHL3 = u16Portable(registerHL3 + 1);\n            Cpu.registerH = splitHighByte(registerHL3);\n            Cpu.registerL = splitLowByte(registerHL3);\n            return 8;\n        }\n        case 0x24: {\n            // INC H\n            // 1  4\n            // Z 0 H -\n            var registerH = Cpu.registerH;\n            checkAndSetEightBitHalfCarryFlag(registerH, 1);\n            registerH = u8Portable(registerH + 1);\n            Cpu.registerH = registerH;\n            setZeroFlag$$1((registerH === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x25: {\n            // DEC H\n            // 1  4\n            // Z 1 H -\n            var registerH = Cpu.registerH;\n            checkAndSetEightBitHalfCarryFlag(registerH, -1);\n            registerH = u8Portable(registerH - 1);\n            Cpu.registerH = registerH;\n            setZeroFlag$$1((registerH === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x26: {\n            // LD H,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerH = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x27: {\n            // DAA\n            // 1 4\n            // Z - 0 C\n            var adjustedRegister = 0;\n            var adjustment = 0;\n            if (getHalfCarryFlag() > 0) {\n                adjustment = adjustment | 0x06;\n            }\n            if (getCarryFlag$$1() > 0) {\n                adjustment = adjustment | 0x60;\n            }\n            var registerA = Cpu.registerA;\n            if (getSubtractFlag() > 0) {\n                adjustedRegister = u8Portable(registerA - adjustment);\n            }\n            else {\n                if ((registerA & 0x0f) > 0x09) {\n                    adjustment = adjustment | 0x06;\n                }\n                if (registerA > 0x99) {\n                    adjustment = adjustment | 0x60;\n                }\n                adjustedRegister = u8Portable(registerA + adjustment);\n            }\n            // Now set our flags to the correct values\n            setZeroFlag$$1((adjustedRegister === 0));\n            setCarryFlag(((adjustment & 0x60) !== 0));\n            setHalfCarryFlag(0);\n            Cpu.registerA = adjustedRegister;\n            return 4;\n        }\n        case 0x28: {\n            // JR Z,r8\n            // 2  12/8\n            if (getZeroFlag$$1() > 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump funciton handles pogram counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x29: {\n            // ADD HL,HL\n            // 1  8\n            // - 0 H C\n            var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL9, registerHL9, false);\n            registerHL9 = u16Portable(registerHL9 * 2);\n            Cpu.registerH = splitHighByte(registerHL9);\n            Cpu.registerL = splitLowByte(registerHL9);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x2a: {\n            // LD A,(HL+)\n            // 1  8\n            var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n            registerHLA = u16Portable(registerHLA + 1);\n            Cpu.registerH = splitHighByte(registerHLA);\n            Cpu.registerL = splitLowByte(registerHLA);\n            return 4;\n        }\n        case 0x2b: {\n            // DEC HL\n            // 1 8\n            var registerHLB = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            registerHLB = u16Portable(registerHLB - 1);\n            Cpu.registerH = splitHighByte(registerHLB);\n            Cpu.registerL = splitLowByte(registerHLB);\n            return 8;\n        }\n        case 0x2c: {\n            // INC L\n            // 1  4\n            // Z 0 H -\n            var registerL = Cpu.registerL;\n            checkAndSetEightBitHalfCarryFlag(registerL, 1);\n            registerL = u8Portable(registerL + 1);\n            Cpu.registerL = registerL;\n            setZeroFlag$$1((registerL === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x2d: {\n            // DEC L\n            // 1  4\n            // Z 1 H -\n            var registerL = Cpu.registerL;\n            checkAndSetEightBitHalfCarryFlag(registerL, -1);\n            registerL = u8Portable(registerL - 1);\n            Cpu.registerL = registerL;\n            setZeroFlag$$1((registerL === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x2e: {\n            // LD L,d8\n            // 2  8\n            // 4 cycles\n            Cpu.registerL = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x2f: {\n            // CPL\n            // 1 4\n            // - 1 1 -\n            Cpu.registerA = ~Cpu.registerA;\n            setSubtractFlag(1);\n            setHalfCarryFlag(1);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode3x(opcode) {\n    switch (opcode) {\n        case 0x30: {\n            // JR NC,r8\n            // 2 12 / 8\n            if (getCarryFlag$$1() === 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump function handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x31: {\n            // LD SP,d16\n            // 3 12\n            // 8 cycles\n            Cpu.stackPointer = getConcatenatedDataByte();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x32: {\n            // LD (HL-),A\n            // 1 8\n            var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n            registerHL2 = u16Portable(registerHL2 - 1);\n            Cpu.registerH = splitHighByte(registerHL2);\n            Cpu.registerL = splitLowByte(registerHL2);\n            return 4;\n        }\n        case 0x33: {\n            // INC SP\n            // 1 8\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + 1);\n            return 8;\n        }\n        case 0x34: {\n            // INC (HL)\n            // 1  12\n            // Z 0 H -\n            var registerHL4 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            var valueAtHL4 = eightBitLoadSyncCycles(registerHL4);\n            // Creating a varible for this to fix assemblyscript overflow bug\n            // Requires explicit casting\n            // https://github.com/AssemblyScript/assemblyscript/issues/26\n            var incrementer = 1;\n            checkAndSetEightBitHalfCarryFlag(valueAtHL4, incrementer);\n            valueAtHL4 = u8Portable(valueAtHL4 + incrementer);\n            setZeroFlag$$1((valueAtHL4 === 0));\n            setSubtractFlag(0);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL4, valueAtHL4);\n            return 4;\n        }\n        case 0x35: {\n            // DEC (HL)\n            // 1  12\n            // Z 1 H -\n            var registerHL5 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            var valueAtHL5 = eightBitLoadSyncCycles(registerHL5);\n            // NOTE: This opcode may not overflow correctly,\n            // Please see previous opcode\n            checkAndSetEightBitHalfCarryFlag(valueAtHL5, -1);\n            valueAtHL5 = u8Portable(valueAtHL5 - 1);\n            setZeroFlag$$1((valueAtHL5 === 0));\n            setSubtractFlag(1);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL5, valueAtHL5);\n            return 4;\n        }\n        case 0x36: {\n            // LD (HL),d8\n            // 2  12\n            // 8 cycles, 4 from store, 4 from data byte\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x37: {\n            // SCF\n            // 1  4\n            // - 0 0 1\n            // Simply set the carry flag\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            setCarryFlag(1);\n            return 4;\n        }\n        case 0x38: {\n            // JR C,r8\n            // 2 12/8\n            if (getCarryFlag$$1() === 1) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump Funciton handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x39: {\n            // ADD HL,SP\n            // 1 8\n            // - 0 H C\n            var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL9, Cpu.stackPointer, false);\n            var result = u16Portable((registerHL9 + Cpu.stackPointer));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x3a: {\n            // LD A,(HL-)\n            // 1 8\n            var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n            registerHLA = u16Portable(registerHLA - 1);\n            Cpu.registerH = splitHighByte(registerHLA);\n            Cpu.registerL = splitLowByte(registerHLA);\n            return 4;\n        }\n        case 0x3b: {\n            // DEC SP\n            // 1 8\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer - 1);\n            return 8;\n        }\n        case 0x3c: {\n            // INC A\n            // 1  4\n            // Z 0 H -\n            var registerA = Cpu.registerA;\n            checkAndSetEightBitHalfCarryFlag(registerA, 1);\n            registerA = u8Portable(registerA + 1);\n            Cpu.registerA = registerA;\n            setZeroFlag$$1((registerA === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x3d: {\n            // DEC A\n            // 1  4\n            // Z 1 H -\n            var registerA = Cpu.registerA;\n            checkAndSetEightBitHalfCarryFlag(registerA, -1);\n            registerA = u8Portable(registerA - 1);\n            Cpu.registerA = registerA;\n            setZeroFlag$$1((registerA === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x3e: {\n            // LD A,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerA = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x3f: {\n            // CCF\n            // 1 4\n            // - 0 0 C\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            setCarryFlag((getCarryFlag$$1() <= 0));\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode4x(opcode) {\n    switch (opcode) {\n        case 0x40:\n            // LD B,B\n            // 1 4\n            // Load B into B, Do nothing\n            return 4;\n        case 0x41:\n            // LD B,C\n            // 1 4\n            Cpu.registerB = Cpu.registerC;\n            return 4;\n        case 0x42:\n            // LD B,D\n            // 1 4\n            Cpu.registerB = Cpu.registerD;\n            return 4;\n        case 0x43:\n            // LD B,E\n            // 1 4\n            Cpu.registerB = Cpu.registerE;\n            return 4;\n        case 0x44:\n            // LD B,H\n            // 1 4\n            Cpu.registerB = Cpu.registerH;\n            return 4;\n        case 0x45:\n            // LD B,L\n            // 1 4\n            Cpu.registerB = Cpu.registerL;\n            return 4;\n        case 0x46:\n            // LD B,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerB = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x47:\n            // LD B,A\n            // 1 4\n            Cpu.registerB = Cpu.registerA;\n            return 4;\n        case 0x48:\n            // LD C,B\n            // 1 4\n            Cpu.registerC = Cpu.registerB;\n            return 4;\n        case 0x49:\n            // LD C,C\n            // 1 4\n            // Do nothing\n            return 4;\n        case 0x4a:\n            // LD C,D\n            // 1 4\n            Cpu.registerC = Cpu.registerD;\n            return 4;\n        case 0x4b:\n            // LD C,E\n            // 1 4\n            Cpu.registerC = Cpu.registerE;\n            return 4;\n        case 0x4c:\n            // LD C,H\n            // 1 4\n            Cpu.registerC = Cpu.registerH;\n            return 4;\n        case 0x4d:\n            // LD C,L\n            // 1 4\n            Cpu.registerC = Cpu.registerL;\n            return 4;\n        case 0x4e:\n            // LD C,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerC = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x4f:\n            // LD C,A\n            // 1 4\n            Cpu.registerC = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode5x(opcode) {\n    switch (opcode) {\n        case 0x50:\n            // LD D,B\n            // 1 4\n            Cpu.registerD = Cpu.registerB;\n            return 4;\n        case 0x51:\n            // LD D,C\n            // 1 4\n            Cpu.registerD = Cpu.registerC;\n            return 4;\n        case 0x52:\n            // LD D,D\n            // 1 4\n            // Do Nothing\n            return 4;\n        case 0x53:\n            // LD D,E\n            // 1 4\n            Cpu.registerD = Cpu.registerE;\n            return 4;\n        case 0x54:\n            // LD D,H\n            // 1 4\n            Cpu.registerD = Cpu.registerH;\n            return 4;\n        case 0x55:\n            // LD D,L\n            // 1 4\n            Cpu.registerD = Cpu.registerL;\n            return 4;\n        case 0x56:\n            // LD D,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerD = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x57:\n            // LD D,A\n            // 1 4\n            Cpu.registerD = Cpu.registerA;\n            return 4;\n        case 0x58:\n            // LD E,B\n            // 1 4\n            Cpu.registerE = Cpu.registerB;\n            return 4;\n        case 0x59:\n            // LD E,C\n            // 1 4\n            Cpu.registerE = Cpu.registerC;\n            return 4;\n        case 0x5a:\n            // LD E,D\n            // 1 4\n            Cpu.registerE = Cpu.registerD;\n            return 4;\n        case 0x5b:\n            // LD E,E\n            // 1 4\n            // Do Nothing\n            return 4;\n        case 0x5c:\n            // LD E,H\n            // 1 4\n            Cpu.registerE = Cpu.registerH;\n            return 4;\n        case 0x5d:\n            // LD E,L\n            // 1 4\n            Cpu.registerE = Cpu.registerL;\n            return 4;\n        case 0x5e:\n            // LD E,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x5f:\n            // LD E,A\n            // 1 4\n            Cpu.registerE = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode6x(opcode) {\n    switch (opcode) {\n        case 0x60:\n            // LD H,B\n            // 1 4\n            Cpu.registerH = Cpu.registerB;\n            return 4;\n        case 0x61:\n            // LD H,C\n            // 1 4\n            Cpu.registerH = Cpu.registerC;\n            return 4;\n        case 0x62:\n            // LD H,D\n            // 1 4\n            Cpu.registerH = Cpu.registerD;\n            return 4;\n        case 0x63:\n            // LD H,E\n            // 1 4\n            Cpu.registerH = Cpu.registerE;\n            return 4;\n        case 0x64:\n            // LD H,H\n            // 1 4\n            Cpu.registerH = Cpu.registerH;\n            return 4;\n        case 0x65:\n            // LD H,L\n            // 1 4\n            Cpu.registerH = Cpu.registerL;\n            return 4;\n        case 0x66:\n            // LD H,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerH = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x67:\n            // LD H,A\n            // 1 4\n            Cpu.registerH = Cpu.registerA;\n            return 4;\n        case 0x68:\n            // LD L,B\n            // 1 4\n            Cpu.registerL = Cpu.registerB;\n            return 4;\n        case 0x69:\n            // LD L,C\n            // 1 4\n            Cpu.registerL = Cpu.registerC;\n            return 4;\n        case 0x6a:\n            // LD L,D\n            // 1 4\n            Cpu.registerL = Cpu.registerD;\n            return 4;\n        case 0x6b:\n            // LD L,E\n            // 1 4\n            Cpu.registerL = Cpu.registerE;\n            return 4;\n        case 0x6c:\n            // LD L,H\n            // 1 4\n            Cpu.registerL = Cpu.registerH;\n            return 4;\n        case 0x6d:\n            // LD L,L\n            // 1 4\n            Cpu.registerL = Cpu.registerL;\n            return 4;\n        case 0x6e:\n            // LD L,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerL = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x6f:\n            // LD L,A\n            // 1 4\n            Cpu.registerL = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode7x(opcode) {\n    switch (opcode) {\n        case 0x70:\n            // LD (HL),B\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerB);\n            return 4;\n        case 0x71:\n            // LD (HL),C\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerC);\n            return 4;\n        case 0x72:\n            // LD (HL),D\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerD);\n            return 4;\n        case 0x73:\n            // LD (HL),E\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerE);\n            return 4;\n        case 0x74:\n            // LD (HL),H\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerH);\n            return 4;\n        case 0x75:\n            // LD (HL),L\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerL);\n            return 4;\n        case 0x76:\n            // HALT\n            // 1 4\n            // Enter CPU very low power mode\n            // Meaning Don't Decode anymore opcodes until an interrupt occurs\n            // Still need to do timers and things\n            // Can't Halt during an HDMA\n            // https://gist.github.com/drhelius/3394856\n            if (!Memory.isHblankHdmaActive) {\n                Cpu.enableHalt();\n            }\n            return 4;\n        case 0x77:\n            // LD (HL),A\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerA);\n            return 4;\n        case 0x78:\n            // LD A,B\n            // 1 4\n            Cpu.registerA = Cpu.registerB;\n            return 4;\n        case 0x79:\n            // LD A,C\n            // 1 4\n            Cpu.registerA = Cpu.registerC;\n            return 4;\n        case 0x7a:\n            // LD A,D\n            // 1 4\n            Cpu.registerA = Cpu.registerD;\n            return 4;\n        case 0x7b:\n            // LD A,E\n            // 1 4\n            Cpu.registerA = Cpu.registerE;\n            return 4;\n        case 0x7c:\n            // LD A,H\n            // 1 4\n            Cpu.registerA = Cpu.registerH;\n            return 4;\n        case 0x7d:\n            // LD A,L\n            // 1 4\n            Cpu.registerA = Cpu.registerL;\n            return 4;\n        case 0x7e:\n            // LD A,(HL)\n            // 1 8\n            // NOTE: Thanks to @binji for catching that this should be 8 cycles, not 4\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x7f:\n            // LD A,A\n            // 1 4\n            // Do Nothing\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode8x(opcode) {\n    switch (opcode) {\n        case 0x80:\n            // ADD A,B\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerB);\n            return 4;\n        case 0x81:\n            // ADD A,C\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerC);\n            return 4;\n        case 0x82:\n            // ADD A,D\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerD);\n            return 4;\n        case 0x83:\n            // ADD A,E\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerE);\n            return 4;\n        case 0x84:\n            // ADD A,H\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerH);\n            return 4;\n        case 0x85:\n            // ADD A,L\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerL);\n            return 4;\n        case 0x86:\n            // ADD A,(HL)\n            // 1 8\n            // Z 0 H C\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            addARegister(valueAtHL6);\n            return 4;\n        case 0x87:\n            // ADD A,A\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerA);\n            return 4;\n        case 0x88:\n            // ADC A,B\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerB);\n            return 4;\n        case 0x89:\n            // ADC A,C\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerC);\n            return 4;\n        case 0x8a:\n            // ADC A,D\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerD);\n            return 4;\n        case 0x8b:\n            // ADC A,E\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerE);\n            return 4;\n        case 0x8c:\n            // ADC A,H\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerH);\n            return 4;\n        case 0x8d:\n            // ADC A,L\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerL);\n            return 4;\n        case 0x8e:\n            // ADC A,(HL)\n            // 1 8\n            // Z 0 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            addAThroughCarryRegister(valueAtHLE);\n            return 4;\n        case 0x8f:\n            // ADC A,A\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode9x(opcode) {\n    switch (opcode) {\n        case 0x90:\n            // SUB B\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerB);\n            return 4;\n        case 0x91:\n            // SUB C\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerC);\n            return 4;\n        case 0x92:\n            // SUB D\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerD);\n            return 4;\n        case 0x93:\n            // SUB E\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerE);\n            return 4;\n        case 0x94:\n            // SUB H\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerH);\n            return 4;\n        case 0x95:\n            // SUB L\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerL);\n            return 4;\n        case 0x96:\n            // SUB (HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            subARegister(valueAtHL6);\n            return 4;\n        case 0x97:\n            // SUB A\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerA);\n            return 4;\n        case 0x98:\n            // SBC A,B\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerB);\n            return 4;\n        case 0x99:\n            // SBC A,C\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerC);\n            return 4;\n        case 0x9a:\n            // SBC A,D\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerD);\n            return 4;\n        case 0x9b:\n            // SBC A,E\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerE);\n            return 4;\n        case 0x9c:\n            // SBC A,H\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerH);\n            return 4;\n        case 0x9d:\n            // SBC A,L\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerL);\n            return 4;\n        case 0x9e:\n            // SBC A,(HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            subAThroughCarryRegister(valueAtHLE);\n            return 4;\n        case 0x9f:\n            // SBC A,A\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeAx(opcode) {\n    switch (opcode) {\n        case 0xa0:\n            // AND B\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerB);\n            return 4;\n        case 0xa1:\n            // AND C\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerC);\n            return 4;\n        case 0xa2:\n            // AND D\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerD);\n            return 4;\n        case 0xa3:\n            // AND E\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerE);\n            return 4;\n        case 0xa4:\n            // AND H\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerH);\n            return 4;\n        case 0xa5:\n            // AND L\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerL);\n            return 4;\n        case 0xa6:\n            // AND (HL)\n            // 1  8\n            // Z 0 1 0\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            andARegister(valueAtHL6);\n            return 4;\n        case 0xa7:\n            // AND A\n            // 1  4\n            // Z 0 1 0\n            // NOTE: & Yourself, does nothing\n            andARegister(Cpu.registerA);\n            return 4;\n        case 0xa8:\n            // XOR B\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerB);\n            return 4;\n        case 0xa9:\n            // XOR C\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerC);\n            return 4;\n        case 0xaa:\n            // XOR D\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerD);\n            return 4;\n        case 0xab:\n            // XOR E\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerE);\n            return 4;\n        case 0xac:\n            // XOR H\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerH);\n            return 4;\n        case 0xad:\n            // XOR L\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerL);\n            return 4;\n        case 0xae:\n            // XOR (HL)\n            // 1  8\n            // Z 0 0 0\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            xorARegister(valueAtHLE);\n            return 4;\n        case 0xaf:\n            // XOR A\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeBx(opcode) {\n    switch (opcode) {\n        case 0xb0:\n            // OR B\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerB);\n            return 4;\n        case 0xb1:\n            // OR C\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerC);\n            return 4;\n        case 0xb2:\n            // OR D\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerD);\n            return 4;\n        case 0xb3:\n            // OR E\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerE);\n            return 4;\n        case 0xb4:\n            // OR H\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerH);\n            return 4;\n        case 0xb5:\n            // OR L\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerL);\n            return 4;\n        case 0xb6:\n            // OR (HL)\n            // 1  8\n            // Z 0 0 0\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            orARegister(valueAtHL6);\n            return 4;\n        case 0xb7:\n            // OR A\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerA);\n            return 4;\n        case 0xb8:\n            // CP B\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerB);\n            return 4;\n        case 0xb9:\n            // CP C\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerC);\n            return 4;\n        case 0xba:\n            // CP D\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerD);\n            return 4;\n        case 0xbb:\n            // CP E\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerE);\n            return 4;\n        case 0xbc:\n            // CP H\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerH);\n            return 4;\n        case 0xbd:\n            // CP L\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerL);\n            return 4;\n        case 0xbe:\n            // CP (HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            cpARegister(valueAtHLE);\n            return 4;\n        case 0xbf:\n            // CP A\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeCx(opcode) {\n    switch (opcode) {\n        case 0xc0: {\n            // RET NZ\n            // 1  20/8\n            if (getZeroFlag$$1() === 0) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xc1: {\n            // POP BC\n            // 1  12\n            // 8 cycles\n            var registerBC1 = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n            Cpu.registerB = splitHighByte(registerBC1);\n            Cpu.registerC = splitLowByte(registerBC1);\n            return 4;\n        }\n        case 0xc2: {\n            // JP NZ,a16\n            // 3  16/12\n            if (getZeroFlag$$1() === 0) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xc3: {\n            // JP a16\n            // 3  16\n            // 8 cycles\n            Cpu.programCounter = getConcatenatedDataByte();\n            return 8;\n        }\n        case 0xc4: {\n            // CALL NZ,a16\n            // 3  24/12\n            if (getZeroFlag$$1() === 0) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xc5: {\n            // PUSH BC\n            // 1  16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerB, Cpu.registerC));\n            return 8;\n        }\n        case 0xc6: {\n            // ADD A,d8\n            // 2 8\n            // Z 0 H C\n            // 4 cycles\n            addARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xc7: {\n            // RST 00H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x00;\n            return 8;\n        }\n        case 0xc8: {\n            // RET Z\n            // 1  20/8\n            if (getZeroFlag$$1() === 1) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xc9: {\n            // RET\n            // 1 16\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            return 8;\n        }\n        case 0xca: {\n            // JP Z,a16\n            // 3 16/12\n            if (getZeroFlag$$1() === 1) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xcb: {\n            // PREFIX CB\n            // 1  4\n            // 4 cycles\n            var cbCycles = handleCbOpcode(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return cbCycles;\n        }\n        case 0xcc: {\n            // CALL Z,a16\n            // 3  24/12\n            if (getZeroFlag$$1() === 1) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter + 2);\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xcd: {\n            // CALL a16\n            // 3  24\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n            // 8 cycles\n            Cpu.programCounter = getConcatenatedDataByte();\n            return 8;\n        }\n        case 0xce: {\n            // ADC A,d8\n            // 2  8\n            // Z 0 H C\n            // 4 cycles\n            addAThroughCarryRegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xcf: {\n            // RST 08H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x08;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeDx(opcode) {\n    switch (opcode) {\n        case 0xd0: {\n            // RET NC\n            // 1  20/8\n            if (getCarryFlag$$1() === 0) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xd1: {\n            // POP DE\n            // 1  12\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerDE1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerD = splitHighByte(registerDE1);\n            Cpu.registerE = splitLowByte(registerDE1);\n            return 4;\n        }\n        case 0xd2: {\n            // JP NC,a16\n            // 3  16/12\n            if (getCarryFlag$$1() === 0) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xD3 */\n        case 0xd4: {\n            // CALL NC,a16\n            // 3  24/12\n            if (getCarryFlag$$1() === 0) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter + 2);\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xd5: {\n            // PUSH DE\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerD, Cpu.registerE));\n            return 8;\n        }\n        case 0xd6: {\n            // SUB d8\n            // 2  8\n            // Z 1 H C\n            // 4 cycles\n            subARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xd7: {\n            // RST 10H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x10;\n            return 8;\n        }\n        case 0xd8: {\n            // RET C\n            // 1  20/8\n            if (getCarryFlag$$1() === 1) {\n                var stackPointer = Cpu.stackPointer;\n                // 8 cycles\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xd9: {\n            // RETI\n            // 1  16\n            var stackPointer = Cpu.stackPointer;\n            // 8 cycles\n            Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n            // Enable interrupts\n            setInterrupts(true);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            return 8;\n        }\n        case 0xda: {\n            // JP C,a16\n            // 3 16/12\n            if (getCarryFlag$$1() === 1) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xDB */\n        case 0xdc: {\n            // CALL C,a16\n            // 3  24/12\n            if (getCarryFlag$$1() === 1) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xDD */\n        case 0xde: {\n            // SBC A,d8\n            // 2 8\n            // Z 1 H C\n            // 4 cycles\n            subAThroughCarryRegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xdf: {\n            // RST 18H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x18;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeEx(opcode) {\n    switch (opcode) {\n        case 0xe0: {\n            // LDH (a8),A\n            // 2  12\n            // Store value in high RAM ($FF00 + a8)\n            // 4 cycles\n            var largeDataByteOne = getDataByteOne();\n            // 4 cycles\n            eightBitStoreSyncCycles(0xff00 + largeDataByteOne, Cpu.registerA);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xe1: {\n            // POP HL\n            // 1  12\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerHL1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerH = splitHighByte(registerHL1);\n            Cpu.registerL = splitLowByte(registerHL1);\n            return 4;\n        }\n        case 0xe2: {\n            // LD (C),A\n            // 1  8\n            // NOTE: Table says 2 Program counter,\n            // But stepping through the boot rom, should be one\n            // Also should change 0xF2\n            // Store value in high RAM ($FF00 + register c)\n            // 4 cycles\n            eightBitStoreSyncCycles(0xff00 + Cpu.registerC, Cpu.registerA);\n            return 4;\n        }\n        /* No Opcode for: 0xE3, 0xE4 */\n        case 0xe5: {\n            // PUSH HL\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 8;\n        }\n        case 0xe6: {\n            // AND d8\n            // 2  8\n            // Z 0 1 0\n            // 4 cycles\n            andARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xe7: {\n            // RST 20H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x20;\n            return 8;\n        }\n        case 0xe8: {\n            // ADD SP, r8\n            // 2 16\n            // 0 0 H C\n            // NOTE: Discoved dataByte is signed\n            // 4 cycles\n            var signedDataByteOne = i8Portable(getDataByteOne());\n            checkAndSetSixteenBitFlagsAddOverflow(Cpu.stackPointer, signedDataByteOne, true);\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + signedDataByteOne);\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 12;\n        }\n        case 0xe9: {\n            // JP HL\n            // 1 4\n            Cpu.programCounter = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            return 4;\n        }\n        case 0xea: {\n            // LD (a16),A\n            // 3 16\n            // 12 cycles, 4 from store, 8 from concatenated data byte\n            eightBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.registerA);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        /* No Opcode for: 0xEB, 0xEC, 0xED */\n        case 0xee: {\n            // XOR d8\n            // 2 8\n            // Z 0 0 0\n            // 4 cycles\n            xorARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xef: {\n            // RST 28H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x28;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeFx(opcode) {\n    switch (opcode) {\n        case 0xf0: {\n            // LDH A,(a8)\n            // 2 12\n            // 4 cycles\n            var largeDataByteOne = getDataByteOne();\n            // 4 cycles\n            Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + largeDataByteOne));\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xf1: {\n            // POP AF\n            // 1 12\n            // Z N H C (But No work require, flags are already set)\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerAF1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerA = splitHighByte(registerAF1);\n            Cpu.registerF = splitLowByte(registerAF1);\n            return 4;\n        }\n        case 0xf2: {\n            // LD A,(C)\n            // 1 8\n            // 4 cycles\n            Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + Cpu.registerC));\n            return 4;\n        }\n        case 0xf3: {\n            // DI\n            // 1 4\n            setInterrupts(false);\n            return 4;\n        }\n        /* No Opcode for: 0xF4 */\n        case 0xf5: {\n            // PUSH AF\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerA, Cpu.registerF));\n            return 8;\n        }\n        case 0xf6: {\n            // OR d8\n            // 2 8\n            // Z 0 0 0\n            // 4 cycles\n            orARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xf7: {\n            // RST 30H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x30;\n            return 8;\n        }\n        case 0xf8: {\n            // LD HL,SP+r8\n            // 2 12\n            // 0 0 H C\n            // NOTE: Discoved dataByte is signed\n            // 4 cycles\n            var signedDataByteOne = i8Portable(getDataByteOne());\n            var stackPointer = Cpu.stackPointer;\n            // First, let's handle flags\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            checkAndSetSixteenBitFlagsAddOverflow(stackPointer, signedDataByteOne, true);\n            var registerHL = u16Portable(stackPointer + signedDataByteOne);\n            Cpu.registerH = splitHighByte(registerHL);\n            Cpu.registerL = splitLowByte(registerHL);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 8;\n        }\n        case 0xf9: {\n            // LD SP,HL\n            // 1 8\n            Cpu.stackPointer = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            return 8;\n        }\n        case 0xfa: {\n            // LD A,(a16)\n            // 3 16\n            // 12 cycles, 4 from load, 8 from concatenated data byte\n            Cpu.registerA = eightBitLoadSyncCycles(getConcatenatedDataByte());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0xfb: {\n            // EI\n            // 1 4\n            setInterrupts(true);\n            return 4;\n        }\n        /* No Opcode for: 0xFC, 0xFD */\n        case 0xfe: {\n            // CP d8\n            // 2 8\n            // Z 1 H C\n            // 4 cycles\n            cpARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xff: {\n            // RST 38H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x38;\n            return 8;\n        }\n    }\n    return -1;\n}\n\n// NOTE: Code is very verbose, and will have some copy pasta'd lines.\n\n// Syncing and Tracking executed cycles\nvar Cycles = /** @class */ (function () {\n    function Cycles() {\n    }\n    // An even number below the max 32 bit integer\n    Cycles.cyclesPerCycleSet = 2000000000;\n    Cycles.cycleSets = 0;\n    Cycles.cycles = 0;\n    return Cycles;\n}());\nfunction getCyclesPerCycleSet() {\n    return Cycles.cyclesPerCycleSet;\n}\nfunction getCycleSets() {\n    return Cycles.cycleSets;\n}\nfunction getCycles() {\n    return Cycles.cycles;\n}\n// Inlined because closure compiler inlines\nfunction trackCyclesRan(numberOfCycles) {\n    var cycles = Cycles.cycles;\n    cycles += numberOfCycles;\n    if (cycles >= Cycles.cyclesPerCycleSet) {\n        Cycles.cycleSets += 1;\n        cycles -= Cycles.cyclesPerCycleSet;\n    }\n    Cycles.cycles = cycles;\n}\n// Inlined because closure compiler inlines\nfunction resetCycles() {\n    Cycles.cyclesPerCycleSet = 2000000000;\n    Cycles.cycleSets = 0;\n    Cycles.cycles = 0;\n}\n// Sync other GB Components with the number of cycles\nfunction syncCycles(numberOfCycles) {\n    // Check if we did a DMA TRansfer, if we did add the cycles\n    if (Memory.DMACycles > 0) {\n        numberOfCycles += Memory.DMACycles;\n        Memory.DMACycles = 0;\n    }\n    // Finally, Add our number of cycles to the CPU Cycles\n    Cpu.currentCycles += numberOfCycles;\n    // Check other Gameboy components\n    if (!Cpu.isStopped) {\n        if (Config.graphicsBatchProcessing) {\n            // Need to do this, since a lot of things depend on the scanline\n            // Batch processing will simply return if the number of cycles is too low\n            Graphics.currentCycles += numberOfCycles;\n            batchProcessGraphics();\n        }\n        else {\n            updateGraphics(numberOfCycles);\n        }\n        if (Config.audioBatchProcessing) {\n            Sound.currentCycles += numberOfCycles;\n            batchProcessAudio();\n        }\n        else {\n            updateSound(numberOfCycles);\n        }\n        updateSerial(numberOfCycles);\n    }\n    if (Config.timersBatchProcessing) {\n        // Batch processing will simply return if the number of cycles is too low\n        Timers.currentCycles += numberOfCycles;\n        batchProcessTimers();\n    }\n    else {\n        updateTimers(numberOfCycles);\n    }\n    trackCyclesRan(numberOfCycles);\n}\n\n// Functions involving executing/running the emulator after initializtion\nvar Execute = /** @class */ (function () {\n    function Execute() {\n    }\n    // An even number bewlow the max 32 bit integer\n    Execute.stepsPerStepSet = 2000000000;\n    Execute.stepSets = 0;\n    Execute.steps = 0;\n    // Response Codes from Execute Conditions\n    Execute.RESPONSE_CONDITION_ERROR = -1;\n    Execute.RESPONSE_CONDITION_FRAME = 0;\n    Execute.RESPONSE_CONDITION_AUDIO = 1;\n    Execute.RESPONSE_CONDITION_BREAKPOINT = 2;\n    return Execute;\n}());\nfunction getStepsPerStepSet() {\n    return Execute.stepsPerStepSet;\n}\nfunction getStepSets() {\n    return Execute.stepSets;\n}\nfunction getSteps() {\n    return Execute.steps;\n}\n// Inlined because closure compiler inlines\nfunction trackStepsRan(steps) {\n    var esteps = Execute.steps;\n    esteps += steps;\n    if (esteps >= Execute.stepsPerStepSet) {\n        Execute.stepSets += 1;\n        esteps -= Execute.stepsPerStepSet;\n    }\n    Execute.steps = esteps;\n}\n// Inlined because closure compiler inlines\nfunction resetSteps() {\n    Execute.stepsPerStepSet = 2000000000;\n    Execute.stepSets = 0;\n    Execute.steps = 0;\n}\n// // Public funciton to run frames until,\n// the specified number of frames have run or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\nfunction executeMultipleFrames(numberOfFrames) {\n    var frameResponse = 0;\n    var framesRun = 0;\n    while (framesRun < numberOfFrames && frameResponse >= 0) {\n        frameResponse = executeFrame();\n        framesRun += 1;\n    }\n    if (frameResponse < 0) {\n        return frameResponse;\n    }\n    return 0;\n}\n// Public funciton to run opcodes until,\n// a frame is ready, or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\nfunction executeFrame() {\n    return executeUntilCondition(true, -1);\n}\n// Public Function to run opcodes until,\n// a frame is ready, audio bufer is filled, or error\nfunction executeFrameAndCheckAudio(maxAudioBuffer) {\n    if (maxAudioBuffer === void 0) { maxAudioBuffer = 0; }\n    return executeUntilCondition(true, maxAudioBuffer);\n}\n// Base function that executes steps, and checks conditions\n// Return values:\nfunction executeUntilCondition(checkMaxCyclesPerFrame, maxAudioBuffer) {\n    if (checkMaxCyclesPerFrame === void 0) { checkMaxCyclesPerFrame = true; }\n    if (maxAudioBuffer === void 0) { maxAudioBuffer = -1; }\n    // Common tracking variables\n    var numberOfCycles = -1;\n    var audioBufferSize = 1024;\n    if (maxAudioBuffer > 0) {\n        audioBufferSize = maxAudioBuffer;\n    }\n    else if (maxAudioBuffer < 0) {\n        audioBufferSize = -1;\n    }\n    var errorCondition = false;\n    var frameCondition = false;\n    var audioBufferCondition = false;\n    while (!errorCondition && !frameCondition && !audioBufferCondition && !Breakpoints.reachedBreakpoint) {\n        numberOfCycles = executeStep();\n        // Error Condition\n        if (numberOfCycles < 0) {\n            errorCondition = true;\n        }\n        else if (Cpu.currentCycles >= Cpu.MAX_CYCLES_PER_FRAME()) {\n            frameCondition = true;\n        }\n        else if (audioBufferSize > -1 && getNumberOfSamplesInAudioBuffer() >= audioBufferSize) {\n            audioBufferCondition = true;\n        }\n    }\n    // Find our exit reason\n    if (frameCondition) {\n        // Render a frame\n        // Reset our currentCycles\n        Cpu.currentCycles -= Cpu.MAX_CYCLES_PER_FRAME();\n        return Execute.RESPONSE_CONDITION_FRAME;\n    }\n    if (audioBufferCondition) {\n        return Execute.RESPONSE_CONDITION_AUDIO;\n    }\n    if (Breakpoints.reachedBreakpoint) {\n        Breakpoints.reachedBreakpoint = false;\n        return Execute.RESPONSE_CONDITION_BREAKPOINT;\n    }\n    // TODO: Boot ROM handling\n    // There was an error, return -1, and push the program counter back to grab the error opcode\n    Cpu.programCounter = u16Portable(Cpu.programCounter - 1);\n    return -1;\n}\n// Function to execute an opcode, and update other gameboy hardware.\n// http://www.codeslinger.co.uk/pages/projects/gameboy/beginning.html\nfunction executeStep() {\n    // Set has started to 1 since we ran a emulation step\n    setHasCoreStarted(true);\n    // Check if we are in the halt bug\n    if (Cpu.isHaltBug) {\n        // Need to not increment program counter,\n        // thus, running the next opcode twice\n        // E.g\n        // 0x76 - halt\n        // FA 34 12 - ld a,(1234)\n        // Becomes\n        // FA FA 34 ld a,(34FA)\n        // 12 ld (de),a\n        var haltBugOpcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n        // Execute opcode will handle the actual PC behavior\n        var haltBugCycles = executeOpcode$$1(haltBugOpcode);\n        syncCycles(haltBugCycles);\n        Cpu.exitHaltAndStop();\n    }\n    // Interrupts should be handled before reading an opcode\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n    var interruptCycles = checkInterrupts();\n    if (interruptCycles > 0) {\n        syncCycles(interruptCycles);\n    }\n    // Get the opcode, and additional bytes to be handled\n    // Number of cycles defaults to 4, because while we're halted, we run 4 cycles (according to matt :))\n    var numberOfCycles = 4;\n    var opcode = 0;\n    // If we are not halted or stopped, run instructions\n    // If we are halted, this will be skipped and just sync the 4 cycles\n    if (!Cpu.isHalted() && !Cpu.isStopped) {\n        opcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n        numberOfCycles = executeOpcode$$1(opcode);\n    }\n    // blarggFixes, don't allow register F to have the bottom nibble\n    Cpu.registerF = Cpu.registerF & 0xf0;\n    // Check if there was an error decoding the opcode\n    if (numberOfCycles <= 0) {\n        return numberOfCycles;\n    }\n    // Sync other GB Components with the number of cycles\n    syncCycles(numberOfCycles);\n    // Update our steps\n    trackStepsRan(1);\n    // Check if we reached the CPU breakpoint\n    if (Cpu.programCounter === Breakpoints.programCounter) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    return numberOfCycles;\n}\n\n// Imports\n// Grow our memory to the specified size\nif (memory.size() < WASMBOY_WASM_PAGES) {\n    memory.grow(WASMBOY_WASM_PAGES - memory.size());\n}\n// Function to track if the core has started\nvar hasStarted = false;\nfunction setHasCoreStarted(value) {\n    hasStarted = value;\n}\nfunction hasCoreStarted() {\n    return hasStarted;\n}\n// Function to configure & initialize wasmboy\nfunction config(enableBootRom, useGbcWhenAvailable, audioBatchProcessing, graphicsBatchProcessing, timersBatchProcessing, graphicsDisableScanlineRendering, audioAccumulateSamples, tileRendering, tileCaching, enableAudioDebugging) {\n    // TODO: depending on the boot rom, initialization may be different\n    // From: http://www.codeslinger.co.uk/pages/projects/gameboy/hardware.html\n    // All values default to zero in memory, so not setting them yet\n    // log('initializing (includeBootRom=$0)', 1, enableBootRom);\n    Config.enableBootRom = enableBootRom > 0;\n    Config.useGbcWhenAvailable = useGbcWhenAvailable > 0;\n    Config.audioBatchProcessing = audioBatchProcessing > 0;\n    Config.graphicsBatchProcessing = graphicsBatchProcessing > 0;\n    Config.timersBatchProcessing = timersBatchProcessing > 0;\n    Config.graphicsDisableScanlineRendering = graphicsDisableScanlineRendering > 0;\n    Config.audioAccumulateSamples = audioAccumulateSamples > 0;\n    Config.tileRendering = tileRendering > 0;\n    Config.tileCaching = tileCaching > 0;\n    Config.enableAudioDebugging = enableAudioDebugging > 0;\n    initialize();\n}\n// Function to initiialize the core\nfunction initialize() {\n    // Initialization variables from BGB\n    // First, try to switch to Gameboy Color Mode\n    // Get our GBC support from the cartridge header\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    var gbcType = eightBitLoadFromGBMemory(0x0143);\n    // Detecting GBC http://bgb.bircd.org/pandocs.htm#cgbregisters\n    if (gbcType === 0xc0 || (Config.useGbcWhenAvailable && gbcType === 0x80)) {\n        Cpu.GBCEnabled = true;\n    }\n    else {\n        Cpu.GBCEnabled = false;\n    }\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Reset our cycles ran\n    resetCycles();\n    resetSteps();\n    if (Config.enableBootRom) {\n        Cpu.BootROMEnabled = true;\n    }\n    else {\n        Cpu.BootROMEnabled = false;\n    }\n    // Call our respective classes intialization\n    // NOTE: Boot ROM Only handles some initialization, thus we need to check in each one\n    // respecitvely :p\n    initializeCpu();\n    initializeCartridge();\n    initializeDma();\n    initializeGraphics();\n    initializePalette();\n    initializeSound();\n    initializeInterrupts();\n    initializeTimers();\n    initializeSerial();\n    initializeVarious();\n}\nfunction initializeVarious() {\n    // Various Other Registers\n    if (Cpu.GBCEnabled) {\n        // Various other registers\n        eightBitStoreIntoGBMemory(0xff70, 0xf8);\n        eightBitStoreIntoGBMemory(0xff4f, 0xfe);\n        eightBitStoreIntoGBMemory(0xff4d, 0x7e);\n        eightBitStoreIntoGBMemory(0xff00, 0xcf);\n        eightBitStoreIntoGBMemory(0xff0f, 0xe1);\n        // 0xFFFF = 0x00\n        // Undocumented from Pandocs\n        eightBitStoreIntoGBMemory(0xff6c, 0xfe);\n        eightBitStoreIntoGBMemory(0xff75, 0x8f);\n    }\n    else {\n        eightBitStoreIntoGBMemory(0xff70, 0xff);\n        eightBitStoreIntoGBMemory(0xff4f, 0xff);\n        eightBitStoreIntoGBMemory(0xff4d, 0xff);\n        eightBitStoreIntoGBMemory(0xff00, 0xcf);\n        eightBitStoreIntoGBMemory(0xff0f, 0xe1);\n        // 0xFFFF = 0x00\n    }\n}\n// Function to return if we are currently playing a GBC ROM\nfunction isGBC() {\n    return Cpu.GBCEnabled;\n}\n// Function to return an address to store into save state memory\n// this is to regulate our 20 slots\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// Inlined because closure compiler inlines\nfunction getSaveStateMemoryOffset(offset, saveStateSlot) {\n    // 50 bytes per save state memory partiton sli32\n    return WASMBOY_STATE_LOCATION + offset + 50 * saveStateSlot;\n}\n// Function to save state to memory for all of our classes\nfunction saveState() {\n    Cpu.saveState();\n    Graphics.saveState();\n    Interrupts.saveState();\n    Joypad.saveState();\n    Memory.saveState();\n    Timers.saveState();\n    Sound.saveState();\n    Channel1.saveState();\n    Channel2.saveState();\n    Channel3.saveState();\n    Channel4.saveState();\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Don't want to reset cycles here, as this does not reset the emulator\n}\n// Function to load state from memory for all of our classes\nfunction loadState() {\n    Cpu.loadState();\n    Graphics.loadState();\n    Interrupts.loadState();\n    Joypad.loadState();\n    Memory.loadState();\n    Timers.loadState();\n    Sound.loadState();\n    Channel1.loadState();\n    Channel2.loadState();\n    Channel3.loadState();\n    Channel4.loadState();\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Reset our cycles ran\n    resetCycles();\n    resetSteps();\n}\n\n// Functions to get information about the emulator for debugging purposes\nfunction getRegisterA() {\n    return Cpu.registerA;\n}\nfunction getRegisterB() {\n    return Cpu.registerB;\n}\nfunction getRegisterC() {\n    return Cpu.registerC;\n}\nfunction getRegisterD() {\n    return Cpu.registerD;\n}\nfunction getRegisterE() {\n    return Cpu.registerE;\n}\nfunction getRegisterH() {\n    return Cpu.registerH;\n}\nfunction getRegisterL() {\n    return Cpu.registerL;\n}\nfunction getRegisterF() {\n    return Cpu.registerF;\n}\nfunction getProgramCounter() {\n    return Cpu.programCounter;\n}\nfunction getStackPointer() {\n    return Cpu.stackPointer;\n}\nfunction getOpcodeAtProgramCounter() {\n    return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\n\n// Functions to debug graphical output\n// Some Simple internal getters\nfunction getLY() {\n    return Graphics.scanlineRegister;\n}\n// TODO: Render by tile, rather than by pixel\nfunction drawBackgroundMapToWasmMemory(showColor) {\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    // Bit 7 - LCD Display Enable (0=Off, 1=On)\n    // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 5 - Window Display Enable (0=Off, 1=On)\n    // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n    // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n    // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n    // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On)\n    // Get our seleted tile data memory location\n    var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n    if (Lcd.bgWindowTileDataSelect) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n    }\n    var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n    if (Lcd.bgTileMapDisplaySelect) {\n        tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n    }\n    for (var y = 0; y < 256; y++) {\n        for (var x = 0; x < 256; x++) {\n            // Get our current Y\n            var pixelYPositionInMap = y;\n            // Get our Current X position of our pixel on the on the 160x144 camera\n            // this is done by getting the current scroll X position,\n            // and adding it do what X Value the scanline is drawing on the camera.\n            var pixelXPositionInMap = x;\n            // Divide our pixel position by 8 to get our tile.\n            // Since, there are 256x256 pixels, and 32x32 tiles.\n            // 256 / 8 = 32.\n            // Also, bitshifting by 3, do do a division by 8\n            // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n            var tileXPositionInMap = pixelXPositionInMap >> 3;\n            var tileYPositionInMap = pixelYPositionInMap >> 3;\n            // Get our tile address on the tileMap\n            // NOTE: (tileMap represents where each tile is displayed on the screen)\n            // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n            // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n            // And we have x pixel 160. 160 / 8 = 20.\n            // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n            // Think like indexing a 2d array, as a 1d array and it make sense :)\n            var tileMapAddress = tileMapMemoryLocation + tileYPositionInMap * 32 + tileXPositionInMap;\n            // Get the tile Id on the Tile Map\n            var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n            // Now get our tileDataAddress for the corresponding tileID we found in the map\n            // Read the comments in _getTileDataAddress() to see what's going on.\n            // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n            // This funcitons returns the start of memory locaiton for the tile 'c'.\n            var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n            // Now we can process the the individual bytes that represent the pixel on a tile\n            // Get the y pixel of the 8 by 8 tile.\n            // Simply modulo the scanline.\n            // For instance, let's say we are printing the first line of pixels on our camera,\n            // And the first line of pixels on our tile.\n            // yPixel = 1. 1 % 8 = 1.\n            // And for the last line\n            // yPixel = 144. 144 % 8 = 0.\n            // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n            // Because remember, we are counting lines on the display NOT including zero\n            var pixelYInTile = pixelYPositionInMap % 8;\n            // Same logic as pixelYInTile.\n            // However, We need to reverse our byte,\n            // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n            // Therefore, is pixelX was 2, then really is need to be 5\n            // So 2 - 7 = -5, * 1 = 5\n            // Or to simplify, 7 - 2 = 5 haha!\n            var pixelXInTile = pixelXPositionInMap % 8;\n            pixelXInTile = 7 - pixelXInTile;\n            // Get the GB Map Attributes\n            // Bit 0-2  Background Palette number  (BGP0-7)\n            // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n            // Bit 4    Not used\n            // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n            // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n            // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n            var bgMapAttributes = 0;\n            if (Cpu.GBCEnabled && showColor > 0) {\n                bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n            }\n            if (checkBitOnByte(6, bgMapAttributes)) {\n                // We are mirroring the tile, therefore, we need to opposite byte\n                // So if our pizel was 0 our of 8, it wild become 7 :)\n                // TODO: This may be wrong :p\n                pixelYInTile = 7 - pixelYInTile;\n            }\n            // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n            // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n            // But we need to load the time from a specific Vram bank\n            var vramBankId = 0;\n            if (checkBitOnByte(3, bgMapAttributes)) {\n                vramBankId = 1;\n            }\n            // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n            // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n            // Again, think like you had to map a 2d array as a 1d.\n            var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n            var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId);\n            // Now we can get the color for that pixel\n            // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n            // To Get the color Id.\n            // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n            // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n            var paletteColorId = 0;\n            if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n                // Byte one represents the second bit in our color id, so bit shift\n                paletteColorId += 1;\n                paletteColorId = paletteColorId << 1;\n            }\n            if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n                paletteColorId += 1;\n            }\n            // FINALLY, RENDER THAT PIXEL!\n            var pixelStart = (y * 256 + x) * 3;\n            if (Cpu.GBCEnabled && showColor > 0) {\n                // Finally lets add some, C O L O R\n                // Want the botom 3 bits\n                var bgPalette = bgMapAttributes & 0x07;\n                // Call the helper function to grab the correct color from the palette\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false);\n                // Split off into red green and blue\n                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                var blue = getColorComponentFromRgb(2, rgbColorPalette);\n                var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n                store(offset, red);\n                store(offset + 1, green);\n                store(offset + 2, blue);\n            }\n            else {\n                // Only rendering camera for now, so coordinates are for the camera.\n                // Get the rgb value for the color Id, will be repeated into R, G, B (if not colorized)\n                var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n                var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n                // Red\n                store(offset + 0, getRedFromHexColor(hexColor));\n                // Green\n                store(offset + 1, getGreenFromHexColor(hexColor));\n                // Blue\n                store(offset + 2, getBlueFromHexColor(hexColor));\n            }\n        }\n    }\n}\nfunction drawTileDataToWasmMemory() {\n    for (var tileDataMapGridY = 0; tileDataMapGridY < 0x17; tileDataMapGridY++) {\n        for (var tileDataMapGridX = 0; tileDataMapGridX < 0x1f; tileDataMapGridX++) {\n            // Get Our VramBankID\n            var vramBankId = 0;\n            if (tileDataMapGridX > 0x0f) {\n                vramBankId = 1;\n            }\n            // Get our tile ID\n            var tileId = tileDataMapGridY;\n            if (tileDataMapGridY > 0x0f) {\n                tileId -= 0x0f;\n            }\n            tileId = tileId << 4;\n            if (tileDataMapGridX > 0x0f) {\n                tileId = tileId + (tileDataMapGridX - 0x0f);\n            }\n            else {\n                tileId = tileId + tileDataMapGridX;\n            }\n            // Finally get our tile Data location\n            var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n            if (tileDataMapGridY > 0x0f) {\n                tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n            }\n            // Let's see if we have C O L O R\n            // Set the map and sprite attributes to -1\n            // Meaning, we will draw monochrome\n            var paletteLocation = Graphics.memoryLocationBackgroundPalette;\n            var bgMapAttributes = -1;\n            var spriteAttributes = -1;\n            // Let's see if the tile is being used by a sprite\n            for (var spriteRow = 0; spriteRow < 8; spriteRow++) {\n                for (var spriteColumn = 0; spriteColumn < 5; spriteColumn++) {\n                    var spriteIndex = spriteColumn * 8 + spriteRow;\n                    // Sprites occupy 4 bytes in the sprite attribute table\n                    var spriteTableIndex = spriteIndex * 4;\n                    var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2);\n                    if (tileId === spriteTileId) {\n                        var currentSpriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n                        var spriteVramBankId = 0;\n                        if (Cpu.GBCEnabled && checkBitOnByte(3, currentSpriteAttributes)) {\n                            spriteVramBankId = 1;\n                        }\n                        if (spriteVramBankId === vramBankId) {\n                            spriteAttributes = currentSpriteAttributes;\n                            spriteRow = 8;\n                            spriteColumn = 5;\n                            // Set our paletteLocation\n                            paletteLocation = Graphics.memoryLocationSpritePaletteOne;\n                            if (checkBitOnByte(4, spriteAttributes)) {\n                                paletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                            }\n                        }\n                    }\n                }\n            }\n            // If we didn't find a sprite,\n            // Let's see if the tile is on the bg tile map\n            // If so, use that bg map for attributes\n            if (Cpu.GBCEnabled && spriteAttributes < 0) {\n                var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n                if (Lcd.bgTileMapDisplaySelect) {\n                    tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n                }\n                // Loop through the tileMap, and find if we have our current ID\n                var foundTileMapAddress = -1;\n                for (var x = 0; x < 32; x++) {\n                    for (var y = 0; y < 32; y++) {\n                        var tileMapAddress = tileMapMemoryLocation + y * 32 + x;\n                        var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n                        // Check if we found our tileId\n                        if (tileId === tileIdFromTileMap) {\n                            foundTileMapAddress = tileMapAddress;\n                            x = 32;\n                            y = 32;\n                        }\n                    }\n                }\n                if (foundTileMapAddress >= 0) {\n                    bgMapAttributes = loadFromVramBank(foundTileMapAddress, 1);\n                }\n            }\n            // Draw each Y line of the tile\n            for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n                drawPixelsFromLineOfTile(tileId, // tileId\n                tileDataMemoryLocation, // Graphics.memoryLocationTileDataSelect\n                vramBankId, // Vram Bank\n                0, // Tile Line X Start\n                7, // Tile Line X End\n                tileLineY, // Tile Line Y\n                tileDataMapGridX * 8, // Output line X\n                tileDataMapGridY * 8 + tileLineY, // Output line Y\n                0x1f * 8, // Output Width\n                TILE_DATA_LOCATION, // Wasm Memory Start\n                false, // shouldRepresentMonochromeColorByColorId\n                paletteLocation, // paletteLocation\n                bgMapAttributes, // bgMapAttributes\n                spriteAttributes // spriteAttributes\n                );\n            }\n        }\n    }\n}\nfunction drawOamToWasmMemory() {\n    // Draw all 40 sprites\n    // Going to be like BGB and do 8 x 5 sprites\n    for (var spriteRow = 0; spriteRow < 8; spriteRow++) {\n        for (var spriteColumn = 0; spriteColumn < 5; spriteColumn++) {\n            var spriteIndex = spriteColumn * 8 + spriteRow;\n            // Sprites occupy 4 bytes in the sprite attribute table\n            var spriteTableIndex = spriteIndex * 4;\n            // Y positon is offset by 16, X position is offset by 8\n            var spriteYPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex);\n            var spriteXPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 1);\n            var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2);\n            var tilesToDraw = 1;\n            if (Lcd.tallSpriteSize) {\n                // @binji says in 8x16 mode, even tileId always drawn first\n                // This will fix shantae sprites which always uses odd numbered indexes\n                // TODO: Do the actual Pandocs thing:\n                // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n                // So just knock off the last bit? :)\n                if (spriteTileId % 2 === 1) {\n                    spriteTileId -= 1;\n                }\n                tilesToDraw += 1;\n            }\n            // Get our sprite attributes since we know we shall be drawing the tile\n            var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n            // Find which VRAM Bank to load from\n            var vramBankId = 0;\n            if (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes)) {\n                vramBankId = 1;\n            }\n            // Find which monochrome palette we should use\n            var paletteLocation = Graphics.memoryLocationSpritePaletteOne;\n            if (checkBitOnByte(4, spriteAttributes)) {\n                paletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n            }\n            // Start Drawing our tiles\n            for (var i = 0; i < tilesToDraw; i++) {\n                // Draw each Y line of the tile\n                for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n                    drawPixelsFromLineOfTile(spriteTileId + i, // tileId\n                    Graphics.memoryLocationTileDataSelectOneStart, // Graphics.memoryLocationTileDataSelect\n                    vramBankId, // VRAM Bank\n                    0, // Tile Line X Start\n                    7, // Tile Line X End\n                    tileLineY, // Tile Line Y\n                    spriteRow * 8, // Output line X\n                    spriteColumn * 16 + tileLineY + i * 8, // Output line Y\n                    8 * 8, // Output Width\n                    OAM_TILES_LOCATION, // Wasm Memory Start\n                    false, // shouldRepresentMonochromeColorByColorId\n                    paletteLocation, // paletteLocation\n                    -1, // bgMapAttributes\n                    spriteAttributes // spriteAttributes\n                    );\n                }\n            }\n        }\n    }\n}\n\nfunction getDIV() {\n    return Timers.dividerRegister;\n}\nfunction getTIMA() {\n    return Timers.timerCounter;\n}\nfunction getTMA() {\n    return Timers.timerModulo;\n}\nfunction getTAC() {\n    var response = Timers.timerInputClock;\n    if (Timers.timerEnabled) {\n        response = setBitOnByte(2, response);\n    }\n    return response;\n}\n\n// Functions to debug internal gameboy memory\nfunction updateDebugGBMemory() {\n    for (var i = 0; i < DEBUG_GAMEBOY_MEMORY_SIZE; i++) {\n        store(DEBUG_GAMEBOY_MEMORY_LOCATION + i, eightBitLoadFromGBMemoryWithTraps(i));\n    }\n    // Since we are debugging, we don't want to be responsible for tripping the breakpoints\n    Breakpoints.reachedBreakpoint = false;\n}\n\n// Public Exports\n\nexport { config, hasCoreStarted, saveState, loadState, isGBC, getStepsPerStepSet, getStepSets, getSteps, executeMultipleFrames, executeFrame, executeFrameAndCheckAudio, executeUntilCondition, executeStep, getCyclesPerCycleSet, getCycleSets, getCycles, setJoypadState, getNumberOfSamplesInAudioBuffer, clearAudioBuffer, setManualColorizationPalette, WASMBOY_MEMORY_LOCATION, WASMBOY_MEMORY_SIZE, WASMBOY_WASM_PAGES, ASSEMBLYSCRIPT_MEMORY_LOCATION, ASSEMBLYSCRIPT_MEMORY_SIZE, WASMBOY_STATE_LOCATION, WASMBOY_STATE_SIZE, GAMEBOY_INTERNAL_MEMORY_LOCATION, GAMEBOY_INTERNAL_MEMORY_SIZE, VIDEO_RAM_LOCATION, VIDEO_RAM_SIZE, WORK_RAM_LOCATION, WORK_RAM_SIZE, OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION, OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE, GRAPHICS_OUTPUT_LOCATION, GRAPHICS_OUTPUT_SIZE, GBC_PALETTE_LOCATION, GBC_PALETTE_SIZE, BG_PRIORITY_MAP_LOCATION, BG_PRIORITY_MAP_SIZE, FRAME_LOCATION, FRAME_SIZE, BACKGROUND_MAP_LOCATION, BACKGROUND_MAP_SIZE, TILE_DATA_LOCATION, TILE_DATA_SIZE, OAM_TILES_LOCATION, OAM_TILES_SIZE, AUDIO_BUFFER_LOCATION, AUDIO_BUFFER_SIZE, CHANNEL_1_BUFFER_LOCATION, CHANNEL_1_BUFFER_SIZE, CHANNEL_2_BUFFER_LOCATION, CHANNEL_2_BUFFER_SIZE, CHANNEL_3_BUFFER_LOCATION, CHANNEL_3_BUFFER_SIZE, CHANNEL_4_BUFFER_LOCATION, CHANNEL_4_BUFFER_SIZE, CARTRIDGE_RAM_LOCATION, CARTRIDGE_RAM_SIZE, BOOT_ROM_LOCATION, BOOT_ROM_SIZE, CARTRIDGE_ROM_LOCATION, CARTRIDGE_ROM_SIZE, DEBUG_GAMEBOY_MEMORY_LOCATION, DEBUG_GAMEBOY_MEMORY_SIZE, getWasmBoyOffsetFromGameBoyOffset, setProgramCounterBreakpoint, resetProgramCounterBreakpoint, setReadGbMemoryBreakpoint, resetReadGbMemoryBreakpoint, setWriteGbMemoryBreakpoint, resetWriteGbMemoryBreakpoint, getRegisterA, getRegisterB, getRegisterC, getRegisterD, getRegisterE, getRegisterH, getRegisterL, getRegisterF, getProgramCounter, getStackPointer, getOpcodeAtProgramCounter, getLY, drawBackgroundMapToWasmMemory, drawTileDataToWasmMemory, drawOamToWasmMemory, getDIV, getTIMA, getTMA, getTAC, updateDebugGBMemory };\n","import * as WasmBoyCore from '../../dist/core/core.esm';\n\nconst getWasmBoyTsCore = async () => {\n  const response = {\n    instance: {\n      exports: WasmBoyCore\n    },\n    byteMemory: WasmBoyCore.memory.wasmByteMemory,\n    type: 'TypeScript'\n  };\n  return response;\n};\n\nexport default getWasmBoyTsCore;\n"],"names":["wasmboyMemorySize","wasmByteMemory","Uint8ClampedArray","memory","size","grow","load","offset","store","value","abs","Math","ceil","ASSEMBLYSCRIPT_MEMORY_LOCATION","ASSEMBLYSCRIPT_MEMORY_SIZE","WASMBOY_STATE_LOCATION","WASMBOY_STATE_SIZE","VIDEO_RAM_LOCATION","VIDEO_RAM_SIZE","WORK_RAM_LOCATION","WORK_RAM_SIZE","OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION","OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE","GAMEBOY_INTERNAL_MEMORY_LOCATION","GAMEBOY_INTERNAL_MEMORY_SIZE","GBC_PALETTE_LOCATION","GBC_PALETTE_SIZE","BG_PRIORITY_MAP_LOCATION","BG_PRIORITY_MAP_SIZE","FRAME_LOCATION","FRAME_SIZE","BACKGROUND_MAP_LOCATION","BACKGROUND_MAP_SIZE","TILE_DATA_LOCATION","TILE_DATA_SIZE","OAM_TILES_LOCATION","OAM_TILES_SIZE","GRAPHICS_OUTPUT_LOCATION","GRAPHICS_OUTPUT_SIZE","CHANNEL_1_BUFFER_LOCATION","CHANNEL_1_BUFFER_SIZE","CHANNEL_2_BUFFER_LOCATION","CHANNEL_2_BUFFER_SIZE","CHANNEL_3_BUFFER_LOCATION","CHANNEL_3_BUFFER_SIZE","CHANNEL_4_BUFFER_LOCATION","CHANNEL_4_BUFFER_SIZE","AUDIO_BUFFER_LOCATION","AUDIO_BUFFER_SIZE","CARTRIDGE_RAM_LOCATION","CARTRIDGE_RAM_SIZE","BOOT_ROM_LOCATION","BOOT_ROM_SIZE","CARTRIDGE_ROM_LOCATION","CARTRIDGE_ROM_SIZE","DEBUG_GAMEBOY_MEMORY_LOCATION","DEBUG_GAMEBOY_MEMORY_SIZE","WASMBOY_MEMORY_LOCATION","WASMBOY_MEMORY_SIZE","WASMBOY_WASM_PAGES","Config","enableBootRom","useGbcWhenAvailable","audioBatchProcessing","graphicsBatchProcessing","timersBatchProcessing","graphicsDisableScanlineRendering","audioAccumulateSamples","tileRendering","tileCaching","enableAudioDebugging","u8Portable","param","u16Portable","i8Portable","i32Portable","setFlagBit","flagBit","flagValue","bitwiseOperand","Cpu","registerF","setZeroFlag$$1","setSubtractFlag","setHalfCarryFlag","setCarryFlag","getZeroFlag$$1","getSubtractFlag","getHalfCarryFlag","getCarryFlag$$1","checkAndSetEightBitHalfCarryFlag","amountToAdd","result","checkAndSetEightBitCarryFlag","checkAndSetSixteenBitFlagsAddOverflow","valueOne","valueTwo","useStackPointerBits","signedValueOne","flagXor","halfCarryXor","halfCarryAnd","WasmBoyGBColors","bgWhite","bgLightGrey","bgDarkGrey","bgBlack","obj0White","obj0LightGrey","obj0DarkGrey","obj0Black","obj1White","obj1LightGrey","obj1DarkGrey","obj1Black","GreenColors","OrangeColors","BrownColors","InvertedColors","GrayscaleColors","PastelMixColors","DarkBrownColors","DarkGreenColors","DarkBlueColors","RedColors","BlueColors","YellowColors","Table00Entry08Colors","Table01Entry0BColors","Table01Entry10Colors","Table03Entry0AColors","Table05Entry00Colors","Table05Entry01Colors","Table05Entry02Colors","Table05Entry08Colors","Table05Entry09Colors","Table05Entry11Colors","Table05Entry14Colors","Table05Entry15Colors","Colors","initializeColors","setManualColorizationPalette","GBCEnabled","BootROMEnabled","titleChecksum","i","eightBitLoadFromGBMemory","hash","setHashColorizationPalette","getRedFromHexColor","color","getGreenFromHexColor","getBlueFromHexColor","colorizationId","concatenateBytes","highByte","lowByte","splitHighByte","groupedByte","splitLowByte","rotateByteLeft","rotateByteLeftThroughCarry","rotateByteRight","rotateByteRightThroughCarry","setBitOnByte","bitPosition","byte","resetBitOnByte","checkBitOnByte","Palette","memoryLocationBackgroundPaletteIndex","memoryLocationBackgroundPaletteData","memoryLocationSpritePaletteIndex","memoryLocationSpritePaletteData","memoryLocationBackgroundPalette","memoryLocationSpritePaletteOne","memoryLocationSpritePaletteTwo","initializePalette","eightBitStoreIntoGBMemory","getMonochromeColorFromPalette","colorId","paletteMemoryLocation","shouldRepresentColorByColorId","rgbColor","getColorizedGbHexColorFromPalette","hexColor","writeColorPaletteToMemory","paletteIndex","isSprite","storePaletteByteInWasmMemory","incrementPaletteIndexIfSet","getRgbColorFromPalette","paletteId","paletteHighByte","loadPaletteByteFromWasmMemory","paletteLowByte","getColorComponentFromRgb","colorRgb","bitMask","colorValue","paletteIndexByte","addPriorityforPixel","x","y","hasGbcBgPriority","bgPriorityByte","getPixelStart","getPriorityforPixel","clearPriorityMap","TileCache","tileId","horizontalFlip","nextXIndexToPerformCacheCheck","resetTileCache","drawPixelsFromLineOfTile","tileDataMemoryLocation","vramBankId","tileLineXStart","tileLineXEnd","tileLineY","outputLineX","outputLineY","outputWidth","wasmMemoryStart","shouldRepresentMonochromeColorByColorId","paletteLocation","bgMapAttributes","spriteAttributes","pixelsDrawn","tileDataAddress","getTileDataAddress","byteOneForLineOfTilePixels","loadFromVramBank","byteTwoForLineOfTilePixels","iteratedOutputX","pixelXInTile","paletteColorId","red","green","blue","bgPalette","rgbColorPalette","Graphics","monochromeColor","pixelStart","getTilePixelStart","gbcBgPriority","tileIdFromTileMap","memoryLocationTileDataSelectZeroStart","isDutyCycleClockPositiveOrNegativeForWaveform","channelDuty","waveFormPositionOnDuty","Channel1","updateNRx0","NRx0SweepPeriod","NRx0Negate","NRx0SweepShift","updateNRx1","NRx1Duty","NRx1LengthLoad","lengthCounter","updateNRx2","NRx2StartingVolume","NRx2EnvelopeAddMode","NRx2EnvelopePeriod","isDacEnabled","updateNRx3","NRx3FrequencyLSB","frequency","NRx4FrequencyMSB","updateNRx4","NRx4LengthEnabled","saveState","storeBooleanDirectlyToWasmMemory","getSaveStateMemoryOffset","saveStateSlot","isEnabled","frequencyTimer","envelopeCounter","volume","dutyCycle","isSweepEnabled","sweepCounter","sweepShadowFrequency","loadState","loadBooleanDirectlyFromWasmMemory","initialize","memoryLocationNRx0","memoryLocationNRx1","memoryLocationNRx2","memoryLocationNRx3","memoryLocationNRx4","getSampleFromCycleCounter","accumulatedCycles","cycleCounter","getSample","resetTimer","GBCDoubleSpeed","numberOfCycles","overflowAmount","outputVolume","sample","trigger","calculateSweepAndCheckOverflow","willChannelUpdate","updateSweep","updateLength","updateEnvelope","setFrequency","passedFrequencyHighBits","passedFrequencyLowBits","register4","newRegister4","channelNumber","newFrequency","getNewFrequencyFromSweep","oldFrequency","Channel2","Channel3","NRx2VolumeCode","waveTablePosition","volumeCodeChanged","volumeCode","positionIndexToAdd","memoryLocationWaveSample","memoryLocationWaveTable","Channel4","divisorCode","NRx3ClockShift","NRx3WidthMode","NRx3DivisorCode","divisor","linearFeedbackShiftRegister","getNoiseChannelFrequencyPeriod","lfsrBitZero","lfsrBitOne","xorLfsrBitZeroOne","response","SoundAccumulator","channel1Sample","channel2Sample","channel3Sample","channel4Sample","channel1DacEnabled","channel2DacEnabled","channel3DacEnabled","channel4DacEnabled","leftChannelSampleUnsignedByte","rightChannelSampleUnsignedByte","mixerVolumeChanged","mixerEnabledChanged","needToRemixSamples","initializeSoundAccumulator","accumulateSound","channel1WillUpdate","didChannelDacChange","channel2WillUpdate","channel3WillUpdate","channel4WillUpdate","downSampleCycleCounter","Sound","downSampleCycleMultiplier","maxDownSampleCycles","mixChannelSamples","setLeftAndRightOutputForAudioQueue","audioQueueIndex","maxIndex","wasmBoyMemoryMaxBufferSize","channel1EnabledChanged","channel2EnabledChanged","channel3EnabledChanged","channel4EnabledChanged","batchProcessCycles","updateNR50","NR50LeftMixerVolume","NR50RightMixerVolume","updateNR51","NR51IsChannel4EnabledOnLeftOutput","NR51IsChannel3EnabledOnLeftOutput","NR51IsChannel2EnabledOnLeftOutput","NR51IsChannel1EnabledOnLeftOutput","NR51IsChannel4EnabledOnRightOutput","NR51IsChannel3EnabledOnRightOutput","NR51IsChannel2EnabledOnRightOutput","NR51IsChannel1EnabledOnRightOutput","updateNR52","NR52IsSoundEnabled","maxFrameSequenceCycles","CLOCK_SPEED","frameSequenceCycleCounter","frameSequencer","clearAudioBuffer","currentCycles","memoryLocationNR50","memoryLocationNR51","memoryLocationNR52","memoryLocationChannel3LoadRegisterStart","initializeSound","batchProcessAudio","updateSound","frameSequencerUpdated","updateFrameSequencer","calculateSound","getNumberOfSamplesInAudioBuffer","mixedSample","leftChannelSample","rightChannelSample","getSampleAsUnsignedByte","mixerVolume","precision","convertedSample","maxDivider","leftVolume","rightVolume","bufferLocation","audioQueueOffset","SoundRegisterWriteTraps","SoundRegisterReadTraps","registerNR52","Interrupts","updateInterruptEnabled","isVBlankInterruptEnabled","bitPositionVBlankInterrupt","isLcdInterruptEnabled","bitPositionLcdInterrupt","isTimerInterruptEnabled","bitPositionTimerInterrupt","isSerialInterruptEnabled","bitPositionSerialInterrupt","isJoypadInterruptEnabled","bitPositionJoypadInterrupt","interruptsEnabledValue","updateInterruptRequested","isVBlankInterruptRequested","isLcdInterruptRequested","isTimerInterruptRequested","isSerialInterruptRequested","isJoypadInterruptRequested","interruptsRequestedValue","areInterruptsPending","masterInterruptSwitch","masterInterruptSwitchDelay","memoryLocationInterruptEnabled","memoryLocationInterruptRequest","initializeInterrupts","checkInterrupts","isAnInterruptRequestedAndEnabledValue","wasInterruptHandled","isHaltNoJump","_handleInterrupt","interuptHandlerCycles","isHalted","exitHaltAndStop","setInterrupts","interruptRequest","stackPointer","sixteenBitStoreIntoGBMemory","programCounter","_requestInterrupt","requestVBlankInterrupt","requestLcdInterrupt","requestTimerInterrupt","requestJoypadInterrupt","requestSerialInterrupt","Timers","updateDividerRegister","oldDividerRegister","dividerRegister","memoryLocationDividerRegister","timerEnabled","_checkDividerRegisterFallingEdgeDetector","_incrementTimerCounter","updateTimerCounter","timerCounterWasReset","timerCounterOverflowDelay","timerCounter","updateTimerModulo","timerModulo","updateTimerControl","oldTimerEnabled","newTimerInputClock","oldTimerCounterMaskBit","_getTimerCounterMaskBit","timerInputClock","newTimerCounterMaskBit","shouldIncrementTimerCounter","memoryLocationTimerCounter","memoryLocationTimerModulo","memoryLocationTimerControl","timerCounterMask","initializeTimers","batchProcessTimers","updateTimers","cyclesIncreased","curDividerRegister","counter","newDividerRegister","timerCounterMaskBit","Serial","updateTransferControl","isShiftClockInternal","isClockSpeedFast","transferStartFlag","memoryLocationSerialTransferData","memoryLocationSerialTransferControl","numberOfBitsTransferred","initializeSerial","updateSerial","oldCycles","curCycles","_checkFallingEdgeDetector","transferData","transferControl","newCycles","maskBit","_getFallingEdgeMaskBit","Joypad","updateJoypad","joypadRegisterFlipped","isDpadType","isButtonType","memoryLocationJoypadRegister","up","down","left","right","a","b","select","start","getJoypadState","joypadRegister","setJoypadState","_pressJoypadButton","_releaseJoypadButton","buttonId","isStopped","isButtonStateChanging","_getJoypadButtonStateFromButtonId","_setJoypadButtonStateFromButtonId","isDpadTypeButton","shouldRequestInterrupt","isPressed","handleBanking","Memory","isRomOnly","isMBC1","isMBC2","romEnableByte","isRamBankingEnabled","isMBC5","currentRomBank","romBankLowerBits","isMBC3","isMBC1RomModeEnabled","romBankHigherBits","ramBankBits","currentRamBank","getRomBankAddress","gameboyOffset","switchableCartridgeRomLocation","getRamBankAddress","cartridgeRamLocation","initializeDma","startDmaTransfer","sourceAddressOffset","sourceAddress","spriteInformationByte","spriteInformationAddress","spriteInformationTableLocation","DMACycles","startHdmaTransfer","hdmaTriggerByteToBeWritten","isHblankHdmaActive","hdmaTriggerByte","memoryLocationHdmaTrigger","hdmaSource","getHdmaSourceFromMemory","hdmaDestination","getHdmaDestinationFromMemory","transferLength","hblankHdmaTransferLengthRemaining","hblankHdmaSource","hblankHdmaDestination","hdmaTransfer","updateHblankHdma","bytesToTransfer","remainingTransferLength","transferLengthAsByte","sourceByte","eightBitLoadFromGBMemoryWithTraps","hdmaDestinationWithWrapping","eightBitStoreIntoGBMemoryWithTraps","hdmaCycles","hdmaSourceHigh","memoryLocationHdmaSourceHigh","hdmaSourceLow","memoryLocationHdmaSourceLow","hdmaDestinationHigh","memoryLocationHdmaDestinationHigh","hdmaDestinationLow","memoryLocationHdmaDestinationLow","videoRamLocation","checkWriteTraps","memoryLocationSpeedSwitch","memoryLocationBootROMSwitch","echoRamLocation","wramOffset","spriteInformationTableLocationEnd","Lcd","currentLcdMode","unusableMemoryLocation","unusableMemoryEndLocation","memoryLocationLcdControl","memoryLocationWindowX","updateLcdControl","memoryLocationLcdStatus","updateLcdStatus","memoryLocationScanlineRegister","scanlineRegister","memoryLocationCoincidenceCompare","coincidenceCompare","memoryLocationDmaTransfer","memoryLocationScrollX","scrollX","memoryLocationScrollY","scrollY","windowX","memoryLocationWindowY","windowY","memoryLocationGBCWRAMBank","memoryLocationGBCVRAMBank","getWasmBoyOffsetFromGameBoyOffset","gameboyOffsetHighByte","internalRamBankZeroLocation","wramBankId","Breakpoints","readGbMemory","writeGbMemory","reachedBreakpoint","setProgramCounterBreakpoint","breakpoint","resetProgramCounterBreakpoint","setReadGbMemoryBreakpoint","resetReadGbMemoryBreakpoint","setWriteGbMemoryBreakpoint","resetWriteGbMemoryBreakpoint","sixteenBitStoreIntoGBMemoryWithTraps","nextOffset","currentLcdStatus","valueNoBottomBits","lcdStatusOnlyBottomBits","wasLcdEnabled","enabled","windowTileMapDisplaySelect","windowDisplayEnabled","bgWindowTileDataSelect","bgTileMapDisplaySelect","tallSpriteSize","spriteDisplayEnable","bgDisplayEnabled","resetLcd","shouldBlankScreen","scanlineCycleCounter","lcdStatus","setLcdStatus","lcdMode","newLcdMode","MIN_CYCLES_SPRITES_LCD_MODE","checkCoincidence","renderBackground","tileMapMemoryLocation","pixelYPositionInMap","drawBackgroundWindowScanline","renderWindow","xOffset","iStart","tileYPositionInMap","pixelXPositionInMap","tileXPositionInMap","tileMapAddress","usedTileCache","drawLineOfTileFromTileCache","drawLineOfTileFromTileId","drawColorPixelFromTileId","drawMonochromePixelFromTileId","xPixel","yPixel","pixelYInTile","setPixelOnFrame","wasLastTileHorizontallyFlipped","isCurrentTileHorizontallyFlipped","tileCacheIndex","xPos","previousXPixel","previousTilePixelLocation","getRgbPixelStart","pixelPriority","xOffsetTileWidthRemainder","tileXStart","tileXEnd","renderSprites","useLargerSprites","spriteTableIndex","index","memoryLocationSpriteAttributesTable","spriteYPosition","spriteXPosition","spriteTileId","spriteHeight","isSpritePriorityBehindWindowAndBackground","flipSpriteY","flipSpriteX","currentSpriteLine","spriteTileAddressStart","memoryLocationTileDataSelectOneStart","spriteTileAddress","spriteDataByteOneForLineOfTilePixels","spriteDataByteTwoForLineOfTilePixels","tilePixel","spritePixelXInTile","spriteColorId","spriteXPixelLocationInCameraView","shouldShowFromLcdcPriority","shouldHideFromOamPriority","shouldHideFromBgPriority","bgColorFromPriorityByte","spritePaletteLocation","MAX_CYCLES_PER_SCANLINE","MIN_CYCLES_TRANSFER_DATA_LCD_MODE","memoryLocationTileMapSelectZeroStart","memoryLocationTileMapSelectOneStart","batchProcessGraphics","updateGraphics","initializeGraphics","_drawScanline","_renderEntireFrame","wasmBoyAddress","checkReadTraps","currentSpeedSwitchRegister","upperDividerRegisterBits","readTrapResult","sixteenBitLoadFromGBMemory","lowByteReadTrapResult","highByteReadTrapResult","cartridgeRomLocation","internalRamBankOneLocation","initializeCartridge","cartridgeType","MAX_CYCLES_PER_FRAME","enableHalt","isHaltNormal","haltTypeValue","isHaltBug","registerA","registerB","registerC","registerD","registerE","registerH","registerL","initializeCpu","addARegister","register","addAThroughCarryRegister","overflowedResult","subARegister","negativeRegister","subAThroughCarryRegister","carryRegisterCheck","andARegister","xorARegister","orARegister","cpARegister","tempResult","rotateRegisterLeft","rotateRegisterRight","rotateRegisterLeftThroughCarry","hasHighbit","rotateRegisterRightThroughCarry","hasLowBit","shiftLeftRegister","shiftRightArithmeticRegister","hasLowbit","swapNibblesOnRegister","highNibble","lowNibble","shiftRightLogicalRegister","testBitOnRegister","testByte","setBitOnRegister","bitValue","setByte","relativeJump","relativeJumpOffset","handleCbOpcode","cbOpcode","handledOpcode","instructionRegisterValue","instructionRegisterResult","registerNumber","eightBitLoadSyncCycles","opcodeHighNibble","eightBitStoreSyncCycles","executeOpcode$$1","opcode","handleOpcode0x","handleOpcode1x","handleOpcode2x","handleOpcode3x","handleOpcode4x","handleOpcode5x","handleOpcode6x","handleOpcode7x","handleOpcode8x","handleOpcode9x","handleOpcodeAx","handleOpcodeBx","handleOpcodeCx","handleOpcodeDx","handleOpcodeEx","handleOpcodeFx","syncCycles","sixteenBitLoadSyncCycles","sixteenBitStoreSyncCycles","getDataByteOne","getDataByteTwo","getConcatenatedDataByte","concatenatedDataByte","registerBC3","registerHL","registerBC9","registerBCB","speedSwitch","registerDE3","registerDE9","registerDEA","registerDEB","sixteenBitDataByte","registerHL2","registerHL3","adjustedRegister","adjustment","registerHL9","registerHLA","registerHLB","registerHL4","valueAtHL4","incrementer","registerHL5","valueAtHL5","valueAtHL6","valueAtHLE","registerBC1","cbCycles","registerDE1","largeDataByteOne","registerHL1","signedDataByteOne","registerAF1","Cycles","cyclesPerCycleSet","cycleSets","cycles","getCyclesPerCycleSet","getCycleSets","getCycles","trackCyclesRan","resetCycles","Execute","stepsPerStepSet","stepSets","steps","RESPONSE_CONDITION_ERROR","RESPONSE_CONDITION_FRAME","RESPONSE_CONDITION_AUDIO","RESPONSE_CONDITION_BREAKPOINT","getStepsPerStepSet","getStepSets","getSteps","trackStepsRan","esteps","resetSteps","executeMultipleFrames","numberOfFrames","frameResponse","framesRun","executeFrame","executeUntilCondition","executeFrameAndCheckAudio","maxAudioBuffer","checkMaxCyclesPerFrame","audioBufferSize","errorCondition","frameCondition","audioBufferCondition","executeStep","setHasCoreStarted","haltBugOpcode","haltBugCycles","interruptCycles","hasStarted","hasCoreStarted","config","gbcType","initializeVarious","isGBC","getRegisterA","getRegisterB","getRegisterC","getRegisterD","getRegisterE","getRegisterH","getRegisterL","getRegisterF","getProgramCounter","getStackPointer","getOpcodeAtProgramCounter","getLY","drawBackgroundMapToWasmMemory","showColor","drawTileDataToWasmMemory","tileDataMapGridY","tileDataMapGridX","spriteRow","spriteColumn","spriteIndex","currentSpriteAttributes","spriteVramBankId","foundTileMapAddress","drawOamToWasmMemory","tilesToDraw","getDIV","getTIMA","getTMA","getTAC","updateDebugGBMemory","getWasmBoyTsCore","instance","exports","WasmBoyCore","byteMemory","type"],"mappings":"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"}