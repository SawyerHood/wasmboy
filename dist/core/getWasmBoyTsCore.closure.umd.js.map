{"version":3,"file":"getWasmBoyTsCore.closure.umd.js","sources":["core.esm.js","../../core/portable/getTsCore.js"],"sourcesContent":["// Banner placed by rollup to mock out some items on our esm build\n// This is useful for things like wasmmemory\n\nconst wasmboyMemorySize = 0x8b0000;\n\n// Simply initialized to the size we need\nconst wasmByteMemory = new Uint8ClampedArray(wasmboyMemorySize);\n\n// Memory mock\nexport const memory = {\n  size: () => {\n    return wasmboyMemorySize;\n  },\n  grow: () => {},\n  wasmByteMemory: wasmByteMemory\n};\n\nconst load = offset => {\n  return wasmByteMemory[offset];\n};\n\nconst store = (offset, value) => {\n  wasmByteMemory[offset] = value;\n};\n\nconst abs = value => {\n  return Math.abs(value);\n};\n\nconst ceil = value => {\n  return Math.ceil(value);\n};\n\n// Constants that will be shared by the wasm core of the emulator\n// And libraries built around the wasm (such as the official JS), or @CryZe wasmboy-rs\n// ----------------------------------\n// Wasmboy Memory Map\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// ----------------------------------\n// AssemblyScript\nvar ASSEMBLYSCRIPT_MEMORY_LOCATION = 0x000000;\nvar ASSEMBLYSCRIPT_MEMORY_SIZE = 0x000400;\n// WasmBoy States\nvar WASMBOY_STATE_LOCATION = ASSEMBLYSCRIPT_MEMORY_LOCATION + ASSEMBLYSCRIPT_MEMORY_SIZE;\nvar WASMBOY_STATE_SIZE = 0x000400;\n// Gameboy Internal Memory\nvar VIDEO_RAM_LOCATION = WASMBOY_STATE_LOCATION + WASMBOY_STATE_SIZE;\nvar VIDEO_RAM_SIZE = 0x004000;\nvar WORK_RAM_LOCATION = VIDEO_RAM_LOCATION + VIDEO_RAM_SIZE;\nvar WORK_RAM_SIZE = 0x008000;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION = WORK_RAM_LOCATION + WORK_RAM_SIZE;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE = 0x004000;\n// General Gameboy Internal Memory\nvar GAMEBOY_INTERNAL_MEMORY_LOCATION = VIDEO_RAM_LOCATION;\nvar GAMEBOY_INTERNAL_MEMORY_SIZE = OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION - VIDEO_RAM_LOCATION + OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE;\n// Graphics Output\nvar GBC_PALETTE_LOCATION = OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION + OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE;\nvar GBC_PALETTE_SIZE = 0x000080;\nvar BG_PRIORITY_MAP_LOCATION = GBC_PALETTE_LOCATION + GBC_PALETTE_SIZE;\nvar BG_PRIORITY_MAP_SIZE = 0x005c00;\nvar FRAME_LOCATION = BG_PRIORITY_MAP_LOCATION + BG_PRIORITY_MAP_SIZE;\nvar FRAME_SIZE = 0x016c00;\nvar BACKGROUND_MAP_LOCATION = FRAME_LOCATION + FRAME_SIZE;\nvar BACKGROUND_MAP_SIZE = 0x030000;\nvar TILE_DATA_LOCATION = BACKGROUND_MAP_LOCATION + BACKGROUND_MAP_SIZE;\nvar TILE_DATA_SIZE = 0x024000;\nvar OAM_TILES_LOCATION = TILE_DATA_LOCATION + TILE_DATA_SIZE;\nvar OAM_TILES_SIZE = 0x003c00;\n// General Graphics Output\nvar GRAPHICS_OUTPUT_LOCATION = GBC_PALETTE_LOCATION;\nvar GRAPHICS_OUTPUT_SIZE = OAM_TILES_LOCATION - GBC_PALETTE_LOCATION + OAM_TILES_SIZE;\n// Audio Output\nvar CHANNEL_1_BUFFER_LOCATION = OAM_TILES_LOCATION + OAM_TILES_SIZE;\nvar CHANNEL_1_BUFFER_SIZE = 0x020000;\nvar CHANNEL_2_BUFFER_LOCATION = CHANNEL_1_BUFFER_LOCATION + CHANNEL_1_BUFFER_SIZE;\nvar CHANNEL_2_BUFFER_SIZE = 0x020000;\nvar CHANNEL_3_BUFFER_LOCATION = CHANNEL_2_BUFFER_LOCATION + CHANNEL_2_BUFFER_SIZE;\nvar CHANNEL_3_BUFFER_SIZE = 0x020000;\nvar CHANNEL_4_BUFFER_LOCATION = CHANNEL_3_BUFFER_LOCATION + CHANNEL_3_BUFFER_SIZE;\nvar CHANNEL_4_BUFFER_SIZE = 0x020000;\nvar AUDIO_BUFFER_LOCATION = CHANNEL_4_BUFFER_LOCATION + CHANNEL_4_BUFFER_SIZE;\nvar AUDIO_BUFFER_SIZE = 0x020000;\n// Catridge Memory\nvar CARTRIDGE_RAM_LOCATION = AUDIO_BUFFER_LOCATION + AUDIO_BUFFER_SIZE;\nvar CARTRIDGE_RAM_SIZE = 0x020000;\nvar CARTRIDGE_ROM_LOCATION = CARTRIDGE_RAM_LOCATION + CARTRIDGE_RAM_SIZE;\nvar CARTRIDGE_ROM_SIZE = 0x7e0400;\n// Debug Memory\nvar DEBUG_GAMEBOY_MEMORY_LOCATION = CARTRIDGE_ROM_LOCATION + CARTRIDGE_ROM_SIZE;\nvar DEBUG_GAMEBOY_MEMORY_SIZE = 0xffff;\n// Final General Size\nvar WASMBOY_MEMORY_LOCATION = 0x000000;\nvar WASMBOY_MEMORY_SIZE = DEBUG_GAMEBOY_MEMORY_LOCATION + DEBUG_GAMEBOY_MEMORY_SIZE + 1;\nvar WASMBOY_WASM_PAGES = ceil(WASMBOY_MEMORY_SIZE / 1024 / 64) + 1;\n\nvar Config = /** @class */ (function () {\n    function Config() {\n    }\n    // Boot Rom\n    Config.enableBootRom = false;\n    // GBC Options\n    Config.useGbcWhenAvailable = true;\n    // Batch Processing\n    Config.audioBatchProcessing = false;\n    Config.graphicsBatchProcessing = false;\n    Config.timersBatchProcessing = false;\n    // Scanline Rendering\n    Config.graphicsDisableScanlineRendering = false;\n    // Acumulate Sound Samples\n    Config.audioAccumulateSamples = false;\n    // Tile Rednering\n    Config.tileRendering = false;\n    Config.tileCaching = false;\n    // Audio Debugging\n    Config.enableAudioDebugging = false;\n    return Config;\n}());\n\n// Portable Code for JS Wasm Benchmarking\n// https://github.com/AssemblyScript/assemblyscript/wiki/Writing-portable-code\n// https://github.com/AssemblyScript/assemblyscript/blob/master/std/portable/index.js\nfunction u8Portable(param) {\n    return param & 0xff;\n}\nfunction u16Portable(param) {\n    return param & 0xffff;\n}\nfunction i8Portable(param) {\n    return (param << 24) >> 24;\n}\nfunction i32Portable(param) {\n    return param | 0;\n}\n\n// Set flag bit on on register F. For instance set zero flag to zero -> (7, 0)\nfunction setFlagBit(flagBit, flagValue) {\n    var bitwiseOperand = u8Portable(1 << flagBit);\n    if (flagValue > 0) {\n        Cpu.registerF = Cpu.registerF | bitwiseOperand;\n    }\n    else {\n        // XOR out the two ones\n        bitwiseOperand = 0xff ^ bitwiseOperand;\n        Cpu.registerF = Cpu.registerF & bitwiseOperand;\n    }\n    return Cpu.registerF;\n}\n// Overload the set flag bit for ease of use\nfunction setZeroFlag$$1(value) {\n    setFlagBit(7, value);\n}\nfunction setSubtractFlag(value) {\n    setFlagBit(6, value);\n}\nfunction setHalfCarryFlag(value) {\n    setFlagBit(5, value);\n}\nfunction setCarryFlag(value) {\n    setFlagBit(4, value);\n}\n// Getters for flags\nfunction getZeroFlag$$1() {\n    return (Cpu.registerF >> 7) & 0x01;\n}\nfunction getSubtractFlag() {\n    return (Cpu.registerF >> 6) & 0x01;\n}\nfunction getHalfCarryFlag() {\n    return (Cpu.registerF >> 5) & 0x01;\n}\nfunction getCarryFlag$$1() {\n    return (Cpu.registerF >> 4) & 0x01;\n}\n// Must be run before the register actually performs the add\n// amountToAdd i16, since max number can be an u8\nfunction checkAndSetEightBitHalfCarryFlag(value, amountToAdd) {\n    if (amountToAdd >= 0) {\n        // https://robdor.com/2016/08/10/gameboy-emulator-half-carry-flag/\n        var result = u8Portable((value & 0x0f) + (amountToAdd & 0x0f)) & 0x10;\n        setHalfCarryFlag((result !== 0x00));\n    }\n    else {\n        // From: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n        // CTRL+F \"subBytes(a, b byte)\"\n        setHalfCarryFlag(((abs(amountToAdd) & 0x0f) > (value & 0x0f)));\n    }\n}\nfunction checkAndSetEightBitCarryFlag(value, amountToAdd) {\n    if (amountToAdd >= 0) {\n        var result = u8Portable(value + amountToAdd);\n        setCarryFlag((value > result));\n    }\n    else {\n        setCarryFlag((abs(amountToAdd) > value));\n    }\n}\n// Function to handle 16 bit addition overflow, and set the carry flags accordingly\n// i32 on valueTwo to support passing signed immedaite values\nfunction checkAndSetSixteenBitFlagsAddOverflow(valueOne, valueTwo, useStackPointerBits) {\n    // need to differentiate between HL and SP\n    // HL carries are at 11 and 15, SP carries are at 3 and 7 :p\n    if (useStackPointerBits) {\n        // Logic from : https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n        // CTRL+F add_sp_n\n        // using the stack pointer bits means we can safely assume the value is signed\n        var signedValueOne = valueOne;\n        var result = signedValueOne + valueTwo;\n        var flagXor = signedValueOne ^ valueTwo ^ result;\n        setHalfCarryFlag(((flagXor & 0x10) !== 0));\n        setCarryFlag(((flagXor & 0x100) !== 0));\n    }\n    else {\n        // Logic from: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n        // CTRL+F addWords\n        // Value two is not signed\n        var result = u16Portable(valueOne + valueTwo);\n        // Check the carry flag by allowing the overflow\n        setCarryFlag((result < valueOne));\n        // To check for half carry flag (bit 15), by XOR'ing valyes, and and'ing the bit in question\n        var halfCarryXor = valueOne ^ valueTwo ^ result;\n        var halfCarryAnd = u16Portable(halfCarryXor & 0x1000);\n        setHalfCarryFlag((halfCarryAnd !== 0x00));\n    }\n}\n\n// File for all of the colors for different GB Palletes\n// https://i.imgur.com/HupBY.png\n// https://www.libretro.com/index.php/gambatte-progress-report/\n// https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM\n// Our default wasmboy gb colors\nvar WasmBoyGBColors = /** @class */ (function () {\n    function WasmBoyGBColors() {\n    }\n    //Bg\n    WasmBoyGBColors.bgWhite = 0xf2f2f2;\n    WasmBoyGBColors.bgLightGrey = 0xa0a0a0;\n    WasmBoyGBColors.bgDarkGrey = 0x585858;\n    WasmBoyGBColors.bgBlack = 0x080808;\n    // Obj 0\n    WasmBoyGBColors.obj0White = 0xf2f2f2;\n    WasmBoyGBColors.obj0LightGrey = 0xa0a0a0;\n    WasmBoyGBColors.obj0DarkGrey = 0x585858;\n    WasmBoyGBColors.obj0Black = 0x080808;\n    // Obj1\n    WasmBoyGBColors.obj1White = 0xf2f2f2;\n    WasmBoyGBColors.obj1LightGrey = 0xa0a0a0;\n    WasmBoyGBColors.obj1DarkGrey = 0x585858;\n    WasmBoyGBColors.obj1Black = 0x080808;\n    return WasmBoyGBColors;\n}());\n// Action Button: Right\nvar GreenColors = /** @class */ (function () {\n    function GreenColors() {\n    }\n    //Bg\n    GreenColors.bgWhite = 0xffffff;\n    GreenColors.bgLightGrey = 0x52ff00;\n    GreenColors.bgDarkGrey = 0xff4200;\n    GreenColors.bgBlack = 0x000000;\n    // Obj 0\n    GreenColors.obj0White = 0xffffff;\n    GreenColors.obj0LightGrey = 0x52ff00;\n    GreenColors.obj0DarkGrey = 0xff4200;\n    GreenColors.obj0Black = 0x000000;\n    // Obj1\n    GreenColors.obj1White = 0xffffff;\n    GreenColors.obj1LightGrey = 0x52ff00;\n    GreenColors.obj1DarkGrey = 0xff4200;\n    GreenColors.obj1Black = 0x000000;\n    return GreenColors;\n}());\n// Action Button: A + Down\nvar OrangeColors = /** @class */ (function () {\n    function OrangeColors() {\n    }\n    //Bg\n    OrangeColors.bgWhite = 0xffffff;\n    OrangeColors.bgLightGrey = 0xffff00;\n    OrangeColors.bgDarkGrey = 0xff0000;\n    OrangeColors.bgBlack = 0x000000;\n    // Obj 0\n    OrangeColors.obj0White = 0xffffff;\n    OrangeColors.obj0LightGrey = 0xffff00;\n    OrangeColors.obj0DarkGrey = 0xff0000;\n    OrangeColors.obj0Black = 0x000000;\n    // Obj1\n    OrangeColors.obj1White = 0xffffff;\n    OrangeColors.obj1LightGrey = 0xffff00;\n    OrangeColors.obj1DarkGrey = 0xff0000;\n    OrangeColors.obj1Black = 0x000000;\n    return OrangeColors;\n}());\n// Action Button: Up\nvar BrownColors = /** @class */ (function () {\n    function BrownColors() {\n    }\n    //Bg\n    BrownColors.bgWhite = 0xffffff;\n    BrownColors.bgLightGrey = 0xffad63;\n    BrownColors.bgDarkGrey = 0x843100;\n    BrownColors.bgBlack = 0x000000;\n    // Obj 0\n    BrownColors.obj0White = 0xffffff;\n    BrownColors.obj0LightGrey = 0xffad63;\n    BrownColors.obj0DarkGrey = 0x843100;\n    BrownColors.obj0Black = 0x000000;\n    // Obj1\n    BrownColors.obj1White = 0xffffff;\n    BrownColors.obj1LightGrey = 0xffad63;\n    BrownColors.obj1DarkGrey = 0x843100;\n    BrownColors.obj1Black = 0x000000;\n    return BrownColors;\n}());\n// Action Button: B + Right\nvar InvertedColors = /** @class */ (function () {\n    function InvertedColors() {\n    }\n    //Bg\n    InvertedColors.bgWhite = 0x000000;\n    InvertedColors.bgLightGrey = 0x008484;\n    InvertedColors.bgDarkGrey = 0xffde00;\n    InvertedColors.bgBlack = 0xffffff;\n    // Obj 0\n    InvertedColors.obj0White = 0x000000;\n    InvertedColors.obj0LightGrey = 0x008484;\n    InvertedColors.obj0DarkGrey = 0xffde00;\n    InvertedColors.obj0Black = 0xffffff;\n    // Obj1\n    InvertedColors.obj1White = 0x000000;\n    InvertedColors.obj1LightGrey = 0x008484;\n    InvertedColors.obj1DarkGrey = 0xffde00;\n    InvertedColors.obj1Black = 0xffffff;\n    return InvertedColors;\n}());\n// Action Button: B + Left\nvar GrayscaleColors = /** @class */ (function () {\n    function GrayscaleColors() {\n    }\n    //Bg\n    GrayscaleColors.bgWhite = 0xffffff;\n    GrayscaleColors.bgLightGrey = 0xa5a5a5;\n    GrayscaleColors.bgDarkGrey = 0x525252;\n    GrayscaleColors.bgBlack = 0x000000;\n    // Obj 0\n    GrayscaleColors.obj0White = 0xffffff;\n    GrayscaleColors.obj0LightGrey = 0xa5a5a5;\n    GrayscaleColors.obj0DarkGrey = 0x525252;\n    GrayscaleColors.obj0Black = 0x000000;\n    // Obj1\n    GrayscaleColors.obj1White = 0xffffff;\n    GrayscaleColors.obj1LightGrey = 0xa5a5a5;\n    GrayscaleColors.obj1DarkGrey = 0x525252;\n    GrayscaleColors.obj1Black = 0x000000;\n    return GrayscaleColors;\n}());\n// Action Button: Down\nvar PastelMixColors = /** @class */ (function () {\n    function PastelMixColors() {\n    }\n    //Bg\n    PastelMixColors.bgWhite = 0xffffa5;\n    PastelMixColors.bgLightGrey = 0xff9494;\n    PastelMixColors.bgDarkGrey = 0x9494ff;\n    PastelMixColors.bgBlack = 0x000000;\n    // Obj 0\n    PastelMixColors.obj0White = 0xffffa5;\n    PastelMixColors.obj0LightGrey = 0xff9494;\n    PastelMixColors.obj0DarkGrey = 0x9494ff;\n    PastelMixColors.obj0Black = 0x000000;\n    // Obj1\n    PastelMixColors.obj1White = 0xffffa5;\n    PastelMixColors.obj1LightGrey = 0xff9494;\n    PastelMixColors.obj1DarkGrey = 0x9494ff;\n    PastelMixColors.obj1Black = 0x000000;\n    return PastelMixColors;\n}());\n// Action Button: B + Up\nvar DarkBrownColors = /** @class */ (function () {\n    function DarkBrownColors() {\n    }\n    //Bg\n    DarkBrownColors.bgWhite = 0xffe6c5;\n    DarkBrownColors.bgLightGrey = 0xce9c84;\n    DarkBrownColors.bgDarkGrey = 0x846b29;\n    DarkBrownColors.bgBlack = 0x5a3108;\n    // Obj 0\n    DarkBrownColors.obj0White = 0xffffff;\n    DarkBrownColors.obj0LightGrey = 0xffad63;\n    DarkBrownColors.obj0DarkGrey = 0x843100;\n    DarkBrownColors.obj0Black = 0x000000;\n    // Obj1\n    DarkBrownColors.obj1White = 0xffffff;\n    DarkBrownColors.obj1LightGrey = 0xffad63;\n    DarkBrownColors.obj1DarkGrey = 0x843100;\n    DarkBrownColors.obj1Black = 0x000000;\n    return DarkBrownColors;\n}());\n// Action Button: A + Right\nvar DarkGreenColors = /** @class */ (function () {\n    function DarkGreenColors() {\n    }\n    //Bg\n    DarkGreenColors.bgWhite = 0xffffff;\n    DarkGreenColors.bgLightGrey = 0x7bff31;\n    DarkGreenColors.bgDarkGrey = 0x0063c5;\n    DarkGreenColors.bgBlack = 0x000000;\n    // Obj 0\n    DarkGreenColors.obj0White = 0xffffff;\n    DarkGreenColors.obj0LightGrey = 0xff8484;\n    DarkGreenColors.obj0DarkGrey = 0x943a3a;\n    DarkGreenColors.obj0Black = 0x000000;\n    // Obj1\n    DarkGreenColors.obj1White = 0xffffff;\n    DarkGreenColors.obj1LightGrey = 0xff8484;\n    DarkGreenColors.obj1DarkGrey = 0x943a3a;\n    DarkGreenColors.obj1Black = 0x000000;\n    return DarkGreenColors;\n}());\n// Action Button: A + Left\nvar DarkBlueColors = /** @class */ (function () {\n    function DarkBlueColors() {\n    }\n    //Bg\n    DarkBlueColors.bgWhite = 0xffffff;\n    DarkBlueColors.bgLightGrey = 0x8c8cde;\n    DarkBlueColors.bgDarkGrey = 0x52528c;\n    DarkBlueColors.bgBlack = 0x000000;\n    // Obj 0\n    DarkBlueColors.obj0White = 0xffffff;\n    DarkBlueColors.obj0LightGrey = 0xff8484;\n    DarkBlueColors.obj0DarkGrey = 0x943a3a;\n    DarkBlueColors.obj0Black = 0x000000;\n    // Obj1\n    DarkBlueColors.obj1White = 0xffffff;\n    DarkBlueColors.obj1LightGrey = 0xffad63;\n    DarkBlueColors.obj1DarkGrey = 0x843100;\n    DarkBlueColors.obj1Black = 0x000000;\n    return DarkBlueColors;\n}());\n// Action Button: A + Up\nvar RedColors = /** @class */ (function () {\n    function RedColors() {\n    }\n    //Bg\n    RedColors.bgWhite = 0xffffff;\n    RedColors.bgLightGrey = 0xff8484;\n    RedColors.bgDarkGrey = 0x943a3a;\n    RedColors.bgBlack = 0x000000;\n    // Obj 0\n    RedColors.obj0White = 0xffffff;\n    RedColors.obj0LightGrey = 0x7bff31;\n    RedColors.obj0DarkGrey = 0x008400;\n    RedColors.obj0Black = 0x000000;\n    // Obj1\n    RedColors.obj1White = 0xffffff;\n    RedColors.obj1LightGrey = 0x63a5ff;\n    RedColors.obj1DarkGrey = 0x0000ff;\n    RedColors.obj1Black = 0x000000;\n    return RedColors;\n}());\n// Action Button: Left\nvar BlueColors = /** @class */ (function () {\n    function BlueColors() {\n    }\n    //Bg\n    BlueColors.bgWhite = 0xffffff;\n    BlueColors.bgLightGrey = 0x63a5ff;\n    BlueColors.bgDarkGrey = 0x0000ff;\n    BlueColors.bgBlack = 0x000000;\n    // Obj 0\n    BlueColors.obj0White = 0xffffff;\n    BlueColors.obj0LightGrey = 0xff8484;\n    BlueColors.obj0DarkGrey = 0x943a3a;\n    BlueColors.obj0Black = 0x000000;\n    // Obj1\n    BlueColors.obj1White = 0xffffff;\n    BlueColors.obj1LightGrey = 0x7bff31;\n    BlueColors.obj1DarkGrey = 0x008400;\n    BlueColors.obj1Black = 0x000000;\n    return BlueColors;\n}());\n// Action Button: B + Down\nvar YellowColors = /** @class */ (function () {\n    function YellowColors() {\n    }\n    //Bg\n    YellowColors.bgWhite = 0xffffff;\n    YellowColors.bgLightGrey = 0xffff00;\n    YellowColors.bgDarkGrey = 0x7b4a00;\n    YellowColors.bgBlack = 0x000000;\n    // Obj 0\n    YellowColors.obj0White = 0xffffff;\n    YellowColors.obj0LightGrey = 0x63a5ff;\n    YellowColors.obj0DarkGrey = 0x0000ff;\n    YellowColors.obj0Black = 0x000000;\n    // Obj1\n    YellowColors.obj1White = 0xffffff;\n    YellowColors.obj1LightGrey = 0x7bff31;\n    YellowColors.obj1DarkGrey = 0x008400;\n    YellowColors.obj1Black = 0x000000;\n    return YellowColors;\n}());\n// Assigned Color Palettes\n// Alleyway\nvar Table00Entry08Colors = /** @class */ (function () {\n    function Table00Entry08Colors() {\n    }\n    //Bg\n    Table00Entry08Colors.bgWhite = 0xa59cff;\n    Table00Entry08Colors.bgLightGrey = 0xffff00;\n    Table00Entry08Colors.bgDarkGrey = 0x006300;\n    Table00Entry08Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table00Entry08Colors.obj0White = 0xa59cff;\n    Table00Entry08Colors.obj0LightGrey = 0xffff00;\n    Table00Entry08Colors.obj0DarkGrey = 0x006300;\n    Table00Entry08Colors.obj0Black = 0x000000;\n    // Obj1\n    Table00Entry08Colors.obj1White = 0xa59cff;\n    Table00Entry08Colors.obj1LightGrey = 0xffff00;\n    Table00Entry08Colors.obj1DarkGrey = 0x006300;\n    Table00Entry08Colors.obj1Black = 0x000000;\n    return Table00Entry08Colors;\n}());\n// Pokemon Blue\nvar Table01Entry0BColors = /** @class */ (function () {\n    function Table01Entry0BColors() {\n    }\n    //Bg\n    Table01Entry0BColors.bgWhite = 0xffffff;\n    Table01Entry0BColors.bgLightGrey = 0x63a5ff;\n    Table01Entry0BColors.bgDarkGrey = 0x0000ff;\n    Table01Entry0BColors.bgBlack = 0x000000;\n    // Obj 0\n    Table01Entry0BColors.obj0White = 0xffffff;\n    Table01Entry0BColors.obj0LightGrey = 0xff8484;\n    Table01Entry0BColors.obj0DarkGrey = 0x943a3a;\n    Table01Entry0BColors.obj0Black = 0x000000;\n    // Obj1\n    Table01Entry0BColors.obj1White = 0xffffff;\n    Table01Entry0BColors.obj1LightGrey = 0x63a5ff;\n    Table01Entry0BColors.obj1DarkGrey = 0x0000ff;\n    Table01Entry0BColors.obj1Black = 0x000000;\n    return Table01Entry0BColors;\n}());\n// Pokemon Red\nvar Table01Entry10Colors = /** @class */ (function () {\n    function Table01Entry10Colors() {\n    }\n    //Bg\n    Table01Entry10Colors.bgWhite = 0xffffff;\n    Table01Entry10Colors.bgLightGrey = 0xff8484;\n    Table01Entry10Colors.bgDarkGrey = 0x943a3a;\n    Table01Entry10Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table01Entry10Colors.obj0White = 0xffffff;\n    Table01Entry10Colors.obj0LightGrey = 0x7bff31;\n    Table01Entry10Colors.obj0DarkGrey = 0x008400;\n    Table01Entry10Colors.obj0Black = 0x000000;\n    // Obj1\n    Table01Entry10Colors.obj1White = 0xffffff;\n    Table01Entry10Colors.obj1LightGrey = 0xff8484;\n    Table01Entry10Colors.obj1DarkGrey = 0x943a3a;\n    Table01Entry10Colors.obj1Black = 0x000000;\n    return Table01Entry10Colors;\n}());\n// Super Mario Land\nvar Table03Entry0AColors = /** @class */ (function () {\n    function Table03Entry0AColors() {\n    }\n    //Bg\n    Table03Entry0AColors.bgWhite = 0xb5b5ff;\n    Table03Entry0AColors.bgLightGrey = 0xffff94;\n    Table03Entry0AColors.bgDarkGrey = 0xad5a42;\n    Table03Entry0AColors.bgBlack = 0x000000;\n    // Obj 0\n    Table03Entry0AColors.obj0White = 0x000000;\n    Table03Entry0AColors.obj0LightGrey = 0xffffff;\n    Table03Entry0AColors.obj0DarkGrey = 0xff8484;\n    Table03Entry0AColors.obj0Black = 0x943a3a;\n    // Obj1\n    Table03Entry0AColors.obj1White = 0x000000;\n    Table03Entry0AColors.obj1LightGrey = 0xffffff;\n    Table03Entry0AColors.obj1DarkGrey = 0xff8484;\n    Table03Entry0AColors.obj1Black = 0x943a3a;\n    return Table03Entry0AColors;\n}());\n// Super Mario Land 3 - WarioLand\nvar Table05Entry00Colors = /** @class */ (function () {\n    function Table05Entry00Colors() {\n    }\n    //Bg\n    Table05Entry00Colors.bgWhite = 0xffffff;\n    Table05Entry00Colors.bgLightGrey = 0xadad84;\n    Table05Entry00Colors.bgDarkGrey = 0x42737b;\n    Table05Entry00Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry00Colors.obj0White = 0xffffff;\n    Table05Entry00Colors.obj0LightGrey = 0xff7300;\n    Table05Entry00Colors.obj0DarkGrey = 0x944200;\n    Table05Entry00Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry00Colors.obj1White = 0xffffff;\n    Table05Entry00Colors.obj1LightGrey = 0x5abdff;\n    Table05Entry00Colors.obj1DarkGrey = 0xff0000;\n    Table05Entry00Colors.obj1Black = 0x0000ff;\n    return Table05Entry00Colors;\n}());\n// Donkey Kong\nvar Table05Entry01Colors = /** @class */ (function () {\n    function Table05Entry01Colors() {\n    }\n    //Bg\n    Table05Entry01Colors.bgWhite = 0xffff9c;\n    Table05Entry01Colors.bgLightGrey = 0x94b5ff;\n    Table05Entry01Colors.bgDarkGrey = 0x639473;\n    Table05Entry01Colors.bgBlack = 0x003a3a;\n    // Obj 0\n    Table05Entry01Colors.obj0White = 0xffc542;\n    Table05Entry01Colors.obj0LightGrey = 0xffd600;\n    Table05Entry01Colors.obj0DarkGrey = 0x943a00;\n    Table05Entry01Colors.obj0Black = 0x4a0000;\n    // Obj1\n    Table05Entry01Colors.obj1White = 0xffffff;\n    Table05Entry01Colors.obj1LightGrey = 0xff8484;\n    Table05Entry01Colors.obj1DarkGrey = 0x943a3a;\n    Table05Entry01Colors.obj1Black = 0x000000;\n    return Table05Entry01Colors;\n}());\n// Tennis\nvar Table05Entry02Colors = /** @class */ (function () {\n    function Table05Entry02Colors() {\n    }\n    //Bg\n    Table05Entry02Colors.bgWhite = 0x6bff00;\n    Table05Entry02Colors.bgLightGrey = 0xffffff;\n    Table05Entry02Colors.bgDarkGrey = 0xff524a;\n    Table05Entry02Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry02Colors.obj0White = 0xffffff;\n    Table05Entry02Colors.obj0LightGrey = 0xffffff;\n    Table05Entry02Colors.obj0DarkGrey = 0x63a5ff;\n    Table05Entry02Colors.obj0Black = 0x0000ff;\n    // Obj1\n    Table05Entry02Colors.obj1White = 0xffffff;\n    Table05Entry02Colors.obj1LightGrey = 0xffad63;\n    Table05Entry02Colors.obj1DarkGrey = 0x843100;\n    Table05Entry02Colors.obj1Black = 0x000000;\n    return Table05Entry02Colors;\n}());\n// Kirby's Dream Land\nvar Table05Entry08Colors = /** @class */ (function () {\n    function Table05Entry08Colors() {\n    }\n    //Bg\n    Table05Entry08Colors.bgWhite = 0xa59cff;\n    Table05Entry08Colors.bgLightGrey = 0xffff00;\n    Table05Entry08Colors.bgDarkGrey = 0x006300;\n    Table05Entry08Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry08Colors.obj0White = 0xff6352;\n    Table05Entry08Colors.obj0LightGrey = 0xd60000;\n    Table05Entry08Colors.obj0DarkGrey = 0x630000;\n    Table05Entry08Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry08Colors.obj1White = 0x0000ff;\n    Table05Entry08Colors.obj1LightGrey = 0xffffff;\n    Table05Entry08Colors.obj1DarkGrey = 0xffff7b;\n    Table05Entry08Colors.obj1Black = 0x0084ff;\n    return Table05Entry08Colors;\n}());\n// Super Mario Land 2 BAYYYBEEE\nvar Table05Entry09Colors = /** @class */ (function () {\n    function Table05Entry09Colors() {\n    }\n    //Bg\n    Table05Entry09Colors.bgWhite = 0xffffce;\n    Table05Entry09Colors.bgLightGrey = 0x63efef;\n    Table05Entry09Colors.bgDarkGrey = 0x9c8431;\n    Table05Entry09Colors.bgBlack = 0x5a5a5a;\n    // Obj 0\n    Table05Entry09Colors.obj0White = 0xffffff;\n    Table05Entry09Colors.obj0LightGrey = 0xff7300;\n    Table05Entry09Colors.obj0DarkGrey = 0x944200;\n    Table05Entry09Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry09Colors.obj1White = 0xffffff;\n    Table05Entry09Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry09Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry09Colors.obj1Black = 0x000000;\n    return Table05Entry09Colors;\n}());\n// Link's Awakening\nvar Table05Entry11Colors = /** @class */ (function () {\n    function Table05Entry11Colors() {\n    }\n    // Bg\n    Table05Entry11Colors.bgWhite = 0xffffff;\n    Table05Entry11Colors.bgLightGrey = 0xff8484;\n    Table05Entry11Colors.bgDarkGrey = 0x943a3a;\n    Table05Entry11Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry11Colors.obj0White = 0xffffff;\n    Table05Entry11Colors.obj0LightGrey = 0x00ff00;\n    Table05Entry11Colors.obj0DarkGrey = 0x318400;\n    Table05Entry11Colors.obj0Black = 0x004a00;\n    // Obj1\n    Table05Entry11Colors.obj1White = 0xffffff;\n    Table05Entry11Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry11Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry11Colors.obj1Black = 0x000000;\n    return Table05Entry11Colors;\n}());\n// Metroid 2\nvar Table05Entry14Colors = /** @class */ (function () {\n    function Table05Entry14Colors() {\n    }\n    //Bg\n    Table05Entry14Colors.bgWhite = 0xffffff;\n    Table05Entry14Colors.bgLightGrey = 0x63a5ff;\n    Table05Entry14Colors.bgDarkGrey = 0x0000ff;\n    Table05Entry14Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry14Colors.obj0White = 0xffff00;\n    Table05Entry14Colors.obj0LightGrey = 0xff0000;\n    Table05Entry14Colors.obj0DarkGrey = 0x630000;\n    Table05Entry14Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry14Colors.obj1White = 0xffffff;\n    Table05Entry14Colors.obj1LightGrey = 0x7bff31;\n    Table05Entry14Colors.obj1DarkGrey = 0x008400;\n    Table05Entry14Colors.obj1Black = 0x000000;\n    return Table05Entry14Colors;\n}());\n// WarioLand 2\nvar Table05Entry15Colors = /** @class */ (function () {\n    function Table05Entry15Colors() {\n    }\n    //Bg\n    Table05Entry15Colors.bgWhite = 0xffffff;\n    Table05Entry15Colors.bgLightGrey = 0xadad84;\n    Table05Entry15Colors.bgDarkGrey = 0x42737b;\n    Table05Entry15Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry15Colors.obj0White = 0xffffff;\n    Table05Entry15Colors.obj0LightGrey = 0xffad63;\n    Table05Entry15Colors.obj0DarkGrey = 0xffad63;\n    Table05Entry15Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry15Colors.obj1White = 0xffffff;\n    Table05Entry15Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry15Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry15Colors.obj1Black = 0x000000;\n    return Table05Entry15Colors;\n}());\n\n// File for all of the logic of setting gameboy color plaettes\n// Current / exported color\nvar Colors = /** @class */ (function () {\n    function Colors() {\n    }\n    //Bg\n    Colors.bgWhite = WasmBoyGBColors.bgWhite;\n    Colors.bgLightGrey = WasmBoyGBColors.bgLightGrey;\n    Colors.bgDarkGrey = WasmBoyGBColors.bgDarkGrey;\n    Colors.bgBlack = WasmBoyGBColors.bgBlack;\n    // Obj 0\n    Colors.obj0White = WasmBoyGBColors.obj0White;\n    Colors.obj0LightGrey = WasmBoyGBColors.obj0LightGrey;\n    Colors.obj0DarkGrey = WasmBoyGBColors.obj0DarkGrey;\n    Colors.obj0Black = WasmBoyGBColors.obj0Black;\n    // Obj1\n    Colors.obj1White = WasmBoyGBColors.obj1White;\n    Colors.obj1LightGrey = WasmBoyGBColors.obj1LightGrey;\n    Colors.obj1DarkGrey = WasmBoyGBColors.obj1DarkGrey;\n    Colors.obj1Black = WasmBoyGBColors.obj1Black;\n    return Colors;\n}());\n// Inlined because closure compiler inlines\nfunction initializeColors() {\n    setManualColorizationPalette(0);\n    // Do some automatic color palette swapping if we have a loaded ROM\n    var titleChecksum = 0x00;\n    for (var i = 0x0134; i <= 0x0143; i++) {\n        titleChecksum += eightBitLoadFromGBMemory(i);\n    }\n    // Set the colorization for the game automatically if assigned\n    // https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM\n    var hash = titleChecksum & 0xff;\n    setHashColorizationPalette(hash);\n}\nfunction getRedFromHexColor(color) {\n    return (color & 0xff0000) >> 16;\n}\nfunction getGreenFromHexColor(color) {\n    return (color & 0x00ff00) >> 8;\n}\nfunction getBlueFromHexColor(color) {\n    return color & 0x0000ff;\n}\n// Function to set the colorization\n// By manually pressing buttons\nfunction setManualColorizationPalette(colorizationId) {\n    // Set the colorizationId clockwise according to:\n    // https://en.wikipedia.org/wiki/Game_Boy_Color\n    switch (colorizationId) {\n        case 0:\n            Colors.bgWhite = WasmBoyGBColors.bgWhite;\n            Colors.bgLightGrey = WasmBoyGBColors.bgLightGrey;\n            Colors.bgDarkGrey = WasmBoyGBColors.bgDarkGrey;\n            Colors.bgBlack = WasmBoyGBColors.bgBlack;\n            Colors.obj0White = WasmBoyGBColors.obj0White;\n            Colors.obj0LightGrey = WasmBoyGBColors.obj0LightGrey;\n            Colors.obj0DarkGrey = WasmBoyGBColors.obj0DarkGrey;\n            Colors.obj0Black = WasmBoyGBColors.obj0Black;\n            Colors.obj1White = WasmBoyGBColors.obj1White;\n            Colors.obj1LightGrey = WasmBoyGBColors.obj1LightGrey;\n            Colors.obj1DarkGrey = WasmBoyGBColors.obj1DarkGrey;\n            Colors.obj1Black = WasmBoyGBColors.obj1Black;\n            break;\n        case 1:\n            // Up, Brown\n            Colors.bgWhite = BrownColors.bgWhite;\n            Colors.bgLightGrey = BrownColors.bgLightGrey;\n            Colors.bgDarkGrey = BrownColors.bgDarkGrey;\n            Colors.bgBlack = BrownColors.bgBlack;\n            Colors.obj0White = BrownColors.obj0White;\n            Colors.obj0LightGrey = BrownColors.obj0LightGrey;\n            Colors.obj0DarkGrey = BrownColors.obj0DarkGrey;\n            Colors.obj0Black = BrownColors.obj0Black;\n            Colors.obj1White = BrownColors.obj1White;\n            Colors.obj1LightGrey = BrownColors.obj1LightGrey;\n            Colors.obj1DarkGrey = BrownColors.obj1DarkGrey;\n            Colors.obj1Black = BrownColors.obj1Black;\n            break;\n        case 2:\n            // Up + A, Red\n            Colors.bgWhite = RedColors.bgWhite;\n            Colors.bgLightGrey = RedColors.bgLightGrey;\n            Colors.bgDarkGrey = RedColors.bgDarkGrey;\n            Colors.bgBlack = RedColors.bgBlack;\n            Colors.obj0White = RedColors.obj0White;\n            Colors.obj0LightGrey = RedColors.obj0LightGrey;\n            Colors.obj0DarkGrey = RedColors.obj0DarkGrey;\n            Colors.obj0Black = RedColors.obj0Black;\n            Colors.obj1White = RedColors.obj1White;\n            Colors.obj1LightGrey = RedColors.obj1LightGrey;\n            Colors.obj1DarkGrey = RedColors.obj1DarkGrey;\n            Colors.obj1Black = RedColors.obj1Black;\n            break;\n        case 3:\n            // Up + B, DarkBrown\n            Colors.bgWhite = DarkBrownColors.bgWhite;\n            Colors.bgLightGrey = DarkBrownColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkBrownColors.bgDarkGrey;\n            Colors.bgBlack = DarkBrownColors.bgBlack;\n            Colors.obj0White = DarkBrownColors.obj0White;\n            Colors.obj0LightGrey = DarkBrownColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkBrownColors.obj0DarkGrey;\n            Colors.obj0Black = DarkBrownColors.obj0Black;\n            Colors.obj1White = DarkBrownColors.obj1White;\n            Colors.obj1LightGrey = DarkBrownColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkBrownColors.obj1DarkGrey;\n            Colors.obj1Black = DarkBrownColors.obj1Black;\n            break;\n        case 4:\n            // Right, Green\n            Colors.bgWhite = GreenColors.bgWhite;\n            Colors.bgLightGrey = GreenColors.bgLightGrey;\n            Colors.bgDarkGrey = GreenColors.bgDarkGrey;\n            Colors.bgBlack = GreenColors.bgBlack;\n            Colors.obj0White = GreenColors.obj0White;\n            Colors.obj0LightGrey = GreenColors.obj0LightGrey;\n            Colors.obj0DarkGrey = GreenColors.obj0DarkGrey;\n            Colors.obj0Black = GreenColors.obj0Black;\n            Colors.obj1White = GreenColors.obj1White;\n            Colors.obj1LightGrey = GreenColors.obj1LightGrey;\n            Colors.obj1DarkGrey = GreenColors.obj1DarkGrey;\n            Colors.obj1Black = GreenColors.obj1Black;\n            break;\n        case 5:\n            // Right + A, DarkGreenColors\n            Colors.bgWhite = DarkGreenColors.bgWhite;\n            Colors.bgLightGrey = DarkGreenColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkGreenColors.bgDarkGrey;\n            Colors.bgBlack = DarkGreenColors.bgBlack;\n            Colors.obj0White = DarkGreenColors.obj0White;\n            Colors.obj0LightGrey = DarkGreenColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkGreenColors.obj0DarkGrey;\n            Colors.obj0Black = DarkGreenColors.obj0Black;\n            Colors.obj1White = DarkGreenColors.obj1White;\n            Colors.obj1LightGrey = DarkGreenColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkGreenColors.obj1DarkGrey;\n            Colors.obj1Black = DarkGreenColors.obj1Black;\n            break;\n        case 6:\n            // Right + B, InvertedColors\n            Colors.bgWhite = InvertedColors.bgWhite;\n            Colors.bgLightGrey = InvertedColors.bgLightGrey;\n            Colors.bgDarkGrey = InvertedColors.bgDarkGrey;\n            Colors.bgBlack = InvertedColors.bgBlack;\n            Colors.obj0White = InvertedColors.obj0White;\n            Colors.obj0LightGrey = InvertedColors.obj0LightGrey;\n            Colors.obj0DarkGrey = InvertedColors.obj0DarkGrey;\n            Colors.obj0Black = InvertedColors.obj0Black;\n            Colors.obj1White = InvertedColors.obj1White;\n            Colors.obj1LightGrey = InvertedColors.obj1LightGrey;\n            Colors.obj1DarkGrey = InvertedColors.obj1DarkGrey;\n            Colors.obj1Black = InvertedColors.obj1Black;\n            break;\n        case 7:\n            // Down, PastelMixColors\n            Colors.bgWhite = PastelMixColors.bgWhite;\n            Colors.bgLightGrey = PastelMixColors.bgLightGrey;\n            Colors.bgDarkGrey = PastelMixColors.bgDarkGrey;\n            Colors.bgBlack = PastelMixColors.bgBlack;\n            Colors.obj0White = PastelMixColors.obj0White;\n            Colors.obj0LightGrey = PastelMixColors.obj0LightGrey;\n            Colors.obj0DarkGrey = PastelMixColors.obj0DarkGrey;\n            Colors.obj0Black = PastelMixColors.obj0Black;\n            Colors.obj1White = PastelMixColors.obj1White;\n            Colors.obj1LightGrey = PastelMixColors.obj1LightGrey;\n            Colors.obj1DarkGrey = PastelMixColors.obj1DarkGrey;\n            Colors.obj1Black = PastelMixColors.obj1Black;\n            break;\n        case 8:\n            // Down + A, Orange\n            Colors.bgWhite = OrangeColors.bgWhite;\n            Colors.bgLightGrey = OrangeColors.bgLightGrey;\n            Colors.bgDarkGrey = OrangeColors.bgDarkGrey;\n            Colors.bgBlack = OrangeColors.bgBlack;\n            Colors.obj0White = OrangeColors.obj0White;\n            Colors.obj0LightGrey = OrangeColors.obj0LightGrey;\n            Colors.obj0DarkGrey = OrangeColors.obj0DarkGrey;\n            Colors.obj0Black = OrangeColors.obj0Black;\n            Colors.obj1White = OrangeColors.obj1White;\n            Colors.obj1LightGrey = OrangeColors.obj1LightGrey;\n            Colors.obj1DarkGrey = OrangeColors.obj1DarkGrey;\n            Colors.obj1Black = OrangeColors.obj1Black;\n            break;\n        case 9:\n            // Down + B, Yellow\n            Colors.bgWhite = YellowColors.bgWhite;\n            Colors.bgLightGrey = YellowColors.bgLightGrey;\n            Colors.bgDarkGrey = YellowColors.bgDarkGrey;\n            Colors.bgBlack = YellowColors.bgBlack;\n            Colors.obj0White = YellowColors.obj0White;\n            Colors.obj0LightGrey = YellowColors.obj0LightGrey;\n            Colors.obj0DarkGrey = YellowColors.obj0DarkGrey;\n            Colors.obj0Black = YellowColors.obj0Black;\n            Colors.obj1White = YellowColors.obj1White;\n            Colors.obj1LightGrey = YellowColors.obj1LightGrey;\n            Colors.obj1DarkGrey = YellowColors.obj1DarkGrey;\n            Colors.obj1Black = YellowColors.obj1Black;\n            break;\n        case 10:\n            // Left, Blue\n            Colors.bgWhite = BlueColors.bgWhite;\n            Colors.bgLightGrey = BlueColors.bgLightGrey;\n            Colors.bgDarkGrey = BlueColors.bgDarkGrey;\n            Colors.bgBlack = BlueColors.bgBlack;\n            Colors.obj0White = BlueColors.obj0White;\n            Colors.obj0LightGrey = BlueColors.obj0LightGrey;\n            Colors.obj0DarkGrey = BlueColors.obj0DarkGrey;\n            Colors.obj0Black = BlueColors.obj0Black;\n            Colors.obj1White = BlueColors.obj1White;\n            Colors.obj1LightGrey = BlueColors.obj1LightGrey;\n            Colors.obj1DarkGrey = BlueColors.obj1DarkGrey;\n            Colors.obj1Black = BlueColors.obj1Black;\n            break;\n        case 11:\n            // Left + A, Dark Blue\n            Colors.bgWhite = DarkBlueColors.bgWhite;\n            Colors.bgLightGrey = DarkBlueColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkBlueColors.bgDarkGrey;\n            Colors.bgBlack = DarkBlueColors.bgBlack;\n            Colors.obj0White = DarkBlueColors.obj0White;\n            Colors.obj0LightGrey = DarkBlueColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkBlueColors.obj0DarkGrey;\n            Colors.obj0Black = DarkBlueColors.obj0Black;\n            Colors.obj1White = DarkBlueColors.obj1White;\n            Colors.obj1LightGrey = DarkBlueColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkBlueColors.obj1DarkGrey;\n            Colors.obj1Black = DarkBlueColors.obj1Black;\n            break;\n        case 12:\n            // Left + B, GrayScale\n            Colors.bgWhite = GrayscaleColors.bgWhite;\n            Colors.bgLightGrey = GrayscaleColors.bgLightGrey;\n            Colors.bgDarkGrey = GrayscaleColors.bgDarkGrey;\n            Colors.bgBlack = GrayscaleColors.bgBlack;\n            Colors.obj0White = GrayscaleColors.obj0White;\n            Colors.obj0LightGrey = GrayscaleColors.obj0LightGrey;\n            Colors.obj0DarkGrey = GrayscaleColors.obj0DarkGrey;\n            Colors.obj0Black = GrayscaleColors.obj0Black;\n            Colors.obj1White = GrayscaleColors.obj1White;\n            Colors.obj1LightGrey = GrayscaleColors.obj1LightGrey;\n            Colors.obj1DarkGrey = GrayscaleColors.obj1DarkGrey;\n            Colors.obj1Black = GrayscaleColors.obj1Black;\n            break;\n    }\n}\n// Function to set the colorization\n// By checksum of the title\n// https://forums.nesdev.com/viewtopic.php?f=20&t=10226\n// TODO: torch2424 need to find how to get the \"disambiguation\"\n// Inlined because closure compiler inlines\nfunction setHashColorizationPalette(hash) {\n    switch (hash) {\n        case 0x88:\n            Colors.bgWhite = Table00Entry08Colors.bgWhite;\n            Colors.bgLightGrey = Table00Entry08Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table00Entry08Colors.bgDarkGrey;\n            Colors.bgBlack = Table00Entry08Colors.bgBlack;\n            Colors.obj0White = Table00Entry08Colors.obj0White;\n            Colors.obj0LightGrey = Table00Entry08Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table00Entry08Colors.obj0DarkGrey;\n            Colors.obj0Black = Table00Entry08Colors.obj0Black;\n            Colors.obj1White = Table00Entry08Colors.obj1White;\n            Colors.obj1LightGrey = Table00Entry08Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table00Entry08Colors.obj1DarkGrey;\n            Colors.obj1Black = Table00Entry08Colors.obj1Black;\n            break;\n        case 0x61:\n            Colors.bgWhite = Table01Entry0BColors.bgWhite;\n            Colors.bgLightGrey = Table01Entry0BColors.bgLightGrey;\n            Colors.bgDarkGrey = Table01Entry0BColors.bgDarkGrey;\n            Colors.bgBlack = Table01Entry0BColors.bgBlack;\n            Colors.obj0White = Table01Entry0BColors.obj0White;\n            Colors.obj0LightGrey = Table01Entry0BColors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table01Entry0BColors.obj0DarkGrey;\n            Colors.obj0Black = Table01Entry0BColors.obj0Black;\n            Colors.obj1White = Table01Entry0BColors.obj1White;\n            Colors.obj1LightGrey = Table01Entry0BColors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table01Entry0BColors.obj1DarkGrey;\n            Colors.obj1Black = Table01Entry0BColors.obj1Black;\n            break;\n        case 0x14:\n            Colors.bgWhite = Table01Entry10Colors.bgWhite;\n            Colors.bgLightGrey = Table01Entry10Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table01Entry10Colors.bgDarkGrey;\n            Colors.bgBlack = Table01Entry10Colors.bgBlack;\n            Colors.obj0White = Table01Entry10Colors.obj0White;\n            Colors.obj0LightGrey = Table01Entry10Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table01Entry10Colors.obj0DarkGrey;\n            Colors.obj0Black = Table01Entry10Colors.obj0Black;\n            Colors.obj1White = Table01Entry10Colors.obj1White;\n            Colors.obj1LightGrey = Table01Entry10Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table01Entry10Colors.obj1DarkGrey;\n            Colors.obj1Black = Table01Entry10Colors.obj1Black;\n            break;\n        case 0x46:\n            Colors.bgWhite = Table03Entry0AColors.bgWhite;\n            Colors.bgLightGrey = Table03Entry0AColors.bgLightGrey;\n            Colors.bgDarkGrey = Table03Entry0AColors.bgDarkGrey;\n            Colors.bgBlack = Table03Entry0AColors.bgBlack;\n            Colors.obj0White = Table03Entry0AColors.obj0White;\n            Colors.obj0LightGrey = Table03Entry0AColors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table03Entry0AColors.obj0DarkGrey;\n            Colors.obj0Black = Table03Entry0AColors.obj0Black;\n            Colors.obj1White = Table03Entry0AColors.obj1White;\n            Colors.obj1LightGrey = Table03Entry0AColors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table03Entry0AColors.obj1DarkGrey;\n            Colors.obj1Black = Table03Entry0AColors.obj1Black;\n            break;\n        case 0x59:\n        case 0xc6:\n            Colors.bgWhite = Table05Entry00Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry00Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry00Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry00Colors.bgBlack;\n            Colors.obj0White = Table05Entry00Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry00Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry00Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry00Colors.obj0Black;\n            Colors.obj1White = Table05Entry00Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry00Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry00Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry00Colors.obj1Black;\n            break;\n        case 0x86:\n        case 0xa8:\n            Colors.bgWhite = Table05Entry01Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry01Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry01Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry01Colors.bgBlack;\n            Colors.obj0White = Table05Entry01Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry01Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry01Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry01Colors.obj0Black;\n            Colors.obj1White = Table05Entry01Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry01Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry01Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry01Colors.obj1Black;\n            break;\n        case 0xbf:\n        case 0xce:\n        case 0xd1:\n        case 0xf0:\n            Colors.bgWhite = Table05Entry02Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry02Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry02Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry02Colors.bgBlack;\n            Colors.obj0White = Table05Entry02Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry02Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry02Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry02Colors.obj0Black;\n            Colors.obj1White = Table05Entry02Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry02Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry02Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry02Colors.obj1Black;\n            break;\n        case 0x27:\n        case 0x49:\n        case 0x5c:\n        case 0xb3:\n            Colors.bgWhite = Table05Entry08Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry08Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry08Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry08Colors.bgBlack;\n            Colors.obj0White = Table05Entry08Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry08Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry08Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry08Colors.obj0Black;\n            Colors.obj1White = Table05Entry08Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry08Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry08Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry08Colors.obj1Black;\n            break;\n        case 0xc9:\n            Colors.bgWhite = Table05Entry09Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry09Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry09Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry09Colors.bgBlack;\n            Colors.obj0White = Table05Entry09Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry09Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry09Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry09Colors.obj0Black;\n            Colors.obj1White = Table05Entry09Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry09Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry09Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry09Colors.obj1Black;\n            break;\n        case 0x70:\n            Colors.bgWhite = Table05Entry11Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry11Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry11Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry11Colors.bgBlack;\n            Colors.obj0White = Table05Entry11Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry11Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry11Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry11Colors.obj0Black;\n            Colors.obj1White = Table05Entry11Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry11Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry11Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry11Colors.obj1Black;\n            break;\n        case 0x46:\n            Colors.bgWhite = Table05Entry14Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry14Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry14Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry14Colors.bgBlack;\n            Colors.obj0White = Table05Entry14Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry14Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry14Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry14Colors.obj0Black;\n            Colors.obj1White = Table05Entry14Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry14Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry14Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry14Colors.obj1Black;\n            break;\n        case 0xd3:\n            Colors.bgWhite = Table05Entry15Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry15Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry15Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry15Colors.bgBlack;\n            Colors.obj0White = Table05Entry15Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry15Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry15Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry15Colors.obj0Black;\n            Colors.obj1White = Table05Entry15Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry15Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry15Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry15Colors.obj1Black;\n            break;\n    }\n}\n\n// Grouped registers\n// possible overload these later to performace actions\n// AF, BC, DE, HL\nfunction concatenateBytes(highByte, lowByte) {\n    //https://stackoverflow.com/questions/38298412/convert-two-bytes-into-signed-16-bit-integer-in-javascript\n    return ((highByte & 0xff) << 8) | (lowByte & 0xff);\n}\nfunction splitHighByte(groupedByte) {\n    return (groupedByte & 0xff00) >> 8;\n}\nfunction splitLowByte(groupedByte) {\n    return groupedByte & 0x00ff;\n}\nfunction rotateByteLeft(value) {\n    // Rotate left\n    // https://stackoverflow.com/questions/19204750/how-do-i-perform-a-circular-rotation-of-a-byte\n    // 4-bit example:\n    // 1010 -> 0100 | 0001\n    return u8Portable((value << 1) | (value >> 7));\n}\nfunction rotateByteLeftThroughCarry(value) {\n    // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Through carry meaning, instead of raotating the bit that gets dropped off, but the carry there instead\n    return u8Portable((value << 1) | getCarryFlag$$1());\n}\nfunction rotateByteRight(value) {\n    // Rotate right\n    // 4-bit example:\n    // 1010 -> 0101 | 0000\n    return u8Portable((value >> 1) | (value << 7));\n}\nfunction rotateByteRightThroughCarry(value) {\n    // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Through carry meaning, instead of raotating the bit that gets dropped off, put the carry there instead\n    return u8Portable((value >> 1) | (getCarryFlag$$1() << 7));\n}\nfunction setBitOnByte(bitPosition, byte) {\n    return byte | (0x01 << bitPosition);\n}\nfunction resetBitOnByte(bitPosition, byte) {\n    return byte & ~(0x01 << bitPosition);\n}\nfunction checkBitOnByte(bitPosition, byte) {\n    // Perforamnce improvements\n    // https://github.com/AssemblyScript/assemblyscript/issues/40\n    return (byte & (1 << bitPosition)) != 0;\n}\n\n// Class for GBC Color palletes\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\nvar Palette = /** @class */ (function () {\n    function Palette() {\n    }\n    Palette.memoryLocationBackgroundPaletteIndex = 0xff68;\n    Palette.memoryLocationBackgroundPaletteData = 0xff69;\n    Palette.memoryLocationSpritePaletteIndex = 0xff6a;\n    Palette.memoryLocationSpritePaletteData = 0xff6b;\n    // Palettes\n    Palette.memoryLocationBackgroundPalette = 0xff47;\n    Palette.memoryLocationSpritePaletteOne = 0xff48;\n    Palette.memoryLocationSpritePaletteTwo = 0xff49;\n    return Palette;\n}());\n// Inlined because closure compiler inlines\nfunction initializePalette() {\n    if (Cpu.GBCEnabled) {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff68, 0xc0);\n        eightBitStoreIntoGBMemory(0xff69, 0xff);\n        eightBitStoreIntoGBMemory(0xff6a, 0xc1);\n        eightBitStoreIntoGBMemory(0xff6b, 0x0d);\n    }\n    else {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff68, 0xff);\n        eightBitStoreIntoGBMemory(0xff69, 0xff);\n        eightBitStoreIntoGBMemory(0xff6a, 0xff);\n        eightBitStoreIntoGBMemory(0xff6b, 0xff);\n    }\n}\n// Simple get pallete color or monochrome GB\n// shouldRepresentColorByColorId is good for debugging tile data for GBC games that don't have\n// monochromePalettes\n// Inlined because closure compiler inlines\nfunction getMonochromeColorFromPalette(colorId, paletteMemoryLocation, shouldRepresentColorByColorId) {\n    if (shouldRepresentColorByColorId === void 0) { shouldRepresentColorByColorId = false; }\n    // Shift our paletteByte, 2 times for each color ID\n    // And off any extra bytes\n    // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n    var color = colorId;\n    if (!shouldRepresentColorByColorId) {\n        color = (eightBitLoadFromGBMemory(paletteMemoryLocation) >> (colorId << 1)) & 0x03;\n    }\n    // Since our max is 254, and max is 3.\n    // monochrome color palette is modified from bgb\n    // TODO: Make these colors into a constant\n    var rgbColor = 242;\n    switch (color) {\n        case 0:\n            break;\n        case 1:\n            rgbColor = 160;\n            break;\n        case 2:\n            rgbColor = 88;\n            break;\n        case 3:\n            rgbColor = 8;\n            break;\n    }\n    return rgbColor;\n}\n// Function to returns the Colorized color for a GB games\nfunction getColorizedGbHexColorFromPalette(colorId, paletteMemoryLocation) {\n    // Shift our paletteByte, 2 times for each color ID\n    // And off any extra bytes\n    // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n    var color = (eightBitLoadFromGBMemory(paletteMemoryLocation) >> (colorId * 2)) & 0x03;\n    // Check which palette we got, to apply the right color layer\n    var hexColor = 0;\n    if (paletteMemoryLocation === Palette.memoryLocationSpritePaletteOne) {\n        hexColor = Colors.obj0White;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.obj0LightGrey;\n                break;\n            case 2:\n                hexColor = Colors.obj0DarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.obj0Black;\n                break;\n        }\n    }\n    else if (paletteMemoryLocation === Palette.memoryLocationSpritePaletteTwo) {\n        hexColor = Colors.obj1White;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.obj1LightGrey;\n                break;\n            case 2:\n                hexColor = Colors.obj1DarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.obj1Black;\n                break;\n        }\n    }\n    else {\n        hexColor = Colors.bgWhite;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.bgLightGrey;\n                break;\n            case 2:\n                hexColor = Colors.bgDarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.bgBlack;\n                break;\n        }\n    }\n    return hexColor;\n}\n// Inlined because closure compiler inlines\nfunction writeColorPaletteToMemory(offset, value) {\n    // FF68\n    //  Bit 0-5   Index (00-3F)\n    var memoryLocationSpritePaletteData = Palette.memoryLocationSpritePaletteData;\n    if (offset === Palette.memoryLocationBackgroundPaletteData || offset === memoryLocationSpritePaletteData) {\n        // Get the palette index\n        var paletteIndex = eightBitLoadFromGBMemory(offset - 1);\n        // Clear the 6th bit, as it does nothing\n        paletteIndex = resetBitOnByte(6, paletteIndex);\n        // Check if we are changing the sprite pallete data\n        var isSprite = offset === memoryLocationSpritePaletteData;\n        storePaletteByteInWasmMemory(paletteIndex, value, isSprite);\n        incrementPaletteIndexIfSet(paletteIndex, offset - 1);\n    }\n}\n// Functions to Handle Write to pallete data registers\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\n// Function to handle incrementing the pallete index if required\n// Inlined because closure compiler inlines\nfunction incrementPaletteIndexIfSet(paletteIndex, offset) {\n    // Check ther auto increment box\n    if (checkBitOnByte(7, paletteIndex)) {\n        // Increment the index, and return the value before the increment\n        // Ensure we don't ouverflow our auto increment bit\n        paletteIndex += 1;\n        paletteIndex = setBitOnByte(7, paletteIndex);\n        eightBitStoreIntoGBMemory(offset, paletteIndex);\n    }\n}\n// FF68\n// Bit 0-5   Index (00-3F)\n// Bit 7     Auto Increment  (0=Disabled, 1=Increment after Writing)\n// Index is 00-0x3F because the means 0 - 63 (64),\n// and apparently there are 8 bytes per pallete to describe Color 0-3 (4 colors),\n// and 0-7 (8 palltetes). Therefore, 64!\nfunction getRgbColorFromPalette(paletteId, colorId, isSprite) {\n    // Each Pallete takes 8 bytes, so multiply by 8 to get the pallete\n    // And Each color takes 2 bytes, therefore, multiple by 2 for the correct color bytes in the palette\n    var paletteIndex = paletteId * 8 + colorId * 2;\n    // Load the Color that is seperated into two bytes\n    var paletteHighByte = loadPaletteByteFromWasmMemory(paletteIndex + 1, isSprite);\n    var paletteLowByte = loadPaletteByteFromWasmMemory(paletteIndex, isSprite);\n    // Return the concatenated color byte\n    return concatenateBytes(paletteHighByte, paletteLowByte);\n}\n// Function to return the color from a passed 16 bit color pallette\nfunction getColorComponentFromRgb(colorId, colorRgb) {\n    // Get our bitmask for the color ID\n    // bit mask tested good :)\n    colorId *= 5;\n    var bitMask = 0x1f << colorId;\n    var colorValue = (colorRgb & bitMask) >> colorId;\n    // Goal is to reach 254 for each color, so 255 / 31 (0x1F) ~8 TODO: Make exact\n    // Want 5 bits for each\n    return colorValue * 8;\n}\n// Function to load a byte from our Gbc Palette memory\nfunction loadPaletteByteFromWasmMemory(paletteIndexByte, isSprite) {\n    // Clear the top two bits to just get the bottom palette Index\n    var paletteIndex = paletteIndexByte & 0x3f;\n    // Move over the palette index to not overlap the background has 0x3F, so Zero for Sprites is 0x40)\n    if (isSprite) {\n        paletteIndex += 0x40;\n    }\n    return load(GBC_PALETTE_LOCATION + paletteIndex);\n}\n// Function to store a byte to our Gbc Palette memory\n// Inlined because closure compiler inlines\nfunction storePaletteByteInWasmMemory(paletteIndexByte, value, isSprite) {\n    // Clear the top two bits to just get the bottom palette Index\n    var paletteIndex = paletteIndexByte & 0x3f;\n    // Move over the palette index to not overlap the background (has 0x3F, so Zero for Sprites is 0x40)\n    if (isSprite) {\n        paletteIndex += 0x40;\n    }\n    store(GBC_PALETTE_LOCATION + paletteIndex, value);\n}\n\n// https://github.com/torch2424/wasmBoy/issues/51\nfunction addPriorityforPixel(x, y, colorId, hasGbcBgPriority) {\n    if (colorId === void 0) { colorId = 0; }\n    if (hasGbcBgPriority === void 0) { hasGbcBgPriority = false; }\n    var bgPriorityByte = colorId & 0x03;\n    if (hasGbcBgPriority) {\n        bgPriorityByte = setBitOnByte(2, bgPriorityByte);\n    }\n    store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), bgPriorityByte);\n}\n// Inlined because closure compiler inlines\nfunction getPriorityforPixel(x, y) {\n    return load(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y));\n}\n// Inlined because closure compiler inlines\nfunction clearPriorityMap() {\n    for (var y = 0; y < 144; ++y) {\n        for (var x = 0; x < 160; ++x) {\n            store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), 0);\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction getPixelStart(x, y) {\n    // Get the pixel number\n    return y * 160 + x;\n}\n\n// Functions for performance hacks, and debugging tiles\nvar TileCache = /** @class */ (function () {\n    function TileCache() {\n    }\n    TileCache.tileId = -1;\n    TileCache.horizontalFlip = false;\n    TileCache.nextXIndexToPerformCacheCheck = -1;\n    return TileCache;\n}());\n// Inlined because closure compiler inlines\nfunction resetTileCache() {\n    TileCache.tileId = -1;\n    TileCache.nextXIndexToPerformCacheCheck = -1;\n}\nfunction drawPixelsFromLineOfTile(tileId, tileDataMemoryLocation, vramBankId, tileLineXStart, tileLineXEnd, tileLineY, outputLineX, outputLineY, outputWidth, wasmMemoryStart, shouldRepresentMonochromeColorByColorId, paletteLocation, bgMapAttributes, spriteAttributes) {\n    // Get our number of pixels drawn\n    var pixelsDrawn = 0;\n    // Get our tile data address\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileId);\n    // Get the bytes for our tile\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2, vramBankId);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2 + 1, vramBankId);\n    // Loop through our X values to draw\n    for (var x = tileLineXStart; x <= tileLineXEnd; ++x) {\n        // First find where we are going to do our final output x\n        // And don't allow any width overflow\n        var iteratedOutputX = outputLineX + (x - tileLineXStart);\n        if (iteratedOutputX < outputWidth) {\n            // However, We need to reverse our byte (if not horizontally flipped),\n            // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n            // Therefore, is pixelX was 2, then really is need to be 5\n            // So 2 - 7 = -5, * 1 = 5\n            // Or to simplify, 7 - 2 = 5 haha!\n            var pixelXInTile = x;\n            if (bgMapAttributes < 0 || !checkBitOnByte(5, bgMapAttributes)) {\n                pixelXInTile = 7 - pixelXInTile;\n            }\n            // Get our pallete colors for the tile\n            var paletteColorId = 0;\n            if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n                // Byte one represents the second bit in our color id, so bit shift\n                paletteColorId += 1;\n                paletteColorId = paletteColorId << 1;\n            }\n            if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n                paletteColorId += 1;\n            }\n            // Get the pallete\n            var red = 0;\n            var green = 0;\n            var blue = 0;\n            // Check if we should draw color or not\n            if (Cpu.GBCEnabled && (bgMapAttributes >= 0 || spriteAttributes >= 0)) {\n                // Draw C O L O R\n                var isSprite = spriteAttributes >= 0;\n                // Call the helper function to grab the correct color from the palette\n                // Get the palette index byte\n                var bgPalette = bgMapAttributes & 0x07;\n                if (isSprite) {\n                    bgPalette = spriteAttributes & 0x07;\n                }\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, isSprite);\n                // Split off into red green and blue\n                red = getColorComponentFromRgb(0, rgbColorPalette);\n                green = getColorComponentFromRgb(1, rgbColorPalette);\n                blue = getColorComponentFromRgb(2, rgbColorPalette);\n            }\n            else {\n                // Draw Monochrome\n                // Get the default palette if none\n                if (paletteLocation <= 0) {\n                    paletteLocation = Graphics.memoryLocationBackgroundPalette;\n                }\n                if (shouldRepresentMonochromeColorByColorId) {\n                    var monochromeColor = getMonochromeColorFromPalette(paletteColorId, paletteLocation, shouldRepresentMonochromeColorByColorId);\n                    red = monochromeColor;\n                    green = monochromeColor;\n                    blue = monochromeColor;\n                }\n                else {\n                    var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, paletteLocation);\n                    red = getRedFromHexColor(hexColor);\n                    green = getGreenFromHexColor(hexColor);\n                    blue = getBlueFromHexColor(hexColor);\n                }\n            }\n            // Finally Lets place a pixel in memory\n            // Find where our tile line would start\n            var pixelStart = getTilePixelStart(iteratedOutputX, outputLineY, outputWidth);\n            wasmMemoryStart += pixelStart;\n            store(wasmMemoryStart + 0, red);\n            store(wasmMemoryStart + 1, green);\n            store(wasmMemoryStart + 2, blue);\n            var gbcBgPriority = false;\n            if (bgMapAttributes >= 0) {\n                gbcBgPriority = checkBitOnByte(7, bgMapAttributes);\n            }\n            // Lastly, add the pixel to our background priority map\n            // https://github.com/torch2424/wasmBoy/issues/51\n            // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n            // Bit 2 will represent if the Bg/Window has GBC priority.\n            addPriorityforPixel(iteratedOutputX, outputLineY, paletteColorId, gbcBgPriority);\n            pixelsDrawn++;\n        }\n    }\n    return pixelsDrawn;\n}\n// Inlined because closure compiler inlines\nfunction getTilePixelStart(outputLineX, outputLineY, outputWidth) {\n    // Finally Lets place a pixel in memory\n    var pixelStart = outputLineY * outputWidth + outputLineX;\n    // Each pixel takes 3 slots, therefore, multiply by 3!\n    return pixelStart * 3;\n}\nfunction getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap) {\n    // Watch this part of The ultimate gameboy talk: https://youtu.be/HyzD8pNlpwI?t=30m50s\n    // A line of 8 pixels on a single tile, is represented by 2 bytes.\n    // since a single tile is 8x8 pixels, 8 * 2 = 16 bytes\n    // Get the tile ID's tile addess from tile data.\n    // For instance, let's say our first line of tile data represents tiles for letters:\n    // a b c d e f g\n    // And we have tileId 0x02. That means we want the tile for the 'c' character\n    // Since each tile is 16 bytes, it would be the starting tileDataAddress + (tileId * tileSize), to skip over tiles we dont want\n    // The whole signed thing is weird, and has something to do how the second set of tile data is stored :p\n    if (tileDataMemoryLocation === Graphics.memoryLocationTileDataSelectZeroStart) {\n        // Treat the tile Id as a signed int, subtract an offset of 128\n        // if the tileId was 0 then the tile would be in memory region 0x9000-0x900F\n        if (checkBitOnByte(7, tileIdFromTileMap)) {\n            tileIdFromTileMap -= 128;\n        }\n        else {\n            tileIdFromTileMap += 128;\n        }\n    }\n    // if the background layout gave us the tileId 0, then the tile data would be between 0x8000-0x800F.\n    return tileDataMemoryLocation + tileIdFromTileMap * 16;\n}\n\n// Functions to help with Handling Duty on Square Channels\n// Since there are no 2d arrays, we will use a byte to represent duty cycles (wave form from percentages)\nfunction isDutyCycleClockPositiveOrNegativeForWaveform(channelDuty, waveFormPositionOnDuty) {\n    // Get our Wave Form According to the Duty\n    // Default to a duty of 1\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n    switch (channelDuty) {\n        case 0x01:\n            // 1000 0001\n            return checkBitOnByte(waveFormPositionOnDuty, 0x81);\n        case 0x02:\n            // 1000 0111\n            return checkBitOnByte(waveFormPositionOnDuty, 0x87);\n        case 0x03:\n            // 0111 1110\n            return checkBitOnByte(waveFormPositionOnDuty, 0x7e);\n        default:\n            // 0000 0001\n            return checkBitOnByte(waveFormPositionOnDuty, 0x01);\n    }\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel1 = /** @class */ (function () {\n    function Channel1() {\n    }\n    Channel1.updateNRx0 = function (value) {\n        Channel1.NRx0SweepPeriod = (value & 0x70) >> 4;\n        Channel1.NRx0Negate = checkBitOnByte(3, value);\n        Channel1.NRx0SweepShift = value & 0x07;\n    };\n    Channel1.updateNRx1 = function (value) {\n        Channel1.NRx1Duty = (value >> 6) & 0x03;\n        Channel1.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel1.lengthCounter = 64 - Channel1.NRx1LengthLoad;\n    };\n    Channel1.updateNRx2 = function (value) {\n        Channel1.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel1.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel1.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        Channel1.isDacEnabled = (value & 0xf8) > 0;\n    };\n    Channel1.updateNRx3 = function (value) {\n        Channel1.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel1.frequency = (Channel1.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel1.updateNRx4 = function (value) {\n        Channel1.NRx4LengthEnabled = checkBitOnByte(6, value);\n        value &= 0x07;\n        Channel1.NRx4FrequencyMSB = value;\n        // Update Channel Frequency\n        Channel1.frequency = (value << 8) | Channel1.NRx3FrequencyLSB;\n    };\n    // Function to save the state of the class\n    Channel1.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot), Channel1.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel1.saveStateSlot), Channel1.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot), Channel1.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot), Channel1.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot), Channel1.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel1.saveStateSlot), Channel1.dutyCycle);\n        store(getSaveStateMemoryOffset(0x14, Channel1.saveStateSlot), Channel1.waveFormPositionOnDuty);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x19, Channel1.saveStateSlot), Channel1.isSweepEnabled);\n        store(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot), Channel1.sweepCounter);\n        store(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot), Channel1.sweepShadowFrequency);\n    };\n    // Function to load the save state from memory\n    Channel1.loadState = function () {\n        Channel1.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot));\n        Channel1.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel1.saveStateSlot));\n        Channel1.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot));\n        Channel1.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot));\n        Channel1.volume = load(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot));\n        Channel1.dutyCycle = load(getSaveStateMemoryOffset(0x13, Channel1.saveStateSlot));\n        Channel1.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x14, Channel1.saveStateSlot));\n        Channel1.isSweepEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x19, Channel1.saveStateSlot));\n        Channel1.sweepCounter = load(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot));\n        Channel1.sweepShadowFrequency = load(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot));\n    };\n    Channel1.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx0, 0x80);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx1, 0xbf);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx2, 0xf3);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, 0xc1);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, 0xbf);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel1.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel1.cycleCounter;\n        Channel1.cycleCounter = 0;\n        return Channel1.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel1.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel1.frequency) << 2;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        if (Cpu.GBCDoubleSpeed) {\n            frequencyTimer = frequencyTimer << 2;\n        }\n        Channel1.frequencyTimer = frequencyTimer;\n    };\n    Channel1.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel1.frequencyTimer - numberOfCycles;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            Channel1.frequencyTimer = frequencyTimer;\n            // Reset our timer\n            // A square channel's frequency timer period is set to (2048-frequency)*4.\n            // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n            Channel1.resetTimer();\n            Channel1.frequencyTimer -= overflowAmount;\n            // Also increment our duty cycle\n            // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n            // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n            Channel1.waveFormPositionOnDuty = (Channel1.waveFormPositionOnDuty + 1) & 7;\n        }\n        else {\n            Channel1.frequencyTimer = frequencyTimer;\n        }\n        // Get our ourput volume\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel1.isEnabled && Channel1.isDacEnabled) {\n            outputVolume = Channel1.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sampleValue\n        var sample = 1;\n        if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel1.NRx1Duty, Channel1.waveFormPositionOnDuty)) {\n            sample = -sample;\n        }\n        sample *= outputVolume;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel1.trigger = function () {\n        Channel1.isEnabled = true;\n        if (Channel1.lengthCounter === 0) {\n            Channel1.lengthCounter = 64;\n        }\n        // Reset our timer\n        // A square channel's frequency timer period is set to (2048-frequency)*4.\n        // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n        Channel1.resetTimer();\n        Channel1.envelopeCounter = Channel1.NRx2EnvelopePeriod;\n        Channel1.volume = Channel1.NRx2StartingVolume;\n        // Handle Channel Sweep\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        Channel1.sweepShadowFrequency = Channel1.frequency;\n        // Reset back to the sweep period\n        Channel1.sweepCounter = Channel1.NRx0SweepPeriod;\n        // The internal enabled flag is set if either the sweep period or shift are non-zero, cleared otherwise.\n        Channel1.isSweepEnabled = Channel1.NRx0SweepPeriod > 0 && Channel1.NRx0SweepShift > 0;\n        // If the sweep shift is non-zero, frequency calculation and the overflow check are performed immediately.\n        if (Channel1.NRx0SweepShift > 0) {\n            calculateSweepAndCheckOverflow();\n        }\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel1.isDacEnabled) {\n            Channel1.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel1.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        var cycleCounter = Channel1.cycleCounter + numberOfCycles;\n        Channel1.cycleCounter = cycleCounter;\n        // Dac enabled status cached by accumulator\n        return !(Channel1.frequencyTimer - cycleCounter > 0);\n    };\n    Channel1.updateSweep = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        // Decrement the sweep counter\n        var sweepCounter = Channel1.sweepCounter - 1;\n        if (sweepCounter <= 0) {\n            // Reset back to the sweep period\n            Channel1.sweepCounter = Channel1.NRx0SweepPeriod;\n            // Calculate our sweep\n            // When it generates a clock and the sweep's internal enabled flag is set and the sweep period is not zero,\n            // a new frequency is calculated and the overflow check is performed.\n            if (Channel1.isSweepEnabled && Channel1.NRx0SweepPeriod > 0) {\n                calculateSweepAndCheckOverflow();\n            }\n        }\n        else {\n            Channel1.sweepCounter = sweepCounter;\n        }\n    };\n    Channel1.updateLength = function () {\n        var lengthCounter = Channel1.lengthCounter;\n        if (lengthCounter > 0 && Channel1.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel1.isEnabled = false;\n        }\n        Channel1.lengthCounter = lengthCounter;\n    };\n    Channel1.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel1.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            Channel1.envelopeCounter = Channel1.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            // If notes are sustained for too long, this is probably why\n            if (envelopeCounter !== 0) {\n                var volume = Channel1.volume;\n                if (Channel1.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel1.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel1.volume = volume;\n            }\n        }\n        else {\n            Channel1.envelopeCounter = envelopeCounter;\n        }\n    };\n    Channel1.setFrequency = function (frequency) {\n        // Get the high and low bits\n        var passedFrequencyHighBits = frequency >> 8;\n        var passedFrequencyLowBits = frequency & 0xff;\n        // Get the new register 4\n        var register4 = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx4);\n        // Knock off lower 3 bits, and Or on our high bits\n        var newRegister4 = register4 & 0xf8;\n        newRegister4 = newRegister4 | passedFrequencyHighBits;\n        // Set the registers\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, passedFrequencyLowBits);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, newRegister4);\n        // Save the frequency for ourselves without triggering memory traps\n        Channel1.NRx3FrequencyLSB = passedFrequencyLowBits;\n        Channel1.NRx4FrequencyMSB = passedFrequencyHighBits;\n        Channel1.frequency = (Channel1.NRx4FrequencyMSB << 8) | Channel1.NRx3FrequencyLSB;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel1.cycleCounter = 0;\n    // Squarewave channel with volume envelope and frequency sweep functions.\n    // NR10 -> Sweep Register R/W\n    Channel1.memoryLocationNRx0 = 0xff10;\n    // -PPP NSSS Sweep period, negate, shift\n    Channel1.NRx0SweepPeriod = 0;\n    Channel1.NRx0Negate = false;\n    Channel1.NRx0SweepShift = 0;\n    // NR11 -> Sound length/Wave pattern duty (R/W)\n    Channel1.memoryLocationNRx1 = 0xff11;\n    // DDLL LLLL Duty, Length load (64-L)\n    Channel1.NRx1Duty = 0;\n    Channel1.NRx1LengthLoad = 0;\n    // NR12 -> Volume Envelope (R/W)\n    Channel1.memoryLocationNRx2 = 0xff12;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel1.NRx2StartingVolume = 0;\n    Channel1.NRx2EnvelopeAddMode = false;\n    Channel1.NRx2EnvelopePeriod = 0;\n    // NR13 -> Frequency lo (W)\n    Channel1.memoryLocationNRx3 = 0xff13;\n    // FFFF FFFF Frequency LSB\n    Channel1.NRx3FrequencyLSB = 0;\n    // NR14 -> Frequency hi (R/W)\n    Channel1.memoryLocationNRx4 = 0xff14;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel1.NRx4LengthEnabled = false;\n    Channel1.NRx4FrequencyMSB = 0;\n    // Channel Properties\n    Channel1.channelNumber = 1;\n    Channel1.isEnabled = false;\n    Channel1.isDacEnabled = false;\n    Channel1.frequency = 0;\n    Channel1.frequencyTimer = 0x00;\n    Channel1.envelopeCounter = 0x00;\n    Channel1.lengthCounter = 0x00;\n    Channel1.volume = 0x00;\n    // Square Wave properties\n    Channel1.dutyCycle = 0x00;\n    Channel1.waveFormPositionOnDuty = 0x00;\n    // Channel 1 Sweep\n    Channel1.isSweepEnabled = false;\n    Channel1.sweepCounter = 0x00;\n    Channel1.sweepShadowFrequency = 0x00;\n    // Save States\n    Channel1.saveStateSlot = 7;\n    return Channel1;\n}());\n// Sweep Specific functions\nfunction calculateSweepAndCheckOverflow() {\n    var newFrequency = getNewFrequencyFromSweep();\n    // 7FF is the highest value of the frequency: 111 1111 1111\n    if (newFrequency <= 0x7ff && Channel1.NRx0SweepShift > 0) {\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // If the new frequency is 2047 or less and the sweep shift is not zero,\n        // this new frequency is written back to the shadow frequency and square 1's frequency in NR13 and NR14,\n        // then frequency calculation and overflow check are run AGAIN immediately using this new value,\n        // but this second new frequency is not written back.\n        Channel1.sweepShadowFrequency = newFrequency;\n        Channel1.setFrequency(newFrequency);\n        // Re calculate the new frequency\n        newFrequency = getNewFrequencyFromSweep();\n    }\n    // Next check if the new Frequency is above 0x7FF\n    // if So, disable our sweep\n    if (newFrequency > 0x7ff) {\n        Channel1.isEnabled = false;\n    }\n}\n// Function to determing a new sweep in the current context\nfunction getNewFrequencyFromSweep() {\n    // Start our new frequency, by making it equal to the \"shadow frequency\"\n    var oldFrequency = Channel1.sweepShadowFrequency;\n    var newFrequency = oldFrequency;\n    newFrequency = newFrequency >> Channel1.NRx0SweepShift;\n    // Check for sweep negation\n    if (Channel1.NRx0Negate) {\n        newFrequency = oldFrequency - newFrequency;\n    }\n    else {\n        newFrequency = oldFrequency + newFrequency;\n    }\n    return newFrequency;\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel2 = /** @class */ (function () {\n    function Channel2() {\n    }\n    Channel2.updateNRx1 = function (value) {\n        Channel2.NRx1Duty = (value >> 6) & 0x03;\n        Channel2.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel2.lengthCounter = 64 - Channel2.NRx1LengthLoad;\n    };\n    Channel2.updateNRx2 = function (value) {\n        Channel2.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel2.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel2.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        Channel2.isDacEnabled = (value & 0xf8) > 0;\n    };\n    Channel2.updateNRx3 = function (value) {\n        Channel2.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel2.frequency = (Channel2.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel2.updateNRx4 = function (value) {\n        Channel2.NRx4LengthEnabled = checkBitOnByte(6, value);\n        value &= 0x07;\n        Channel2.NRx4FrequencyMSB = value;\n        // Update Channel Frequency\n        Channel2.frequency = (value << 8) | Channel2.NRx3FrequencyLSB;\n    };\n    // Function to save the state of the class\n    Channel2.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot), Channel2.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel2.saveStateSlot), Channel2.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel2.saveStateSlot), Channel2.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel2.saveStateSlot), Channel2.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot), Channel2.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel2.saveStateSlot), Channel2.dutyCycle);\n        store(getSaveStateMemoryOffset(0x14, Channel2.saveStateSlot), Channel2.waveFormPositionOnDuty);\n    };\n    // Function to load the save state from memory\n    Channel2.loadState = function () {\n        Channel2.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot));\n        Channel2.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel2.saveStateSlot));\n        Channel2.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel2.saveStateSlot));\n        Channel2.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel2.saveStateSlot));\n        Channel2.volume = load(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot));\n        Channel2.dutyCycle = load(getSaveStateMemoryOffset(0x13, Channel2.saveStateSlot));\n        Channel2.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x14, Channel2.saveStateSlot));\n    };\n    Channel2.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1 - 1, 0xff);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1, 0x3f);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx2, 0x00);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, 0xb8);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel2.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel2.cycleCounter;\n        Channel2.cycleCounter = 0;\n        return Channel2.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel2.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel2.frequency) << 2;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        Channel2.frequencyTimer = frequencyTimer << Cpu.GBCDoubleSpeed;\n    };\n    Channel2.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel2.frequencyTimer - numberOfCycles;\n        Channel2.frequencyTimer = frequencyTimer;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            // A square channel's frequency timer period is set to (2048-frequency)*4.\n            // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n            Channel2.resetTimer();\n            Channel2.frequencyTimer -= overflowAmount;\n            // Also increment our duty cycle\n            // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n            // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n            Channel2.waveFormPositionOnDuty = (Channel2.waveFormPositionOnDuty + 1) & 7;\n        }\n        // Get our ourput volume\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel2.isEnabled && Channel2.isDacEnabled) {\n            outputVolume = Channel2.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sampleValue\n        var sample = 1;\n        if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel2.NRx1Duty, Channel2.waveFormPositionOnDuty)) {\n            sample = -sample;\n        }\n        sample = sample * outputVolume;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel2.trigger = function () {\n        Channel2.isEnabled = true;\n        if (Channel2.lengthCounter === 0) {\n            Channel2.lengthCounter = 64;\n        }\n        // Reset our timer\n        // A square channel's frequency timer period is set to (2048-frequency)*4.\n        // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n        Channel2.resetTimer();\n        Channel2.envelopeCounter = Channel2.NRx2EnvelopePeriod;\n        Channel2.volume = Channel2.NRx2StartingVolume;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel2.isDacEnabled) {\n            Channel2.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel2.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        var cycleCounter = Channel2.cycleCounter + numberOfCycles;\n        Channel2.cycleCounter = cycleCounter;\n        // Dac enabled status cached by accumulator\n        return !(Channel2.frequencyTimer - cycleCounter > 0);\n    };\n    Channel2.updateLength = function () {\n        var lengthCounter = Channel2.lengthCounter;\n        if (lengthCounter > 0 && Channel2.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel2.isEnabled = false;\n        }\n        Channel2.lengthCounter = lengthCounter;\n    };\n    Channel2.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel2.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel2.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            if (envelopeCounter !== 0) {\n                var volume = Channel2.volume;\n                if (Channel2.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel2.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel2.volume = volume;\n            }\n        }\n        Channel2.envelopeCounter = envelopeCounter;\n    };\n    Channel2.setFrequency = function (frequency) {\n        // Get the high and low bits\n        var passedFrequencyHighBits = frequency >> 8;\n        var passedFrequencyLowBits = frequency & 0xff;\n        // Get the new register 4\n        var register4 = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx4);\n        // Knock off lower 3 bits, and Or on our high bits\n        var newRegister4 = register4 & 0xf8;\n        newRegister4 = newRegister4 | passedFrequencyHighBits;\n        // Set the registers\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, passedFrequencyLowBits);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, newRegister4);\n        // Save the frequency for ourselves without triggering memory traps\n        Channel2.NRx3FrequencyLSB = passedFrequencyLowBits;\n        Channel2.NRx4FrequencyMSB = passedFrequencyHighBits;\n        Channel2.frequency = (passedFrequencyHighBits << 8) | passedFrequencyLowBits;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel2.cycleCounter = 0;\n    // Squarewave channel with volume envelope functions only.\n    // NR21 -> Sound length/Wave pattern duty (R/W)\n    Channel2.memoryLocationNRx1 = 0xff16;\n    // DDLL LLLL Duty, Length load (64-L)\n    Channel2.NRx1Duty = 0;\n    Channel2.NRx1LengthLoad = 0;\n    // NR22 -> Volume Envelope (R/W)\n    Channel2.memoryLocationNRx2 = 0xff17;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel2.NRx2StartingVolume = 0;\n    Channel2.NRx2EnvelopeAddMode = false;\n    Channel2.NRx2EnvelopePeriod = 0;\n    // NR23 -> Frequency lo (W)\n    Channel2.memoryLocationNRx3 = 0xff18;\n    // FFFF FFFF Frequency LSB\n    Channel2.NRx3FrequencyLSB = 0;\n    // NR24 -> Frequency hi (R/W)\n    Channel2.memoryLocationNRx4 = 0xff19;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel2.NRx4LengthEnabled = false;\n    Channel2.NRx4FrequencyMSB = 0;\n    // Channel Properties\n    Channel2.channelNumber = 2;\n    Channel2.isEnabled = false;\n    Channel2.isDacEnabled = false;\n    Channel2.frequency = 0;\n    Channel2.frequencyTimer = 0x00;\n    Channel2.envelopeCounter = 0x00;\n    Channel2.lengthCounter = 0x00;\n    Channel2.volume = 0x00;\n    // Square Wave properties\n    Channel2.dutyCycle = 0x00;\n    Channel2.waveFormPositionOnDuty = 0x00;\n    // Save States\n    Channel2.saveStateSlot = 8;\n    return Channel2;\n}());\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel3 = /** @class */ (function () {\n    function Channel3() {\n    }\n    // E--- ---- DAC power\n    Channel3.updateNRx0 = function (value) {\n        Channel3.isDacEnabled = checkBitOnByte(7, value);\n    };\n    Channel3.updateNRx1 = function (value) {\n        Channel3.NRx1LengthLoad = value;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        // Supposed to be 256, so subtracting 255 and then adding 1 if that makes sense\n        Channel3.lengthCounter = 256 - Channel3.NRx1LengthLoad;\n    };\n    Channel3.updateNRx2 = function (value) {\n        Channel3.NRx2VolumeCode = (value >> 5) & 0x0f;\n    };\n    Channel3.updateNRx3 = function (value) {\n        Channel3.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel3.frequency = (Channel3.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel3.updateNRx4 = function (value) {\n        Channel3.NRx4LengthEnabled = checkBitOnByte(6, value);\n        value &= 0x07;\n        Channel3.NRx4FrequencyMSB = value;\n        // Update Channel Frequency\n        Channel3.frequency = (value << 8) | Channel3.NRx3FrequencyLSB;\n    };\n    // Function to save the state of the class\n    Channel3.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot), Channel3.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel3.saveStateSlot), Channel3.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel3.saveStateSlot), Channel3.lengthCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel3.saveStateSlot), Channel3.waveTablePosition);\n    };\n    // Function to load the save state from memory\n    Channel3.loadState = function () {\n        Channel3.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot));\n        Channel3.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel3.saveStateSlot));\n        Channel3.lengthCounter = load(getSaveStateMemoryOffset(0x05, Channel3.saveStateSlot));\n        Channel3.waveTablePosition = load(getSaveStateMemoryOffset(0x09, Channel3.saveStateSlot));\n    };\n    Channel3.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx0, 0x7f);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx1, 0xff);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx2, 0x9f);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx4, 0xb8);\n        // The volume code changed\n        Channel3.volumeCodeChanged = true;\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel3.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel3.cycleCounter;\n        Channel3.cycleCounter = 0;\n        return Channel3.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel3.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel3.frequency) << 1;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        Channel3.frequencyTimer = frequencyTimer << Cpu.GBCDoubleSpeed;\n    };\n    Channel3.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel3.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            Channel3.frequencyTimer = frequencyTimer;\n            // Reset our timer\n            // A wave channel's frequency timer period is set to (2048-frequency) * 2.\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n            Channel3.resetTimer();\n            Channel3.frequencyTimer -= overflowAmount;\n            // Advance the wave table position, and loop back if needed\n            Channel3.waveTablePosition = (Channel3.waveTablePosition + 1) & 31;\n        }\n        else {\n            Channel3.frequencyTimer = frequencyTimer;\n        }\n        // Get our output volume\n        var volumeCode = Channel3.volumeCode;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel3.isEnabled && Channel3.isDacEnabled) {\n            // Get our volume code\n            if (Channel3.volumeCodeChanged) {\n                volumeCode = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx2);\n                volumeCode = volumeCode >> 5;\n                volumeCode = volumeCode & 0x0f;\n                Channel3.volumeCode = volumeCode;\n                Channel3.volumeCodeChanged = false;\n            }\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sample\n        var sample = 0;\n        // Will Find the position, and knock off any remainder\n        var waveTablePosition = Channel3.waveTablePosition;\n        var positionIndexToAdd = i32Portable(waveTablePosition >> 1);\n        var memoryLocationWaveSample = Channel3.memoryLocationWaveTable + positionIndexToAdd;\n        sample = eightBitLoadFromGBMemory(memoryLocationWaveSample);\n        // Need to grab the top or lower half for the correct sample\n        sample >>= ((waveTablePosition & 1) === 0) << 2;\n        sample &= 0x0f;\n        // Shift our sample and set our volume depending on the volume code\n        // Since we can't multiply by float, simply divide by 4, 2, 1\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n        var outputVolume = 0;\n        switch (volumeCode) {\n            case 0:\n                sample >>= 4;\n                break;\n            case 1:\n                // Dont Shift sample\n                outputVolume = 1;\n                break;\n            case 2:\n                sample >>= 1;\n                outputVolume = 2;\n                break;\n            default:\n                sample >>= 2;\n                outputVolume = 4;\n                break;\n        }\n        // Spply out output volume\n        sample = outputVolume > 0 ? sample / outputVolume : 0;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel3.trigger = function () {\n        Channel3.isEnabled = true;\n        if (Channel3.lengthCounter === 0) {\n            Channel3.lengthCounter = 256;\n        }\n        // Reset our timer\n        // A wave channel's frequency timer period is set to (2048-frequency)*2.\n        Channel3.resetTimer();\n        // Reset our wave table position\n        Channel3.waveTablePosition = 0;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel3.isDacEnabled) {\n            Channel3.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel3.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        Channel3.cycleCounter += numberOfCycles;\n        // Dac enabled status cached by accumulator\n        return !(!Channel3.volumeCodeChanged && Channel3.frequencyTimer - Channel3.cycleCounter > 0);\n    };\n    Channel3.updateLength = function () {\n        var lengthCounter = Channel3.lengthCounter;\n        if (lengthCounter > 0 && Channel3.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel3.isEnabled = false;\n        }\n        Channel3.lengthCounter = lengthCounter;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel3.cycleCounter = 0;\n    // Voluntary Wave channel with 32 4-bit programmable samples, played in sequence.\n    // NR30 -> Sound on/off (R/W)\n    Channel3.memoryLocationNRx0 = 0xff1a;\n    // NR31 -> Sound length (R/W)\n    Channel3.memoryLocationNRx1 = 0xff1b;\n    // LLLL LLLL Length load (256-L)\n    Channel3.NRx1LengthLoad = 0;\n    // NR32 -> Select ouput level (R/W)\n    Channel3.memoryLocationNRx2 = 0xff1c;\n    // -VV- ---- Volume code (00=0%, 01=100%, 10=50%, 11=25%)\n    Channel3.NRx2VolumeCode = 0;\n    // NR33 -> Frequency lower data (W)\n    Channel3.memoryLocationNRx3 = 0xff1d;\n    // FFFF FFFF Frequency LSB\n    Channel3.NRx3FrequencyLSB = 0;\n    // NR34 -> Frequency higher data (R/W)\n    Channel3.memoryLocationNRx4 = 0xff1e;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel3.NRx4LengthEnabled = false;\n    Channel3.NRx4FrequencyMSB = 0;\n    // Our wave table location\n    Channel3.memoryLocationWaveTable = 0xff30;\n    // Channel Properties\n    Channel3.channelNumber = 3;\n    Channel3.isEnabled = false;\n    Channel3.isDacEnabled = false;\n    Channel3.frequency = 0;\n    Channel3.frequencyTimer = 0x00;\n    Channel3.lengthCounter = 0x00;\n    Channel3.waveTablePosition = 0x00;\n    Channel3.volumeCode = 0x00;\n    Channel3.volumeCodeChanged = false;\n    // Save States\n    Channel3.saveStateSlot = 9;\n    return Channel3;\n}());\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel4 = /** @class */ (function () {\n    function Channel4() {\n    }\n    Channel4.updateNRx1 = function (value) {\n        Channel4.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel4.lengthCounter = 64 - Channel4.NRx1LengthLoad;\n    };\n    Channel4.updateNRx2 = function (value) {\n        Channel4.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel4.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel4.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        Channel4.isDacEnabled = (value & 0xf8) > 0;\n    };\n    Channel4.updateNRx3 = function (value) {\n        var divisorCode = value & 0x07;\n        Channel4.NRx3ClockShift = value >> 4;\n        Channel4.NRx3WidthMode = checkBitOnByte(3, value);\n        Channel4.NRx3DivisorCode = divisorCode;\n        // Also, get our divisor\n        divisorCode <<= 1;\n        if (divisorCode < 1)\n            divisorCode = 1;\n        Channel4.divisor = divisorCode << 3;\n    };\n    Channel4.updateNRx4 = function (value) {\n        Channel4.NRx4LengthEnabled = checkBitOnByte(6, value);\n    };\n    // Function to save the state of the class\n    Channel4.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot), Channel4.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel4.saveStateSlot), Channel4.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel4.saveStateSlot), Channel4.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot), Channel4.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel4.saveStateSlot), Channel4.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel4.saveStateSlot), Channel4.linearFeedbackShiftRegister);\n    };\n    // Function to load the save state from memory\n    Channel4.loadState = function () {\n        Channel4.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot));\n        Channel4.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel4.saveStateSlot));\n        Channel4.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel4.saveStateSlot));\n        Channel4.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot));\n        Channel4.volume = load(getSaveStateMemoryOffset(0x0e, Channel4.saveStateSlot));\n        Channel4.linearFeedbackShiftRegister = load(getSaveStateMemoryOffset(0x13, Channel4.saveStateSlot));\n    };\n    Channel4.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1 - 1, 0xff);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1, 0xff);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx2, 0x00);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx4, 0xbf);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel4.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel4.cycleCounter;\n        Channel4.cycleCounter = 0;\n        return Channel4.getSample(accumulatedCycles);\n    };\n    Channel4.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel4.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n            frequencyTimer -= overflowAmount;\n            // Do some cool stuff with lfsr\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Noise_Channel\n            // First XOR bit zero and one\n            var linearFeedbackShiftRegister = Channel4.linearFeedbackShiftRegister;\n            var lfsrBitZero = linearFeedbackShiftRegister & 0x01;\n            var lfsrBitOne = linearFeedbackShiftRegister >> 1;\n            lfsrBitOne = lfsrBitOne & 0x01;\n            var xorLfsrBitZeroOne = lfsrBitZero ^ lfsrBitOne;\n            // Shift all lsfr bits by one\n            linearFeedbackShiftRegister = linearFeedbackShiftRegister >> 1;\n            // Place the XOR result on bit 15\n            linearFeedbackShiftRegister = linearFeedbackShiftRegister | (xorLfsrBitZeroOne << 14);\n            // If the width mode is set, set xor on bit 6, and make lfsr 7 bit\n            if (Channel4.NRx3WidthMode) {\n                // Make 7 bit, by knocking off lower bits. Want to keeps bits 8 - 16, and then or on 7\n                linearFeedbackShiftRegister = linearFeedbackShiftRegister & ~0x40;\n                linearFeedbackShiftRegister = linearFeedbackShiftRegister | (xorLfsrBitZeroOne << 6);\n            }\n            Channel4.linearFeedbackShiftRegister = linearFeedbackShiftRegister;\n        }\n        Channel4.frequencyTimer = frequencyTimer;\n        // Get our ourput volume, set to zero for silence\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel4.isEnabled && Channel4.isDacEnabled) {\n            outputVolume = Channel4.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Declare our sample\n        var sample = 0;\n        // Wave form output is bit zero of lfsr, INVERTED\n        sample = !checkBitOnByte(0, Channel4.linearFeedbackShiftRegister) ? 1 : -1;\n        sample = sample * outputVolume;\n        // Noise Can range from -15 - 15. Therefore simply add 15\n        sample = sample + 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel4.trigger = function () {\n        Channel4.isEnabled = true;\n        if (Channel4.lengthCounter === 0) {\n            Channel4.lengthCounter = 64;\n        }\n        // Reset our timers\n        Channel4.frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n        Channel4.envelopeCounter = Channel4.NRx2EnvelopePeriod;\n        Channel4.volume = Channel4.NRx2StartingVolume;\n        // Noise channel's LFSR bits are all set to 1.\n        Channel4.linearFeedbackShiftRegister = 0x7fff;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel4.isDacEnabled) {\n            Channel4.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel4.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        Channel4.cycleCounter += numberOfCycles;\n        // Dac enabled status cached by accumulator\n        return !(Channel4.frequencyTimer - Channel4.cycleCounter > 0);\n    };\n    Channel4.getNoiseChannelFrequencyPeriod = function () {\n        // Get our divisor from the divisor code, and shift by the clock shift\n        var response = Channel4.divisor << Channel4.NRx3ClockShift;\n        return response << Cpu.GBCDoubleSpeed;\n    };\n    Channel4.updateLength = function () {\n        var lengthCounter = Channel4.lengthCounter;\n        if (lengthCounter > 0 && Channel4.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel4.isEnabled = false;\n        }\n        Channel4.lengthCounter = lengthCounter;\n    };\n    Channel4.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel4.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel4.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            if (envelopeCounter !== 0) {\n                var volume = Channel4.volume;\n                if (Channel4.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel4.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel4.volume = volume;\n            }\n        }\n        Channel4.envelopeCounter = envelopeCounter;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel4.cycleCounter = 0;\n    // Channel 4\n    // 'white noise' channel with volume envelope functions.\n    // NR41 -> Sound length (R/W)\n    Channel4.memoryLocationNRx1 = 0xff20;\n    // --LL LLLL Length load (64-L)\n    Channel4.NRx1LengthLoad = 0;\n    // NR42 -> Volume Envelope (R/W)\n    Channel4.memoryLocationNRx2 = 0xff21;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel4.NRx2StartingVolume = 0;\n    Channel4.NRx2EnvelopeAddMode = false;\n    Channel4.NRx2EnvelopePeriod = 0;\n    // NR43 -> Polynomial Counter (R/W)\n    Channel4.memoryLocationNRx3 = 0xff22;\n    // SSSS WDDD Clock shift, Width mode of LFSR, Divisor code\n    Channel4.NRx3ClockShift = 0;\n    Channel4.NRx3WidthMode = false;\n    Channel4.NRx3DivisorCode = 0;\n    // NR44 -> Trigger, Length Enable\n    Channel4.memoryLocationNRx4 = 0xff23;\n    // TL-- ---- Trigger, Length enable\n    Channel4.NRx4LengthEnabled = false;\n    // Channel Properties\n    Channel4.channelNumber = 4;\n    Channel4.isEnabled = false;\n    Channel4.isDacEnabled = false;\n    Channel4.frequencyTimer = 0x00;\n    Channel4.envelopeCounter = 0x00;\n    Channel4.lengthCounter = 0x00;\n    Channel4.volume = 0x00;\n    Channel4.divisor = 0;\n    // Noise properties\n    // NOTE: Is only 15 bits\n    Channel4.linearFeedbackShiftRegister = 0x00;\n    // Save States\n    Channel4.saveStateSlot = 10;\n    return Channel4;\n}());\n\n// Another class simply for accumulating samples\n// Default everything to silence\nvar SoundAccumulator = /** @class */ (function () {\n    function SoundAccumulator() {\n    }\n    SoundAccumulator.channel1Sample = 15;\n    SoundAccumulator.channel2Sample = 15;\n    SoundAccumulator.channel3Sample = 15;\n    SoundAccumulator.channel4Sample = 15;\n    SoundAccumulator.channel1DacEnabled = false;\n    SoundAccumulator.channel2DacEnabled = false;\n    SoundAccumulator.channel3DacEnabled = false;\n    SoundAccumulator.channel4DacEnabled = false;\n    SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n    SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n    SoundAccumulator.mixerVolumeChanged = false;\n    SoundAccumulator.mixerEnabledChanged = false;\n    //If a channel was updated, need to also track if we need to need to mix them again\n    SoundAccumulator.needToRemixSamples = false;\n    return SoundAccumulator;\n}());\n// Inlined because closure compiler inlines\nfunction initializeSoundAccumulator() {\n    SoundAccumulator.channel1Sample = 15;\n    SoundAccumulator.channel2Sample = 15;\n    SoundAccumulator.channel3Sample = 15;\n    SoundAccumulator.channel4Sample = 15;\n    SoundAccumulator.channel1DacEnabled = false;\n    SoundAccumulator.channel2DacEnabled = false;\n    SoundAccumulator.channel3DacEnabled = false;\n    SoundAccumulator.channel4DacEnabled = false;\n    SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n    SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n    SoundAccumulator.mixerVolumeChanged = true;\n    SoundAccumulator.mixerEnabledChanged = true;\n    SoundAccumulator.needToRemixSamples = false;\n}\n// Inlined because closure compiler inlines\nfunction accumulateSound(numberOfCycles) {\n    // Check if any of the individual channels will update\n    var channel1WillUpdate = Channel1.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel1.channelNumber);\n    var channel2WillUpdate = Channel2.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel2.channelNumber);\n    var channel3WillUpdate = Channel3.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel3.channelNumber);\n    var channel4WillUpdate = Channel4.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel4.channelNumber);\n    if (channel1WillUpdate) {\n        SoundAccumulator.channel1Sample = Channel1.getSampleFromCycleCounter();\n    }\n    if (channel2WillUpdate) {\n        SoundAccumulator.channel2Sample = Channel2.getSampleFromCycleCounter();\n    }\n    if (channel3WillUpdate) {\n        SoundAccumulator.channel3Sample = Channel3.getSampleFromCycleCounter();\n    }\n    if (channel4WillUpdate) {\n        SoundAccumulator.channel4Sample = Channel4.getSampleFromCycleCounter();\n    }\n    // If any channel updated, we need to re-mix our samples\n    if (channel1WillUpdate || channel2WillUpdate || channel3WillUpdate || channel4WillUpdate) {\n        SoundAccumulator.needToRemixSamples = true;\n    }\n    // Do Some downsampling magic\n    var downSampleCycleCounter = Sound.downSampleCycleCounter;\n    downSampleCycleCounter += numberOfCycles * Sound.downSampleCycleMultiplier;\n    var maxDownSampleCycles = Sound.maxDownSampleCycles();\n    if (downSampleCycleCounter >= maxDownSampleCycles) {\n        // Reset the downsample counter\n        // Don't set to zero to catch overflowed cycles\n        downSampleCycleCounter -= maxDownSampleCycles;\n        Sound.downSampleCycleCounter = downSampleCycleCounter;\n        if (SoundAccumulator.needToRemixSamples || SoundAccumulator.mixerVolumeChanged || SoundAccumulator.mixerEnabledChanged) {\n            mixChannelSamples(SoundAccumulator.channel1Sample, SoundAccumulator.channel2Sample, SoundAccumulator.channel3Sample, SoundAccumulator.channel4Sample);\n        }\n        else {\n            Sound.downSampleCycleCounter = downSampleCycleCounter;\n        }\n        // Finally Simply place the accumulated sample in memory\n        // Set our volumes in memory\n        // +1 so it can not be zero\n        setLeftAndRightOutputForAudioQueue(SoundAccumulator.leftChannelSampleUnsignedByte + 1, SoundAccumulator.rightChannelSampleUnsignedByte + 1, AUDIO_BUFFER_LOCATION);\n        var audioQueueIndex = Sound.audioQueueIndex + 1;\n        // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n        // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n        // Not 0xFFFF because we need half of 64kb since we store left and right channel\n        var maxIndex = i32Portable(Sound.wasmBoyMemoryMaxBufferSize >> 1) - 1;\n        if (audioQueueIndex >= maxIndex) {\n            audioQueueIndex -= 1;\n        }\n        Sound.audioQueueIndex = audioQueueIndex;\n    }\n}\n// Function used by SoundAccumulator to find out if a channel Dac Changed\nfunction didChannelDacChange(channelNumber) {\n    switch (channelNumber) {\n        case Channel1.channelNumber: {\n            var isDacEnabled = Channel1.isDacEnabled;\n            var channel1Enabled = SoundAccumulator.channel1DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel1DacEnabled = isDacEnabled;\n            return channel1Enabled;\n        }\n        case Channel2.channelNumber: {\n            var isDacEnabled = Channel2.isDacEnabled;\n            var channel2Enabled = SoundAccumulator.channel2DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel2DacEnabled = isDacEnabled;\n            return channel2Enabled;\n        }\n        case Channel3.channelNumber: {\n            var isDacEnabled = Channel3.isDacEnabled;\n            var channel3Enabled = SoundAccumulator.channel3DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel3DacEnabled = isDacEnabled;\n            return channel3Enabled;\n        }\n        case Channel4.channelNumber: {\n            var isDacEnabled = Channel4.isDacEnabled;\n            var channel4Enabled = SoundAccumulator.channel4DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel4DacEnabled = isDacEnabled;\n            return channel4Enabled;\n        }\n    }\n    return false;\n}\n\n// https://emu-docs.org/Game%20Boy/gb_sound.txt\nvar Sound = /** @class */ (function () {\n    function Sound() {\n    }\n    // Number of cycles to run in each batch process\n    // This number should be in sync so that sound doesn't run too many cyles at once\n    // and does not exceed the minimum number of cyles for either down sampling, or\n    // How often we change the frame, or a channel's update process\n    Sound.batchProcessCycles = function () {\n        // return Cpu.GBCDoubleSpeed ? 174 : 87;\n        return 87 << Cpu.GBCDoubleSpeed;\n    };\n    Sound.updateNR50 = function (value) {\n        Sound.NR50LeftMixerVolume = (value >> 4) & 0x07;\n        Sound.NR50RightMixerVolume = value & 0x07;\n    };\n    Sound.updateNR51 = function (value) {\n        Sound.NR51IsChannel4EnabledOnLeftOutput = checkBitOnByte(7, value);\n        Sound.NR51IsChannel3EnabledOnLeftOutput = checkBitOnByte(6, value);\n        Sound.NR51IsChannel2EnabledOnLeftOutput = checkBitOnByte(5, value);\n        Sound.NR51IsChannel1EnabledOnLeftOutput = checkBitOnByte(4, value);\n        Sound.NR51IsChannel4EnabledOnRightOutput = checkBitOnByte(3, value);\n        Sound.NR51IsChannel3EnabledOnRightOutput = checkBitOnByte(2, value);\n        Sound.NR51IsChannel2EnabledOnRightOutput = checkBitOnByte(1, value);\n        Sound.NR51IsChannel1EnabledOnRightOutput = checkBitOnByte(0, value);\n    };\n    Sound.updateNR52 = function (value) {\n        Sound.NR52IsSoundEnabled = checkBitOnByte(7, value);\n    };\n    Sound.maxFrameSequenceCycles = function () {\n        // return Cpu.GBCDoubleSpeed ? 16384 : 8192;\n        return 8192 << Cpu.GBCDoubleSpeed;\n    };\n    Sound.maxDownSampleCycles = function () {\n        return Cpu.CLOCK_SPEED();\n    };\n    // Function to save the state of the class\n    Sound.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot), Sound.frameSequenceCycleCounter);\n        store(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot), Sound.downSampleCycleCounter);\n        store(getSaveStateMemoryOffset(0x05, Sound.saveStateSlot), Sound.frameSequencer);\n    };\n    // Function to load the save state from memory\n    Sound.loadState = function () {\n        Sound.frameSequenceCycleCounter = load(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot));\n        Sound.downSampleCycleCounter = load(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot));\n        Sound.frameSequencer = load(getSaveStateMemoryOffset(0x05, Sound.saveStateSlot));\n        clearAudioBuffer();\n    };\n    // Current cycles\n    // This will be used for batch processing\n    // https://github.com/binji/binjgb/commit/e028f45e805bc0b0aa4697224a209f9ae514c954\n    // TODO: May Also need to do this for Reads\n    Sound.currentCycles = 0;\n    // Channel control / On-OFF / Volume (RW)\n    Sound.memoryLocationNR50 = 0xff24;\n    Sound.NR50LeftMixerVolume = 0;\n    Sound.NR50RightMixerVolume = 0;\n    // 0xFF25 selects which output each channel goes to, Referred to as NR51\n    Sound.memoryLocationNR51 = 0xff25;\n    Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel1EnabledOnRightOutput = true;\n    Sound.NR51IsChannel2EnabledOnRightOutput = true;\n    Sound.NR51IsChannel3EnabledOnRightOutput = true;\n    Sound.NR51IsChannel4EnabledOnRightOutput = true;\n    // Sound on/off\n    Sound.memoryLocationNR52 = 0xff26;\n    Sound.NR52IsSoundEnabled = true;\n    // $FF30 -- $FF3F is the load register space for the 4-bit samples for channel 3\n    Sound.memoryLocationChannel3LoadRegisterStart = 0xff30;\n    // Need to count how often we need to increment our frame sequencer\n    // Which you can read about below\n    Sound.frameSequenceCycleCounter = 0x0000;\n    // Also need to downsample our audio to average audio qualty\n    // https://www.reddit.com/r/EmuDev/comments/5gkwi5/gb_apu_sound_emulation/\n    // Want to do 48000hz, so CpuRate / Sound Rate, 4194304 / 48000 ~ 87 cycles\n    Sound.downSampleCycleCounter = 0x00;\n    Sound.downSampleCycleMultiplier = 48000;\n    // Frame sequencer controls what should be updated and and ticked\n    // Every time the sound is updated :) It is updated everytime the\n    // Cycle counter reaches the max cycle\n    Sound.frameSequencer = 0x00;\n    // Our current sample number we are passing back to the wasmboy memory map\n    // Found that a static number of samples doesn't work well on mobile\n    // Will just update the queue index, grab as much as we can whenever we need more audio, then reset\n    // NOTE: Giving a really large sample rate gives more latency, but less pops!\n    //static readonly MAX_NUMBER_OF_SAMPLES: i32 = 4096;\n    Sound.audioQueueIndex = 0x0000;\n    Sound.wasmBoyMemoryMaxBufferSize = 0x20000;\n    // Save States\n    Sound.saveStateSlot = 6;\n    return Sound;\n}());\n// Initialize sound registers\n// From: https://emu-docs.org/Game%20Boy/gb_sound.txt\n// Inlined because closure compiler inlines\nfunction initializeSound() {\n    // Reset Stateful variables\n    Sound.currentCycles = 0;\n    Sound.NR50LeftMixerVolume = 0;\n    Sound.NR50RightMixerVolume = 0;\n    Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel1EnabledOnRightOutput = true;\n    Sound.NR51IsChannel2EnabledOnRightOutput = true;\n    Sound.NR51IsChannel3EnabledOnRightOutput = true;\n    Sound.NR51IsChannel4EnabledOnRightOutput = true;\n    Sound.NR52IsSoundEnabled = true;\n    Sound.frameSequenceCycleCounter = 0x0000;\n    Sound.downSampleCycleCounter = 0x00;\n    Sound.frameSequencer = 0x00;\n    Sound.audioQueueIndex = 0x0000;\n    // intiialize our channels\n    Channel1.initialize();\n    Channel2.initialize();\n    Channel3.initialize();\n    Channel4.initialize();\n    // Other Sound Registers\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR50, 0x77);\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR51, 0xf3);\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR52, 0xf1);\n    initializeSoundAccumulator();\n}\n// Function to batch process our audio after we skipped so many cycles\nfunction batchProcessAudio() {\n    var batchProcessCycles = Sound.batchProcessCycles();\n    while (Sound.currentCycles >= batchProcessCycles) {\n        updateSound(batchProcessCycles);\n        Sound.currentCycles -= batchProcessCycles;\n    }\n}\n// Function for updating sound\nfunction updateSound(numberOfCycles) {\n    // Check if our frameSequencer updated\n    var frameSequencerUpdated = updateFrameSequencer(numberOfCycles);\n    if (Config.audioAccumulateSamples && !frameSequencerUpdated) {\n        accumulateSound(numberOfCycles);\n    }\n    else {\n        calculateSound(numberOfCycles);\n    }\n}\n// Funciton to get the current Audio Queue index\nfunction getNumberOfSamplesInAudioBuffer() {\n    return Sound.audioQueueIndex;\n}\n// Function to reset the audio queue\nfunction clearAudioBuffer() {\n    Sound.audioQueueIndex = 0;\n}\n// Inlined because closure compiler inlines\nfunction calculateSound(numberOfCycles) {\n    // Update all of our channels\n    // All samples will be returned as 0 to 30\n    // 0 being -1.0, and 30 being 1.0\n    // (see blurb at top)\n    var channel1Sample = i32Portable(Channel1.getSample(numberOfCycles));\n    var channel2Sample = i32Portable(Channel2.getSample(numberOfCycles));\n    var channel3Sample = i32Portable(Channel3.getSample(numberOfCycles));\n    var channel4Sample = i32Portable(Channel4.getSample(numberOfCycles));\n    // TODO: Allow individual channels to be muted\n    // let channel1Sample: i32 = 15;\n    // let channel2Sample: i32 = 15;\n    // let channel3Sample: i32 = 15;\n    // let channel4Sample: i32 = 15;\n    // Save the samples in the accumulator\n    SoundAccumulator.channel1Sample = channel1Sample;\n    SoundAccumulator.channel2Sample = channel2Sample;\n    SoundAccumulator.channel3Sample = channel3Sample;\n    SoundAccumulator.channel4Sample = channel4Sample;\n    // Do Some downsampling magic\n    var downSampleCycleCounter = Sound.downSampleCycleCounter + numberOfCycles * Sound.downSampleCycleMultiplier;\n    if (downSampleCycleCounter >= Sound.maxDownSampleCycles()) {\n        // Reset the downsample counter\n        // Don't set to zero to catch overflowed cycles\n        downSampleCycleCounter -= Sound.maxDownSampleCycles();\n        Sound.downSampleCycleCounter = downSampleCycleCounter;\n        // Mix our samples\n        var mixedSample = mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample);\n        var leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n        var rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n        // Set our volumes in memory\n        // +1 so it can not be zero\n        setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, AUDIO_BUFFER_LOCATION);\n        if (Config.enableAudioDebugging) {\n            // Channel 1\n            mixedSample = mixChannelSamples(channel1Sample, 15, 15, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_1_BUFFER_LOCATION);\n            // Channel 2\n            mixedSample = mixChannelSamples(15, channel2Sample, 15, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_2_BUFFER_LOCATION);\n            // Channel 3\n            mixedSample = mixChannelSamples(15, 15, channel3Sample, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_3_BUFFER_LOCATION);\n            // Channel 4\n            mixedSample = mixChannelSamples(15, 15, 15, channel4Sample);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_4_BUFFER_LOCATION);\n        }\n        var audioQueueIndex = Sound.audioQueueIndex + 1;\n        // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n        // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n        // Not 0xFFFF because we need half of 64kb since we store left and right channel\n        var maxIndex = i32Portable(Sound.wasmBoyMemoryMaxBufferSize >> 1) - 1;\n        if (audioQueueIndex >= maxIndex) {\n            audioQueueIndex -= 1;\n        }\n        Sound.audioQueueIndex = audioQueueIndex;\n    }\n}\n// Inlined because closure compiler inlines\nfunction updateFrameSequencer(numberOfCycles) {\n    // APU runs at 4194304 / 512\n    // Or Cpu.clockSpeed / 512\n    // Which means, we need to update once every 8192 cycles :)\n    var maxFrameSequenceCycles = Sound.maxFrameSequenceCycles();\n    var frameSequenceCycleCounter = Sound.frameSequenceCycleCounter + numberOfCycles;\n    if (frameSequenceCycleCounter >= maxFrameSequenceCycles) {\n        // Reset the frameSequenceCycleCounter\n        // Not setting to zero as we do not want to drop cycles\n        frameSequenceCycleCounter -= maxFrameSequenceCycles;\n        Sound.frameSequenceCycleCounter = frameSequenceCycleCounter;\n        // Check our frame sequencer\n        // https://gist.github.com/drhelius/3652407\n        var frameSequencer = Sound.frameSequencer;\n        switch (frameSequencer) {\n            case 0:\n                // Update Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                break;\n            /* Do Nothing on one */\n            case 2:\n                // Update Sweep and Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                Channel1.updateSweep();\n                break;\n            /* Do Nothing on three */\n            case 4:\n                // Update Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                break;\n            /* Do Nothing on five */\n            case 6:\n                // Update Sweep and Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                Channel1.updateSweep();\n                break;\n            case 7:\n                // Update Envelope on channels\n                Channel1.updateEnvelope();\n                Channel2.updateEnvelope();\n                Channel4.updateEnvelope();\n                break;\n        }\n        // Update our frame sequencer\n        Sound.frameSequencer = (frameSequencer + 1) & 7;\n        return true;\n    }\n    else {\n        Sound.frameSequenceCycleCounter = frameSequenceCycleCounter;\n    }\n    return false;\n}\nfunction mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample) {\n    // Do Some Cool mixing\n    // NR50 FF24 ALLL BRRR Vin L enable, Left vol, Vin R enable, Right vol\n    // NR51 FF25 NW21 NW21 Left enables, Right enables\n    // NR52 FF26 P--- NW21 Power control/status, Channel length statuses\n    // NW21 = 4 bits on byte\n    // 3 -> Channel 4, 2 -> Channel 3, 1 -> Channel 2, 0 -> Channel 1\n    if (channel1Sample === void 0) { channel1Sample = 15; }\n    if (channel2Sample === void 0) { channel2Sample = 15; }\n    if (channel3Sample === void 0) { channel3Sample = 15; }\n    if (channel4Sample === void 0) { channel4Sample = 15; }\n    // Matt's Proccess\n    // I push out 1024 samples at a time and use 96000 hz sampling rate, so I guess i'm a bit less than one frame,\n    // but I let the queue fill up with 4 x 1024 samples before I start waiting for the audio\n    // TODO: Vin Mixing\n    SoundAccumulator.mixerVolumeChanged = false;\n    // Get our channel volume for left/right\n    var leftChannelSample = 0;\n    var rightChannelSample = 0;\n    // Find the sample for the left if enabled\n    // other wise add silence (15) for the channel\n    leftChannelSample += Sound.NR51IsChannel1EnabledOnLeftOutput ? channel1Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel2EnabledOnLeftOutput ? channel2Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel3EnabledOnLeftOutput ? channel3Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel4EnabledOnLeftOutput ? channel4Sample : 15;\n    // Find the sample for the right if enabled\n    // other wise add silence (15) for the channel\n    rightChannelSample += Sound.NR51IsChannel1EnabledOnRightOutput ? channel1Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel2EnabledOnRightOutput ? channel2Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel3EnabledOnRightOutput ? channel3Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel4EnabledOnRightOutput ? channel4Sample : 15;\n    // Update our accumulator\n    SoundAccumulator.mixerEnabledChanged = false;\n    SoundAccumulator.needToRemixSamples = false;\n    // Finally multiply our volumes by the mixer volume\n    // Mixer volume can be at most 7 + 1\n    // Can be at most 7, because we only have 3 bits, 111 = 7\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Mixer\n    // Done in the getSampleAsUnsignedByte(), since we are doing some weirdness there :)\n    // Convert our samples from unsigned 32 to unsigned byte\n    // Reason being, We want to be able to pass in wasm memory as usigned byte. Javascript will handle the conversion back\n    var leftChannelSampleUnsignedByte = getSampleAsUnsignedByte(leftChannelSample, Sound.NR50LeftMixerVolume + 1);\n    var rightChannelSampleUnsignedByte = getSampleAsUnsignedByte(rightChannelSample, Sound.NR50RightMixerVolume + 1);\n    // Save these samples in the accumulator\n    SoundAccumulator.leftChannelSampleUnsignedByte = leftChannelSampleUnsignedByte;\n    SoundAccumulator.rightChannelSampleUnsignedByte = rightChannelSampleUnsignedByte;\n    return concatenateBytes(leftChannelSampleUnsignedByte, rightChannelSampleUnsignedByte);\n}\nfunction getSampleAsUnsignedByte(sample, mixerVolume) {\n    // If the sample is silence, return silence as unsigned byte\n    // Silence is common, and should be checked for performance\n    if (sample === 60) {\n        return 127;\n    }\n    // convert to a signed, precise scale of -6000 to 6000 (cheap way of -1.0 to 1.0)\n    // Multiply by the mixer volume fraction (to find the actual volume)\n    var precision = 100000;\n    var convertedSample = sample - 60;\n    convertedSample = convertedSample * precision;\n    // Multiply by the mixer volume fraction (to find the actual volume)\n    convertedSample = (convertedSample * mixerVolume) >> 3;\n    // Convert back to scale of 0 to 120\n    convertedSample = i32Portable(convertedSample / precision) + 60;\n    // Finally, convert to an unsigned byte scale\n    // With Four Channels (0 to 30) and no global volume. Max is 120\n    // max unsigned byte goal is 254 (see blurb at top).\n    // 120 / 254 should give the correct conversion\n    // For example, 120 / 254 = 0.47244094488188976\n    // Multiply by 1000 to increase the float into an int\n    // so, 120 * 1000 / (0.47244094488188976 * 1000) should give approximate answer for max mixer volume\n    var maxDivider = i32Portable((120 * precision) / 254);\n    convertedSample = i32Portable((convertedSample * precision) / maxDivider);\n    // Ensure we have an i32 and not a float for JS builds\n    convertedSample = i32Portable(convertedSample);\n    return convertedSample;\n}\n// Function to set our left and right channels at the correct queue index\nfunction setLeftAndRightOutputForAudioQueue(leftVolume, rightVolume, bufferLocation) {\n    // Get our stereo index\n    var audioQueueOffset = bufferLocation + (Sound.audioQueueIndex << 1);\n    // Store our volumes\n    // +1 that way we don't have empty data to ensure that the value is set\n    store(audioQueueOffset + 0, (leftVolume + 1));\n    store(audioQueueOffset + 1, (rightVolume + 1));\n}\n\n// Functions involved in R/W of sound registers\n// Function to check and handle writes to sound registers\n// Inlined because closure compiler inlines\nfunction SoundRegisterWriteTraps(offset, value) {\n    if (offset !== Sound.memoryLocationNR52 && !Sound.NR52IsSoundEnabled) {\n        // Block all writes to any sound register EXCEPT NR52!\n        // This is under the assumption that the check for\n        // offset >= 0xFF10 && offset <= 0xFF26\n        // is done in writeTraps.ts (which it is)\n        // NOTE: Except on DMG, length can still be written (whatever that means)\n        return false;\n    }\n    switch (offset) {\n        // Handle NRx0 on Channels\n        case Channel1.memoryLocationNRx0:\n            Channel1.updateNRx0(value);\n            return true;\n        case Channel3.memoryLocationNRx0:\n            Channel3.updateNRx0(value);\n            return true;\n        // Handle NRx1 (Length Counter) on Channels\n        case Channel1.memoryLocationNRx1:\n            Channel1.updateNRx1(value);\n            return true;\n        case Channel2.memoryLocationNRx1:\n            Channel2.updateNRx1(value);\n            return true;\n        case Channel3.memoryLocationNRx1:\n            Channel3.updateNRx1(value);\n            return true;\n        case Channel4.memoryLocationNRx1:\n            Channel4.updateNRx1(value);\n            return true;\n        // Handle NRx2 (Envelope / Volume) on Channels\n        case Channel1.memoryLocationNRx2:\n            Channel1.updateNRx2(value);\n            return true;\n        case Channel2.memoryLocationNRx2:\n            Channel2.updateNRx2(value);\n            return true;\n        case Channel3.memoryLocationNRx2:\n            // Check if channel 3's volume code was written too\n            // This is handcy to know for accumulation of samples\n            Channel3.volumeCodeChanged = true;\n            Channel3.updateNRx2(value);\n            return true;\n        case Channel4.memoryLocationNRx2:\n            Channel4.updateNRx2(value);\n            return true;\n        // Handle NRx3 (Frequency / Noise Properties) on Channels\n        case Channel1.memoryLocationNRx3:\n            Channel1.updateNRx3(value);\n            return true;\n        case Channel2.memoryLocationNRx3:\n            Channel2.updateNRx3(value);\n            return true;\n        case Channel3.memoryLocationNRx3:\n            Channel3.updateNRx3(value);\n            return true;\n        case Channel4.memoryLocationNRx3:\n            Channel4.updateNRx3(value);\n            return true;\n        // Check our NRx4 registers to trap our trigger bits\n        case Channel1.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel1.updateNRx4(value);\n                Channel1.trigger();\n            }\n            return true;\n        case Channel2.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel2.updateNRx4(value);\n                Channel2.trigger();\n            }\n            return true;\n        case Channel3.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel3.updateNRx4(value);\n                Channel3.trigger();\n            }\n            return true;\n        case Channel4.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel4.updateNRx4(value);\n                Channel4.trigger();\n            }\n            return true;\n        // Tell the sound accumulator if volumes changes\n        case Sound.memoryLocationNR50:\n            Sound.updateNR50(value);\n            SoundAccumulator.mixerVolumeChanged = true;\n            return true;\n        // Tell the sound accumulator if volumes changes\n        case Sound.memoryLocationNR51:\n            Sound.updateNR51(value);\n            SoundAccumulator.mixerEnabledChanged = true;\n            return true;\n        case Sound.memoryLocationNR52:\n            // Reset all registers except NR52\n            Sound.updateNR52(value);\n            if (!checkBitOnByte(7, value)) {\n                for (var i = 0xff10; i < 0xff26; ++i) {\n                    eightBitStoreIntoGBMemory(i, 0x00);\n                }\n            }\n            return true;\n    }\n    // We did not handle the write, Allow the write\n    return true;\n}\n// http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n// Inlined because closure compiler inlines\nfunction SoundRegisterReadTraps(offset) {\n    // TODO: OR All Registers\n    // This will fix bugs in orcale of ages :)\n    if (offset === Sound.memoryLocationNR52) {\n        // Get our registerNR52\n        var registerNR52 = eightBitLoadFromGBMemory(Sound.memoryLocationNR52);\n        // Knock off lower 7 bits\n        registerNR52 &= 0x80;\n        // Or from the table\n        registerNR52 |= 0x70;\n        return registerNR52;\n    }\n    return -1;\n}\n\nvar Interrupts = /** @class */ (function () {\n    function Interrupts() {\n    }\n    Interrupts.updateInterruptEnabled = function (value) {\n        Interrupts.isVBlankInterruptEnabled = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n        Interrupts.isLcdInterruptEnabled = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n        Interrupts.isTimerInterruptEnabled = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n        Interrupts.isSerialInterruptEnabled = checkBitOnByte(Interrupts.bitPositionSerialInterrupt, value);\n        Interrupts.isJoypadInterruptEnabled = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n        Interrupts.interruptsEnabledValue = value;\n    };\n    Interrupts.updateInterruptRequested = function (value) {\n        Interrupts.isVBlankInterruptRequested = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n        Interrupts.isLcdInterruptRequested = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n        Interrupts.isTimerInterruptRequested = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n        Interrupts.isSerialInterruptRequested = checkBitOnByte(Interrupts.bitPositionSerialInterrupt, value);\n        Interrupts.isJoypadInterruptRequested = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n        Interrupts.interruptsRequestedValue = value;\n    };\n    // Function to return if we have any pending interrupts\n    Interrupts.areInterruptsPending = function () {\n        return (Interrupts.interruptsRequestedValue & Interrupts.interruptsEnabledValue & 0x1f) > 0;\n    };\n    // Function to save the state of the class\n    Interrupts.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitch);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitchDelay);\n        // Interrupts enabled and requested are stored in actual GB memory, thus, don't need to be saved\n    };\n    // Function to load the save state from memory\n    Interrupts.loadState = function () {\n        Interrupts.masterInterruptSwitch = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot));\n        Interrupts.masterInterruptSwitchDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot));\n        Interrupts.updateInterruptEnabled(eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptEnabled));\n        Interrupts.updateInterruptRequested(eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest));\n    };\n    Interrupts.masterInterruptSwitch = false;\n    // According to mooneye, interrupts are not handled until AFTER\n    // Next instruction\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown\n    Interrupts.masterInterruptSwitchDelay = false;\n    // Biut position for each part of the interrupts HW registers\n    Interrupts.bitPositionVBlankInterrupt = 0;\n    Interrupts.bitPositionLcdInterrupt = 1;\n    Interrupts.bitPositionTimerInterrupt = 2;\n    Interrupts.bitPositionSerialInterrupt = 3;\n    Interrupts.bitPositionJoypadInterrupt = 4;\n    Interrupts.memoryLocationInterruptEnabled = 0xffff; // A.K.A interrupt Flag (IE)\n    // Cache which Interrupts are enabled\n    Interrupts.interruptsEnabledValue = 0;\n    Interrupts.isVBlankInterruptEnabled = false;\n    Interrupts.isLcdInterruptEnabled = false;\n    Interrupts.isTimerInterruptEnabled = false;\n    Interrupts.isSerialInterruptEnabled = false;\n    Interrupts.isJoypadInterruptEnabled = false;\n    Interrupts.memoryLocationInterruptRequest = 0xff0f; // A.K.A interrupt Flag (IF)\n    // Cache which Interrupts are requested\n    Interrupts.interruptsRequestedValue = 0;\n    Interrupts.isVBlankInterruptRequested = false;\n    Interrupts.isLcdInterruptRequested = false;\n    Interrupts.isTimerInterruptRequested = false;\n    Interrupts.isSerialInterruptRequested = false;\n    Interrupts.isJoypadInterruptRequested = false;\n    // Save States\n    Interrupts.saveStateSlot = 2;\n    return Interrupts;\n}());\n// Inlined because closure compiler inlines\nfunction initializeInterrupts() {\n    // Values from BGB\n    // IE\n    Interrupts.updateInterruptEnabled(0x00);\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptEnabled, Interrupts.interruptsEnabledValue);\n    // IF\n    Interrupts.updateInterruptRequested(0xe1);\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, Interrupts.interruptsRequestedValue);\n}\n// NOTE: Interrupts should be handled before reading an opcode\n// Inlined because closure compiler inlines\nfunction checkInterrupts() {\n    // First check for our delay was enabled\n    if (Interrupts.masterInterruptSwitchDelay) {\n        Interrupts.masterInterruptSwitch = true;\n        Interrupts.masterInterruptSwitchDelay = false;\n    }\n    // Check if we have an enabled and requested interrupt\n    var isAnInterruptRequestedAndEnabledValue = Interrupts.interruptsEnabledValue & Interrupts.interruptsRequestedValue & 0x1f;\n    if (isAnInterruptRequestedAndEnabledValue > 0) {\n        // Boolean to track if interrupts were handled\n        // Interrupt handling requires 20 cycles\n        // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n        var wasInterruptHandled = false;\n        // Service our interrupts, if we have the master switch enabled\n        // https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/\n        if (Interrupts.masterInterruptSwitch && !Cpu.isHaltNoJump) {\n            if (Interrupts.isVBlankInterruptEnabled && Interrupts.isVBlankInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionVBlankInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isLcdInterruptEnabled && Interrupts.isLcdInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionLcdInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isTimerInterruptEnabled && Interrupts.isTimerInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionTimerInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isSerialInterruptEnabled && Interrupts.isSerialInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionSerialInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isJoypadInterruptEnabled && Interrupts.isJoypadInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionJoypadInterrupt);\n                wasInterruptHandled = true;\n            }\n        }\n        var interuptHandlerCycles = 0;\n        if (wasInterruptHandled) {\n            // Interrupt handling requires 20 cycles, TCAGBD\n            interuptHandlerCycles = 20;\n            if (Cpu.isHalted()) {\n                // If the CPU was halted, now is the time to un-halt\n                // Should be done here when the jump occurs according to:\n                // https://www.reddit.com/r/EmuDev/comments/6fmjch/gb_glitches_in_links_awakening_and_pok%C3%A9mon_gold/\n                Cpu.exitHaltAndStop();\n                interuptHandlerCycles += 4;\n            }\n        }\n        if (Cpu.isHalted()) {\n            Cpu.exitHaltAndStop();\n        }\n        return interuptHandlerCycles;\n    }\n    return 0;\n}\nfunction _handleInterrupt(bitPosition) {\n    // Disable the master switch\n    setInterrupts(false);\n    // Disable the bit on the interruptRequest\n    var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n    interruptRequest = resetBitOnByte(bitPosition, interruptRequest);\n    Interrupts.interruptsRequestedValue = interruptRequest;\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n    // Push the programCounter onto the stacks\n    // Push the next instruction, not the halt itself (TCAGBD).\n    Cpu.stackPointer = Cpu.stackPointer - 2;\n    if (Cpu.isHalted()) {\n        // TODO: This breaks Pokemon Yellow, And OG Link's awakening. Find out why...\n        // sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter + 1);\n        sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter);\n    }\n    else {\n        sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter);\n    }\n    // Jump to the correct interrupt location\n    // Also piggyback off of the switch to reset our HW Register caching\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/interupts.html\n    switch (bitPosition) {\n        case Interrupts.bitPositionVBlankInterrupt:\n            Interrupts.isVBlankInterruptRequested = false;\n            Cpu.programCounter = 0x40;\n            break;\n        case Interrupts.bitPositionLcdInterrupt:\n            Interrupts.isLcdInterruptRequested = false;\n            Cpu.programCounter = 0x48;\n            break;\n        case Interrupts.bitPositionTimerInterrupt:\n            Interrupts.isTimerInterruptRequested = false;\n            Cpu.programCounter = 0x50;\n            break;\n        case Interrupts.bitPositionSerialInterrupt:\n            Interrupts.isSerialInterruptRequested = false;\n            Cpu.programCounter = 0x58;\n            break;\n        case Interrupts.bitPositionJoypadInterrupt:\n            Interrupts.isJoypadInterruptRequested = false;\n            Cpu.programCounter = 0x60;\n            break;\n    }\n}\nfunction _requestInterrupt(bitPosition) {\n    var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n    // Pass to set the correct interrupt bit on interruptRequest\n    interruptRequest = setBitOnByte(bitPosition, interruptRequest);\n    Interrupts.interruptsRequestedValue = interruptRequest;\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n}\nfunction setInterrupts(value) {\n    // If we are enabling interrupts,\n    // we want to wait 4 cycles before enabling\n    if (value) {\n        Interrupts.masterInterruptSwitchDelay = true;\n    }\n    else {\n        Interrupts.masterInterruptSwitch = false;\n    }\n}\n// Inlined because closure compiler inlines\nfunction requestVBlankInterrupt() {\n    Interrupts.isVBlankInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionVBlankInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestLcdInterrupt() {\n    Interrupts.isLcdInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionLcdInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestTimerInterrupt() {\n    Interrupts.isTimerInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionTimerInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestJoypadInterrupt() {\n    Interrupts.isJoypadInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionJoypadInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestSerialInterrupt() {\n    Interrupts.isSerialInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionSerialInterrupt);\n}\n\nvar Timers = /** @class */ (function () {\n    function Timers() {\n    }\n    // Number of cycles to run in each batch process\n    Timers.batchProcessCycles = function () {\n        return 256;\n    };\n    Timers.updateDividerRegister = function () {\n        var oldDividerRegister = Timers.dividerRegister;\n        Timers.dividerRegister = 0;\n        eightBitStoreIntoGBMemory(Timers.memoryLocationDividerRegister, 0);\n        if (Timers.timerEnabled && _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, 0)) {\n            _incrementTimerCounter();\n        }\n    };\n    Timers.updateTimerCounter = function (value) {\n        if (Timers.timerEnabled) {\n            // From binjgb, dont write TIMA if we were just reset\n            if (Timers.timerCounterWasReset) {\n                return;\n            }\n            // Mooneye Test, tima_write_reloading\n            // Writing in this strange delay cycle, will cancel\n            // Both the interrupt and the TMA reload\n            if (Timers.timerCounterOverflowDelay) {\n                Timers.timerCounterOverflowDelay = false;\n            }\n        }\n        Timers.timerCounter = value;\n    };\n    Timers.updateTimerModulo = function (value) {\n        Timers.timerModulo = value;\n        // Mooneye Test, tma_write_reloading\n        // Don't update if we were reloading\n        if (Timers.timerEnabled && Timers.timerCounterWasReset) {\n            Timers.timerCounter = value;\n            Timers.timerCounterWasReset = false;\n        }\n    };\n    Timers.updateTimerControl = function (value) {\n        // Get some initial values\n        var oldTimerEnabled = Timers.timerEnabled;\n        Timers.timerEnabled = checkBitOnByte(2, value);\n        var newTimerInputClock = value & 0x03;\n        // Do some obscure behavior for if we should increment TIMA\n        // This does the timer increments from rapid_toggle mooneye tests\n        if (!oldTimerEnabled) {\n            var oldTimerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n            var newTimerCounterMaskBit = _getTimerCounterMaskBit(newTimerInputClock);\n            var shouldIncrementTimerCounter = false;\n            var dividerRegister = Timers.dividerRegister;\n            if (Timers.timerEnabled) {\n                shouldIncrementTimerCounter = checkBitOnByte(oldTimerCounterMaskBit, dividerRegister);\n            }\n            else {\n                shouldIncrementTimerCounter =\n                    checkBitOnByte(oldTimerCounterMaskBit, dividerRegister) && checkBitOnByte(newTimerCounterMaskBit, dividerRegister);\n            }\n            if (shouldIncrementTimerCounter) {\n                _incrementTimerCounter();\n            }\n        }\n        Timers.timerInputClock = newTimerInputClock;\n    };\n    // Function to save the state of the class\n    // TODO: Save state for new properties on Timers\n    Timers.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot), Timers.currentCycles);\n        store(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot), Timers.dividerRegister);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot), Timers.timerCounterOverflowDelay);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0b, Timers.saveStateSlot), Timers.timerCounterWasReset);\n        eightBitStoreIntoGBMemory(Timers.memoryLocationTimerCounter, Timers.timerCounter);\n    };\n    // Function to load the save state from memory\n    Timers.loadState = function () {\n        Timers.currentCycles = load(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot));\n        Timers.dividerRegister = load(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot));\n        Timers.timerCounterOverflowDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot));\n        Timers.timerCounterWasReset = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0b, Timers.saveStateSlot));\n        Timers.timerCounter = eightBitLoadFromGBMemory(Timers.memoryLocationTimerCounter);\n        Timers.timerModulo = eightBitLoadFromGBMemory(Timers.memoryLocationTimerModulo);\n        Timers.timerInputClock = eightBitLoadFromGBMemory(Timers.memoryLocationTimerControl);\n    };\n    // Current cycles\n    // This will be used for batch processing\n    Timers.currentCycles = 0;\n    // Divider Register = DIV\n    // Divider Register is 16 bits.\n    // Divider Register when read is just the upper 8 bits\n    // But internally is used as the full 16\n    // Essentially dividerRegister is an always counting clock\n    // DIV Drives everything, it is the heart of the timer.\n    // All other timing registers base them selves relative to the DIV register\n    // Think of the div register as like a cycle counter :)\n    // DIV will increment TIMA, whenever there is a falling edge, see below for that.\n    Timers.memoryLocationDividerRegister = 0xff04; // DIV\n    Timers.dividerRegister = 0;\n    // timerCounter = TIMA\n    // TIMA is the actual counter.\n    // Whenever the DIV gets the falling edge, and other obscure cases,\n    // This is incremented. When this overflows, we need to fire an interrupt.\n    Timers.memoryLocationTimerCounter = 0xff05;\n    Timers.timerCounter = 0;\n    Timers.timerCounterOverflowDelay = false;\n    Timers.timerCounterWasReset = false;\n    Timers.timerCounterMask = 0;\n    // Timer Modulo = TMA\n    // TMA is what TIMA (Notice the I :p) is counting from, and TIMA will load\n    // Whenever TIMA overflow.\n    // For instance, we count like 1,2,3,4,5,6,7,8,9, and then overflow to 10.\n    // TMA would be like \"Hey, start counting from 5 whenever we reset\"\n    // Then we would be like 5,6,7,8,9...5,6,7,8,9...etc...\n    Timers.memoryLocationTimerModulo = 0xff06;\n    Timers.timerModulo = 0;\n    // Timer Control = TAC\n    // TAC Says how fast we are counting.\n    // TAC controls which bit we are watching for the falling edge on the DIV register\n    // And whenever the bit has the falling edge, we increment TIMA (The thing counting).\n    // Therefore, depending on the value, we will either count faster or slower.\n    Timers.memoryLocationTimerControl = 0xff07;\n    // Bit 2    - Timer Stop  (0=Stop, 1=Start)\n    // Bits 1-0 - Input Clock Select\n    //            00:   4096 Hz    (~4194 Hz SGB) (1024 cycles)\n    //            01: 262144 Hz  (~268400 Hz SGB) (16 cycles)\n    //            10:  65536 Hz   (~67110 Hz SGB) (64 cycles)\n    //            11:  16384 Hz   (~16780 Hz SGB) (256 cycles)\n    Timers.timerEnabled = false;\n    Timers.timerInputClock = 0;\n    // Save States\n    Timers.saveStateSlot = 5;\n    return Timers;\n}());\n// Inlined because closure compiler inlines\nfunction initializeTimers() {\n    // Reset stateful Variables\n    Timers.currentCycles = 0;\n    Timers.dividerRegister = 0;\n    Timers.timerCounter = 0;\n    Timers.timerModulo = 0;\n    Timers.timerEnabled = false;\n    Timers.timerInputClock = 0;\n    Timers.timerCounterOverflowDelay = false;\n    Timers.timerCounterWasReset = false;\n    if (Cpu.GBCEnabled) {\n        // DIV\n        eightBitStoreIntoGBMemory(0xff04, 0x1e);\n        Timers.dividerRegister = 0x1ea0;\n        // 0xFF05 -> 0xFF06 = 0x00\n        // TAC\n        eightBitStoreIntoGBMemory(0xff07, 0xf8);\n        Timers.timerInputClock = 0xf8;\n    }\n    else {\n        // DIV\n        eightBitStoreIntoGBMemory(0xff04, 0xab);\n        Timers.dividerRegister = 0xabcc;\n        // 0xFF05 -> 0xFF06 = 0x00\n        // TAC\n        eightBitStoreIntoGBMemory(0xff07, 0xf8);\n        Timers.timerInputClock = 0xf8;\n    }\n}\n// Batch Process Timers\n// Only checked on writes\n// Function to batch process our Timers after we skipped so many cycles\nfunction batchProcessTimers() {\n    // TODO: Did a timer rewrite, make a proper batch processing\n    // For timers\n    updateTimers(Timers.currentCycles);\n    Timers.currentCycles = 0;\n}\nfunction updateTimers(numberOfCycles) {\n    // Want to increment 4 cycles at a time like an actual GB would\n    var cyclesIncreased = 0;\n    while (cyclesIncreased < numberOfCycles) {\n        var oldDividerRegister = Timers.dividerRegister;\n        var curDividerRegister = oldDividerRegister;\n        cyclesIncreased += 4;\n        curDividerRegister += 4;\n        curDividerRegister &= 0xffff;\n        Timers.dividerRegister = curDividerRegister;\n        if (Timers.timerEnabled) {\n            var timerCounterWasReset = Timers.timerCounterWasReset;\n            if (Timers.timerCounterOverflowDelay) {\n                Timers.timerCounter = Timers.timerModulo;\n                // Fire off timer interrupt\n                requestTimerInterrupt();\n                Timers.timerCounterOverflowDelay = false;\n                Timers.timerCounterWasReset = true;\n            }\n            else if (timerCounterWasReset) {\n                Timers.timerCounterWasReset = false;\n            }\n            if (_checkDividerRegisterFallingEdgeDetector(oldDividerRegister, curDividerRegister)) {\n                _incrementTimerCounter();\n            }\n        }\n    }\n}\n// Function to increment our Timer Counter\n// This fires off interrupts once we overflow\nfunction _incrementTimerCounter() {\n    var counter = Timers.timerCounter;\n    if (++counter > 255) {\n        // Whenever the timer overflows, there is a slight delay (4 cycles)\n        // Of when TIMA gets TMA's value, and the interrupt is fired.\n        // Thus we will set the delay, which can be handled in the update timer or write trap\n        Timers.timerCounterOverflowDelay = true;\n        counter = 0;\n    }\n    Timers.timerCounter = counter;\n}\n// Function to act as our falling edge detector\n// Whenever we have a falling edge, we need to increment TIMA\n// http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n// https://github.com/binji/binjgb/blob/master/src/emulator.c#L1944\nfunction _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, newDividerRegister) {\n    // Get our mask\n    var timerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n    // If the old register's watched bit was zero,\n    // but after adding the new registers wastch bit is now 1\n    return checkBitOnByte(timerCounterMaskBit, oldDividerRegister) && !checkBitOnByte(timerCounterMaskBit, newDividerRegister);\n}\n// Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\nfunction _getTimerCounterMaskBit(timerInputClock) {\n    switch (timerInputClock) {\n        case 0x00:\n            return 9;\n        case 0x01:\n            return 3;\n        case 0x02:\n            return 5;\n        case 0x03:\n            return 7;\n    }\n    return 0;\n}\n\n// Link cable / serial implementation\nvar Serial = /** @class */ (function () {\n    function Serial() {\n    }\n    Serial.updateTransferControl = function (value) {\n        Serial.isShiftClockInternal = checkBitOnByte(0, value);\n        Serial.isClockSpeedFast = checkBitOnByte(1, value);\n        Serial.transferStartFlag = checkBitOnByte(7, value);\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    };\n    // Cycle counter\n    Serial.currentCycles = 0x00;\n    // Register locations\n    Serial.memoryLocationSerialTransferData = 0xff01; // SB\n    Serial.memoryLocationSerialTransferControl = 0xff02; // SC\n    // Number of bits transferred\n    Serial.numberOfBitsTransferred = 0;\n    // Transfer control variables\n    Serial.isShiftClockInternal = false;\n    Serial.isClockSpeedFast = false;\n    Serial.transferStartFlag = false;\n    return Serial;\n}());\n// Function to initialize our serial values\n// Inlined because closure compiler inlines\nfunction initializeSerial() {\n    Serial.currentCycles = 0x00;\n    Serial.numberOfBitsTransferred = 0;\n    if (Cpu.GBCEnabled) {\n        // FF01 = 0x00\n        eightBitStoreIntoGBMemory(0xff02, 0x7c);\n        Serial.updateTransferControl(0x7c);\n    }\n    else {\n        // FF01 = 0x00\n        eightBitStoreIntoGBMemory(0xff02, 0x7e);\n        Serial.updateTransferControl(0x7e);\n    }\n}\n// TODO: Finish serial\n// See minimal serial: https://github.com/binji/binjgb/commit/64dece05c4ef5a052c4b9b75eb3ddbbfc6677cbe\n// Inlined because closure compiler inlines\nfunction updateSerial(numberOfCycles) {\n    // If we aren't starting our transfer, or transferring,\n    // return\n    if (!Serial.transferStartFlag) {\n        return;\n    }\n    // Want to increment 4 cycles at a time like an actual GB would\n    var cyclesIncreased = 0;\n    while (cyclesIncreased < numberOfCycles) {\n        var oldCycles = Serial.currentCycles;\n        var curCycles = oldCycles;\n        cyclesIncreased += 4;\n        curCycles += 4;\n        if (curCycles > 0xffff) {\n            curCycles -= 0x10000;\n        }\n        Serial.currentCycles = curCycles;\n        if (_checkFallingEdgeDetector(oldCycles, curCycles)) {\n            // TODO: Since no actual connection, always transfer 1\n            // Need to fix this\n            var memoryLocationSerialTransferData = Serial.memoryLocationSerialTransferData;\n            var transferData = eightBitLoadFromGBMemory(memoryLocationSerialTransferData);\n            transferData = (transferData << 1) + 1;\n            transferData = transferData & 0xff;\n            eightBitStoreIntoGBMemory(memoryLocationSerialTransferData, transferData);\n            var numberOfBitsTransferred = Serial.numberOfBitsTransferred;\n            if (++numberOfBitsTransferred === 8) {\n                Serial.numberOfBitsTransferred = 0;\n                requestSerialInterrupt();\n                // Disable transfer start\n                var memoryLocationSerialTransferControl = Serial.memoryLocationSerialTransferControl;\n                var transferControl = eightBitLoadFromGBMemory(memoryLocationSerialTransferControl);\n                eightBitStoreIntoGBMemory(memoryLocationSerialTransferControl, resetBitOnByte(7, transferControl));\n                Serial.transferStartFlag = false;\n            }\n            else {\n                Serial.numberOfBitsTransferred = numberOfBitsTransferred;\n            }\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction _checkFallingEdgeDetector(oldCycles, newCycles) {\n    // Get our mask\n    var maskBit = _getFallingEdgeMaskBit();\n    // If the old register's watched bit was zero,\n    // but after adding the new registers wastch bit is now 1\n    return checkBitOnByte(maskBit, oldCycles) && !checkBitOnByte(maskBit, newCycles);\n}\n// Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\n// Inlined because closure compiler inlines\nfunction _getFallingEdgeMaskBit() {\n    return Serial.isClockSpeedFast ? 2 : 7;\n}\n\n// http://www.codeslinger.co.uk/pages/projects/gameboy/joypad.html\n// Joypad Register\n// Taken from pandocs\n// Bit 7 - Not used\n// Bit 6 - Not used\n// Bit 5 - P15 Select Button Keys (0=Select)\n// Bit 4 - P14 Select Direction Keys (0=Select)\n// Bit 3 - P13 Input Down or Start (0=Pressed) (Read Only)\n// Bit 2 - P12 Input Up or Select (0=Pressed) (Read Only)\n// Bit 1 - P11 Input Left or Button B (0=Pressed) (Read Only)\n// Bit 0 - P10 Input Right or Button A (0=Pressed) (Read Only)\n// Button Ids will be the following:\n// UP - 0\n// RIGHT - 1\n// DOWN - 2\n// LEFT - 3\n// A - 4\n// B - 5\n// SELECT - 6\n// START - 7\nvar Joypad = /** @class */ (function () {\n    function Joypad() {\n    }\n    Joypad.updateJoypad = function (value) {\n        Joypad.joypadRegisterFlipped = value ^ 0xff;\n        Joypad.isDpadType = checkBitOnByte(4, Joypad.joypadRegisterFlipped);\n        Joypad.isButtonType = checkBitOnByte(5, Joypad.joypadRegisterFlipped);\n    };\n    // Function to save the state of the class\n    Joypad.saveState = function () { };\n    // Function to load the save state from memory\n    Joypad.loadState = function () {\n        Joypad.updateJoypad(eightBitLoadFromGBMemory(Joypad.memoryLocationJoypadRegister));\n    };\n    Joypad.up = false;\n    Joypad.down = false;\n    Joypad.left = false;\n    Joypad.right = false;\n    Joypad.a = false;\n    Joypad.b = false;\n    Joypad.select = false;\n    Joypad.start = false;\n    Joypad.memoryLocationJoypadRegister = 0xff00;\n    // Cache some values on the Joypad register\n    Joypad.joypadRegisterFlipped = 0;\n    Joypad.isDpadType = false;\n    Joypad.isButtonType = false;\n    // Save States\n    // Not doing anything for Joypad for now\n    Joypad.saveStateSlot = 3;\n    return Joypad;\n}());\n// Inlined because closure compiler inlines\nfunction getJoypadState() {\n    // Get the joypad register\n    var joypadRegister = Joypad.joypadRegisterFlipped;\n    if (Joypad.isDpadType) {\n        // D-pad buttons\n        // Up\n        if (Joypad.up) {\n            joypadRegister = resetBitOnByte(2, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(2, joypadRegister);\n        }\n        // Right\n        if (Joypad.right) {\n            joypadRegister = resetBitOnByte(0, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(0, joypadRegister);\n        }\n        // Down\n        if (Joypad.down) {\n            joypadRegister = resetBitOnByte(3, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(3, joypadRegister);\n        }\n        // Left\n        if (Joypad.left) {\n            joypadRegister = resetBitOnByte(1, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(1, joypadRegister);\n        }\n    }\n    else if (Joypad.isButtonType) {\n        // A\n        if (Joypad.a) {\n            joypadRegister = resetBitOnByte(0, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(0, joypadRegister);\n        }\n        // B\n        if (Joypad.b) {\n            joypadRegister = resetBitOnByte(1, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(1, joypadRegister);\n        }\n        // Select\n        if (Joypad.select) {\n            joypadRegister = resetBitOnByte(2, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(2, joypadRegister);\n        }\n        // Start\n        if (Joypad.start) {\n            joypadRegister = resetBitOnByte(3, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(3, joypadRegister);\n        }\n    }\n    // Set the top 4 bits to on\n    joypadRegister = joypadRegister | 0xf0;\n    return joypadRegister;\n}\nfunction setJoypadState(up, right, down, left, a, b, select, start) {\n    if (up > 0) {\n        _pressJoypadButton(0);\n    }\n    else {\n        _releaseJoypadButton(0);\n    }\n    if (right > 0) {\n        _pressJoypadButton(1);\n    }\n    else {\n        _releaseJoypadButton(1);\n    }\n    if (down > 0) {\n        _pressJoypadButton(2);\n    }\n    else {\n        _releaseJoypadButton(2);\n    }\n    if (left > 0) {\n        _pressJoypadButton(3);\n    }\n    else {\n        _releaseJoypadButton(3);\n    }\n    if (a > 0) {\n        _pressJoypadButton(4);\n    }\n    else {\n        _releaseJoypadButton(4);\n    }\n    if (b > 0) {\n        _pressJoypadButton(5);\n    }\n    else {\n        _releaseJoypadButton(5);\n    }\n    if (select > 0) {\n        _pressJoypadButton(6);\n    }\n    else {\n        _releaseJoypadButton(6);\n    }\n    if (start > 0) {\n        _pressJoypadButton(7);\n    }\n    else {\n        _releaseJoypadButton(7);\n    }\n}\nfunction _pressJoypadButton(buttonId) {\n    // Un stop the CPU\n    Cpu.isStopped = false;\n    // Check if the button state changed from not pressed\n    var isButtonStateChanging = false;\n    if (!_getJoypadButtonStateFromButtonId(buttonId)) {\n        isButtonStateChanging = true;\n    }\n    // Set our joypad state\n    _setJoypadButtonStateFromButtonId(buttonId, true);\n    // If the button state is changing, check for an interrupt\n    if (isButtonStateChanging) {\n        // Determine if it is a button or a dpad button\n        var isDpadTypeButton = false;\n        if (buttonId <= 3) {\n            isDpadTypeButton = true;\n        }\n        // Determine if we should request an interrupt\n        var shouldRequestInterrupt = false;\n        // Check if the game is looking for a dpad type button press\n        if (Joypad.isDpadType && isDpadTypeButton) {\n            shouldRequestInterrupt = true;\n        }\n        // Check if the game is looking for a button type button press\n        if (Joypad.isButtonType && !isDpadTypeButton) {\n            shouldRequestInterrupt = true;\n        }\n        // Finally, request the interrupt, if the button state actually changed\n        if (shouldRequestInterrupt) {\n            requestJoypadInterrupt();\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction _releaseJoypadButton(buttonId) {\n    // Set our joypad state\n    _setJoypadButtonStateFromButtonId(buttonId, false);\n}\nfunction _getJoypadButtonStateFromButtonId(buttonId) {\n    switch (buttonId) {\n        case 0:\n            return Joypad.up;\n        case 1:\n            return Joypad.right;\n        case 2:\n            return Joypad.down;\n        case 3:\n            return Joypad.left;\n        case 4:\n            return Joypad.a;\n        case 5:\n            return Joypad.b;\n        case 6:\n            return Joypad.select;\n        case 7:\n            return Joypad.start;\n        default:\n            return false;\n    }\n}\nfunction _setJoypadButtonStateFromButtonId(buttonId, isPressed) {\n    switch (buttonId) {\n        case 0:\n            Joypad.up = isPressed;\n            break;\n        case 1:\n            Joypad.right = isPressed;\n            break;\n        case 2:\n            Joypad.down = isPressed;\n            break;\n        case 3:\n            Joypad.left = isPressed;\n            break;\n        case 4:\n            Joypad.a = isPressed;\n            break;\n        case 5:\n            Joypad.b = isPressed;\n            break;\n        case 6:\n            Joypad.select = isPressed;\n            break;\n        case 7:\n            Joypad.start = isPressed;\n            break;\n    }\n}\n\n// Function to handle rom/rambanking\n// Inlined because closure compiler inlines\nfunction handleBanking(offset, value) {\n    // Is rom Only does not bank\n    if (Memory.isRomOnly) {\n        return;\n    }\n    var isMBC1 = Memory.isMBC1;\n    var isMBC2 = Memory.isMBC2;\n    // Enable Ram Banking\n    if (offset <= 0x1fff) {\n        if (isMBC2 && !checkBitOnByte(4, value)) {\n            // Do Nothing\n            return;\n        }\n        else {\n            var romEnableByte = value & 0x0f;\n            if (romEnableByte === 0x00) {\n                Memory.isRamBankingEnabled = false;\n            }\n            else if (romEnableByte === 0x0a) {\n                Memory.isRamBankingEnabled = true;\n            }\n        }\n    }\n    else if (offset <= 0x3fff) {\n        var isMBC5 = Memory.isMBC5;\n        if (!isMBC5 || offset <= 0x2fff) {\n            // Change Low Bits on the Current Rom Bank\n            var currentRomBank = Memory.currentRomBank;\n            if (isMBC2) {\n                currentRomBank = value & 0x0f;\n            }\n            // Set the number of bottom bytes from the MBC type\n            var romBankLowerBits = value;\n            if (isMBC1) {\n                // Only want the bottom 5\n                romBankLowerBits = romBankLowerBits & 0x1f;\n                currentRomBank &= 0xe0;\n            }\n            else if (Memory.isMBC3) {\n                // Only Want the bottom 7\n                romBankLowerBits = romBankLowerBits & 0x7f;\n                currentRomBank &= 0x80;\n            }\n            else if (isMBC5) {\n                // Going to switch the whole thing\n                currentRomBank &= 0x00;\n            }\n            // Set the lower bytes\n            currentRomBank |= romBankLowerBits;\n            Memory.currentRomBank = currentRomBank;\n            return;\n        }\n        else {\n            // TODO: MBC5 High bits Rom bank, check if this works, not sure about the value\n            var lowByte = splitLowByte(Memory.currentRomBank);\n            var highByte = (value > 0);\n            Memory.currentRomBank = concatenateBytes(highByte, lowByte);\n        }\n    }\n    else if (!isMBC2 && offset <= 0x5fff) {\n        // ROM / RAM Banking, MBC2 doesn't do this\n        if (isMBC1 && Memory.isMBC1RomModeEnabled) {\n            // Do an upper bit rom bank for MBC 1\n            // Remove upper bits of currentRomBank\n            var currentRomBank = Memory.currentRomBank & 0x1f;\n            var romBankHigherBits = value & 0xe0;\n            currentRomBank |= romBankHigherBits;\n            Memory.currentRomBank = currentRomBank;\n            return;\n        }\n        var ramBankBits = value;\n        if (!Memory.isMBC5) {\n            // Get the bottom 2 bits\n            ramBankBits &= 0x03;\n        }\n        else {\n            // Get the bottom nibble\n            ramBankBits &= 0x0f;\n        }\n        // Set our ram bank\n        Memory.currentRamBank = ramBankBits;\n        return;\n    }\n    else if (!isMBC2 && offset <= 0x7fff) {\n        if (isMBC1) {\n            Memory.isMBC1RomModeEnabled = checkBitOnByte(0, value);\n        }\n        // TODO: MBC3 Latch Clock Data\n    }\n}\n// Inlined because closure compiler inlines\nfunction getRomBankAddress(gameboyOffset) {\n    var currentRomBank = Memory.currentRomBank;\n    if (!Memory.isMBC5 && currentRomBank === 0) {\n        currentRomBank = 1;\n    }\n    // Adjust our gameboy offset relative to zero for the gameboy memory map\n    return (0x4000 * currentRomBank + (gameboyOffset - Memory.switchableCartridgeRomLocation));\n}\n// Inlined because closure compiler inlines\nfunction getRamBankAddress(gameboyOffset) {\n    // Adjust our gameboy offset relative to zero for the gameboy memory map\n    return (0x2000 * Memory.currentRamBank + (gameboyOffset - Memory.cartridgeRamLocation));\n}\n\n// Inlined because closure compiler inlines\nfunction initializeDma() {\n    if (Cpu.GBCEnabled) {\n        // GBC DMA\n        eightBitStoreIntoGBMemory(0xff51, 0xff);\n        eightBitStoreIntoGBMemory(0xff52, 0xff);\n        eightBitStoreIntoGBMemory(0xff53, 0xff);\n        eightBitStoreIntoGBMemory(0xff54, 0xff);\n        eightBitStoreIntoGBMemory(0xff55, 0xff);\n    }\n    else {\n        // GBC DMA\n        eightBitStoreIntoGBMemory(0xff51, 0xff);\n        eightBitStoreIntoGBMemory(0xff52, 0xff);\n        eightBitStoreIntoGBMemory(0xff53, 0xff);\n        eightBitStoreIntoGBMemory(0xff54, 0xff);\n        eightBitStoreIntoGBMemory(0xff55, 0xff);\n    }\n}\n// Inlined because closure compiler inlines\nfunction startDmaTransfer(sourceAddressOffset) {\n    var sourceAddress = sourceAddressOffset << 8;\n    for (var i = 0; i <= 0x9f; ++i) {\n        var spriteInformationByte = eightBitLoadFromGBMemory(sourceAddress + i);\n        var spriteInformationAddress = Memory.spriteInformationTableLocation + i;\n        eightBitStoreIntoGBMemory(spriteInformationAddress, spriteInformationByte);\n    }\n    // TCAGBD:  This copy (DMA) needs 160 × 4 + 4 clocks to complete in both double speed and single speeds modes\n    // Increment all of our Cycle coiunters in ../cpu/opcodes\n    Memory.DMACycles = 644;\n}\n// https://gist.github.com/drhelius/3394856\n// http://bgb.bircd.org/pandocs.htm\n// Inlined because closure compiler inlines\nfunction startHdmaTransfer(hdmaTriggerByteToBeWritten) {\n    // Check if we are Gbc\n    if (!Cpu.GBCEnabled) {\n        return;\n    }\n    // Check if we are trying to terminate an already active HBLANK HDMA\n    if (Memory.isHblankHdmaActive && !checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n        // Don't reset anything, just set bit 7 to 1 on the trigger byte\n        Memory.isHblankHdmaActive = false;\n        var hdmaTriggerByte = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaTrigger);\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, setBitOnByte(7, hdmaTriggerByte));\n        return;\n    }\n    // Get our source and destination for the HDMA\n    var hdmaSource = getHdmaSourceFromMemory();\n    var hdmaDestination = getHdmaDestinationFromMemory();\n    // Get the length from the trigger\n    // Lower 7 bits, Add 1, times 16\n    // https://gist.github.com/drhelius/3394856\n    var transferLength = resetBitOnByte(7, hdmaTriggerByteToBeWritten);\n    transferLength = (transferLength + 1) << 4;\n    // Get bit 7 of the trigger for the HDMA type\n    if (checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n        // H-Blank DMA\n        Memory.isHblankHdmaActive = true;\n        Memory.hblankHdmaTransferLengthRemaining = transferLength;\n        Memory.hblankHdmaSource = hdmaSource;\n        Memory.hblankHdmaDestination = hdmaDestination;\n        // This will be handled in updateHblankHdma()\n        // Since we return false in write traps, we need to now write the byte\n        // Be sure to reset bit 7, to show that the hdma is active\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, resetBitOnByte(7, hdmaTriggerByteToBeWritten));\n    }\n    else {\n        // General DMA\n        hdmaTransfer(hdmaSource, hdmaDestination, transferLength);\n        // Stop the DMA\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, 0xff);\n    }\n}\n// Inlined because closure compiler inlines\nfunction updateHblankHdma() {\n    if (!Memory.isHblankHdmaActive) {\n        return;\n    }\n    // Get our amount of bytes to transfer (Only 0x10 bytes at a time)\n    var bytesToTransfer = 0x10;\n    var hblankHdmaTransferLengthRemaining = Memory.hblankHdmaTransferLengthRemaining;\n    if (hblankHdmaTransferLengthRemaining < bytesToTransfer) {\n        // Set to the difference\n        bytesToTransfer = hblankHdmaTransferLengthRemaining;\n    }\n    // Do the transfer (Only 0x10 bytes at a time)\n    hdmaTransfer(Memory.hblankHdmaSource, Memory.hblankHdmaDestination, bytesToTransfer);\n    // Update our source and destination\n    Memory.hblankHdmaSource += bytesToTransfer;\n    Memory.hblankHdmaDestination += bytesToTransfer;\n    hblankHdmaTransferLengthRemaining -= bytesToTransfer;\n    Memory.hblankHdmaTransferLengthRemaining = hblankHdmaTransferLengthRemaining;\n    var memoryLocationHdmaTrigger = Memory.memoryLocationHdmaTrigger;\n    if (hblankHdmaTransferLengthRemaining <= 0) {\n        // End the transfer\n        Memory.isHblankHdmaActive = false;\n        // Need to clear the HDMA with 0xFF, which sets bit 7 to 1 to show the HDMA has ended\n        eightBitStoreIntoGBMemory(memoryLocationHdmaTrigger, 0xff);\n    }\n    else {\n        // Set our new transfer length, make sure it is in the weird format,\n        // and make sure bit 7 is 0, to show that the HDMA is Active\n        var remainingTransferLength = hblankHdmaTransferLengthRemaining;\n        var transferLengthAsByte = (remainingTransferLength >> 4) - 1;\n        eightBitStoreIntoGBMemory(memoryLocationHdmaTrigger, resetBitOnByte(7, transferLengthAsByte));\n    }\n}\n// Simple Function to transfer the bytes from a destination to a source for a general pourpose or Hblank HDMA\nfunction hdmaTransfer(hdmaSource, hdmaDestination, transferLength) {\n    for (var i = 0; i < transferLength; ++i) {\n        var sourceByte = eightBitLoadFromGBMemoryWithTraps(hdmaSource + i);\n        // get the hdmaDestination with wrapping\n        // See issue #61: https://github.com/torch2424/wasmBoy/issues/61\n        var hdmaDestinationWithWrapping = hdmaDestination + i;\n        while (hdmaDestinationWithWrapping > 0x9fff) {\n            // Simply clear the top 3 bits\n            hdmaDestinationWithWrapping -= 0x2000;\n        }\n        eightBitStoreIntoGBMemoryWithTraps(hdmaDestinationWithWrapping, sourceByte);\n    }\n    // Set our Cycles used for the HDMA\n    // Since DMA in GBC Double Speed Mode takes 80 micro seconds,\n    // And HDMA takes 8 micro seconds per 0x10 bytes in GBC Double Speed mode (and GBC Normal Mode)\n    // Will assume (644 / 10) cycles for GBC Double Speed Mode,\n    // and (644 / 10 / 2) for GBC Normal Mode\n    var hdmaCycles = 32 << Cpu.GBCDoubleSpeed;\n    hdmaCycles = hdmaCycles * (transferLength >> 4);\n    Memory.DMACycles += hdmaCycles;\n}\n// Function to get our HDMA Source\n// Follows the poan docs\n// Inlined because closure compiler inlines\nfunction getHdmaSourceFromMemory() {\n    // Get our source for the HDMA\n    var hdmaSourceHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceHigh);\n    var hdmaSourceLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceLow);\n    var hdmaSource = concatenateBytes(hdmaSourceHigh, hdmaSourceLow);\n    // And off the appopriate bits for the source and destination\n    // And off the bottom 4 bits\n    hdmaSource = hdmaSource & 0xfff0;\n    return hdmaSource;\n}\n// Function to get our HDMA Destination\n// Follows the poan docs\n// Inlined because closure compiler inlines\nfunction getHdmaDestinationFromMemory() {\n    var hdmaDestinationHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationHigh);\n    var hdmaDestinationLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationLow);\n    var hdmaDestination = concatenateBytes(hdmaDestinationHigh, hdmaDestinationLow);\n    // Can only be in VRAM, 0x8000 -> 0x9FF0\n    // Pan docs says to knock off upper 3 bits, and lower 4 bits\n    // Which gives us: 0001111111110000 or 0x1FF0\n    // Meaning we must add 0x8000\n    hdmaDestination = hdmaDestination & 0x1ff0;\n    hdmaDestination += Memory.videoRamLocation;\n    return hdmaDestination;\n}\n\n// Internal function to trap any modify data trying to be written to Gameboy memory\n// Follows the Gameboy memory map\n// Return true if you want to continue the write, return false to end it here\nfunction checkWriteTraps(offset, value) {\n    // Cpu\n    if (offset === Cpu.memoryLocationSpeedSwitch) {\n        // TCAGBD, only Bit 0 is writable\n        eightBitStoreIntoGBMemory(Cpu.memoryLocationSpeedSwitch, value & 0x01);\n        // We did the write, dont need to\n        return false;\n    }\n    // Graphics\n    // Cache globals used multiple times for performance\n    var videoRamLocation = Memory.videoRamLocation;\n    var spriteInformationTableLocation = Memory.spriteInformationTableLocation;\n    // Handle banking\n    if (offset < videoRamLocation) {\n        handleBanking(offset, value);\n        return false;\n    }\n    // Check the graphics mode to see if we can write to VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n    if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n        // Can only read/write from VRAM During Modes 0 - 2\n        // See graphics/lcd.ts\n        // TODO: This can do more harm than good in a beta emulator,\n        // requires precise timing disabling for now\n        // if (Graphics.currentLcdMode > 2) {\n        //   return false;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Be sure to copy everything in EchoRam to Work Ram\n    // Codeslinger: The ECHO memory region (0xE000-0xFDFF) is quite different because any data written here is also written in the equivelent ram memory region 0xC000-0xDDFF.\n    // Hence why it is called echo\n    if (offset >= Memory.echoRamLocation && offset < spriteInformationTableLocation) {\n        var wramOffset = offset - 0x2000;\n        eightBitStoreIntoGBMemory(wramOffset, value);\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Also check for individal writes\n    // Can only read/write from OAM During Modes 0 - 1\n    // See graphics/lcd.ts\n    if (offset >= spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n        // Can only read/write from OAM During Mode 2\n        // See graphics/lcd.ts\n        // if (Lcd.currentLcdMode < 2) {\n        // return false;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // Allow the original write, and return since we dont need to look anymore\n        // return true;\n        return Lcd.currentLcdMode >= 2;\n    }\n    if (offset >= Memory.unusableMemoryLocation && offset <= Memory.unusableMemoryEndLocation) {\n        return false;\n    }\n    // Serial\n    if (offset === Serial.memoryLocationSerialTransferControl) {\n        // SC\n        return Serial.updateTransferControl(value);\n    }\n    // Sound\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    if (offset >= 0xff10 && offset <= 0xff26) {\n        batchProcessAudio();\n        return SoundRegisterWriteTraps(offset, value);\n    }\n    // FF27 - FF2F not used\n    // Final Wave Table for Channel 3\n    if (offset >= 0xff30 && offset <= 0xff3f) {\n        batchProcessAudio();\n    }\n    // Other Memory effects fomr read/write to Lcd/Graphics\n    if (offset >= Lcd.memoryLocationLcdControl && offset <= Graphics.memoryLocationWindowX) {\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        if (offset === Lcd.memoryLocationLcdControl) {\n            // Shorcut for isLCD Enabled since it gets \"hot\"\n            Lcd.updateLcdControl(value);\n            return true;\n        }\n        if (offset === Lcd.memoryLocationLcdStatus) {\n            // We are handling the write here\n            Lcd.updateLcdStatus(value);\n            return false;\n        }\n        // reset the current scanline if the game tries to write to it\n        if (offset === Graphics.memoryLocationScanlineRegister) {\n            Graphics.scanlineRegister = 0;\n            eightBitStoreIntoGBMemory(offset, 0);\n            return false;\n        }\n        // Cache our coincidence compare\n        if (offset === Lcd.memoryLocationCoincidenceCompare) {\n            Lcd.coincidenceCompare = value;\n            return true;\n        }\n        // Do the direct memory access transfer for spriteInformationTable\n        // Check the graphics mode to see if we can write to VRAM\n        // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n        if (offset === Graphics.memoryLocationDmaTransfer) {\n            // otherwise, perform a DMA transfer\n            // And allow the original write\n            startDmaTransfer(value);\n            return true;\n        }\n        // Scroll and Window XY\n        switch (offset) {\n            case Graphics.memoryLocationScrollX:\n                Graphics.scrollX = value;\n                return true;\n            case Graphics.memoryLocationScrollY:\n                Graphics.scrollY = value;\n                return true;\n            case Graphics.memoryLocationWindowX:\n                Graphics.windowX = value;\n                return true;\n            case Graphics.memoryLocationWindowY:\n                Graphics.windowY = value;\n                return true;\n        }\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Do an HDMA\n    if (offset === Memory.memoryLocationHdmaTrigger) {\n        startHdmaTransfer(value);\n        return false;\n    }\n    // Don't allow banking if we are doing an Hblank HDM transfer\n    // https://gist.github.com/drhelius/3394856\n    if (offset === Memory.memoryLocationGBCWRAMBank || offset === Memory.memoryLocationGBCVRAMBank) {\n        if (Memory.isHblankHdmaActive) {\n            var hblankHdmaSource = Memory.hblankHdmaSource;\n            if ((hblankHdmaSource >= 0x4000 && hblankHdmaSource <= 0x7fff) || (hblankHdmaSource >= 0xd000 && hblankHdmaSource <= 0xdfff)) {\n                return false;\n            }\n        }\n    }\n    // Handle GBC Pallete Write\n    if (offset >= Palette.memoryLocationBackgroundPaletteIndex && offset <= Palette.memoryLocationSpritePaletteData) {\n        // Incremeenting the palette handled by the write\n        writeColorPaletteToMemory(offset, value);\n        return true;\n    }\n    // Handle timer writes\n    if (offset >= Timers.memoryLocationDividerRegister && offset <= Timers.memoryLocationTimerControl) {\n        // Batch Process\n        batchProcessTimers();\n        switch (offset) {\n            case Timers.memoryLocationDividerRegister:\n                Timers.updateDividerRegister();\n                return false;\n            case Timers.memoryLocationTimerCounter:\n                Timers.updateTimerCounter(value);\n                return true;\n            case Timers.memoryLocationTimerModulo:\n                Timers.updateTimerModulo(value);\n                return true;\n            case Timers.memoryLocationTimerControl:\n                Timers.updateTimerControl(value);\n                return true;\n        }\n        return true;\n    }\n    // Handle Joypad writes for HW reg caching\n    if (offset === Joypad.memoryLocationJoypadRegister) {\n        Joypad.updateJoypad(value);\n    }\n    // Handle Interrupt writes\n    if (offset === Interrupts.memoryLocationInterruptRequest) {\n        Interrupts.updateInterruptRequested(value);\n        return true;\n    }\n    if (offset === Interrupts.memoryLocationInterruptEnabled) {\n        Interrupts.updateInterruptEnabled(value);\n        return true;\n    }\n    // Allow the original write\n    return true;\n}\n\n// WasmBoy memory map:\n// Private function to translate a offset meant for the gameboy memory map\n// To the wasmboy memory map\n// Following: http://gameboy.mongenel.com/dmg/asmmemmap.html\n// And https://github.com/Dooskington/GameLad/wiki/Part-11---Memory-Bank-Controllers\n// Performance help from @dcodeIO, and awesome-gbdev\nfunction getWasmBoyOffsetFromGameBoyOffset(gameboyOffset) {\n    // Get the top byte and switch\n    var gameboyOffsetHighByte = gameboyOffset >> 12;\n    switch (gameboyOffsetHighByte) {\n        case 0x00:\n        case 0x01:\n        case 0x02:\n        case 0x03:\n            // Cartridge ROM - Bank 0 (fixed)\n            // 0x0000 -> 0x0D2400\n            return gameboyOffset + CARTRIDGE_ROM_LOCATION;\n        case 0x04:\n        case 0x05:\n        case 0x06:\n        case 0x07:\n            // Cartridge ROM - Switchable Banks 1-xx\n            // 0x4000 -> (0x0D2400 + 0x4000)\n            return getRomBankAddress(gameboyOffset) + CARTRIDGE_ROM_LOCATION;\n        case 0x08:\n        case 0x09:\n            // Video RAM\n            // 0x8000 -> 0x000400\n            var vramBankId = 0;\n            if (Cpu.GBCEnabled) {\n                // Find our current VRAM Bank\n                vramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCVRAMBank) & 0x01;\n                // Even though We added another 0x2000, the Cartridge ram is pulled out of our Internal Memory Space\n                // Therefore, we do not need to adjust for this extra 0x2000\n            }\n            return gameboyOffset - Memory.videoRamLocation + VIDEO_RAM_LOCATION + 0x2000 * vramBankId;\n        case 0x0a:\n        case 0x0b:\n            // Cartridge RAM - A.K.A External RAM\n            // 0xA000 -> 0x008400\n            return getRamBankAddress(gameboyOffset) + CARTRIDGE_RAM_LOCATION;\n        case 0x0c:\n            // Gameboy Ram Bank 0\n            // 0xC000 -> 0x000400\n            // Don't need to add head, since we move out 0x200 from the cartridge ram\n            return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION;\n        case 0x0d:\n            // Gameboy Ram Banks, Switchable in GBC Mode\n            // 0xD000 -> 0x000400\n            // In CGB Mode 32 KBytes internal RAM are available.\n            // This memory is divided into 8 banks of 4 KBytes each.\n            // Bank 0 is always available in memory at C000-CFFF,\n            // Bank 1-7 can be selected into the address space at D000-DFFF.\n            // http://gbdev.gg8.se/wiki/articles/CGB_Registers#FF70_-_SVBK_-_CGB_Mode_Only_-_WRAM_Bank\n            // Get the last 3 bits to find our wram ID\n            var wramBankId = 0;\n            if (Cpu.GBCEnabled) {\n                wramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCWRAMBank) & 0x07;\n            }\n            wramBankId = wramBankId < 1 ? 1 : wramBankId;\n            // (0x1000 * (wramBankId - 1)) -> To find the correct wram bank.\n            // wramBankId - 1, because we alreayd have the space for wramBank 1, and are currently in it\n            // So need to address space for 6 OTHER banks\n            return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION + 0x1000 * (wramBankId - 1);\n        default:\n            // Everything Else after Gameboy Ram Banks\n            // 0xE000 -> 0x000400\n            // 0x6000 For the Extra WRAM Banks\n            return gameboyOffset - Memory.echoRamLocation + OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION;\n    }\n}\n\n// Breakpoints for memory / cpu\nvar Breakpoints = /** @class */ (function () {\n    function Breakpoints() {\n    }\n    Breakpoints.programCounter = -1;\n    Breakpoints.readGbMemory = -1;\n    Breakpoints.writeGbMemory = -1;\n    Breakpoints.reachedBreakpoint = false;\n    return Breakpoints;\n}());\nfunction setProgramCounterBreakpoint(breakpoint) {\n    Breakpoints.programCounter = breakpoint;\n}\nfunction resetProgramCounterBreakpoint() {\n    Breakpoints.programCounter = -1;\n}\nfunction setReadGbMemoryBreakpoint(breakpoint) {\n    Breakpoints.readGbMemory = breakpoint;\n}\nfunction resetReadGbMemoryBreakpoint() {\n    Breakpoints.readGbMemory = -1;\n}\nfunction setWriteGbMemoryBreakpoint(breakpoint) {\n    Breakpoints.writeGbMemory = breakpoint;\n}\nfunction resetWriteGbMemoryBreakpoint() {\n    Breakpoints.writeGbMemory = -1;\n}\n\n// Store / Write memory access\nfunction eightBitStoreIntoGBMemory(gameboyOffset, value) {\n    store(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset), value);\n}\nfunction eightBitStoreIntoGBMemoryWithTraps(offset, value) {\n    if (offset === Breakpoints.writeGbMemory) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    if (checkWriteTraps(offset, value)) {\n        eightBitStoreIntoGBMemory(offset, value);\n    }\n}\nfunction sixteenBitStoreIntoGBMemoryWithTraps(offset, value) {\n    // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n    // Split the value into two seperate bytes\n    var highByte = splitHighByte(value);\n    var lowByte = splitLowByte(value);\n    if (checkWriteTraps(offset, lowByte)) {\n        eightBitStoreIntoGBMemory(offset, lowByte);\n    }\n    var nextOffset = offset + 1;\n    if (checkWriteTraps(nextOffset, highByte)) {\n        eightBitStoreIntoGBMemory(nextOffset, highByte);\n    }\n}\nfunction sixteenBitStoreIntoGBMemory(offset, value) {\n    // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n    // Split the value into two seperate bytes\n    var highByte = splitHighByte(value);\n    var lowByte = splitLowByte(value);\n    eightBitStoreIntoGBMemory(offset + 0, lowByte);\n    eightBitStoreIntoGBMemory(offset + 1, highByte);\n}\nfunction storeBooleanDirectlyToWasmMemory(offset, value) {\n    store(offset, value);\n}\n\n// Funcitons for setting and checking the LCD\nvar Lcd = /** @class */ (function () {\n    function Lcd() {\n    }\n    // Function called in write traps to update our hardware registers\n    Lcd.updateLcdStatus = function (value) {\n        // Bottom three bits are read only\n        var currentLcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        var valueNoBottomBits = value & 0xf8;\n        var lcdStatusOnlyBottomBits = currentLcdStatus & 0x07;\n        value = valueNoBottomBits | lcdStatusOnlyBottomBits;\n        // Top bit is always 1\n        value = setBitOnByte(7, value);\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, value);\n    };\n    // Function called in write traps to update our hardware registers\n    Lcd.updateLcdControl = function (value) {\n        var wasLcdEnabled = Lcd.enabled;\n        Lcd.enabled = checkBitOnByte(7, value);\n        Lcd.windowTileMapDisplaySelect = checkBitOnByte(6, value);\n        Lcd.windowDisplayEnabled = checkBitOnByte(5, value);\n        Lcd.bgWindowTileDataSelect = checkBitOnByte(4, value);\n        Lcd.bgTileMapDisplaySelect = checkBitOnByte(3, value);\n        Lcd.tallSpriteSize = checkBitOnByte(2, value);\n        Lcd.spriteDisplayEnable = checkBitOnByte(1, value);\n        Lcd.bgDisplayEnabled = checkBitOnByte(0, value);\n        if (wasLcdEnabled && !Lcd.enabled) {\n            // Disable the LCD\n            resetLcd(true);\n        }\n        if (!wasLcdEnabled && Lcd.enabled) {\n            // Re-enable the LCD\n            resetLcd(false);\n        }\n    };\n    // Memory Locations\n    // Also known at STAT\n    // LCD Status (0xFF41) bits Explanation\n    // 0                0                    000                    0             00\n    //       |Coicedence Interrupt|     |Mode Interrupts|  |coincidence flag|  | Mode |\n    // Modes:\n    // 0 or 00: H-Blank\n    // 1 or 01: V-Blank\n    // 2 or 10: Searching Sprites Atts\n    // 3 or 11: Transfering Data to LCD Driver\n    Lcd.memoryLocationLcdStatus = 0xff41;\n    Lcd.currentLcdMode = 0;\n    Lcd.memoryLocationCoincidenceCompare = 0xff45;\n    Lcd.coincidenceCompare = 0;\n    // Also known as LCDC\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    // Bit 7 - LCD Display Enable (0=Off, 1=On)\n    // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 5 - Window Display Enable (0=Off, 1=On)\n    // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n    // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n    // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n    // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On\n    Lcd.memoryLocationLcdControl = 0xff40;\n    // Decoupled LCDC for caching\n    Lcd.enabled = true;\n    Lcd.windowTileMapDisplaySelect = false;\n    Lcd.windowDisplayEnabled = false;\n    Lcd.bgWindowTileDataSelect = false;\n    Lcd.bgTileMapDisplaySelect = false;\n    Lcd.tallSpriteSize = false;\n    Lcd.spriteDisplayEnable = false;\n    Lcd.bgDisplayEnabled = false;\n    return Lcd;\n}());\nfunction resetLcd(shouldBlankScreen) {\n    // Reset scanline cycle counter\n    Graphics.scanlineCycleCounter = 0;\n    Graphics.scanlineRegister = 0;\n    eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, 0);\n    // Set to mode 0\n    // https://www.reddit.com/r/EmuDev/comments/4w6479/gb_dr_mario_level_generation_issues/\n    var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n    lcdStatus = resetBitOnByte(1, lcdStatus);\n    lcdStatus = resetBitOnByte(0, lcdStatus);\n    Lcd.currentLcdMode = 0;\n    // Store the status in memory\n    eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    // Blank the screen\n    if (shouldBlankScreen) {\n        for (var i = 0; i < FRAME_SIZE; ++i) {\n            store(FRAME_LOCATION + i, 255);\n        }\n    }\n}\n// Pass in the lcd status for performance\n// Inlined because closure compiler inlines\nfunction setLcdStatus() {\n    // Check if the Lcd was disabled\n    if (!Lcd.enabled) {\n        return;\n    }\n    // Get our current scanline, and lcd mode\n    var scanlineRegister = Graphics.scanlineRegister;\n    var lcdMode = Lcd.currentLcdMode;\n    // Default to  H-Blank\n    var newLcdMode = 0;\n    // Find our newLcd mode\n    if (scanlineRegister >= 144) {\n        // VBlank mode\n        newLcdMode = 1;\n    }\n    else {\n        var scanlineCycleCounter = Graphics.scanlineCycleCounter;\n        var MIN_CYCLES_SPRITES_LCD_MODE = Graphics.MIN_CYCLES_SPRITES_LCD_MODE();\n        if (scanlineCycleCounter >= MIN_CYCLES_SPRITES_LCD_MODE) {\n            // Searching Sprites Atts\n            newLcdMode = 2;\n        }\n        else if (scanlineCycleCounter >= MIN_CYCLES_SPRITES_LCD_MODE) {\n            // Transferring data to lcd\n            newLcdMode = 3;\n        }\n    }\n    if (lcdMode !== newLcdMode) {\n        // Get our lcd status\n        var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        // Save our lcd mode\n        Lcd.currentLcdMode = newLcdMode;\n        var shouldRequestInterrupt = false;\n        // Set our LCD Status accordingly\n        switch (newLcdMode) {\n            case 0x00:\n                lcdStatus = resetBitOnByte(0, lcdStatus);\n                lcdStatus = resetBitOnByte(1, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(3, lcdStatus);\n                break;\n            case 0x01:\n                lcdStatus = resetBitOnByte(1, lcdStatus);\n                lcdStatus = setBitOnByte(0, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(4, lcdStatus);\n                break;\n            case 0x02:\n                lcdStatus = resetBitOnByte(0, lcdStatus);\n                lcdStatus = setBitOnByte(1, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(5, lcdStatus);\n                break;\n            case 0x03:\n                lcdStatus = setBitOnByte(0, lcdStatus);\n                lcdStatus = setBitOnByte(1, lcdStatus);\n                break;\n        }\n        // Check if we want to request an interrupt, and we JUST changed modes\n        if (shouldRequestInterrupt) {\n            requestLcdInterrupt();\n        }\n        // Check for updating the Hblank HDMA\n        if (newLcdMode === 0) {\n            // Update the Hblank DMA, will simply return if not active\n            updateHblankHdma();\n        }\n        // Check for requesting a VBLANK interrupt\n        if (newLcdMode === 1) {\n            requestVBlankInterrupt();\n        }\n        // Check for the coincidence\n        lcdStatus = checkCoincidence(newLcdMode, lcdStatus);\n        // Finally, save our status\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    }\n    else if (scanlineRegister === 153) {\n        // Special Case, need to check LYC\n        // Fix prehistorik man freeze\n        var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        lcdStatus = checkCoincidence(newLcdMode, lcdStatus);\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    }\n}\nfunction checkCoincidence(lcdMode, lcdStatus) {\n    // Check for the coincidence flag\n    // Need to check on every mode, and not just HBLANK, as checking on hblank breaks shantae, which checks on vblank\n    if ((lcdMode === 0 || lcdMode === 1) && Graphics.scanlineRegister === Lcd.coincidenceCompare) {\n        lcdStatus = setBitOnByte(2, lcdStatus);\n        if (checkBitOnByte(6, lcdStatus)) {\n            requestLcdInterrupt();\n        }\n    }\n    else {\n        lcdStatus = resetBitOnByte(2, lcdStatus);\n    }\n    return lcdStatus;\n}\n\n// Functions for rendering the background\n// NOTE: i32Portable wraps modulo here as somehow it gets converted to a double:\n// https://github.com/torch2424/wasmboy/issues/216\n// Inlined because closure compiler inlines\nfunction renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n    // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n    // Get our scrollX and scrollY (u16 to play nice with assemblyscript)\n    // let scrollX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollX);\n    // let scrollY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollY);\n    var scrollX = Graphics.scrollX;\n    var scrollY = Graphics.scrollY;\n    // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n    // this is done by getting the current scroll Y position,\n    // and adding it do what Y Value the scanline is drawing on the camera.\n    var pixelYPositionInMap = scanlineRegister + scrollY;\n    // Gameboy camera will \"wrap\" around the background map,\n    // meaning that if the pixelValue is 350, then we need to subtract 256 (decimal) to get it's actual value\n    // pixel values (scrollX and scrollY) range from 0x00 - 0xFF\n    pixelYPositionInMap &= 0x100 - 1;\n    // Draw the Background scanline\n    drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, 0, scrollX);\n}\n// Inlined because closure compiler inlines\nfunction renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n    // Get our windowX and windowY\n    // let windowX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowX);\n    // let windowY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowY);\n    var windowX = Graphics.windowX;\n    var windowY = Graphics.windowY;\n    // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n    // First ensure that the scanline is greater than our window\n    if (scanlineRegister < windowY) {\n        // Window is not within the current camera view\n        return;\n    }\n    // WindowX is offset by 7\n    windowX -= 7;\n    // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n    var pixelYPositionInMap = scanlineRegister - windowY;\n    // xOffset is simply a neagative window x\n    // NOTE: This can become negative zero?\n    // https://github.com/torch2424/wasmboy/issues/216\n    var xOffset = i32Portable(-windowX);\n    // Draw the Background scanline\n    drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, windowX, xOffset);\n}\n// Function frankenstein'd together to allow background and window to share the same draw scanline function\nfunction drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, iStart, xOffset) {\n    // Get our tile Y position in the map\n    var tileYPositionInMap = pixelYPositionInMap >> 3;\n    // Loop through x to draw the line like a CRT\n    for (var i = iStart; i < 160; ++i) {\n        // Get our Current X position of our pixel on the on the 160x144 camera\n        // this is done by getting the current scroll X position,\n        // and adding it do what X Value the scanline is drawing on the camera.\n        var pixelXPositionInMap = i + xOffset;\n        // This is to compensate wrapping, same as pixelY\n        if (pixelXPositionInMap >= 0x100) {\n            pixelXPositionInMap -= 0x100;\n        }\n        // Divide our pixel position by 8 to get our tile.\n        // Since, there are 256x256 pixels, and 32x32 tiles.\n        // 256 / 8 = 32.\n        // Also, bitshifting by 3, do do a division by 8\n        // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n        var tileXPositionInMap = pixelXPositionInMap >> 3;\n        // Get our tile address on the tileMap\n        // NOTE: (tileMap represents where each tile is displayed on the screen)\n        // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n        // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n        // And we have x pixel 160. 160 / 8 = 20.\n        // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n        // Think like indexing a 2d array, as a 1d array and it make sense :)\n        var tileMapAddress = tileMapMemoryLocation + (tileYPositionInMap << 5) + tileXPositionInMap;\n        // Get the tile Id on the Tile Map\n        var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n        // Now that we have our Tile Id, let's check our Tile Cache\n        var usedTileCache = false;\n        if (Config.tileCaching) {\n            var pixelsDrawn = drawLineOfTileFromTileCache(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            // Increment i by 7, not 8 because i will be incremented at end of for loop\n            if (pixelsDrawn > 0) {\n                i += pixelsDrawn - 1;\n                usedTileCache = true;\n            }\n        }\n        if (Config.tileRendering && !usedTileCache) {\n            var pixelsDrawn = drawLineOfTileFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            // A line of a tile is 8 pixels wide, therefore increase i by (pixelsDrawn - 1), and then the for loop will increment by 1\n            // For a net increment for 8\n            if (pixelsDrawn > 0) {\n                i += pixelsDrawn - 1;\n            }\n        }\n        else if (!usedTileCache) {\n            if (Cpu.GBCEnabled) {\n                // Draw the individual pixel\n                drawColorPixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            }\n            else {\n                // Draw the individual pixel\n                drawMonochromePixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap);\n            }\n        }\n    }\n}\n// Function to draw a pixel for the standard GB\n// Inlined because closure compiler inlines\nfunction drawMonochromePixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Now we can process the the individual bytes that represent the pixel on a tile\n    // Now get our tileDataAddress for the corresponding tileID we found in the map\n    // Read the comments in _getTileDataAddress() to see what's going on.\n    // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n    // This funcitons returns the start of memory locaiton for the tile 'c'.\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n    // Get the y pixel of the 8 by 8 tile.\n    // Simply modulo the scanline.\n    // For instance, let's say we are printing the first line of pixels on our camera,\n    // And the first line of pixels on our tile.\n    // yPixel = 1. 1 % 8 = 1.\n    // And for the last line\n    // yPixel = 144. 144 % 8 = 0.\n    // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n    // Because remember, we are counting lines on the display NOT including zero\n    var pixelYInTile = i32Portable(pixelYPositionInMap & 7);\n    // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n    // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n    // Again, think like you had to map a 2d array as a 1d.\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, 0);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, 0);\n    // Same logic as pixelYInTile.\n    // However, We need to reverse our byte,\n    // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n    // Therefore, is pixelX was 2, then really is need to be 5\n    // So 2 - 7 = -5, * 1 = 5\n    // Or to simplify, 7 - 2 = 5 haha!\n    var pixelXInTile = i32Portable(pixelXPositionInMap & 7);\n    pixelXInTile = 7 - pixelXInTile;\n    // Now we can get the color for that pixel\n    // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n    // To Get the color Id.\n    // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n    // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    var paletteColorId = 0;\n    if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n    }\n    if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n    }\n    // Not checking u8 Portability overflow here, since it can't be greater than i32 over :p\n    // Now get the colorId from the pallete, to get our final color\n    // Developers could change colorIds to represents different colors\n    // in their palette, thus we need to grab the color from there\n    //let pixelColorInTileFromPalette: u8 = getColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n    // Moved below for perofrmance\n    // FINALLY, RENDER THAT PIXEL!\n    // Only rendering camera for now, so coordinates are for the camera.\n    // Get the rgb value for the color Id, will be repeated into R, G, B. if not colorized\n    var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n    setPixelOnFrame(xPixel, yPixel, 0, getRedFromHexColor(hexColor));\n    setPixelOnFrame(xPixel, yPixel, 1, getGreenFromHexColor(hexColor));\n    setPixelOnFrame(xPixel, yPixel, 2, getBlueFromHexColor(hexColor));\n    // Lastly, add the pixel to our background priority map\n    // https://github.com/torch2424/wasmBoy/issues/51\n    // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n    // Bit 2 will represent if the Bg/Window has GBC priority.\n    addPriorityforPixel(xPixel, yPixel, paletteColorId);\n}\n// Function to draw a pixel from a tile in C O L O R\n// See above for more context on some variables\n// Inlined because closure compiler inlines\nfunction drawColorPixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Now get our tileDataAddress for the corresponding tileID we found in the map\n    // Read the comments in _getTileDataAddress() to see what's going on.\n    // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n    // This funcitons returns the start of memory locaiton for the tile 'c'.\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n    // Get the GB Map Attributes\n    // Bit 0-2  Background Palette number  (BGP0-7)\n    // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n    // Bit 4    Not used\n    // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n    // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n    // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n    var bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n    // See above for explanation\n    var pixelYInTile = i32Portable(pixelYPositionInMap & 7);\n    if (checkBitOnByte(6, bgMapAttributes)) {\n        // We are mirroring the tile, therefore, we need to opposite byte\n        // So if our pixel was 0 our of 8, it wild become 7 :)\n        pixelYInTile = 7 - pixelYInTile;\n    }\n    // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n    // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n    // But we need to load the time from a specific Vram bank\n    var vramBankId = i32Portable(checkBitOnByte(3, bgMapAttributes));\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId);\n    // Get our X pixel. Need to NOT reverse it if it was flipped.\n    // See above, you have to reverse this normally\n    var pixelXInTile = i32Portable(pixelXPositionInMap & 7);\n    if (!checkBitOnByte(5, bgMapAttributes)) {\n        pixelXInTile = 7 - pixelXInTile;\n    }\n    // Now we can get the color for that pixel\n    // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n    // To Get the color Id.\n    // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n    // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    var paletteColorId = 0;\n    if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n    }\n    if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n    }\n    // Finally lets add some, C O L O R\n    // Want the botom 3 bits\n    var bgPalette = bgMapAttributes & 0x07;\n    // Call the helper function to grab the correct color from the palette\n    var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false);\n    // Split off into red green and blue\n    var red = getColorComponentFromRgb(0, rgbColorPalette);\n    var green = getColorComponentFromRgb(1, rgbColorPalette);\n    var blue = getColorComponentFromRgb(2, rgbColorPalette);\n    // Finally Place our colors on the things\n    setPixelOnFrame(xPixel, yPixel, 0, red);\n    setPixelOnFrame(xPixel, yPixel, 1, green);\n    setPixelOnFrame(xPixel, yPixel, 2, blue);\n    // Lastly, add the pixel to our background priority map\n    // https://github.com/torch2424/wasmBoy/issues/51\n    // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n    // Bit 2 will represent if the Bg/Window has GBC priority.\n    addPriorityforPixel(xPixel, yPixel, paletteColorId, checkBitOnByte(7, bgMapAttributes));\n}\n// Function to attempt to draw the tile from the tile cache\n// Inlined because closure compiler inlines\nfunction drawLineOfTileFromTileCache(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // First, initialize how many pixels we have drawn\n    var pixelsDrawn = 0;\n    // Check if the current tile matches our tileId\n    // TODO: Allow the first line to use the tile cache, for some odd reason it doesn't work when scanline is 0\n    var nextXIndexToPerformCacheCheck = TileCache.nextXIndexToPerformCacheCheck;\n    if (yPixel > 0 && xPixel > 8 && tileIdFromTileMap === TileCache.tileId && xPixel === nextXIndexToPerformCacheCheck) {\n        // Was last tile flipped\n        var wasLastTileHorizontallyFlipped = checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress - 1));\n        var isCurrentTileHorizontallyFlipped = checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress));\n        // Simply copy the last 8 pixels from memory to copy the line from the tile\n        for (var tileCacheIndex = 0; tileCacheIndex < 8; ++tileCacheIndex) {\n            // Check if we need to render backwards for flipping\n            if (wasLastTileHorizontallyFlipped !== isCurrentTileHorizontallyFlipped) {\n                tileCacheIndex = 7 - tileCacheIndex;\n            }\n            var xPos = xPixel + tileCacheIndex;\n            // First check for overflow\n            if (xPos <= 160) {\n                // Get the pixel location in memory of the tile\n                var previousXPixel = xPixel - (8 - tileCacheIndex);\n                var previousTilePixelLocation = FRAME_LOCATION + getRgbPixelStart(xPos, yPixel);\n                // Cycle through the RGB\n                // for (let tileCacheRgb = 0; tileCacheRgb < 3; ++tileCacheRgb) {\n                //  setPixelOnFrame(xPixel + tileCacheIndex, yPixel, tileCacheRgb, load<u8>(previousTilePixelLocation + tileCacheRgb));\n                // }\n                // unroll\n                setPixelOnFrame(xPos, yPixel, 0, load(previousTilePixelLocation, 0));\n                setPixelOnFrame(xPos, yPixel, 1, load(previousTilePixelLocation, 1));\n                setPixelOnFrame(xPos, yPixel, 2, load(previousTilePixelLocation, 2));\n                // Copy the priority for the pixel\n                var pixelPriority = getPriorityforPixel(previousXPixel, yPixel);\n                addPriorityforPixel(xPos, yPixel, resetBitOnByte(2, pixelPriority), checkBitOnByte(2, pixelPriority));\n                pixelsDrawn++;\n            }\n        }\n    }\n    else {\n        // Save our current tile Id, and the next x value we should check the x index\n        TileCache.tileId = tileIdFromTileMap;\n    }\n    // Calculate when we should do the tileCache calculation again\n    if (xPixel >= nextXIndexToPerformCacheCheck) {\n        nextXIndexToPerformCacheCheck = xPixel + 8;\n        var xOffsetTileWidthRemainder = i32Portable(pixelXPositionInMap & 7);\n        if (xPixel < xOffsetTileWidthRemainder) {\n            nextXIndexToPerformCacheCheck += xOffsetTileWidthRemainder;\n        }\n    }\n    TileCache.nextXIndexToPerformCacheCheck = nextXIndexToPerformCacheCheck;\n    return pixelsDrawn;\n}\n// Function to draw a line of a tile in Color\n// This is for tile rendering shortcuts\n// Inlined because closure compiler inlines\nfunction drawLineOfTileFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Get the which line of the tile we are rendering\n    var tileLineY = i32Portable(pixelYPositionInMap & 7);\n    // Now lets find our tileX start and end\n    // This is for the case where i = 0, but scroll X was 3.\n    // Or i is 157, and our camera is only 160 pixels wide\n    var tileXStart = 0;\n    if (xPixel == 0) {\n        tileXStart = pixelXPositionInMap - ((pixelXPositionInMap >> 3) << 3);\n    }\n    var tileXEnd = 7;\n    if (xPixel + 8 > 160) {\n        tileXEnd = 160 - xPixel;\n    }\n    // initialize some variables for GBC\n    var bgMapAttributes = -1;\n    var vramBankId = 0;\n    if (Cpu.GBCEnabled) {\n        // Get Our GBC properties\n        bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n        vramBankId = i32Portable(checkBitOnByte(3, bgMapAttributes));\n        if (checkBitOnByte(6, bgMapAttributes)) {\n            // We are mirroring the tile, therefore, we need to opposite byte\n            // So if our pixel was 0 our of 8, it wild become 7 :)\n            tileLineY = 7 - tileLineY;\n        }\n    }\n    // Return the number of pixels drawn\n    return drawPixelsFromLineOfTile(tileIdFromTileMap, tileDataMemoryLocation, vramBankId, tileXStart, tileXEnd, tileLineY, xPixel, yPixel, 160, FRAME_LOCATION, false, 0, bgMapAttributes, -1);\n}\n\n// Functions for rendering the sprites\n// Inlined because closure compiler inlines\nfunction renderSprites(scanlineRegister, useLargerSprites) {\n    // Need to loop through all 40 sprites to check their status\n    // Going backwards since lower sprites draw over higher ones\n    // Will fix dragon warrior 3 intro\n    for (var i = 39; i >= 0; --i) {\n        // Sprites occupy 4 bytes in the sprite attribute table\n        var spriteTableIndex = i * 4;\n        // Y positon is offset by 16, X position is offset by 8\n        var index = Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex;\n        var spriteYPosition = eightBitLoadFromGBMemory(index + 0);\n        var spriteXPosition = eightBitLoadFromGBMemory(index + 1);\n        var spriteTileId = eightBitLoadFromGBMemory(index + 2);\n        // Pan docs of sprite attirbute table\n        // Bit7   OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3)\n        //      (Used for both BG and Window. BG color 0 is always behind OBJ)\n        // Bit6   Y flip          (0=Normal, 1=Vertically mirrored)\n        // Bit5   X flip          (0=Normal, 1=Horizontally mirrored)\n        // Bit4   Palette number  **Non CGB Mode Only** (0=OBP0, 1=OBP1)\n        // Bit3   Tile VRAM-Bank  **CGB Mode Only**     (0=Bank 0, 1=Bank 1)\n        // Bit2-0 Palette number  **CGB Mode Only**     (OBP0-7)\n        // Apply sprite X and Y offset\n        // TODO: Sprites are overflowing on x if less than 8\n        spriteYPosition -= 16;\n        spriteXPosition -= 8;\n        // Find our sprite height\n        var spriteHeight = 8;\n        if (useLargerSprites) {\n            spriteHeight = 16;\n            // @binji says in 8x16 mode, even tileId always drawn first\n            // This will fix shantae sprites which always uses odd numbered indexes\n            // TODO: Do the actual Pandocs thing:\n            // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n            // So just knock off the last bit? :)\n            spriteTileId -= spriteTileId & 1;\n        }\n        // Find if our sprite is on the current scanline\n        if (scanlineRegister >= spriteYPosition && scanlineRegister < spriteYPosition + spriteHeight) {\n            // Then we need to draw the current sprite\n            // Get our sprite attributes since we know we shall be drawing the tile\n            var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n            // Check sprite Priority\n            var isSpritePriorityBehindWindowAndBackground = checkBitOnByte(7, spriteAttributes);\n            // Check if we should flip the sprite on the x or y axis\n            var flipSpriteY = checkBitOnByte(6, spriteAttributes);\n            var flipSpriteX = checkBitOnByte(5, spriteAttributes);\n            // TODO: Torch2424 continue here.\n            // Find which line on the sprite we are on\n            var currentSpriteLine = scanlineRegister - spriteYPosition;\n            // If we fliiped the Y axis on our sprite, need to read from memory backwards to acheive the same effect\n            if (flipSpriteY) {\n                currentSpriteLine = spriteHeight - currentSpriteLine;\n                // Bug fix for the flipped flies in link's awakening\n                currentSpriteLine -= 1;\n            }\n            // Each line of a tile takes two bytes of memory\n            currentSpriteLine <<= 1;\n            // Get our sprite tile address, need to also add the current sprite line to get the correct bytes\n            var spriteTileAddressStart = getTileDataAddress(Graphics.memoryLocationTileDataSelectOneStart, spriteTileId);\n            spriteTileAddressStart += currentSpriteLine;\n            var spriteTileAddress = spriteTileAddressStart;\n            // Find which VRAM Bank to load from\n            var vramBankId = (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes));\n            var spriteDataByteOneForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 0, vramBankId);\n            var spriteDataByteTwoForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 1, vramBankId);\n            // Iterate over the width of our sprite to find our individual pixels\n            for (var tilePixel = 7; tilePixel >= 0; --tilePixel) {\n                // Get our spritePixel, and check for flipping\n                var spritePixelXInTile = tilePixel;\n                if (flipSpriteX) {\n                    spritePixelXInTile -= 7;\n                    spritePixelXInTile = -spritePixelXInTile;\n                }\n                // Get the color Id of our sprite, similar to renderBackground()\n                // With the first byte, and second byte lined up method thing\n                // Yes, the second byte comes before the first, see ./background.ts\n                var spriteColorId = 0;\n                if (checkBitOnByte(spritePixelXInTile, spriteDataByteTwoForLineOfTilePixels)) {\n                    // Byte one represents the second bit in our color id, so bit shift\n                    spriteColorId = (spriteColorId + 1) << 1;\n                }\n                if (checkBitOnByte(spritePixelXInTile, spriteDataByteOneForLineOfTilePixels)) {\n                    spriteColorId += 1;\n                }\n                // ColorId zero (last two bits of pallette) are transparent\n                // http://gbdev.gg8.se/wiki/articles/Video_Display\n                if (spriteColorId !== 0) {\n                    // Find our actual X pixel location on the gameboy \"camera\" view\n                    // This cannot be less than zero, i32 will overflow\n                    var spriteXPixelLocationInCameraView = spriteXPosition + (7 - tilePixel);\n                    if (spriteXPixelLocationInCameraView >= 0 && spriteXPixelLocationInCameraView <= 160) {\n                        // There are two cases where wouldnt draw the pixel on top of the Bg/window\n                        // 1. if isSpritePriorityBehindWindowAndBackground, sprite can only draw over color 0\n                        // 2. if bit 2 of our priority is set, then BG-to-OAM Priority from pandoc\n                        //  is active, meaning BG tile will have priority above all OBJs\n                        //  (regardless of the priority bits in OAM memory)\n                        // But if GBC and Bit 0 of LCDC is set, we always draw the object\n                        var shouldShowFromLcdcPriority = Cpu.GBCEnabled && !Lcd.bgDisplayEnabled; // LCDC Priority\n                        var shouldHideFromOamPriority = false;\n                        var shouldHideFromBgPriority = false;\n                        if (!shouldShowFromLcdcPriority) {\n                            // Now that we have our coordinates, check for sprite priority\n                            // Lets get the priority byte we put in memory\n                            var bgPriorityByte = getPriorityforPixel(spriteXPixelLocationInCameraView, scanlineRegister);\n                            var bgColorFromPriorityByte = bgPriorityByte & 0x03;\n                            // Doing an else if, since either will automatically stop drawing the pixel\n                            if (isSpritePriorityBehindWindowAndBackground && bgColorFromPriorityByte > 0) {\n                                // OAM Priority\n                                shouldHideFromOamPriority = true;\n                            }\n                            else if (Cpu.GBCEnabled && checkBitOnByte(2, bgPriorityByte) && bgColorFromPriorityByte > 0) {\n                                // Bg priority\n                                shouldHideFromBgPriority = true;\n                            }\n                        }\n                        if (shouldShowFromLcdcPriority || (!shouldHideFromOamPriority && !shouldHideFromBgPriority)) {\n                            if (!Cpu.GBCEnabled) {\n                                // Get our monochrome color RGB from the current sprite pallete\n                                // Get our sprite pallete\n                                var spritePaletteLocation = Graphics.memoryLocationSpritePaletteOne;\n                                if (checkBitOnByte(4, spriteAttributes)) {\n                                    spritePaletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                                }\n                                var hexColor = getColorizedGbHexColorFromPalette(spriteColorId, spritePaletteLocation);\n                                // Finally set the pixel!\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, getRedFromHexColor(hexColor));\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, getGreenFromHexColor(hexColor));\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, getBlueFromHexColor(hexColor));\n                            }\n                            else {\n                                // Get our RGB Color\n                                // Finally lets add some, C O L O R\n                                // Want the botom 3 bits\n                                var bgPalette = spriteAttributes & 0x07;\n                                // Call the helper function to grab the correct color from the palette\n                                var rgbColorPalette = getRgbColorFromPalette(bgPalette, spriteColorId, true);\n                                // Split off into red green and blue\n                                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                                var blue = getColorComponentFromRgb(2, rgbColorPalette);\n                                // Finally Place our colors on the things\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, red);\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, green);\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, blue);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main Class and funcitons for rendering the gameboy display\nvar Graphics = /** @class */ (function () {\n    function Graphics() {\n    }\n    // Number of cycles to run in each batch process\n    // This number should be in sync so that graphics doesn't run too many cyles at once\n    // and does not exceed the minimum number of cyles for either scanlines, or\n    // How often we change the frame, or a channel's update process\n    Graphics.batchProcessCycles = function () {\n        return Graphics.MAX_CYCLES_PER_SCANLINE();\n    };\n    // TCAGBD says 456 per scanline, but 153 only a handful\n    Graphics.MAX_CYCLES_PER_SCANLINE = function () {\n        if (Graphics.scanlineRegister === 153) {\n            return 4 << Cpu.GBCDoubleSpeed;\n        }\n        else {\n            return 456 << Cpu.GBCDoubleSpeed;\n        }\n    };\n    Graphics.MIN_CYCLES_SPRITES_LCD_MODE = function () {\n        // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n        return 376 << Cpu.GBCDoubleSpeed;\n    };\n    Graphics.MIN_CYCLES_TRANSFER_DATA_LCD_MODE = function () {\n        // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n        return 249 << Cpu.GBCDoubleSpeed;\n    };\n    // Function to save the state of the class\n    Graphics.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot), Graphics.scanlineCycleCounter);\n        store(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot), Lcd.currentLcdMode);\n        eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, Graphics.scanlineRegister);\n    };\n    // Function to load the save state from memory\n    Graphics.loadState = function () {\n        Graphics.scanlineCycleCounter = load(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot));\n        Lcd.currentLcdMode = load(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot));\n        Graphics.scanlineRegister = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n        Lcd.updateLcdControl(eightBitLoadFromGBMemory(Lcd.memoryLocationLcdControl));\n    };\n    // Current cycles\n    // This will be used for batch processing\n    Graphics.currentCycles = 0;\n    // Count the number of cycles to keep synced with cpu cycles\n    // Found GBC cycles by finding clock speed from Gb Cycles\n    // See TCAGBD For cycles\n    Graphics.scanlineCycleCounter = 0x00;\n    // LCD\n    // scanlineRegister also known as LY\n    // See: http://bgb.bircd.org/pandocs.txt , and search \" LY \"\n    Graphics.memoryLocationScanlineRegister = 0xff44;\n    Graphics.scanlineRegister = 0;\n    Graphics.memoryLocationDmaTransfer = 0xff46;\n    // Scroll and Window\n    Graphics.memoryLocationScrollX = 0xff43;\n    Graphics.scrollX = 0;\n    Graphics.memoryLocationScrollY = 0xff42;\n    Graphics.scrollY = 0;\n    Graphics.memoryLocationWindowX = 0xff4b;\n    Graphics.windowX = 0;\n    Graphics.memoryLocationWindowY = 0xff4a;\n    Graphics.windowY = 0;\n    // Tile Maps And Data\n    Graphics.memoryLocationTileMapSelectZeroStart = 0x9800;\n    Graphics.memoryLocationTileMapSelectOneStart = 0x9c00;\n    Graphics.memoryLocationTileDataSelectZeroStart = 0x8800;\n    Graphics.memoryLocationTileDataSelectOneStart = 0x8000;\n    // Sprites\n    Graphics.memoryLocationSpriteAttributesTable = 0xfe00;\n    // Palettes\n    Graphics.memoryLocationBackgroundPalette = 0xff47;\n    Graphics.memoryLocationSpritePaletteOne = 0xff48;\n    Graphics.memoryLocationSpritePaletteTwo = 0xff49;\n    // Screen data needs to be stored in wasm memory\n    // Save States\n    Graphics.saveStateSlot = 1;\n    return Graphics;\n}());\n// Batch Process Graphics\n// http://gameboy.mongenel.com/dmg/asmmemmap.html and http://gbdev.gg8.se/wiki/articles/Video_Display\n// Function to batch process our graphics after we skipped so many cycles\n// This is not currently checked in memory read/write\nfunction batchProcessGraphics() {\n    var batchProcessCycles = Graphics.batchProcessCycles();\n    while (Graphics.currentCycles >= batchProcessCycles) {\n        updateGraphics(batchProcessCycles);\n        Graphics.currentCycles -= batchProcessCycles;\n    }\n}\n// Inlined because closure compiler inlines\nfunction initializeGraphics() {\n    // Reset Stateful Variables\n    Graphics.currentCycles = 0;\n    Graphics.scanlineCycleCounter = 0x00;\n    Graphics.scanlineRegister = 0;\n    Graphics.scrollX = 0;\n    Graphics.scrollY = 0;\n    Graphics.windowX = 0;\n    Graphics.windowY = 0;\n    Graphics.scanlineRegister = 0x90;\n    if (Cpu.GBCEnabled) {\n        // Bgb says LY is 90 on boot\n        eightBitStoreIntoGBMemory(0xff40, 0x91);\n        eightBitStoreIntoGBMemory(0xff41, 0x81);\n        // 0xFF42 -> 0xFF43 = 0x00\n        eightBitStoreIntoGBMemory(0xff44, 0x90);\n        // 0xFF45 -> 0xFF46 = 0x00\n        eightBitStoreIntoGBMemory(0xff47, 0xfc);\n        // 0xFF48 -> 0xFF4B = 0x00\n    }\n    else {\n        eightBitStoreIntoGBMemory(0xff40, 0x91);\n        eightBitStoreIntoGBMemory(0xff41, 0x85);\n        // 0xFF42 -> 0xFF45 = 0x00\n        eightBitStoreIntoGBMemory(0xff46, 0xff);\n        eightBitStoreIntoGBMemory(0xff47, 0xfc);\n        eightBitStoreIntoGBMemory(0xff48, 0xff);\n        eightBitStoreIntoGBMemory(0xff49, 0xff);\n        // 0xFF4A -> 0xFF4B = 0x00\n    }\n    // GBC VRAM Banks\n    eightBitStoreIntoGBMemory(0xff4f, 0x00);\n    eightBitStoreIntoGBMemory(0xff70, 0x01);\n    initializeColors();\n}\nfunction updateGraphics(numberOfCycles) {\n    if (Lcd.enabled) {\n        Graphics.scanlineCycleCounter += numberOfCycles;\n        var graphicsDisableScanlineRendering = Config.graphicsDisableScanlineRendering;\n        while (Graphics.scanlineCycleCounter >= Graphics.MAX_CYCLES_PER_SCANLINE()) {\n            // Reset the scanlineCycleCounter\n            // Don't set to zero to catch extra cycles\n            Graphics.scanlineCycleCounter -= Graphics.MAX_CYCLES_PER_SCANLINE();\n            // Move to next scanline\n            // let scanlineRegister: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n            var scanlineRegister = Graphics.scanlineRegister;\n            // Check if we've reached the last scanline\n            if (scanlineRegister === 144) {\n                // Draw the scanline\n                if (!graphicsDisableScanlineRendering) {\n                    _drawScanline(scanlineRegister);\n                }\n                else {\n                    _renderEntireFrame();\n                }\n                // Clear the priority map\n                clearPriorityMap();\n                // Reset the tile cache\n                resetTileCache();\n            }\n            else if (scanlineRegister < 144) {\n                // Draw the scanline\n                if (!graphicsDisableScanlineRendering) {\n                    _drawScanline(scanlineRegister);\n                }\n            }\n            // Post increment the scanline register after drawing\n            // TODO: Need to fix graphics timing\n            if (scanlineRegister > 153) {\n                // Check if we overflowed scanlines\n                // if so, reset our scanline number\n                scanlineRegister = 0;\n            }\n            else {\n                scanlineRegister += 1;\n            }\n            // Store our new scanline value\n            Graphics.scanlineRegister = scanlineRegister;\n            // eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, scanlineRegister);\n        }\n    }\n    // Games like Pokemon crystal want the vblank right as it turns to the value, and not have it increment after\n    // It will break and lead to an infinite loop in crystal\n    // Therefore, we want to be checking/Setting our LCD status after the scanline updates\n    setLcdStatus();\n}\n// TODO: Make this a _drawPixelOnScanline, as values can be updated while drawing a scanline\nfunction _drawScanline(scanlineRegister) {\n    // Get our seleted tile data memory location\n    var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n    if (Lcd.bgWindowTileDataSelect) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n    }\n    // Check if the background is enabled\n    // NOTE: On Gameboy color, Pandocs says this does something completely different\n    // LCDC.0 - 2) CGB in CGB Mode: BG and Window Master Priority\n    // When Bit 0 is cleared, the background and window lose their priority -\n    // the sprites will be always displayed on top of background and window,\n    // independently of the priority flags in OAM and BG Map attributes.\n    // TODO: Enable this different feature for GBC\n    if (Cpu.GBCEnabled || Lcd.bgDisplayEnabled) {\n        // Get our map memory location\n        var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n        if (Lcd.bgTileMapDisplaySelect) {\n            tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n        }\n        // Finally, pass everything to draw the background\n        renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n    }\n    // Check if the window is enabled, and we are currently\n    // Drawing lines on the window\n    if (Lcd.windowDisplayEnabled) {\n        // Get our map memory location\n        var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n        if (Lcd.windowTileMapDisplaySelect) {\n            tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n        }\n        // Finally, pass everything to draw the background\n        renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n    }\n    if (Lcd.spriteDisplayEnable) {\n        // Sprites are enabled, render them!\n        renderSprites(scanlineRegister, Lcd.tallSpriteSize);\n    }\n}\n// Function to render everything for a frame at once\n// This is to improve performance\n// See above for comments on how things are donw\nfunction _renderEntireFrame() {\n    // Scanline needs to be in sync while we draw, thus, we can't shortcut anymore than here\n    for (var i = 0; i <= 144; ++i) {\n        _drawScanline(i);\n    }\n}\n// Function to get the start of a RGB pixel (R, G, B)\n// Inlined because closure compiler inlines\nfunction getRgbPixelStart(x, y) {\n    // Get the pixel number\n    // let pixelNumber: i32 = (y * 160) + x;\n    // Each pixel takes 3 slots, therefore, multiply by 3!\n    return (y * 160 + x) * 3;\n}\n// Also need to store current frame in memory to be read by JS\nfunction setPixelOnFrame(x, y, colorId, color) {\n    // Currently only supports 160x144\n    // Storing in X, then y\n    // So need an offset\n    store(FRAME_LOCATION + getRgbPixelStart(x, y) + colorId, color);\n}\n// Function to shortcut the memory map, and load directly from the VRAM Bank\nfunction loadFromVramBank(gameboyOffset, vramBankId) {\n    var wasmBoyAddress = gameboyOffset - Memory.videoRamLocation + GAMEBOY_INTERNAL_MEMORY_LOCATION + 0x2000 * (vramBankId & 0x01);\n    return load(wasmBoyAddress);\n}\n\n// Returns -1 if no trap found, otherwise returns a value that should be fed for the address\nfunction checkReadTraps(offset) {\n    // Cache globals used multiple times for performance\n    var videoRamLocation = Memory.videoRamLocation;\n    // Try to break early for most common scenario\n    if (offset < videoRamLocation) {\n        return -1;\n    }\n    // Check the graphics mode to see if we can read VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n    if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n        // Can only read/write from VRAM During Modes 0 - 2\n        // See graphics/lcd.ts\n        // TODO: This can do more harm than good in a beta emulator,\n        // requres precise timing, disabling for now\n        // if (Graphics.currentLcdMode > 2) {\n        //   return 0xFF;\n        // }\n        return -1;\n    }\n    // ECHO Ram, E000\tFDFF\tMirror of C000~DDFF (ECHO RAM)\n    // http://gbdev.gg8.se/wiki/articles/Memory_Map\n    if (offset >= Memory.echoRamLocation && offset < Memory.spriteInformationTableLocation) {\n        // Simply return the mirror'd value\n        return eightBitLoadFromGBMemory(offset - 0x2000);\n    }\n    // Check for individal writes\n    // Can only read/write from OAM During Modes 0 - 1\n    // See graphics/lcd.ts\n    if (offset >= Memory.spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n        // Can only read/write from OAM During Mode 2\n        // See graphics/lcd.ts\n        // if (Lcd.currentLcdMode < 2) {\n        // return 0xff;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // return -1;\n        return Lcd.currentLcdMode < 2 ? 0xff : -1;\n    }\n    // CPU\n    if (offset === Cpu.memoryLocationSpeedSwitch) {\n        // TCAGBD, only Bit 7 and 0 are readable, all others are 1\n        var response = 0xff;\n        var currentSpeedSwitchRegister = eightBitLoadFromGBMemory(Cpu.memoryLocationSpeedSwitch);\n        if (!checkBitOnByte(0, currentSpeedSwitchRegister)) {\n            response = resetBitOnByte(0, response);\n        }\n        if (!Cpu.GBCDoubleSpeed) {\n            response = resetBitOnByte(7, response);\n        }\n        return response;\n    }\n    // Graphics\n    // Not batch processing here for performance\n    // batchProcessGraphics();\n    if (offset === Graphics.memoryLocationScanlineRegister) {\n        eightBitStoreIntoGBMemory(offset, Graphics.scanlineRegister);\n        return Graphics.scanlineRegister;\n    }\n    // Sound\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    // TODO: Put these bounds on the Sound Class\n    if (offset >= 0xff10 && offset <= 0xff26) {\n        batchProcessAudio();\n        return SoundRegisterReadTraps(offset);\n    }\n    // FF27 - FF2F not used\n    // Final Wave Table for Channel 3\n    if (offset >= 0xff30 && offset <= 0xff3f) {\n        batchProcessAudio();\n        return -1;\n    }\n    // Timers\n    if (offset === Timers.memoryLocationDividerRegister) {\n        // Divider register in memory is just the upper 8 bits\n        // http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n        var upperDividerRegisterBits = splitHighByte(Timers.dividerRegister);\n        eightBitStoreIntoGBMemory(offset, upperDividerRegisterBits);\n        return upperDividerRegisterBits;\n    }\n    if (offset === Timers.memoryLocationTimerCounter) {\n        eightBitStoreIntoGBMemory(offset, Timers.timerCounter);\n        return Timers.timerCounter;\n    }\n    // Interrupts\n    if (offset === Interrupts.memoryLocationInterruptRequest) {\n        // TCAGB and BGB say the top 5 bits are always 1.\n        return 0xe0 | Interrupts.interruptsRequestedValue;\n    }\n    // Joypad\n    if (offset === Joypad.memoryLocationJoypadRegister) {\n        return getJoypadState();\n    }\n    return -1;\n}\n\n// Load/Read functionality for memory\nfunction eightBitLoadFromGBMemory(gameboyOffset) {\n    return load(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset));\n}\nfunction eightBitLoadFromGBMemoryWithTraps(offset) {\n    if (offset === Breakpoints.readGbMemory) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    var readTrapResult = checkReadTraps(offset);\n    return readTrapResult === -1 ? eightBitLoadFromGBMemory(offset) : readTrapResult;\n}\n// TODO: Rename this to sixteenBitLoadFromGBMemoryWithTraps\n// Inlined because closure compiler inlines\nfunction sixteenBitLoadFromGBMemory(offset) {\n    // Get our low byte\n    var lowByteReadTrapResult = checkReadTraps(offset);\n    var lowByte = lowByteReadTrapResult === -1 ? eightBitLoadFromGBMemory(offset) : lowByteReadTrapResult;\n    // Get the next offset for the second byte\n    var nextOffset = offset + 1;\n    // Get our high byte\n    var highByteReadTrapResult = checkReadTraps(nextOffset);\n    var highByte = highByteReadTrapResult === -1 ? eightBitLoadFromGBMemory(nextOffset) : highByteReadTrapResult;\n    // Concatenate the bytes and return\n    return concatenateBytes(highByte, lowByte);\n}\nfunction loadBooleanDirectlyFromWasmMemory(offset) {\n    return load(offset) > 0;\n}\n\n// WasmBoy memory map:\nvar Memory = /** @class */ (function () {\n    function Memory() {\n    }\n    // Function to save the state of the class\n    Memory.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot), Memory.currentRomBank);\n        store(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot), Memory.currentRamBank);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot), Memory.isRamBankingEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot), Memory.isMBC1RomModeEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot), Memory.isRomOnly);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot), Memory.isMBC1);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot), Memory.isMBC2);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot), Memory.isMBC3);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot), Memory.isMBC5);\n    };\n    // Function to load the save state from memory\n    Memory.loadState = function () {\n        Memory.currentRomBank = load(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot));\n        Memory.currentRamBank = load(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot));\n        Memory.isRamBankingEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot));\n        Memory.isMBC1RomModeEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot));\n        Memory.isRomOnly = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot));\n        Memory.isMBC1 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot));\n        Memory.isMBC2 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot));\n        Memory.isMBC3 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot));\n        Memory.isMBC5 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot));\n    };\n    // ----------------------------------\n    // Gameboy Memory Map\n    // ----------------------------------\n    // https://github.com/AntonioND/giibiiadvance/blob/master/docs/TCAGBD.pdf\n    // http://gameboy.mongenel.com/dmg/asmmemmap.html\n    // using Arrays, first index is start, second is end\n    Memory.cartridgeRomLocation = 0x0000;\n    Memory.switchableCartridgeRomLocation = 0x4000;\n    Memory.videoRamLocation = 0x8000;\n    Memory.cartridgeRamLocation = 0xa000;\n    Memory.internalRamBankZeroLocation = 0xc000;\n    // This ram bank is switchable\n    Memory.internalRamBankOneLocation = 0xd000;\n    Memory.echoRamLocation = 0xe000;\n    Memory.spriteInformationTableLocation = 0xfe00;\n    Memory.spriteInformationTableLocationEnd = 0xfe9f;\n    Memory.unusableMemoryLocation = 0xfea0;\n    Memory.unusableMemoryEndLocation = 0xfeff;\n    // Hardware I/O, 0xFF00 -> 0xFF7F\n    // Zero Page, 0xFF80 -> 0xFFFE\n    // Intterupt Enable Flag, 0xFFFF\n    // ----------------------------------\n    // Rom/Ram Banking\n    // ----------------------------------\n    // http://gbdev.gg8.se/wiki/articles/Memory_Bank_Controllers#MBC3_.28max_2MByte_ROM_and.2For_32KByte_RAM_and_Timer.29\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/banking.html\n    Memory.currentRomBank = 0x00;\n    Memory.currentRamBank = 0x00;\n    Memory.isRamBankingEnabled = false;\n    Memory.isMBC1RomModeEnabled = true;\n    // Cartridge Types\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    Memory.isRomOnly = true;\n    Memory.isMBC1 = false;\n    Memory.isMBC2 = false;\n    Memory.isMBC3 = false;\n    Memory.isMBC5 = false;\n    // DMA\n    Memory.memoryLocationHdmaSourceHigh = 0xff51;\n    Memory.memoryLocationHdmaSourceLow = 0xff52;\n    Memory.memoryLocationHdmaDestinationHigh = 0xff53;\n    Memory.memoryLocationHdmaDestinationLow = 0xff54;\n    Memory.memoryLocationHdmaTrigger = 0xff55;\n    // Cycles accumulated for DMA\n    Memory.DMACycles = 0;\n    // Boolean we will mirror to indicate if Hdma is active\n    Memory.isHblankHdmaActive = false;\n    Memory.hblankHdmaTransferLengthRemaining = 0x00;\n    // Store the source and destination for performance, and update as needed\n    Memory.hblankHdmaSource = 0x00;\n    Memory.hblankHdmaDestination = 0x00;\n    // GBC Registers\n    Memory.memoryLocationGBCVRAMBank = 0xff4f;\n    Memory.memoryLocationGBCWRAMBank = 0xff70;\n    // Save States\n    Memory.saveStateSlot = 4;\n    return Memory;\n}());\n// Inlined because closure compiler inlines\nfunction initializeCartridge() {\n    // Reset stateful variables\n    Memory.isRamBankingEnabled = false;\n    Memory.isMBC1RomModeEnabled = true;\n    // Get our game MBC type from the cartridge header\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    var cartridgeType = eightBitLoadFromGBMemory(0x0147);\n    // Reset our Cartridge types\n    Memory.isRomOnly = cartridgeType === 0x00;\n    Memory.isMBC1 = cartridgeType >= 0x01 && cartridgeType <= 0x03;\n    Memory.isMBC2 = cartridgeType >= 0x05 && cartridgeType <= 0x06;\n    Memory.isMBC3 = cartridgeType >= 0x0f && cartridgeType <= 0x13;\n    Memory.isMBC5 = cartridgeType >= 0x19 && cartridgeType <= 0x1e;\n    Memory.currentRomBank = 0x01;\n    Memory.currentRamBank = 0x00;\n}\n\n// WasmBoy memory map:\n\n// Everything Static as class instances just aren't quite there yet\n// https://github.com/AssemblyScript/assemblyscript/blob/master/tests/compiler/showcase.ts\nvar Cpu = /** @class */ (function () {\n    function Cpu() {\n    }\n    Cpu.CLOCK_SPEED = function () {\n        // 2^23, thanks binji!\n        // return Cpu.GBCDoubleSpeed ? 8388608 : 4194304;\n        return 4194304 << Cpu.GBCDoubleSpeed;\n    };\n    // Cycles Per Frame = Clock Speed / fps\n    // So: 4194304 / 59.73\n    Cpu.MAX_CYCLES_PER_FRAME = function () {\n        // return Cpu.GBCDoubleSpeed ? 140448 : 70224;\n        return 70224 << Cpu.GBCDoubleSpeed;\n    };\n    // See section 4.10 of TCAGBD\n    // Cpu Halting explained: https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/db7xnbe/\n    Cpu.enableHalt = function () {\n        if (Interrupts.masterInterruptSwitch) {\n            Cpu.isHaltNormal = true;\n            return;\n        }\n        var haltTypeValue = Interrupts.interruptsEnabledValue & Interrupts.interruptsRequestedValue & 0x1f;\n        if (haltTypeValue === 0) {\n            Cpu.isHaltNoJump = true;\n            return;\n        }\n        Cpu.isHaltBug = true;\n    };\n    Cpu.exitHaltAndStop = function () {\n        Cpu.isHaltNoJump = false;\n        Cpu.isHaltNormal = false;\n        Cpu.isHaltBug = false;\n        Cpu.isStopped = false;\n    };\n    Cpu.isHalted = function () {\n        return Cpu.isHaltNormal || Cpu.isHaltNoJump;\n    };\n    // Function to save the state of the class\n    Cpu.saveState = function () {\n        // Registers\n        store(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot), Cpu.registerA);\n        store(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot), Cpu.registerB);\n        store(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot), Cpu.registerC);\n        store(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot), Cpu.registerD);\n        store(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot), Cpu.registerE);\n        store(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot), Cpu.registerH);\n        store(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot), Cpu.registerL);\n        store(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot), Cpu.registerF);\n        store(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot), Cpu.stackPointer);\n        store(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot), Cpu.programCounter);\n        store(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot), Cpu.currentCycles);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot), Cpu.isHaltNormal);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot), Cpu.isHaltNoJump);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x13, Cpu.saveStateSlot), Cpu.isHaltBug);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x14, Cpu.saveStateSlot), Cpu.isStopped);\n    };\n    // Function to load the save state from memory\n    Cpu.loadState = function () {\n        // Registers\n        Cpu.registerA = load(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot));\n        Cpu.registerB = load(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot));\n        Cpu.registerC = load(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot));\n        Cpu.registerD = load(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot));\n        Cpu.registerE = load(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot));\n        Cpu.registerH = load(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot));\n        Cpu.registerL = load(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot));\n        Cpu.registerF = load(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot));\n        Cpu.stackPointer = load(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot));\n        Cpu.programCounter = load(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot));\n        Cpu.currentCycles = load(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot));\n        Cpu.isHaltNormal = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot));\n        Cpu.isHaltNoJump = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot));\n        Cpu.isHaltBug = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x13, Cpu.saveStateSlot));\n        Cpu.isStopped = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x14, Cpu.saveStateSlot));\n    };\n    // Status to track if we are in Gameboy Color Mode, and GBC State\n    Cpu.GBCEnabled = false;\n    // Memory Location for the GBC Speed switch\n    // And the current status\n    Cpu.memoryLocationSpeedSwitch = 0xff4d;\n    Cpu.GBCDoubleSpeed = false;\n    // 8-bit Cpu.registers\n    Cpu.registerA = 0;\n    Cpu.registerB = 0;\n    Cpu.registerC = 0;\n    Cpu.registerD = 0;\n    Cpu.registerE = 0;\n    Cpu.registerH = 0;\n    Cpu.registerL = 0;\n    Cpu.registerF = 0;\n    // 16-bit Cpu.registers\n    Cpu.stackPointer = 0;\n    // Boot rom from 0x00 to 0x99, all games start at 0x100\n    Cpu.programCounter = 0x00;\n    // Current number of cycles, shouldn't execeed max number of cycles\n    Cpu.currentCycles = 0;\n    // HALT and STOP instructions need to stop running opcodes, but simply check timers\n    // https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Matt said is should work to, so it must work!\n    // TCAGBD shows three different HALT states. Therefore, we need to handle each\n    Cpu.isHaltNormal = false;\n    Cpu.isHaltNoJump = false;\n    Cpu.isHaltBug = false;\n    Cpu.isStopped = false;\n    // Save States\n    Cpu.saveStateSlot = 0;\n    return Cpu;\n}());\n// Inlined because closure compiler does so\nfunction initializeCpu() {\n    // Reset all stateful Cpu variables\n    // Cpu.GBCEnabled is done by core/initialize\n    Cpu.GBCDoubleSpeed = false;\n    Cpu.registerA = 0;\n    Cpu.registerB = 0;\n    Cpu.registerC = 0;\n    Cpu.registerD = 0;\n    Cpu.registerE = 0;\n    Cpu.registerH = 0;\n    Cpu.registerL = 0;\n    Cpu.registerF = 0;\n    Cpu.stackPointer = 0;\n    Cpu.programCounter = 0x00;\n    Cpu.currentCycles = 0;\n    Cpu.isHaltNormal = false;\n    Cpu.isHaltNoJump = false;\n    Cpu.isHaltBug = false;\n    Cpu.isStopped = false;\n    if (Cpu.GBCEnabled) {\n        // CPU Registers\n        Cpu.registerA = 0x11;\n        Cpu.registerF = 0x80;\n        Cpu.registerB = 0x00;\n        Cpu.registerC = 0x00;\n        Cpu.registerD = 0xff;\n        Cpu.registerE = 0x56;\n        Cpu.registerH = 0x00;\n        Cpu.registerL = 0x0d;\n    }\n    else {\n        // Cpu Registers\n        Cpu.registerA = 0x01;\n        Cpu.registerF = 0xb0;\n        Cpu.registerB = 0x00;\n        Cpu.registerC = 0x13;\n        Cpu.registerD = 0x00;\n        Cpu.registerE = 0xd8;\n        Cpu.registerH = 0x01;\n        Cpu.registerL = 0x4d;\n    }\n    // Cpu Control Flow\n    Cpu.programCounter = 0x100;\n    Cpu.stackPointer = 0xfffe;\n}\n\n// Imports\n// General Logic Instructions\n// Such as the ones found on the CB table and 0x40 - 0xBF\n// NOTE: Only CB table uses these for now, was mostly me realizing that I messed up, trying to be all cute and verbose :p\n// NOTE: TODO: Refactor honestly shouldn't take that long, and may happen once assembly script is improved\nfunction addARegister(register) {\n    var registerA = Cpu.registerA;\n    checkAndSetEightBitHalfCarryFlag(registerA, register);\n    checkAndSetEightBitCarryFlag(registerA, register);\n    registerA = u8Portable(registerA + register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n}\nfunction addAThroughCarryRegister(register) {\n    // Handling flags manually as they require some special overflow\n    // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F adc\n    var registerA = Cpu.registerA;\n    var result = u8Portable(registerA + register + getCarryFlag$$1());\n    setHalfCarryFlag(((u8Portable(registerA ^ register ^ result) & 0x10) != 0));\n    var overflowedResult = u16Portable(registerA + register + getCarryFlag$$1());\n    setCarryFlag(((overflowedResult & 0x100) > 0));\n    Cpu.registerA = result;\n    setZeroFlag$$1((result === 0));\n    setSubtractFlag(0);\n}\nfunction subARegister(register) {\n    // Need to convert the register on one line, and flip the sign on another\n    var negativeRegister = register;\n    negativeRegister = negativeRegister * -1;\n    var registerA = Cpu.registerA;\n    checkAndSetEightBitHalfCarryFlag(registerA, negativeRegister);\n    checkAndSetEightBitCarryFlag(registerA, negativeRegister);\n    registerA = u8Portable(registerA - register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(1);\n}\nfunction subAThroughCarryRegister(register) {\n    // Handling flags manually as they require some special overflow\n    // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F adc\n    var registerA = Cpu.registerA;\n    var result = u8Portable(registerA - register - getCarryFlag$$1());\n    var carryRegisterCheck = u8Portable((registerA ^ register ^ result) & 0x10);\n    setHalfCarryFlag((carryRegisterCheck != 0));\n    var overflowedResult = u16Portable(registerA - register - getCarryFlag$$1());\n    setCarryFlag(((overflowedResult & 0x100) > 0));\n    Cpu.registerA = result;\n    setZeroFlag$$1((result === 0));\n    setSubtractFlag(1);\n}\nfunction andARegister(register) {\n    var registerA = Cpu.registerA & register;\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(1);\n    setCarryFlag(0);\n}\nfunction xorARegister(register) {\n    var registerA = u8Portable(Cpu.registerA ^ register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n}\nfunction orARegister(register) {\n    var registerA = Cpu.registerA | register;\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n}\nfunction cpARegister(register) {\n    // 0xB8 - 0xBF\n    // CP B\n    // 1  4\n    // Z 1 H C\n    var registerA = Cpu.registerA;\n    var negativeRegister = register;\n    negativeRegister = negativeRegister * -1;\n    checkAndSetEightBitHalfCarryFlag(registerA, negativeRegister);\n    checkAndSetEightBitCarryFlag(registerA, negativeRegister);\n    var tempResult = registerA + negativeRegister;\n    setZeroFlag$$1((tempResult === 0));\n    setSubtractFlag(1);\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterLeft(register) {\n    // RLC register 8-bit\n    // Z 0 0 C\n    setCarryFlag(((register & 0x80) === 0x80));\n    register = rotateByteLeft(register);\n    setZeroFlag$$1((register === 0));\n    // Set all other flags to zero\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    // Return the register\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterRight(register) {\n    // RLC register 8-bit\n    // Z 0 0 C\n    // Check for the last bit, to see if it will be carried\n    setCarryFlag(((register & 0x01) > 0));\n    register = rotateByteRight(register);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    // Return the register\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterLeftThroughCarry(register) {\n    // RL register 8-bit\n    // Z 0 0 C\n    // setting has first bit since we need to use carry\n    var hasHighbit = (register & 0x80) === 0x80;\n    register = rotateByteLeftThroughCarry(register);\n    setCarryFlag(hasHighbit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterRightThroughCarry(register) {\n    // RR register 8-bit\n    // Z 0 0 C\n    var hasLowBit = (register & 0x01) === 0x01;\n    register = rotateByteRightThroughCarry(register);\n    setCarryFlag(hasLowBit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftLeftRegister(register) {\n    // SLA register 8-bit\n    // Z 0 0 C\n    var hasHighbit = (register & 0x80) === 0x80;\n    register = u8Portable(register << 1);\n    setCarryFlag(hasHighbit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftRightArithmeticRegister(register) {\n    // SRA register 8-bit\n    // Z 0 0 C\n    // NOTE: This C flag may need to be set to 0;\n    // This preserves the MSB (Most significant bit)\n    var hasHighbit = (register & 0x80) === 0x80;\n    var hasLowbit = (register & 0x01) === 0x01;\n    register = u8Portable(register >> 1);\n    if (hasHighbit) {\n        register = register | 0x80;\n    }\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(hasLowbit);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction swapNibblesOnRegister(register) {\n    // SWAP register 8-bit\n    // Z 0 0 0\n    var highNibble = register & 0xf0;\n    var lowNibble = register & 0x0f;\n    register = u8Portable((lowNibble << 4) | (highNibble >> 4));\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftRightLogicalRegister(register) {\n    // SRA register 8-bit\n    // Z 0 0 C\n    // NOTE: This C flag may need to be set to 0;\n    // This does NOT preserve MSB (most significant bit)\n    var hasLowbit = (register & 0x01) === 0x01;\n    register = u8Portable(register >> 1);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(hasLowbit);\n    return register;\n}\nfunction testBitOnRegister(bitPosition, register) {\n    // BIT bitPosition ,register 8-bit\n    // Z 0 1 -\n    var testByte = 0x01 << bitPosition;\n    var result = register & testByte;\n    setZeroFlag$$1((result === 0x00));\n    setSubtractFlag(0);\n    setHalfCarryFlag(1);\n    return register;\n}\nfunction setBitOnRegister(bitPosition, bitValue, register) {\n    // RES 0,B or SET 0,B depending on bit value\n    if (bitValue > 0) {\n        var setByte = 0x01 << bitPosition;\n        register = register | setByte;\n    }\n    else {\n        // NOT (byte we want)\n        // 0000 0100 becomes 1111 1011\n        var setByte = ~(0x01 << bitPosition);\n        register = register & setByte;\n    }\n    return register;\n}\n// Private function for our relative jumps\nfunction relativeJump(value) {\n    // Need to convert the value to i8, since in this case, u8 can be negative\n    var relativeJumpOffset = i8Portable(value);\n    var programCounter = Cpu.programCounter;\n    programCounter = u16Portable(programCounter + relativeJumpOffset);\n    // Realtive jump, using bgb debugger\n    // and my debugger shows,\n    // on JR you need to jump to the relative jump offset,\n    // However, if the jump fails (such as conditional), only jump +2 in total\n    programCounter = u16Portable(programCounter + 1);\n    Cpu.programCounter = programCounter;\n}\n\n// Imports\n// Handle CB Opcodes\n// NOTE: Program stpes and cycles are standardized depending on the register type\n// NOTE: Doing some funny stuff to get around not having arrays or objects\n// Inlined because closure compiler inlines.\nfunction handleCbOpcode(cbOpcode) {\n    var numberOfCycles = -1;\n    var handledOpcode = false;\n    // The result of our cb logic instruction\n    var instructionRegisterValue = 0;\n    var instructionRegisterResult = 0;\n    // Get our register number by modulo 0x08 (number of registers)\n    // cbOpcode % 0x08\n    var registerNumber = cbOpcode & 0x07;\n    // NOTE: registerNumber = register on CB table. Cpu.registerB = 0, Cpu.registerC = 1....Cpu.registerA = 7\n    switch (registerNumber) {\n        case 0:\n            instructionRegisterValue = Cpu.registerB;\n            break;\n        case 1:\n            instructionRegisterValue = Cpu.registerC;\n            break;\n        case 2:\n            instructionRegisterValue = Cpu.registerD;\n            break;\n        case 3:\n            instructionRegisterValue = Cpu.registerE;\n            break;\n        case 4:\n            instructionRegisterValue = Cpu.registerH;\n            break;\n        case 5:\n            instructionRegisterValue = Cpu.registerL;\n            break;\n        case 6:\n            // Value at register HL\n            // 4 cycles\n            instructionRegisterValue = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            break;\n        case 7:\n            instructionRegisterValue = Cpu.registerA;\n            break;\n    }\n    // Grab the high nibble to perform skips to speed up performance\n    var opcodeHighNibble = cbOpcode & 0xf0;\n    opcodeHighNibble = opcodeHighNibble >> 4;\n    // Send to the correct function\n    switch (opcodeHighNibble) {\n        case 0x00:\n            if (cbOpcode <= 0x07) {\n                // RLC register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterLeft(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x0f) {\n                // RRC register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterRight(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x01:\n            if (cbOpcode <= 0x17) {\n                // RL register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterLeftThroughCarry(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x1f) {\n                // RR register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterRightThroughCarry(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x02:\n            if (cbOpcode <= 0x27) {\n                // SLA register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = shiftLeftRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x2f) {\n                // SRA register 8-bit\n                // Z 0 0 0\n                instructionRegisterResult = shiftRightArithmeticRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x03:\n            if (cbOpcode <= 0x37) {\n                // SWAP register 8-bit\n                // Z 0 0 0\n                instructionRegisterResult = swapNibblesOnRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x3f) {\n                // SRL B\n                // Z 0 0 C\n                instructionRegisterResult = shiftRightLogicalRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x04:\n            if (cbOpcode <= 0x47) {\n                // BIT 0,register 8-bit\n                // Z 0 1 -\n                //TODO: Optimize this not to do logic of setting register back\n                instructionRegisterResult = testBitOnRegister(0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x4f) {\n                // BIT 1,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x05:\n            if (cbOpcode <= 0x57) {\n                // BIT 2,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(2, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x5f) {\n                // BIT 3,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(3, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x06:\n            if (cbOpcode <= 0x67) {\n                // BIT 4,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(4, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x6f) {\n                // BIT 5,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(5, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x07:\n            if (cbOpcode <= 0x77) {\n                // BIT 6,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(6, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x7f) {\n                // BIT 7,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(7, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x08:\n            if (cbOpcode <= 0x87) {\n                // Res 0,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(0, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x8f) {\n                // Res 1,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(1, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x09:\n            if (cbOpcode <= 0x97) {\n                // Res 2,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(2, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x9f) {\n                // Res 3,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(3, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0a:\n            if (cbOpcode <= 0xa7) {\n                // Res 4,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(4, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xaf) {\n                // Res 5,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(5, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0b:\n            if (cbOpcode <= 0xb7) {\n                // Res 6,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(6, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xbf) {\n                // Res 7,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(7, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0c:\n            if (cbOpcode <= 0xc7) {\n                // SET 0,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(0, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xcf) {\n                // SET 1,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(1, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0d:\n            if (cbOpcode <= 0xd7) {\n                // SET 2,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(2, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xdf) {\n                // SET 3,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(3, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0e:\n            if (cbOpcode <= 0xe7) {\n                // SET 4,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(4, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xef) {\n                // SET 5,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(5, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0f:\n            if (cbOpcode <= 0xf7) {\n                // SET 6,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(6, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xff) {\n                // SET 7,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(7, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n    }\n    // Finally Pass back into the correct register\n    switch (registerNumber) {\n        case 0:\n            Cpu.registerB = instructionRegisterResult;\n            break;\n        case 1:\n            Cpu.registerC = instructionRegisterResult;\n            break;\n        case 2:\n            Cpu.registerD = instructionRegisterResult;\n            break;\n        case 3:\n            Cpu.registerE = instructionRegisterResult;\n            break;\n        case 4:\n            Cpu.registerH = instructionRegisterResult;\n            break;\n        case 5:\n            Cpu.registerL = instructionRegisterResult;\n            break;\n        case 6:\n            // Value at register HL\n            // Opcodes 0x40 -> 0x7F only do simple\n            // Bit test, and don't need to be stored back in memory\n            // Thus they take 4 less cycles to run\n            if (opcodeHighNibble < 0x04 || opcodeHighNibble > 0x07) {\n                // Store the result back\n                // 4 cycles\n                eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), instructionRegisterResult);\n            }\n            break;\n        case 7:\n            Cpu.registerA = instructionRegisterResult;\n            break;\n    }\n    // Finally our number of cycles\n    // Set if we handled the opcode\n    if (handledOpcode) {\n        numberOfCycles = 4;\n    }\n    // Return our number of cycles\n    return numberOfCycles;\n}\n\n// Imports\n// Take in any opcode, and decode it, and return the number of cycles\n// Program counter can be gotten from getProgramCounter();\n// Setting return value to i32 instead of u16, as we want to return a negative number on error\n// https://rednex.github.io/rgbds/gbz80.7.html\n// http://pastraiser.com/cpu/gameboy/gameboyopcodes.html\nfunction executeOpcode$$1(opcode) {\n    // Always implement the program counter by one\n    // Any other value can just subtract or add however much offset before reaching this line\n    var programCounter = Cpu.programCounter;\n    programCounter = u16Portable(programCounter + 1);\n    // Check if we are in the halt bug\n    if (Cpu.isHaltBug) {\n        // Need to not increment program counter,\n        // thus, running the next opcode twice\n        // E.g\n        // 0x76 - halt\n        // FA 34 12 - ld a,(1234)\n        // Becomes\n        // FA FA 34 ld a,(34FA)\n        // 12 ld (de),a\n        programCounter = u16Portable(programCounter - 1);\n    }\n    Cpu.programCounter = programCounter;\n    // Split our opcode into a high nibble to speed up performance\n    // Running 255 if statements is slow, even in wasm haha!\n    var opcodeHighNibble = opcode & 0xf0;\n    opcodeHighNibble = opcodeHighNibble >> 4;\n    // NOTE: @binji rule of thumb: it takes 4 cpu cycles to read one byte\n    // Therefore isntructions that use more than just the opcode (databyte one and two) will take at least\n    // 8 cyckles to use getDataByteOne(), and two cycles to use the concatented\n    // Not using a switch statement to avoid cannot redeclare this variable errors\n    // And it would be a ton of work :p\n    switch (opcodeHighNibble) {\n        case 0x00:\n            return handleOpcode0x(opcode);\n        case 0x01:\n            return handleOpcode1x(opcode);\n        case 0x02:\n            return handleOpcode2x(opcode);\n        case 0x03:\n            return handleOpcode3x(opcode);\n        case 0x04:\n            return handleOpcode4x(opcode);\n        case 0x05:\n            return handleOpcode5x(opcode);\n        case 0x06:\n            return handleOpcode6x(opcode);\n        case 0x07:\n            return handleOpcode7x(opcode);\n        case 0x08:\n            return handleOpcode8x(opcode);\n        case 0x09:\n            return handleOpcode9x(opcode);\n        case 0x0a:\n            return handleOpcodeAx(opcode);\n        case 0x0b:\n            return handleOpcodeBx(opcode);\n        case 0x0c:\n            return handleOpcodeCx(opcode);\n        case 0x0d:\n            return handleOpcodeDx(opcode);\n        case 0x0e:\n            return handleOpcodeEx(opcode);\n        default:\n            return handleOpcodeFx(opcode);\n    }\n}\n// Wrapper functions around loading and storing memory, and syncing those cycles\nfunction eightBitLoadSyncCycles(gameboyOffset) {\n    syncCycles(4);\n    return eightBitLoadFromGBMemoryWithTraps(gameboyOffset);\n}\nfunction eightBitStoreSyncCycles(gameboyOffset, value) {\n    syncCycles(4);\n    eightBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\nfunction sixteenBitLoadSyncCycles(gameboyOffset) {\n    syncCycles(8);\n    // sixteen bit load has traps even though it has no label\n    return sixteenBitLoadFromGBMemory(gameboyOffset);\n}\nfunction sixteenBitStoreSyncCycles(gameboyOffset, value) {\n    syncCycles(8);\n    sixteenBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\n// Functions to access the next operands of a opcode, reffering to them as \"dataBytes\"\nfunction getDataByteOne() {\n    syncCycles(4);\n    return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\nfunction getDataByteTwo() {\n    syncCycles(4);\n    return eightBitLoadFromGBMemory(u16Portable(Cpu.programCounter + 1));\n}\n// Get our concatenated databyte one and getDataByteTwo()\n// Find and replace with : getConcatenatedDataByte()\nfunction getConcatenatedDataByte() {\n    return concatenateBytes(getDataByteTwo(), getDataByteOne());\n}\nfunction handleOpcode0x(opcode) {\n    switch (opcode) {\n        case 0x00:\n            // NOP\n            // 1  4\n            // No Operation\n            return 4;\n        case 0x01: {\n            // LD BC,d16\n            // 3  12\n            // 8 cycles\n            var concatenatedDataByte = getConcatenatedDataByte();\n            Cpu.registerB = splitHighByte(concatenatedDataByte);\n            Cpu.registerC = splitLowByte(concatenatedDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x02: {\n            // LD (BC),A\n            // 1  8\n            // () means load into address pointed by BC\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC), Cpu.registerA);\n            return 4;\n        }\n        case 0x03: {\n            // INC BC\n            // 1  8\n            var registerBC3 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            registerBC3++;\n            Cpu.registerB = splitHighByte(registerBC3);\n            Cpu.registerC = splitLowByte(registerBC3);\n            return 8;\n        }\n        case 0x04: {\n            // INC B\n            // 1  4\n            // Z 0 H -\n            var registerB = Cpu.registerB;\n            checkAndSetEightBitHalfCarryFlag(registerB, 1);\n            registerB = u8Portable(registerB + 1);\n            Cpu.registerB = registerB;\n            setZeroFlag$$1((registerB === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x05: {\n            // DEC B\n            // 1  4\n            // Z 1 H -\n            var registerB = Cpu.registerB;\n            checkAndSetEightBitHalfCarryFlag(registerB, -1);\n            registerB = u8Portable(registerB - 1);\n            Cpu.registerB = registerB;\n            setZeroFlag$$1((registerB === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x06: {\n            // LD B,d8\n            // 2  8\n            // 4 cycles\n            Cpu.registerB = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x07: {\n            // RLCA\n            // 1  4\n            // 0 0 0 C\n            // Check for the carry\n            var registerA = Cpu.registerA;\n            setCarryFlag(((registerA & 0x80) === 0x80));\n            Cpu.registerA = rotateByteLeft(registerA);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n        case 0x08: {\n            // LD (a16),SP\n            // 3  20\n            // Load the stack pointer into the 16 bit address represented by the two data bytes\n            // 16 cycles, 8 from data byte, 8 from sixteenbit store\n            sixteenBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.stackPointer);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x09: {\n            // ADD HL,BC\n            // 1 8\n            // - 0 H C\n            var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            var registerBC9 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerBC9, false);\n            var result = u16Portable((registerHL + registerBC9));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x0a: {\n            // LD A,(BC)\n            // 1 8\n            // 4 cycles from load\n            Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC));\n            return 4;\n        }\n        case 0x0b: {\n            // DEC BC\n            // 1  8\n            var registerBCB = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            registerBCB = u16Portable(registerBCB - 1);\n            Cpu.registerB = splitHighByte(registerBCB);\n            Cpu.registerC = splitLowByte(registerBCB);\n            return 8;\n        }\n        case 0x0c: {\n            // INC C\n            // 1  4\n            // Z 0 H -\n            var registerC = Cpu.registerC;\n            checkAndSetEightBitHalfCarryFlag(registerC, 1);\n            registerC = u8Portable(registerC + 1);\n            Cpu.registerC = registerC;\n            setZeroFlag$$1((registerC === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x0d: {\n            // DEC C\n            // 1  4\n            // Z 1 H -\n            var registerC = Cpu.registerC;\n            checkAndSetEightBitHalfCarryFlag(registerC, -1);\n            registerC = u8Portable(registerC - 1);\n            Cpu.registerC = registerC;\n            setZeroFlag$$1((registerC === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x0e: {\n            // LD C,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerC = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x0f: {\n            // RRCA\n            // 1 4\n            // 0 0 0 C\n            // Check for the last bit, to see if it will be carried\n            var registerA = Cpu.registerA;\n            setCarryFlag(((registerA & 0x01) > 0));\n            Cpu.registerA = rotateByteRight(registerA);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode1x(opcode) {\n    switch (opcode) {\n        case 0x10: {\n            // STOP 0\n            // 2 4\n            // Enter CPU very low power mode. Also used to switch between double and normal speed CPU modes in GBC.\n            // Meaning Don't Decode anymore opcodes , or updated the LCD until joypad interrupt (or when button is pressed if I am wrong)\n            // See HALT\n            // If we are in gameboy color mode, set the new speed\n            if (Cpu.GBCEnabled) {\n                // 4 cycles\n                var speedSwitch = eightBitLoadSyncCycles(Cpu.memoryLocationSpeedSwitch);\n                if (checkBitOnByte(0, speedSwitch)) {\n                    // Reset the prepare bit\n                    speedSwitch = resetBitOnByte(0, speedSwitch);\n                    // Switch to the new mode, and set the speed switch to the OTHER speed, to represent our new speed\n                    if (!checkBitOnByte(7, speedSwitch)) {\n                        Cpu.GBCDoubleSpeed = true;\n                        speedSwitch = setBitOnByte(7, speedSwitch);\n                    }\n                    else {\n                        Cpu.GBCDoubleSpeed = false;\n                        speedSwitch = resetBitOnByte(7, speedSwitch);\n                    }\n                    // Store the final speed switch\n                    // 4 cycles\n                    eightBitStoreSyncCycles(Cpu.memoryLocationSpeedSwitch, speedSwitch);\n                    // Cycle accurate gameboy docs says this takes 76 clocks\n                    // 76 - 8 cycles (from load/store) = 68\n                    return 68;\n                }\n            }\n            // NOTE: This breaks Blarggs CPU tests if CGB Stop is not implemented\n            Cpu.isStopped = true;\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x11: {\n            // LD DE,d16\n            // 3  12\n            // 8 cycles\n            var concatenatedDataByte = getConcatenatedDataByte();\n            Cpu.registerD = splitHighByte(concatenatedDataByte);\n            Cpu.registerE = splitLowByte(concatenatedDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x12: {\n            // LD (DE),A\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerD, Cpu.registerE), Cpu.registerA);\n            return 4;\n        }\n        case 0x13: {\n            // INC DE\n            // 1 8\n            var registerDE3 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            registerDE3 = u16Portable(registerDE3 + 1);\n            Cpu.registerD = splitHighByte(registerDE3);\n            Cpu.registerE = splitLowByte(registerDE3);\n            return 8;\n        }\n        case 0x14: {\n            // INC D\n            // 1  4\n            // Z 0 H -\n            var registerD = Cpu.registerD;\n            checkAndSetEightBitHalfCarryFlag(registerD, 1);\n            registerD = u8Portable(registerD + 1);\n            Cpu.registerD = registerD;\n            setZeroFlag$$1((Cpu.registerD === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x15: {\n            // DEC D\n            // 1  4\n            // Z 1 H -\n            var registerD = Cpu.registerD;\n            checkAndSetEightBitHalfCarryFlag(registerD, -1);\n            registerD = u8Portable(registerD - 1);\n            Cpu.registerD = registerD;\n            setZeroFlag$$1((Cpu.registerD === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x16: {\n            // LD D,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerD = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x17: {\n            // RLA\n            // 1 4\n            // 0 0 0 C\n            // Check for the carry\n            // setting has first bit since we need to use carry\n            var hasHighbit = (Cpu.registerA & 0x80) === 0x80;\n            Cpu.registerA = rotateByteLeftThroughCarry(Cpu.registerA);\n            // OR the carry flag to the end\n            setCarryFlag(hasHighbit);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n        case 0x18: {\n            // JR r8\n            // 2  12\n            // NOTE: Discoved dataByte is signed\n            // However the relative Jump Function handles this\n            // 4 cycles\n            relativeJump(getDataByteOne());\n            return 8;\n        }\n        // Relative Jump Function Handles program counter\n        case 0x19: {\n            // ADD HL,DE\n            // 1  8\n            // - 0 H C\n            var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            var registerDE9 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerDE9, false);\n            var result = u16Portable((registerHL + registerDE9));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x1a: {\n            // LD A,(DE)\n            // 1 8\n            var registerDEA = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerDEA);\n            return 4;\n        }\n        case 0x1b: {\n            // DEC DE\n            // 1 8\n            var registerDEB = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            registerDEB = u16Portable(registerDEB - 1);\n            Cpu.registerD = splitHighByte(registerDEB);\n            Cpu.registerE = splitLowByte(registerDEB);\n            return 8;\n        }\n        case 0x1c: {\n            // INC E\n            // 1  4\n            // Z 0 H -\n            var registerE = Cpu.registerE;\n            checkAndSetEightBitHalfCarryFlag(registerE, 1);\n            registerE = u8Portable(registerE + 1);\n            Cpu.registerE = registerE;\n            setZeroFlag$$1((registerE === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x1d: {\n            // DEC E\n            // 1  4\n            // Z 1 H -\n            var registerE = Cpu.registerE;\n            checkAndSetEightBitHalfCarryFlag(registerE, -1);\n            registerE = u8Portable(registerE - 1);\n            Cpu.registerE = registerE;\n            setZeroFlag$$1((registerE === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x1e: {\n            // LD E,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerE = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x1f: {\n            // RRA\n            // 1 4\n            // 0 0 0 C\n            // Check for the carry\n            // setting has low bit since we need to use carry\n            var hasLowBit = (Cpu.registerA & 0x01) === 0x01;\n            Cpu.registerA = rotateByteRightThroughCarry(Cpu.registerA);\n            setCarryFlag(hasLowBit);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode2x(opcode) {\n    switch (opcode) {\n        case 0x20: {\n            // JR NZ,r8\n            // 2  12/8\n            // NOTE: NZ stands for not [flag], so in this case, not zero flag\n            // Also, / means, if condition. so if met, 12 cycles, otherwise 8 cycles\n            if (getZeroFlag$$1() === 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump Funciton handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x21: {\n            // LD HL,d16\n            // 3  12\n            // 8 cycles\n            var sixteenBitDataByte = getConcatenatedDataByte();\n            Cpu.registerH = splitHighByte(sixteenBitDataByte);\n            Cpu.registerL = splitLowByte(sixteenBitDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x22: {\n            // LD (HL+),A\n            // 1 8\n            var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n            registerHL2 = u16Portable(registerHL2 + 1);\n            Cpu.registerH = splitHighByte(registerHL2);\n            Cpu.registerL = splitLowByte(registerHL2);\n            return 4;\n        }\n        case 0x23: {\n            // INC HL\n            // 1  8\n            var registerHL3 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            registerHL3 = u16Portable(registerHL3 + 1);\n            Cpu.registerH = splitHighByte(registerHL3);\n            Cpu.registerL = splitLowByte(registerHL3);\n            return 8;\n        }\n        case 0x24: {\n            // INC H\n            // 1  4\n            // Z 0 H -\n            var registerH = Cpu.registerH;\n            checkAndSetEightBitHalfCarryFlag(registerH, 1);\n            registerH = u8Portable(registerH + 1);\n            Cpu.registerH = registerH;\n            setZeroFlag$$1((registerH === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x25: {\n            // DEC H\n            // 1  4\n            // Z 1 H -\n            var registerH = Cpu.registerH;\n            checkAndSetEightBitHalfCarryFlag(registerH, -1);\n            registerH = u8Portable(registerH - 1);\n            Cpu.registerH = registerH;\n            setZeroFlag$$1((registerH === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x26: {\n            // LD H,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerH = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x27: {\n            // DAA\n            // 1 4\n            // Z - 0 C\n            var adjustedRegister = 0;\n            var adjustment = 0;\n            if (getHalfCarryFlag() > 0) {\n                adjustment = adjustment | 0x06;\n            }\n            if (getCarryFlag$$1() > 0) {\n                adjustment = adjustment | 0x60;\n            }\n            var registerA = Cpu.registerA;\n            if (getSubtractFlag() > 0) {\n                adjustedRegister = u8Portable(registerA - adjustment);\n            }\n            else {\n                if ((registerA & 0x0f) > 0x09) {\n                    adjustment = adjustment | 0x06;\n                }\n                if (registerA > 0x99) {\n                    adjustment = adjustment | 0x60;\n                }\n                adjustedRegister = u8Portable(registerA + adjustment);\n            }\n            // Now set our flags to the correct values\n            setZeroFlag$$1((adjustedRegister === 0));\n            setCarryFlag(((adjustment & 0x60) !== 0));\n            setHalfCarryFlag(0);\n            Cpu.registerA = adjustedRegister;\n            return 4;\n        }\n        case 0x28: {\n            // JR Z,r8\n            // 2  12/8\n            if (getZeroFlag$$1() > 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump funciton handles pogram counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x29: {\n            // ADD HL,HL\n            // 1  8\n            // - 0 H C\n            var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL9, registerHL9, false);\n            registerHL9 = u16Portable(registerHL9 * 2);\n            Cpu.registerH = splitHighByte(registerHL9);\n            Cpu.registerL = splitLowByte(registerHL9);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x2a: {\n            // LD A,(HL+)\n            // 1  8\n            var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n            registerHLA = u16Portable(registerHLA + 1);\n            Cpu.registerH = splitHighByte(registerHLA);\n            Cpu.registerL = splitLowByte(registerHLA);\n            return 4;\n        }\n        case 0x2b: {\n            // DEC HL\n            // 1 8\n            var registerHLB = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            registerHLB = u16Portable(registerHLB - 1);\n            Cpu.registerH = splitHighByte(registerHLB);\n            Cpu.registerL = splitLowByte(registerHLB);\n            return 8;\n        }\n        case 0x2c: {\n            // INC L\n            // 1  4\n            // Z 0 H -\n            var registerL = Cpu.registerL;\n            checkAndSetEightBitHalfCarryFlag(registerL, 1);\n            registerL = u8Portable(registerL + 1);\n            Cpu.registerL = registerL;\n            setZeroFlag$$1((registerL === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x2d: {\n            // DEC L\n            // 1  4\n            // Z 1 H -\n            var registerL = Cpu.registerL;\n            checkAndSetEightBitHalfCarryFlag(registerL, -1);\n            registerL = u8Portable(registerL - 1);\n            Cpu.registerL = registerL;\n            setZeroFlag$$1((registerL === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x2e: {\n            // LD L,d8\n            // 2  8\n            // 4 cycles\n            Cpu.registerL = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x2f: {\n            // CPL\n            // 1 4\n            // - 1 1 -\n            Cpu.registerA = ~Cpu.registerA;\n            setSubtractFlag(1);\n            setHalfCarryFlag(1);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode3x(opcode) {\n    switch (opcode) {\n        case 0x30: {\n            // JR NC,r8\n            // 2 12 / 8\n            if (getCarryFlag$$1() === 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump function handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x31: {\n            // LD SP,d16\n            // 3 12\n            // 8 cycles\n            Cpu.stackPointer = getConcatenatedDataByte();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x32: {\n            // LD (HL-),A\n            // 1 8\n            var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n            registerHL2 = u16Portable(registerHL2 - 1);\n            Cpu.registerH = splitHighByte(registerHL2);\n            Cpu.registerL = splitLowByte(registerHL2);\n            return 4;\n        }\n        case 0x33: {\n            // INC SP\n            // 1 8\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + 1);\n            return 8;\n        }\n        case 0x34: {\n            // INC (HL)\n            // 1  12\n            // Z 0 H -\n            var registerHL4 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            var valueAtHL4 = eightBitLoadSyncCycles(registerHL4);\n            // Creating a varible for this to fix assemblyscript overflow bug\n            // Requires explicit casting\n            // https://github.com/AssemblyScript/assemblyscript/issues/26\n            var incrementer = 1;\n            checkAndSetEightBitHalfCarryFlag(valueAtHL4, incrementer);\n            valueAtHL4 = u8Portable(valueAtHL4 + incrementer);\n            setZeroFlag$$1((valueAtHL4 === 0));\n            setSubtractFlag(0);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL4, valueAtHL4);\n            return 4;\n        }\n        case 0x35: {\n            // DEC (HL)\n            // 1  12\n            // Z 1 H -\n            var registerHL5 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            var valueAtHL5 = eightBitLoadSyncCycles(registerHL5);\n            // NOTE: This opcode may not overflow correctly,\n            // Please see previous opcode\n            checkAndSetEightBitHalfCarryFlag(valueAtHL5, -1);\n            valueAtHL5 = u8Portable(valueAtHL5 - 1);\n            setZeroFlag$$1((valueAtHL5 === 0));\n            setSubtractFlag(1);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL5, valueAtHL5);\n            return 4;\n        }\n        case 0x36: {\n            // LD (HL),d8\n            // 2  12\n            // 8 cycles, 4 from store, 4 from data byte\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x37: {\n            // SCF\n            // 1  4\n            // - 0 0 1\n            // Simply set the carry flag\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            setCarryFlag(1);\n            return 4;\n        }\n        case 0x38: {\n            // JR C,r8\n            // 2 12/8\n            if (getCarryFlag$$1() === 1) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump Funciton handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x39: {\n            // ADD HL,SP\n            // 1 8\n            // - 0 H C\n            var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL9, Cpu.stackPointer, false);\n            var result = u16Portable((registerHL9 + Cpu.stackPointer));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x3a: {\n            // LD A,(HL-)\n            // 1 8\n            var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n            registerHLA = u16Portable(registerHLA - 1);\n            Cpu.registerH = splitHighByte(registerHLA);\n            Cpu.registerL = splitLowByte(registerHLA);\n            return 4;\n        }\n        case 0x3b: {\n            // DEC SP\n            // 1 8\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer - 1);\n            return 8;\n        }\n        case 0x3c: {\n            // INC A\n            // 1  4\n            // Z 0 H -\n            var registerA = Cpu.registerA;\n            checkAndSetEightBitHalfCarryFlag(registerA, 1);\n            registerA = u8Portable(registerA + 1);\n            Cpu.registerA = registerA;\n            setZeroFlag$$1((registerA === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x3d: {\n            // DEC A\n            // 1  4\n            // Z 1 H -\n            var registerA = Cpu.registerA;\n            checkAndSetEightBitHalfCarryFlag(registerA, -1);\n            registerA = u8Portable(registerA - 1);\n            Cpu.registerA = registerA;\n            setZeroFlag$$1((registerA === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x3e: {\n            // LD A,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerA = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x3f: {\n            // CCF\n            // 1 4\n            // - 0 0 C\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            setCarryFlag((getCarryFlag$$1() <= 0));\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode4x(opcode) {\n    switch (opcode) {\n        case 0x40:\n            // LD B,B\n            // 1 4\n            // Load B into B, Do nothing\n            return 4;\n        case 0x41:\n            // LD B,C\n            // 1 4\n            Cpu.registerB = Cpu.registerC;\n            return 4;\n        case 0x42:\n            // LD B,D\n            // 1 4\n            Cpu.registerB = Cpu.registerD;\n            return 4;\n        case 0x43:\n            // LD B,E\n            // 1 4\n            Cpu.registerB = Cpu.registerE;\n            return 4;\n        case 0x44:\n            // LD B,H\n            // 1 4\n            Cpu.registerB = Cpu.registerH;\n            return 4;\n        case 0x45:\n            // LD B,L\n            // 1 4\n            Cpu.registerB = Cpu.registerL;\n            return 4;\n        case 0x46:\n            // LD B,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerB = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x47:\n            // LD B,A\n            // 1 4\n            Cpu.registerB = Cpu.registerA;\n            return 4;\n        case 0x48:\n            // LD C,B\n            // 1 4\n            Cpu.registerC = Cpu.registerB;\n            return 4;\n        case 0x49:\n            // LD C,C\n            // 1 4\n            // Do nothing\n            return 4;\n        case 0x4a:\n            // LD C,D\n            // 1 4\n            Cpu.registerC = Cpu.registerD;\n            return 4;\n        case 0x4b:\n            // LD C,E\n            // 1 4\n            Cpu.registerC = Cpu.registerE;\n            return 4;\n        case 0x4c:\n            // LD C,H\n            // 1 4\n            Cpu.registerC = Cpu.registerH;\n            return 4;\n        case 0x4d:\n            // LD C,L\n            // 1 4\n            Cpu.registerC = Cpu.registerL;\n            return 4;\n        case 0x4e:\n            // LD C,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerC = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x4f:\n            // LD C,A\n            // 1 4\n            Cpu.registerC = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode5x(opcode) {\n    switch (opcode) {\n        case 0x50:\n            // LD D,B\n            // 1 4\n            Cpu.registerD = Cpu.registerB;\n            return 4;\n        case 0x51:\n            // LD D,C\n            // 1 4\n            Cpu.registerD = Cpu.registerC;\n            return 4;\n        case 0x52:\n            // LD D,D\n            // 1 4\n            // Do Nothing\n            return 4;\n        case 0x53:\n            // LD D,E\n            // 1 4\n            Cpu.registerD = Cpu.registerE;\n            return 4;\n        case 0x54:\n            // LD D,H\n            // 1 4\n            Cpu.registerD = Cpu.registerH;\n            return 4;\n        case 0x55:\n            // LD D,L\n            // 1 4\n            Cpu.registerD = Cpu.registerL;\n            return 4;\n        case 0x56:\n            // LD D,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerD = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x57:\n            // LD D,A\n            // 1 4\n            Cpu.registerD = Cpu.registerA;\n            return 4;\n        case 0x58:\n            // LD E,B\n            // 1 4\n            Cpu.registerE = Cpu.registerB;\n            return 4;\n        case 0x59:\n            // LD E,C\n            // 1 4\n            Cpu.registerE = Cpu.registerC;\n            return 4;\n        case 0x5a:\n            // LD E,D\n            // 1 4\n            Cpu.registerE = Cpu.registerD;\n            return 4;\n        case 0x5b:\n            // LD E,E\n            // 1 4\n            // Do Nothing\n            return 4;\n        case 0x5c:\n            // LD E,H\n            // 1 4\n            Cpu.registerE = Cpu.registerH;\n            return 4;\n        case 0x5d:\n            // LD E,L\n            // 1 4\n            Cpu.registerE = Cpu.registerL;\n            return 4;\n        case 0x5e:\n            // LD E,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x5f:\n            // LD E,A\n            // 1 4\n            Cpu.registerE = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode6x(opcode) {\n    switch (opcode) {\n        case 0x60:\n            // LD H,B\n            // 1 4\n            Cpu.registerH = Cpu.registerB;\n            return 4;\n        case 0x61:\n            // LD H,C\n            // 1 4\n            Cpu.registerH = Cpu.registerC;\n            return 4;\n        case 0x62:\n            // LD H,D\n            // 1 4\n            Cpu.registerH = Cpu.registerD;\n            return 4;\n        case 0x63:\n            // LD H,E\n            // 1 4\n            Cpu.registerH = Cpu.registerE;\n            return 4;\n        case 0x64:\n            // LD H,H\n            // 1 4\n            Cpu.registerH = Cpu.registerH;\n            return 4;\n        case 0x65:\n            // LD H,L\n            // 1 4\n            Cpu.registerH = Cpu.registerL;\n            return 4;\n        case 0x66:\n            // LD H,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerH = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x67:\n            // LD H,A\n            // 1 4\n            Cpu.registerH = Cpu.registerA;\n            return 4;\n        case 0x68:\n            // LD L,B\n            // 1 4\n            Cpu.registerL = Cpu.registerB;\n            return 4;\n        case 0x69:\n            // LD L,C\n            // 1 4\n            Cpu.registerL = Cpu.registerC;\n            return 4;\n        case 0x6a:\n            // LD L,D\n            // 1 4\n            Cpu.registerL = Cpu.registerD;\n            return 4;\n        case 0x6b:\n            // LD L,E\n            // 1 4\n            Cpu.registerL = Cpu.registerE;\n            return 4;\n        case 0x6c:\n            // LD L,H\n            // 1 4\n            Cpu.registerL = Cpu.registerH;\n            return 4;\n        case 0x6d:\n            // LD L,L\n            // 1 4\n            Cpu.registerL = Cpu.registerL;\n            return 4;\n        case 0x6e:\n            // LD L,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerL = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x6f:\n            // LD L,A\n            // 1 4\n            Cpu.registerL = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode7x(opcode) {\n    switch (opcode) {\n        case 0x70:\n            // LD (HL),B\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerB);\n            return 4;\n        case 0x71:\n            // LD (HL),C\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerC);\n            return 4;\n        case 0x72:\n            // LD (HL),D\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerD);\n            return 4;\n        case 0x73:\n            // LD (HL),E\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerE);\n            return 4;\n        case 0x74:\n            // LD (HL),H\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerH);\n            return 4;\n        case 0x75:\n            // LD (HL),L\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerL);\n            return 4;\n        case 0x76:\n            // HALT\n            // 1 4\n            // Enter CPU very low power mode\n            // Meaning Don't Decode anymore opcodes until an interrupt occurs\n            // Still need to do timers and things\n            // Can't Halt during an HDMA\n            // https://gist.github.com/drhelius/3394856\n            if (!Memory.isHblankHdmaActive) {\n                Cpu.enableHalt();\n            }\n            return 4;\n        case 0x77:\n            // LD (HL),A\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerA);\n            return 4;\n        case 0x78:\n            // LD A,B\n            // 1 4\n            Cpu.registerA = Cpu.registerB;\n            return 4;\n        case 0x79:\n            // LD A,C\n            // 1 4\n            Cpu.registerA = Cpu.registerC;\n            return 4;\n        case 0x7a:\n            // LD A,D\n            // 1 4\n            Cpu.registerA = Cpu.registerD;\n            return 4;\n        case 0x7b:\n            // LD A,E\n            // 1 4\n            Cpu.registerA = Cpu.registerE;\n            return 4;\n        case 0x7c:\n            // LD A,H\n            // 1 4\n            Cpu.registerA = Cpu.registerH;\n            return 4;\n        case 0x7d:\n            // LD A,L\n            // 1 4\n            Cpu.registerA = Cpu.registerL;\n            return 4;\n        case 0x7e:\n            // LD A,(HL)\n            // 1 8\n            // NOTE: Thanks to @binji for catching that this should be 8 cycles, not 4\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x7f:\n            // LD A,A\n            // 1 4\n            // Do Nothing\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode8x(opcode) {\n    switch (opcode) {\n        case 0x80:\n            // ADD A,B\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerB);\n            return 4;\n        case 0x81:\n            // ADD A,C\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerC);\n            return 4;\n        case 0x82:\n            // ADD A,D\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerD);\n            return 4;\n        case 0x83:\n            // ADD A,E\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerE);\n            return 4;\n        case 0x84:\n            // ADD A,H\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerH);\n            return 4;\n        case 0x85:\n            // ADD A,L\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerL);\n            return 4;\n        case 0x86:\n            // ADD A,(HL)\n            // 1 8\n            // Z 0 H C\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            addARegister(valueAtHL6);\n            return 4;\n        case 0x87:\n            // ADD A,A\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerA);\n            return 4;\n        case 0x88:\n            // ADC A,B\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerB);\n            return 4;\n        case 0x89:\n            // ADC A,C\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerC);\n            return 4;\n        case 0x8a:\n            // ADC A,D\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerD);\n            return 4;\n        case 0x8b:\n            // ADC A,E\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerE);\n            return 4;\n        case 0x8c:\n            // ADC A,H\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerH);\n            return 4;\n        case 0x8d:\n            // ADC A,L\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerL);\n            return 4;\n        case 0x8e:\n            // ADC A,(HL)\n            // 1 8\n            // Z 0 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            addAThroughCarryRegister(valueAtHLE);\n            return 4;\n        case 0x8f:\n            // ADC A,A\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode9x(opcode) {\n    switch (opcode) {\n        case 0x90:\n            // SUB B\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerB);\n            return 4;\n        case 0x91:\n            // SUB C\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerC);\n            return 4;\n        case 0x92:\n            // SUB D\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerD);\n            return 4;\n        case 0x93:\n            // SUB E\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerE);\n            return 4;\n        case 0x94:\n            // SUB H\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerH);\n            return 4;\n        case 0x95:\n            // SUB L\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerL);\n            return 4;\n        case 0x96:\n            // SUB (HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            subARegister(valueAtHL6);\n            return 4;\n        case 0x97:\n            // SUB A\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerA);\n            return 4;\n        case 0x98:\n            // SBC A,B\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerB);\n            return 4;\n        case 0x99:\n            // SBC A,C\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerC);\n            return 4;\n        case 0x9a:\n            // SBC A,D\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerD);\n            return 4;\n        case 0x9b:\n            // SBC A,E\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerE);\n            return 4;\n        case 0x9c:\n            // SBC A,H\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerH);\n            return 4;\n        case 0x9d:\n            // SBC A,L\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerL);\n            return 4;\n        case 0x9e:\n            // SBC A,(HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            subAThroughCarryRegister(valueAtHLE);\n            return 4;\n        case 0x9f:\n            // SBC A,A\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeAx(opcode) {\n    switch (opcode) {\n        case 0xa0:\n            // AND B\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerB);\n            return 4;\n        case 0xa1:\n            // AND C\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerC);\n            return 4;\n        case 0xa2:\n            // AND D\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerD);\n            return 4;\n        case 0xa3:\n            // AND E\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerE);\n            return 4;\n        case 0xa4:\n            // AND H\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerH);\n            return 4;\n        case 0xa5:\n            // AND L\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerL);\n            return 4;\n        case 0xa6:\n            // AND (HL)\n            // 1  8\n            // Z 0 1 0\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            andARegister(valueAtHL6);\n            return 4;\n        case 0xa7:\n            // AND A\n            // 1  4\n            // Z 0 1 0\n            // NOTE: & Yourself, does nothing\n            andARegister(Cpu.registerA);\n            return 4;\n        case 0xa8:\n            // XOR B\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerB);\n            return 4;\n        case 0xa9:\n            // XOR C\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerC);\n            return 4;\n        case 0xaa:\n            // XOR D\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerD);\n            return 4;\n        case 0xab:\n            // XOR E\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerE);\n            return 4;\n        case 0xac:\n            // XOR H\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerH);\n            return 4;\n        case 0xad:\n            // XOR L\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerL);\n            return 4;\n        case 0xae:\n            // XOR (HL)\n            // 1  8\n            // Z 0 0 0\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            xorARegister(valueAtHLE);\n            return 4;\n        case 0xaf:\n            // XOR A\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeBx(opcode) {\n    switch (opcode) {\n        case 0xb0:\n            // OR B\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerB);\n            return 4;\n        case 0xb1:\n            // OR C\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerC);\n            return 4;\n        case 0xb2:\n            // OR D\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerD);\n            return 4;\n        case 0xb3:\n            // OR E\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerE);\n            return 4;\n        case 0xb4:\n            // OR H\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerH);\n            return 4;\n        case 0xb5:\n            // OR L\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerL);\n            return 4;\n        case 0xb6:\n            // OR (HL)\n            // 1  8\n            // Z 0 0 0\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            orARegister(valueAtHL6);\n            return 4;\n        case 0xb7:\n            // OR A\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerA);\n            return 4;\n        case 0xb8:\n            // CP B\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerB);\n            return 4;\n        case 0xb9:\n            // CP C\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerC);\n            return 4;\n        case 0xba:\n            // CP D\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerD);\n            return 4;\n        case 0xbb:\n            // CP E\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerE);\n            return 4;\n        case 0xbc:\n            // CP H\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerH);\n            return 4;\n        case 0xbd:\n            // CP L\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerL);\n            return 4;\n        case 0xbe:\n            // CP (HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            cpARegister(valueAtHLE);\n            return 4;\n        case 0xbf:\n            // CP A\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeCx(opcode) {\n    switch (opcode) {\n        case 0xc0: {\n            // RET NZ\n            // 1  20/8\n            if (getZeroFlag$$1() === 0) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xc1: {\n            // POP BC\n            // 1  12\n            // 8 cycles\n            var registerBC1 = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n            Cpu.registerB = splitHighByte(registerBC1);\n            Cpu.registerC = splitLowByte(registerBC1);\n            return 4;\n        }\n        case 0xc2: {\n            // JP NZ,a16\n            // 3  16/12\n            if (getZeroFlag$$1() === 0) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xc3: {\n            // JP a16\n            // 3  16\n            // 8 cycles\n            Cpu.programCounter = getConcatenatedDataByte();\n            return 8;\n        }\n        case 0xc4: {\n            // CALL NZ,a16\n            // 3  24/12\n            if (getZeroFlag$$1() === 0) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xc5: {\n            // PUSH BC\n            // 1  16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerB, Cpu.registerC));\n            return 8;\n        }\n        case 0xc6: {\n            // ADD A,d8\n            // 2 8\n            // Z 0 H C\n            // 4 cycles\n            addARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xc7: {\n            // RST 00H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x00;\n            return 8;\n        }\n        case 0xc8: {\n            // RET Z\n            // 1  20/8\n            if (getZeroFlag$$1() === 1) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xc9: {\n            // RET\n            // 1 16\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            return 8;\n        }\n        case 0xca: {\n            // JP Z,a16\n            // 3 16/12\n            if (getZeroFlag$$1() === 1) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xcb: {\n            // PREFIX CB\n            // 1  4\n            // 4 cycles\n            var cbCycles = handleCbOpcode(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return cbCycles;\n        }\n        case 0xcc: {\n            // CALL Z,a16\n            // 3  24/12\n            if (getZeroFlag$$1() === 1) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter + 2);\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xcd: {\n            // CALL a16\n            // 3  24\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n            // 8 cycles\n            Cpu.programCounter = getConcatenatedDataByte();\n            return 8;\n        }\n        case 0xce: {\n            // ADC A,d8\n            // 2  8\n            // Z 0 H C\n            // 4 cycles\n            addAThroughCarryRegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xcf: {\n            // RST 08H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x08;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeDx(opcode) {\n    switch (opcode) {\n        case 0xd0: {\n            // RET NC\n            // 1  20/8\n            if (getCarryFlag$$1() === 0) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xd1: {\n            // POP DE\n            // 1  12\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerDE1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerD = splitHighByte(registerDE1);\n            Cpu.registerE = splitLowByte(registerDE1);\n            return 4;\n        }\n        case 0xd2: {\n            // JP NC,a16\n            // 3  16/12\n            if (getCarryFlag$$1() === 0) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xD3 */\n        case 0xd4: {\n            // CALL NC,a16\n            // 3  24/12\n            if (getCarryFlag$$1() === 0) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter + 2);\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xd5: {\n            // PUSH DE\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerD, Cpu.registerE));\n            return 8;\n        }\n        case 0xd6: {\n            // SUB d8\n            // 2  8\n            // Z 1 H C\n            // 4 cycles\n            subARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xd7: {\n            // RST 10H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x10;\n            return 8;\n        }\n        case 0xd8: {\n            // RET C\n            // 1  20/8\n            if (getCarryFlag$$1() === 1) {\n                var stackPointer = Cpu.stackPointer;\n                // 8 cycles\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xd9: {\n            // RETI\n            // 1  16\n            var stackPointer = Cpu.stackPointer;\n            // 8 cycles\n            Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n            // Enable interrupts\n            setInterrupts(true);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            return 8;\n        }\n        case 0xda: {\n            // JP C,a16\n            // 3 16/12\n            if (getCarryFlag$$1() === 1) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xDB */\n        case 0xdc: {\n            // CALL C,a16\n            // 3  24/12\n            if (getCarryFlag$$1() === 1) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xDD */\n        case 0xde: {\n            // SBC A,d8\n            // 2 8\n            // Z 1 H C\n            // 4 cycles\n            subAThroughCarryRegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xdf: {\n            // RST 18H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x18;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeEx(opcode) {\n    switch (opcode) {\n        case 0xe0: {\n            // LDH (a8),A\n            // 2  12\n            // Store value in high RAM ($FF00 + a8)\n            // 4 cycles\n            var largeDataByteOne = getDataByteOne();\n            // 4 cycles\n            eightBitStoreSyncCycles(0xff00 + largeDataByteOne, Cpu.registerA);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xe1: {\n            // POP HL\n            // 1  12\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerHL1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerH = splitHighByte(registerHL1);\n            Cpu.registerL = splitLowByte(registerHL1);\n            return 4;\n        }\n        case 0xe2: {\n            // LD (C),A\n            // 1  8\n            // NOTE: Table says 2 Program counter,\n            // But stepping through the boot rom, should be one\n            // Also should change 0xF2\n            // Store value in high RAM ($FF00 + register c)\n            // 4 cycles\n            eightBitStoreSyncCycles(0xff00 + Cpu.registerC, Cpu.registerA);\n            return 4;\n        }\n        /* No Opcode for: 0xE3, 0xE4 */\n        case 0xe5: {\n            // PUSH HL\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 8;\n        }\n        case 0xe6: {\n            // AND d8\n            // 2  8\n            // Z 0 1 0\n            // 4 cycles\n            andARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xe7: {\n            // RST 20H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x20;\n            return 8;\n        }\n        case 0xe8: {\n            // ADD SP, r8\n            // 2 16\n            // 0 0 H C\n            // NOTE: Discoved dataByte is signed\n            // 4 cycles\n            var signedDataByteOne = i8Portable(getDataByteOne());\n            checkAndSetSixteenBitFlagsAddOverflow(Cpu.stackPointer, signedDataByteOne, true);\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + signedDataByteOne);\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 12;\n        }\n        case 0xe9: {\n            // JP HL\n            // 1 4\n            Cpu.programCounter = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            return 4;\n        }\n        case 0xea: {\n            // LD (a16),A\n            // 3 16\n            // 12 cycles, 4 from store, 8 from concatenated data byte\n            eightBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.registerA);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        /* No Opcode for: 0xEB, 0xEC, 0xED */\n        case 0xee: {\n            // XOR d8\n            // 2 8\n            // Z 0 0 0\n            // 4 cycles\n            xorARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xef: {\n            // RST 28H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x28;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeFx(opcode) {\n    switch (opcode) {\n        case 0xf0: {\n            // LDH A,(a8)\n            // 2 12\n            // 4 cycles\n            var largeDataByteOne = getDataByteOne();\n            // 4 cycles\n            Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + largeDataByteOne));\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xf1: {\n            // POP AF\n            // 1 12\n            // Z N H C (But No work require, flags are already set)\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerAF1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerA = splitHighByte(registerAF1);\n            Cpu.registerF = splitLowByte(registerAF1);\n            return 4;\n        }\n        case 0xf2: {\n            // LD A,(C)\n            // 1 8\n            // 4 cycles\n            Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + Cpu.registerC));\n            return 4;\n        }\n        case 0xf3: {\n            // DI\n            // 1 4\n            setInterrupts(false);\n            return 4;\n        }\n        /* No Opcode for: 0xF4 */\n        case 0xf5: {\n            // PUSH AF\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerA, Cpu.registerF));\n            return 8;\n        }\n        case 0xf6: {\n            // OR d8\n            // 2 8\n            // Z 0 0 0\n            // 4 cycles\n            orARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xf7: {\n            // RST 30H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x30;\n            return 8;\n        }\n        case 0xf8: {\n            // LD HL,SP+r8\n            // 2 12\n            // 0 0 H C\n            // NOTE: Discoved dataByte is signed\n            // 4 cycles\n            var signedDataByteOne = i8Portable(getDataByteOne());\n            var stackPointer = Cpu.stackPointer;\n            // First, let's handle flags\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            checkAndSetSixteenBitFlagsAddOverflow(stackPointer, signedDataByteOne, true);\n            var registerHL = u16Portable(stackPointer + signedDataByteOne);\n            Cpu.registerH = splitHighByte(registerHL);\n            Cpu.registerL = splitLowByte(registerHL);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 8;\n        }\n        case 0xf9: {\n            // LD SP,HL\n            // 1 8\n            Cpu.stackPointer = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            return 8;\n        }\n        case 0xfa: {\n            // LD A,(a16)\n            // 3 16\n            // 12 cycles, 4 from load, 8 from concatenated data byte\n            Cpu.registerA = eightBitLoadSyncCycles(getConcatenatedDataByte());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0xfb: {\n            // EI\n            // 1 4\n            setInterrupts(true);\n            return 4;\n        }\n        /* No Opcode for: 0xFC, 0xFD */\n        case 0xfe: {\n            // CP d8\n            // 2 8\n            // Z 1 H C\n            // 4 cycles\n            cpARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xff: {\n            // RST 38H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x38;\n            return 8;\n        }\n    }\n    return -1;\n}\n\n// NOTE: Code is very verbose, and will have some copy pasta'd lines.\n\n// Syncing and Tracking executed cycles\nvar Cycles = /** @class */ (function () {\n    function Cycles() {\n    }\n    // An even number below the max 32 bit integer\n    Cycles.cyclesPerCycleSet = 2000000000;\n    Cycles.cycleSets = 0;\n    Cycles.cycles = 0;\n    return Cycles;\n}());\nfunction getCyclesPerCycleSet() {\n    return Cycles.cyclesPerCycleSet;\n}\nfunction getCycleSets() {\n    return Cycles.cycleSets;\n}\nfunction getCycles() {\n    return Cycles.cycles;\n}\n// Inlined because closure compiler inlines\nfunction trackCyclesRan(numberOfCycles) {\n    var cycles = Cycles.cycles;\n    cycles += numberOfCycles;\n    if (cycles >= Cycles.cyclesPerCycleSet) {\n        Cycles.cycleSets += 1;\n        cycles -= Cycles.cyclesPerCycleSet;\n    }\n    Cycles.cycles = cycles;\n}\n// Inlined because closure compiler inlines\nfunction resetCycles() {\n    Cycles.cyclesPerCycleSet = 2000000000;\n    Cycles.cycleSets = 0;\n    Cycles.cycles = 0;\n}\n// Sync other GB Components with the number of cycles\nfunction syncCycles(numberOfCycles) {\n    // Check if we did a DMA TRansfer, if we did add the cycles\n    if (Memory.DMACycles > 0) {\n        numberOfCycles += Memory.DMACycles;\n        Memory.DMACycles = 0;\n    }\n    // Finally, Add our number of cycles to the CPU Cycles\n    Cpu.currentCycles += numberOfCycles;\n    // Check other Gameboy components\n    if (!Cpu.isStopped) {\n        if (Config.graphicsBatchProcessing) {\n            // Need to do this, since a lot of things depend on the scanline\n            // Batch processing will simply return if the number of cycles is too low\n            Graphics.currentCycles += numberOfCycles;\n            batchProcessGraphics();\n        }\n        else {\n            updateGraphics(numberOfCycles);\n        }\n        if (Config.audioBatchProcessing) {\n            Sound.currentCycles += numberOfCycles;\n        }\n        else {\n            updateSound(numberOfCycles);\n        }\n        updateSerial(numberOfCycles);\n    }\n    if (Config.timersBatchProcessing) {\n        // Batch processing will simply return if the number of cycles is too low\n        Timers.currentCycles += numberOfCycles;\n        batchProcessTimers();\n    }\n    else {\n        updateTimers(numberOfCycles);\n    }\n    trackCyclesRan(numberOfCycles);\n}\n\n// Functions involving executing/running the emulator after initializtion\nvar Execute = /** @class */ (function () {\n    function Execute() {\n    }\n    // An even number bewlow the max 32 bit integer\n    Execute.stepsPerStepSet = 2000000000;\n    Execute.stepSets = 0;\n    Execute.steps = 0;\n    // Response Codes from Execute Conditions\n    Execute.RESPONSE_CONDITION_ERROR = -1;\n    Execute.RESPONSE_CONDITION_FRAME = 0;\n    Execute.RESPONSE_CONDITION_AUDIO = 1;\n    Execute.RESPONSE_CONDITION_BREAKPOINT = 2;\n    return Execute;\n}());\nfunction getStepsPerStepSet() {\n    return Execute.stepsPerStepSet;\n}\nfunction getStepSets() {\n    return Execute.stepSets;\n}\nfunction getSteps() {\n    return Execute.steps;\n}\n// Inlined because closure compiler inlines\nfunction trackStepsRan(steps) {\n    var esteps = Execute.steps;\n    esteps += steps;\n    if (esteps >= Execute.stepsPerStepSet) {\n        Execute.stepSets += 1;\n        esteps -= Execute.stepsPerStepSet;\n    }\n    Execute.steps = esteps;\n}\n// Inlined because closure compiler inlines\nfunction resetSteps() {\n    Execute.stepsPerStepSet = 2000000000;\n    Execute.stepSets = 0;\n    Execute.steps = 0;\n}\n// // Public funciton to run frames until,\n// the specified number of frames have run or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\nfunction executeMultipleFrames(numberOfFrames) {\n    var frameResponse = 0;\n    var framesRun = 0;\n    while (framesRun < numberOfFrames && frameResponse >= 0) {\n        frameResponse = executeFrame();\n        framesRun += 1;\n    }\n    if (frameResponse < 0) {\n        return frameResponse;\n    }\n    return 0;\n}\n// Public funciton to run opcodes until,\n// a frame is ready, or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\nfunction executeFrame() {\n    return executeUntilCondition(true, -1);\n}\n// Public Function to run opcodes until,\n// a frame is ready, audio bufer is filled, or error\nfunction executeFrameAndCheckAudio(maxAudioBuffer) {\n    if (maxAudioBuffer === void 0) { maxAudioBuffer = 0; }\n    return executeUntilCondition(true, maxAudioBuffer);\n}\n// Base function that executes steps, and checks conditions\n// Return values:\nfunction executeUntilCondition(checkMaxCyclesPerFrame, maxAudioBuffer) {\n    if (checkMaxCyclesPerFrame === void 0) { checkMaxCyclesPerFrame = true; }\n    if (maxAudioBuffer === void 0) { maxAudioBuffer = -1; }\n    // Common tracking variables\n    var numberOfCycles = -1;\n    var audioBufferSize = 1024;\n    if (maxAudioBuffer > 0) {\n        audioBufferSize = maxAudioBuffer;\n    }\n    else if (maxAudioBuffer < 0) {\n        audioBufferSize = -1;\n    }\n    var errorCondition = false;\n    var frameCondition = false;\n    var audioBufferCondition = false;\n    while (!errorCondition && !frameCondition && !audioBufferCondition && !Breakpoints.reachedBreakpoint) {\n        numberOfCycles = executeStep();\n        // Error Condition\n        if (numberOfCycles < 0) {\n            errorCondition = true;\n        }\n        else if (Cpu.currentCycles >= Cpu.MAX_CYCLES_PER_FRAME()) {\n            frameCondition = true;\n        }\n        else if (audioBufferSize > -1 && getNumberOfSamplesInAudioBuffer() >= audioBufferSize) {\n            audioBufferCondition = true;\n        }\n    }\n    // Find our exit reason\n    if (frameCondition) {\n        // Render a frame\n        // Reset our currentCycles\n        Cpu.currentCycles -= Cpu.MAX_CYCLES_PER_FRAME();\n        return Execute.RESPONSE_CONDITION_FRAME;\n    }\n    if (audioBufferCondition) {\n        return Execute.RESPONSE_CONDITION_AUDIO;\n    }\n    if (Breakpoints.reachedBreakpoint) {\n        Breakpoints.reachedBreakpoint = false;\n        return Execute.RESPONSE_CONDITION_BREAKPOINT;\n    }\n    // TODO: Boot ROM handling\n    // There was an error, return -1, and push the program counter back to grab the error opcode\n    Cpu.programCounter = u16Portable(Cpu.programCounter - 1);\n    return -1;\n}\n// Function to execute an opcode, and update other gameboy hardware.\n// http://www.codeslinger.co.uk/pages/projects/gameboy/beginning.html\nfunction executeStep() {\n    // Set has started to 1 since we ran a emulation step\n    setHasCoreStarted(true);\n    // Check if we are in the halt bug\n    if (Cpu.isHaltBug) {\n        // Need to not increment program counter,\n        // thus, running the next opcode twice\n        // E.g\n        // 0x76 - halt\n        // FA 34 12 - ld a,(1234)\n        // Becomes\n        // FA FA 34 ld a,(34FA)\n        // 12 ld (de),a\n        var haltBugOpcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n        // Execute opcode will handle the actual PC behavior\n        var haltBugCycles = executeOpcode$$1(haltBugOpcode);\n        syncCycles(haltBugCycles);\n        Cpu.exitHaltAndStop();\n    }\n    // Interrupts should be handled before reading an opcode\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n    var interruptCycles = checkInterrupts();\n    if (interruptCycles > 0) {\n        syncCycles(interruptCycles);\n    }\n    // Get the opcode, and additional bytes to be handled\n    // Number of cycles defaults to 4, because while we're halted, we run 4 cycles (according to matt :))\n    var numberOfCycles = 4;\n    var opcode = 0;\n    // If we are not halted or stopped, run instructions\n    // If we are halted, this will be skipped and just sync the 4 cycles\n    if (!Cpu.isHalted() && !Cpu.isStopped) {\n        opcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n        numberOfCycles = executeOpcode$$1(opcode);\n    }\n    // blarggFixes, don't allow register F to have the bottom nibble\n    Cpu.registerF = Cpu.registerF & 0xf0;\n    // Check if there was an error decoding the opcode\n    if (numberOfCycles <= 0) {\n        return numberOfCycles;\n    }\n    // Sync other GB Components with the number of cycles\n    syncCycles(numberOfCycles);\n    // Update our steps\n    trackStepsRan(1);\n    // Check if we reached the CPU breakpoint\n    if (Cpu.programCounter === Breakpoints.programCounter) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    return numberOfCycles;\n}\n\n// Imports\n// Grow our memory to the specified size\nif (memory.size() < WASMBOY_WASM_PAGES) {\n    memory.grow(WASMBOY_WASM_PAGES - memory.size());\n}\n// Function to track if the core has started\nvar hasStarted = false;\nfunction setHasCoreStarted(value) {\n    hasStarted = value;\n}\nfunction hasCoreStarted() {\n    return hasStarted;\n}\n// Function to configure & initialize wasmboy\nfunction config(enableBootRom, useGbcWhenAvailable, audioBatchProcessing, graphicsBatchProcessing, timersBatchProcessing, graphicsDisableScanlineRendering, audioAccumulateSamples, tileRendering, tileCaching, enableAudioDebugging) {\n    // TODO: depending on the boot rom, initialization may be different\n    // From: http://www.codeslinger.co.uk/pages/projects/gameboy/hardware.html\n    // All values default to zero in memory, so not setting them yet\n    // log('initializing (includeBootRom=$0)', 1, enableBootRom);\n    Config.enableBootRom = enableBootRom > 0;\n    Config.useGbcWhenAvailable = useGbcWhenAvailable > 0;\n    Config.audioBatchProcessing = audioBatchProcessing > 0;\n    Config.graphicsBatchProcessing = graphicsBatchProcessing > 0;\n    Config.timersBatchProcessing = timersBatchProcessing > 0;\n    Config.graphicsDisableScanlineRendering = graphicsDisableScanlineRendering > 0;\n    Config.audioAccumulateSamples = audioAccumulateSamples > 0;\n    Config.tileRendering = tileRendering > 0;\n    Config.tileCaching = tileCaching > 0;\n    Config.enableAudioDebugging = enableAudioDebugging > 0;\n    initialize();\n}\n// Function to initiialize the core\nfunction initialize() {\n    // Initialization variables from BGB\n    // First, try to switch to Gameboy Color Mode\n    // Get our GBC support from the cartridge header\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    var gbcType = eightBitLoadFromGBMemory(0x0143);\n    // Detecting GBC http://bgb.bircd.org/pandocs.htm#cgbregisters\n    if (gbcType === 0xc0 || (Config.useGbcWhenAvailable && gbcType === 0x80)) {\n        Cpu.GBCEnabled = true;\n    }\n    else {\n        Cpu.GBCEnabled = false;\n    }\n    // Call our respective classes intialization\n    initializeCpu();\n    initializeCartridge();\n    initializeDma();\n    initializeGraphics();\n    initializePalette();\n    initializeSound();\n    initializeInterrupts();\n    initializeTimers();\n    initializeSerial();\n    // Various Other Registers\n    if (Cpu.GBCEnabled) {\n        // Various other registers\n        eightBitStoreIntoGBMemory(0xff70, 0xf8);\n        eightBitStoreIntoGBMemory(0xff4f, 0xfe);\n        eightBitStoreIntoGBMemory(0xff4d, 0x7e);\n        eightBitStoreIntoGBMemory(0xff00, 0xcf);\n        eightBitStoreIntoGBMemory(0xff0f, 0xe1);\n        // 0xFFFF = 0x00\n        // Undocumented from Pandocs\n        eightBitStoreIntoGBMemory(0xff6c, 0xfe);\n        eightBitStoreIntoGBMemory(0xff75, 0x8f);\n    }\n    else {\n        eightBitStoreIntoGBMemory(0xff70, 0xff);\n        eightBitStoreIntoGBMemory(0xff4f, 0xff);\n        eightBitStoreIntoGBMemory(0xff4d, 0xff);\n        eightBitStoreIntoGBMemory(0xff00, 0xcf);\n        eightBitStoreIntoGBMemory(0xff0f, 0xe1);\n        // 0xFFFF = 0x00\n    }\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Reset our cycles ran\n    resetCycles();\n    resetSteps();\n}\n// Function to return if we are currently playing a GBC ROM\nfunction isGBC() {\n    return Cpu.GBCEnabled;\n}\n// Function to return an address to store into save state memory\n// this is to regulate our 20 slots\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// Inlined because closure compiler inlines\nfunction getSaveStateMemoryOffset(offset, saveStateSlot) {\n    // 50 bytes per save state memory partiton sli32\n    return WASMBOY_STATE_LOCATION + offset + 50 * saveStateSlot;\n}\n// Function to save state to memory for all of our classes\nfunction saveState() {\n    Cpu.saveState();\n    Graphics.saveState();\n    Interrupts.saveState();\n    Joypad.saveState();\n    Memory.saveState();\n    Timers.saveState();\n    Sound.saveState();\n    Channel1.saveState();\n    Channel2.saveState();\n    Channel3.saveState();\n    Channel4.saveState();\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Don't want to reset cycles here, as this does not reset the emulator\n}\n// Function to load state from memory for all of our classes\nfunction loadState() {\n    Cpu.loadState();\n    Graphics.loadState();\n    Interrupts.loadState();\n    Joypad.loadState();\n    Memory.loadState();\n    Timers.loadState();\n    Sound.loadState();\n    Channel1.loadState();\n    Channel2.loadState();\n    Channel3.loadState();\n    Channel4.loadState();\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Reset our cycles ran\n    resetCycles();\n    resetSteps();\n}\n\n// Functions to get information about the emulator for debugging purposes\nfunction getRegisterA() {\n    return Cpu.registerA;\n}\nfunction getRegisterB() {\n    return Cpu.registerB;\n}\nfunction getRegisterC() {\n    return Cpu.registerC;\n}\nfunction getRegisterD() {\n    return Cpu.registerD;\n}\nfunction getRegisterE() {\n    return Cpu.registerE;\n}\nfunction getRegisterH() {\n    return Cpu.registerH;\n}\nfunction getRegisterL() {\n    return Cpu.registerL;\n}\nfunction getRegisterF() {\n    return Cpu.registerF;\n}\nfunction getProgramCounter() {\n    return Cpu.programCounter;\n}\nfunction getStackPointer() {\n    return Cpu.stackPointer;\n}\nfunction getOpcodeAtProgramCounter() {\n    return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\n\n// Functions to debug graphical output\n// Some Simple internal getters\nfunction getLY() {\n    return Graphics.scanlineRegister;\n}\n// TODO: Render by tile, rather than by pixel\nfunction drawBackgroundMapToWasmMemory(showColor) {\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    // Bit 7 - LCD Display Enable (0=Off, 1=On)\n    // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 5 - Window Display Enable (0=Off, 1=On)\n    // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n    // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n    // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n    // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On)\n    // Get our seleted tile data memory location\n    var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n    if (Lcd.bgWindowTileDataSelect) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n    }\n    var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n    if (Lcd.bgTileMapDisplaySelect) {\n        tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n    }\n    for (var y = 0; y < 256; y++) {\n        for (var x = 0; x < 256; x++) {\n            // Get our current Y\n            var pixelYPositionInMap = y;\n            // Get our Current X position of our pixel on the on the 160x144 camera\n            // this is done by getting the current scroll X position,\n            // and adding it do what X Value the scanline is drawing on the camera.\n            var pixelXPositionInMap = x;\n            // Divide our pixel position by 8 to get our tile.\n            // Since, there are 256x256 pixels, and 32x32 tiles.\n            // 256 / 8 = 32.\n            // Also, bitshifting by 3, do do a division by 8\n            // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n            var tileXPositionInMap = pixelXPositionInMap >> 3;\n            var tileYPositionInMap = pixelYPositionInMap >> 3;\n            // Get our tile address on the tileMap\n            // NOTE: (tileMap represents where each tile is displayed on the screen)\n            // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n            // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n            // And we have x pixel 160. 160 / 8 = 20.\n            // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n            // Think like indexing a 2d array, as a 1d array and it make sense :)\n            var tileMapAddress = tileMapMemoryLocation + tileYPositionInMap * 32 + tileXPositionInMap;\n            // Get the tile Id on the Tile Map\n            var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n            // Now get our tileDataAddress for the corresponding tileID we found in the map\n            // Read the comments in _getTileDataAddress() to see what's going on.\n            // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n            // This funcitons returns the start of memory locaiton for the tile 'c'.\n            var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n            // Now we can process the the individual bytes that represent the pixel on a tile\n            // Get the y pixel of the 8 by 8 tile.\n            // Simply modulo the scanline.\n            // For instance, let's say we are printing the first line of pixels on our camera,\n            // And the first line of pixels on our tile.\n            // yPixel = 1. 1 % 8 = 1.\n            // And for the last line\n            // yPixel = 144. 144 % 8 = 0.\n            // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n            // Because remember, we are counting lines on the display NOT including zero\n            var pixelYInTile = pixelYPositionInMap % 8;\n            // Same logic as pixelYInTile.\n            // However, We need to reverse our byte,\n            // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n            // Therefore, is pixelX was 2, then really is need to be 5\n            // So 2 - 7 = -5, * 1 = 5\n            // Or to simplify, 7 - 2 = 5 haha!\n            var pixelXInTile = pixelXPositionInMap % 8;\n            pixelXInTile = 7 - pixelXInTile;\n            // Get the GB Map Attributes\n            // Bit 0-2  Background Palette number  (BGP0-7)\n            // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n            // Bit 4    Not used\n            // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n            // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n            // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n            var bgMapAttributes = 0;\n            if (Cpu.GBCEnabled && showColor > 0) {\n                bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n            }\n            if (checkBitOnByte(6, bgMapAttributes)) {\n                // We are mirroring the tile, therefore, we need to opposite byte\n                // So if our pizel was 0 our of 8, it wild become 7 :)\n                // TODO: This may be wrong :p\n                pixelYInTile = 7 - pixelYInTile;\n            }\n            // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n            // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n            // But we need to load the time from a specific Vram bank\n            var vramBankId = 0;\n            if (checkBitOnByte(3, bgMapAttributes)) {\n                vramBankId = 1;\n            }\n            // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n            // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n            // Again, think like you had to map a 2d array as a 1d.\n            var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n            var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId);\n            // Now we can get the color for that pixel\n            // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n            // To Get the color Id.\n            // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n            // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n            var paletteColorId = 0;\n            if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n                // Byte one represents the second bit in our color id, so bit shift\n                paletteColorId += 1;\n                paletteColorId = paletteColorId << 1;\n            }\n            if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n                paletteColorId += 1;\n            }\n            // FINALLY, RENDER THAT PIXEL!\n            var pixelStart = (y * 256 + x) * 3;\n            if (Cpu.GBCEnabled && showColor > 0) {\n                // Finally lets add some, C O L O R\n                // Want the botom 3 bits\n                var bgPalette = bgMapAttributes & 0x07;\n                // Call the helper function to grab the correct color from the palette\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false);\n                // Split off into red green and blue\n                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                var blue = getColorComponentFromRgb(2, rgbColorPalette);\n                var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n                store(offset, red);\n                store(offset + 1, green);\n                store(offset + 2, blue);\n            }\n            else {\n                // Only rendering camera for now, so coordinates are for the camera.\n                // Get the rgb value for the color Id, will be repeated into R, G, B (if not colorized)\n                var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n                var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n                // Red\n                store(offset + 0, getRedFromHexColor(hexColor));\n                // Green\n                store(offset + 1, getGreenFromHexColor(hexColor));\n                // Blue\n                store(offset + 2, getBlueFromHexColor(hexColor));\n            }\n        }\n    }\n}\nfunction drawTileDataToWasmMemory() {\n    for (var tileDataMapGridY = 0; tileDataMapGridY < 0x17; tileDataMapGridY++) {\n        for (var tileDataMapGridX = 0; tileDataMapGridX < 0x1f; tileDataMapGridX++) {\n            // Get Our VramBankID\n            var vramBankId = 0;\n            if (tileDataMapGridX > 0x0f) {\n                vramBankId = 1;\n            }\n            // Get our tile ID\n            var tileId = tileDataMapGridY;\n            if (tileDataMapGridY > 0x0f) {\n                tileId -= 0x0f;\n            }\n            tileId = tileId << 4;\n            if (tileDataMapGridX > 0x0f) {\n                tileId = tileId + (tileDataMapGridX - 0x0f);\n            }\n            else {\n                tileId = tileId + tileDataMapGridX;\n            }\n            // Finally get our tile Data location\n            var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n            if (tileDataMapGridY > 0x0f) {\n                tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n            }\n            // Let's see if we have C O L O R\n            // Set the map and sprite attributes to -1\n            // Meaning, we will draw monochrome\n            var paletteLocation = Graphics.memoryLocationBackgroundPalette;\n            var bgMapAttributes = -1;\n            var spriteAttributes = -1;\n            // Let's see if the tile is being used by a sprite\n            for (var spriteRow = 0; spriteRow < 8; spriteRow++) {\n                for (var spriteColumn = 0; spriteColumn < 5; spriteColumn++) {\n                    var spriteIndex = spriteColumn * 8 + spriteRow;\n                    // Sprites occupy 4 bytes in the sprite attribute table\n                    var spriteTableIndex = spriteIndex * 4;\n                    var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2);\n                    if (tileId === spriteTileId) {\n                        var currentSpriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n                        var spriteVramBankId = 0;\n                        if (Cpu.GBCEnabled && checkBitOnByte(3, currentSpriteAttributes)) {\n                            spriteVramBankId = 1;\n                        }\n                        if (spriteVramBankId === vramBankId) {\n                            spriteAttributes = currentSpriteAttributes;\n                            spriteRow = 8;\n                            spriteColumn = 5;\n                            // Set our paletteLocation\n                            paletteLocation = Graphics.memoryLocationSpritePaletteOne;\n                            if (checkBitOnByte(4, spriteAttributes)) {\n                                paletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                            }\n                        }\n                    }\n                }\n            }\n            // If we didn't find a sprite,\n            // Let's see if the tile is on the bg tile map\n            // If so, use that bg map for attributes\n            if (Cpu.GBCEnabled && spriteAttributes < 0) {\n                var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n                if (Lcd.bgTileMapDisplaySelect) {\n                    tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n                }\n                // Loop through the tileMap, and find if we have our current ID\n                var foundTileMapAddress = -1;\n                for (var x = 0; x < 32; x++) {\n                    for (var y = 0; y < 32; y++) {\n                        var tileMapAddress = tileMapMemoryLocation + y * 32 + x;\n                        var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n                        // Check if we found our tileId\n                        if (tileId === tileIdFromTileMap) {\n                            foundTileMapAddress = tileMapAddress;\n                            x = 32;\n                            y = 32;\n                        }\n                    }\n                }\n                if (foundTileMapAddress >= 0) {\n                    bgMapAttributes = loadFromVramBank(foundTileMapAddress, 1);\n                }\n            }\n            // Draw each Y line of the tile\n            for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n                drawPixelsFromLineOfTile(tileId, // tileId\n                tileDataMemoryLocation, // Graphics.memoryLocationTileDataSelect\n                vramBankId, // Vram Bank\n                0, // Tile Line X Start\n                7, // Tile Line X End\n                tileLineY, // Tile Line Y\n                tileDataMapGridX * 8, // Output line X\n                tileDataMapGridY * 8 + tileLineY, // Output line Y\n                0x1f * 8, // Output Width\n                TILE_DATA_LOCATION, // Wasm Memory Start\n                false, // shouldRepresentMonochromeColorByColorId\n                paletteLocation, // paletteLocation\n                bgMapAttributes, // bgMapAttributes\n                spriteAttributes // spriteAttributes\n                );\n            }\n        }\n    }\n}\nfunction drawOamToWasmMemory() {\n    // Draw all 40 sprites\n    // Going to be like BGB and do 8 x 5 sprites\n    for (var spriteRow = 0; spriteRow < 8; spriteRow++) {\n        for (var spriteColumn = 0; spriteColumn < 5; spriteColumn++) {\n            var spriteIndex = spriteColumn * 8 + spriteRow;\n            // Sprites occupy 4 bytes in the sprite attribute table\n            var spriteTableIndex = spriteIndex * 4;\n            // Y positon is offset by 16, X position is offset by 8\n            var spriteYPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex);\n            var spriteXPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 1);\n            var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2);\n            var tilesToDraw = 1;\n            if (Lcd.tallSpriteSize) {\n                // @binji says in 8x16 mode, even tileId always drawn first\n                // This will fix shantae sprites which always uses odd numbered indexes\n                // TODO: Do the actual Pandocs thing:\n                // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n                // So just knock off the last bit? :)\n                if (spriteTileId % 2 === 1) {\n                    spriteTileId -= 1;\n                }\n                tilesToDraw += 1;\n            }\n            // Get our sprite attributes since we know we shall be drawing the tile\n            var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n            // Find which VRAM Bank to load from\n            var vramBankId = 0;\n            if (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes)) {\n                vramBankId = 1;\n            }\n            // Find which monochrome palette we should use\n            var paletteLocation = Graphics.memoryLocationSpritePaletteOne;\n            if (checkBitOnByte(4, spriteAttributes)) {\n                paletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n            }\n            // Start Drawing our tiles\n            for (var i = 0; i < tilesToDraw; i++) {\n                // Draw each Y line of the tile\n                for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n                    drawPixelsFromLineOfTile(spriteTileId + i, // tileId\n                    Graphics.memoryLocationTileDataSelectOneStart, // Graphics.memoryLocationTileDataSelect\n                    vramBankId, // VRAM Bank\n                    0, // Tile Line X Start\n                    7, // Tile Line X End\n                    tileLineY, // Tile Line Y\n                    spriteRow * 8, // Output line X\n                    spriteColumn * 16 + tileLineY + i * 8, // Output line Y\n                    8 * 8, // Output Width\n                    OAM_TILES_LOCATION, // Wasm Memory Start\n                    false, // shouldRepresentMonochromeColorByColorId\n                    paletteLocation, // paletteLocation\n                    -1, // bgMapAttributes\n                    spriteAttributes // spriteAttributes\n                    );\n                }\n            }\n        }\n    }\n}\n\nfunction getDIV() {\n    return Timers.dividerRegister;\n}\nfunction getTIMA() {\n    return Timers.timerCounter;\n}\nfunction getTMA() {\n    return Timers.timerModulo;\n}\nfunction getTAC() {\n    var response = Timers.timerInputClock;\n    if (Timers.timerEnabled) {\n        response = setBitOnByte(2, response);\n    }\n    return response;\n}\n\n// Functions to debug internal gameboy memory\nfunction updateDebugGBMemory() {\n    for (var i = 0; i < DEBUG_GAMEBOY_MEMORY_SIZE; i++) {\n        store(DEBUG_GAMEBOY_MEMORY_LOCATION + i, eightBitLoadFromGBMemoryWithTraps(i));\n    }\n    // Since we are debugging, we don't want to be responsible for tripping the breakpoints\n    Breakpoints.reachedBreakpoint = false;\n}\n\n// Public Exports\n\nexport { config, hasCoreStarted, saveState, loadState, isGBC, getStepsPerStepSet, getStepSets, getSteps, executeMultipleFrames, executeFrame, executeFrameAndCheckAudio, executeUntilCondition, executeStep, getCyclesPerCycleSet, getCycleSets, getCycles, setJoypadState, getNumberOfSamplesInAudioBuffer, clearAudioBuffer, setManualColorizationPalette, WASMBOY_MEMORY_LOCATION, WASMBOY_MEMORY_SIZE, WASMBOY_WASM_PAGES, ASSEMBLYSCRIPT_MEMORY_LOCATION, ASSEMBLYSCRIPT_MEMORY_SIZE, WASMBOY_STATE_LOCATION, WASMBOY_STATE_SIZE, GAMEBOY_INTERNAL_MEMORY_LOCATION, GAMEBOY_INTERNAL_MEMORY_SIZE, VIDEO_RAM_LOCATION, VIDEO_RAM_SIZE, WORK_RAM_LOCATION, WORK_RAM_SIZE, OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION, OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE, GRAPHICS_OUTPUT_LOCATION, GRAPHICS_OUTPUT_SIZE, GBC_PALETTE_LOCATION, GBC_PALETTE_SIZE, BG_PRIORITY_MAP_LOCATION, BG_PRIORITY_MAP_SIZE, FRAME_LOCATION, FRAME_SIZE, BACKGROUND_MAP_LOCATION, BACKGROUND_MAP_SIZE, TILE_DATA_LOCATION, TILE_DATA_SIZE, OAM_TILES_LOCATION, OAM_TILES_SIZE, AUDIO_BUFFER_LOCATION, AUDIO_BUFFER_SIZE, CHANNEL_1_BUFFER_LOCATION, CHANNEL_1_BUFFER_SIZE, CHANNEL_2_BUFFER_LOCATION, CHANNEL_2_BUFFER_SIZE, CHANNEL_3_BUFFER_LOCATION, CHANNEL_3_BUFFER_SIZE, CHANNEL_4_BUFFER_LOCATION, CHANNEL_4_BUFFER_SIZE, CARTRIDGE_RAM_LOCATION, CARTRIDGE_RAM_SIZE, CARTRIDGE_ROM_LOCATION, CARTRIDGE_ROM_SIZE, DEBUG_GAMEBOY_MEMORY_LOCATION, DEBUG_GAMEBOY_MEMORY_SIZE, getWasmBoyOffsetFromGameBoyOffset, setProgramCounterBreakpoint, resetProgramCounterBreakpoint, setReadGbMemoryBreakpoint, resetReadGbMemoryBreakpoint, setWriteGbMemoryBreakpoint, resetWriteGbMemoryBreakpoint, getRegisterA, getRegisterB, getRegisterC, getRegisterD, getRegisterE, getRegisterH, getRegisterL, getRegisterF, getProgramCounter, getStackPointer, getOpcodeAtProgramCounter, getLY, drawBackgroundMapToWasmMemory, drawTileDataToWasmMemory, drawOamToWasmMemory, getDIV, getTIMA, getTMA, getTAC, updateDebugGBMemory };\n","import * as WasmBoyCore from '../../dist/core/core.esm';\n\nconst getWasmBoyTsCore = async () => {\n  const response = {\n    instance: {\n      exports: WasmBoyCore\n    },\n    byteMemory: WasmBoyCore.memory.wasmByteMemory,\n    type: 'TypeScript'\n  };\n  return response;\n};\n\nexport default getWasmBoyTsCore;\n"],"names":["setFlagBit","flagBit","flagValue","bitwiseOperand","Cpu","setZeroFlag$$1","value","setSubtractFlag","setHalfCarryFlag","setCarryFlag","getZeroFlag$$1","getCarryFlag$$1","checkAndSetEightBitHalfCarryFlag","amountToAdd","Math","checkAndSetEightBitCarryFlag","checkAndSetSixteenBitFlagsAddOverflow","valueOne","valueTwo","useStackPointerBits","flagXor","result","setManualColorizationPalette","colorizationId","Colors","WasmBoyGBColors","BrownColors","RedColors","DarkBrownColors","GreenColors","DarkGreenColors","InvertedColors","PastelMixColors","OrangeColors","YellowColors","BlueColors","DarkBlueColors","GrayscaleColors","concatenateBytes","highByte","lowByte","splitHighByte","groupedByte","resetBitOnByte","bitPosition","byte","checkBitOnByte","getColorizedGbHexColorFromPalette","colorId","paletteMemoryLocation","color","eightBitLoadFromGBMemory","Palette","hexColor","getRgbColorFromPalette","paletteId","isSprite","paletteIndex","paletteHighByte","loadPaletteByteFromWasmMemory","paletteLowByte","getColorComponentFromRgb","colorRgb","paletteIndexByte","wasmByteMemory","GBC_PALETTE_LOCATION","addPriorityforPixel","x","y","hasGbcBgPriority","bgPriorityByte","BG_PRIORITY_MAP_LOCATION","drawPixelsFromLineOfTile","tileId","tileDataMemoryLocation","vramBankId","tileLineXStart","tileLineXEnd","tileLineY","outputLineX","outputLineY","outputWidth","wasmMemoryStart","shouldRepresentMonochromeColorByColorId","paletteLocation","bgMapAttributes","spriteAttributes","pixelsDrawn","tileDataAddress","getTileDataAddress","byteOneForLineOfTilePixels","loadFromVramBank","byteTwoForLineOfTilePixels","iteratedOutputX","pixelXInTile","paletteColorId","bgPalette","rgbColorPalette","red","green","blue","Graphics","shouldRepresentColorByColorId","rgbColor","gbcBgPriority","tileIdFromTileMap","isDutyCycleClockPositiveOrNegativeForWaveform","channelDuty","waveFormPositionOnDuty","calculateSweepAndCheckOverflow","newFrequency","getNewFrequencyFromSweep","Channel1","oldFrequency","didChannelDacChange","channelNumber","isDacEnabled","channel1Enabled","SoundAccumulator","Channel2","channel2Enabled","Channel3","channel3Enabled","Channel4","channel4Enabled","batchProcessAudio","batchProcessCycles","Sound","updateSound","numberOfCycles","maxFrameSequenceCycles","frameSequenceCycleCounter","frameSequencer","Config","frameSequencerUpdated","channel1WillUpdate","channel2WillUpdate","channel3WillUpdate","channel4WillUpdate","downSampleCycleCounter","maxDownSampleCycles","mixChannelSamples","setLeftAndRightOutputForAudioQueue","AUDIO_BUFFER_LOCATION","audioQueueIndex","channel1Sample","channel2Sample","channel3Sample","channel4Sample","mixedSample","leftChannelSampleUnsignedByte","CHANNEL_1_BUFFER_LOCATION","CHANNEL_2_BUFFER_LOCATION","CHANNEL_3_BUFFER_LOCATION","CHANNEL_4_BUFFER_LOCATION","getNumberOfSamplesInAudioBuffer","clearAudioBuffer","leftChannelSample","rightChannelSample","getSampleAsUnsignedByte","rightChannelSampleUnsignedByte","sample","mixerVolume","convertedSample","precision","leftVolume","rightVolume","bufferLocation","audioQueueOffset","_handleInterrupt","setInterrupts","interruptRequest","Interrupts","eightBitStoreIntoGBMemory","offset","_requestInterrupt","updateTimers","cyclesIncreased","oldDividerRegister","Timers","curDividerRegister","timerCounterWasReset","_checkDividerRegisterFallingEdgeDetector","_incrementTimerCounter","counter","newDividerRegister","timerCounterMaskBit","_getTimerCounterMaskBit","timerInputClock","_pressJoypadButton","buttonId","isButtonStateChanging","_getJoypadButtonStateFromButtonId","_setJoypadButtonStateFromButtonId","isDpadTypeButton","shouldRequestInterrupt","Joypad","isPressed","hdmaTransfer","hdmaSource","hdmaDestination","transferLength","i","sourceByte","eightBitLoadFromGBMemoryWithTraps","hdmaDestinationWithWrapping","eightBitStoreIntoGBMemoryWithTraps","Memory","checkWriteTraps","videoRamLocation","spriteInformationTableLocation","isMBC1","isMBC2","romEnableByte","isMBC5","currentRomBank","romBankLowerBits","ramBankBits","Lcd","Serial","SoundRegisterWriteTraps","sourceAddress","spriteInformationByte","hdmaTriggerByte","hdmaSourceHigh","hdmaSourceLow","hdmaDestinationHigh","hdmaDestinationLow","hblankHdmaSource","memoryLocationSpritePaletteData","getWasmBoyOffsetFromGameBoyOffset","gameboyOffset","CARTRIDGE_ROM_LOCATION","WASMBOY_STATE_LOCATION","CARTRIDGE_RAM_LOCATION","VIDEO_RAM_LOCATION","wramBankId","WORK_RAM_LOCATION","Breakpoints","resetLcd","shouldBlankScreen","lcdStatus","FRAME_SIZE","FRAME_LOCATION","checkCoincidence","lcdMode","drawBackgroundWindowScanline","scanlineRegister","tileMapMemoryLocation","pixelYPositionInMap","iStart","xOffset","tileYPositionInMap","pixelXPositionInMap","tileMapAddress","usedTileCache","nextXIndexToPerformCacheCheck","TileCache","yPixel","xPixel","wasLastTileHorizontallyFlipped","isCurrentTileHorizontallyFlipped","tileCacheIndex","xPos","previousXPixel","previousTilePixelLocation","setPixelOnFrame","pixelPriority","xOffsetTileWidthRemainder","tileXStart","tileXEnd","pixelYInTile","updateGraphics","graphicsDisableScanlineRendering","_drawScanline","newLcdMode","scanlineCycleCounter","MIN_CYCLES_SPRITES_LCD_MODE","bytesToTransfer","hblankHdmaTransferLengthRemaining","memoryLocationHdmaTrigger","windowX","windowY","param","spriteTableIndex","index","spriteYPosition","spriteXPosition","spriteTileId","spriteHeight","useLargerSprites","isSpritePriorityBehindWindowAndBackground","flipSpriteY","flipSpriteX","currentSpriteLine","spriteTileAddressStart","spriteDataByteOneForLineOfTilePixels","spriteTileAddress","spriteDataByteTwoForLineOfTilePixels","tilePixel","spritePixelXInTile","spriteColorId","spriteXPixelLocationInCameraView","shouldShowFromLcdcPriority","shouldHideFromOamPriority","shouldHideFromBgPriority","bgColorFromPriorityByte","spritePaletteLocation","checkReadTraps","response","currentSpeedSwitchRegister","SoundRegisterReadTraps","upperDividerRegisterBits","joypadRegister","readTrapResult","loadBooleanDirectlyFromWasmMemory","addARegister","register","registerA","addAThroughCarryRegister","overflowedResult","subARegister","negativeRegister","subAThroughCarryRegister","andARegister","xorARegister","orARegister","cpARegister","testBitOnRegister","setBitOnRegister","bitValue","setByte","relativeJump","programCounter","executeOpcode$$1","opcode","handleOpcode0x","handleOpcode1x","handleOpcode2x","handleOpcode3x","handleOpcode4x","handleOpcode5x","handleOpcode6x","handleOpcode7x","handleOpcode8x","handleOpcode9x","handleOpcodeAx","handleOpcodeBx","handleOpcodeCx","handleOpcodeDx","handleOpcodeEx","handleOpcodeFx","eightBitLoadSyncCycles","syncCycles","eightBitStoreSyncCycles","sixteenBitLoadSyncCycles","lowByteReadTrapResult","nextOffset","highByteReadTrapResult","sixteenBitStoreSyncCycles","getDataByteOne","getConcatenatedDataByte","getDataByteTwo","concatenatedDataByte","registerBC3","registerB","registerHL","registerBC9","registerBCB","registerC","speedSwitch","registerDE3","registerD","hasHighbit","registerDE9","registerDEA","registerDEB","registerE","hasLowBit","sixteenBitDataByte","registerHL2","registerHL3","registerH","adjustment","adjustedRegister","registerHL9","registerHLA","registerHLB","registerL","registerHL4","valueAtHL4","incrementer","registerHL5","valueAtHL5","valueAtHL6","valueAtHLE","stackPointer","registerBC1","handledOpcode","instructionRegisterValue","instructionRegisterResult","registerNumber","cbOpcode","opcodeHighNibble","hasLowbit","registerDE1","largeDataByteOne","registerHL1","signedDataByteOne","registerAF1","oldCycles","curCycles","maskBit","newCycles","memoryLocationSerialTransferData","transferData","numberOfBitsTransferred","memoryLocationSerialTransferControl","transferControl","cycles","Cycles","executeFrame","executeUntilCondition","checkMaxCyclesPerFrame","maxAudioBuffer","audioBufferSize","errorCondition","frameCondition","audioBufferCondition","executeStep","Execute","hasStarted","haltBugOpcode","haltBugCycles","wasInterruptHandled","interuptHandlerCycles","interruptCycles","esteps","steps","Uint8ClampedArray","wasmboyMemorySize","memory","size","grow","GAMEBOY_INTERNAL_MEMORY_SIZE","OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION","GBC_PALETTE_SIZE","BG_PRIORITY_MAP_SIZE","BACKGROUND_MAP_LOCATION","TILE_DATA_LOCATION","BACKGROUND_MAP_SIZE","OAM_TILES_LOCATION","TILE_DATA_SIZE","GRAPHICS_OUTPUT_LOCATION","GRAPHICS_OUTPUT_SIZE","OAM_TILES_SIZE","CHANNEL_1_BUFFER_SIZE","CHANNEL_2_BUFFER_SIZE","CHANNEL_3_BUFFER_SIZE","CHANNEL_4_BUFFER_SIZE","AUDIO_BUFFER_SIZE","CARTRIDGE_RAM_SIZE","DEBUG_GAMEBOY_MEMORY_LOCATION","CARTRIDGE_ROM_SIZE","WASMBOY_MEMORY_SIZE","DEBUG_GAMEBOY_MEMORY_SIZE","WASMBOY_WASM_PAGES","Table00Entry08Colors","Table01Entry0BColors","Table01Entry10Colors","Table03Entry0AColors","Table05Entry00Colors","Table05Entry01Colors","Table05Entry02Colors","Table05Entry08Colors","Table05Entry09Colors","Table05Entry11Colors","Table05Entry14Colors","Table05Entry15Colors","Channel1.updateNRx0","Channel1.updateNRx1","Channel1.updateNRx2","Channel1.updateNRx3","Channel1.updateNRx4","Channel1.saveState","Channel1.loadState","Channel1.initialize","Channel1.getSampleFromCycleCounter","accumulatedCycles","Channel1.resetTimer","frequencyTimer","Channel1.getSample","overflowAmount","outputVolume","Channel1.trigger","Channel1.willChannelUpdate","cycleCounter","Channel1.updateSweep","sweepCounter","Channel1.updateLength","lengthCounter","Channel1.updateEnvelope","envelopeCounter","volume","Channel1.setFrequency","frequency","passedFrequencyHighBits","passedFrequencyLowBits","newRegister4","Channel2.updateNRx1","Channel2.updateNRx2","Channel2.updateNRx3","Channel2.updateNRx4","Channel2.saveState","Channel2.loadState","Channel2.initialize","Channel2.getSampleFromCycleCounter","Channel2.resetTimer","Channel2.getSample","Channel2.trigger","Channel2.willChannelUpdate","Channel2.updateLength","Channel2.updateEnvelope","Channel2.setFrequency","Channel3.updateNRx0","Channel3.updateNRx1","Channel3.updateNRx2","Channel3.updateNRx3","Channel3.updateNRx4","Channel3.saveState","Channel3.loadState","Channel3.initialize","Channel3.getSampleFromCycleCounter","Channel3.resetTimer","Channel3.getSample","volumeCode","waveTablePosition","Channel3.trigger","Channel3.willChannelUpdate","Channel3.updateLength","Channel4.updateNRx1","Channel4.updateNRx2","Channel4.updateNRx3","divisorCode","Channel4.updateNRx4","Channel4.saveState","Channel4.loadState","Channel4.initialize","Channel4.getSampleFromCycleCounter","Channel4.getSample","linearFeedbackShiftRegister","xorLfsrBitZeroOne","Channel4.trigger","Channel4.willChannelUpdate","Channel4.getNoiseChannelFrequencyPeriod","Channel4.updateLength","Channel4.updateEnvelope","Sound.batchProcessCycles","Sound.updateNR50","Sound.updateNR51","Sound.updateNR52","Sound.maxFrameSequenceCycles","Sound.maxDownSampleCycles","Sound.saveState","Sound.loadState","Interrupts.updateInterruptEnabled","Interrupts.updateInterruptRequested","Interrupts.areInterruptsPending","Interrupts.saveState","Interrupts.loadState","Timers.batchProcessCycles","Timers.updateDividerRegister","Timers.updateTimerCounter","Timers.updateTimerModulo","Timers.updateTimerControl","oldTimerEnabled","newTimerInputClock","oldTimerCounterMaskBit","newTimerCounterMaskBit","dividerRegister","Timers.saveState","Timers.loadState","Serial.updateTransferControl","Joypad.updateJoypad","Joypad.saveState","Joypad.loadState","Lcd.updateLcdStatus","currentLcdStatus","Lcd.updateLcdControl","wasLcdEnabled","Graphics.batchProcessCycles","Graphics.MAX_CYCLES_PER_SCANLINE","Graphics.MIN_CYCLES_SPRITES_LCD_MODE","Graphics.MIN_CYCLES_TRANSFER_DATA_LCD_MODE","Graphics.saveState","Graphics.loadState","Memory.saveState","Memory.loadState","Cpu.CLOCK_SPEED","Cpu.MAX_CYCLES_PER_FRAME","Cpu.enableHalt","Cpu.exitHaltAndStop","Cpu.isHalted","Cpu.saveState","Cpu.loadState","config","enableBootRom","useGbcWhenAvailable","audioBatchProcessing","graphicsBatchProcessing","timersBatchProcessing","audioAccumulateSamples","tileRendering","tileCaching","enableAudioDebugging","gbcType","cartridgeType","titleChecksum","hasCoreStarted","saveState","loadState","isGBC","getStepsPerStepSet","getStepSets","getSteps","executeMultipleFrames","numberOfFrames","frameResponse","framesRun","executeFrameAndCheckAudio","getCyclesPerCycleSet","getCycleSets","getCycles","setJoypadState","up","right","down","left","a","b","select","start","WASMBOY_MEMORY_LOCATION","ASSEMBLYSCRIPT_MEMORY_LOCATION","ASSEMBLYSCRIPT_MEMORY_SIZE","WASMBOY_STATE_SIZE","VIDEO_RAM_SIZE","WORK_RAM_SIZE","OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE","setProgramCounterBreakpoint","breakpoint","resetProgramCounterBreakpoint","setReadGbMemoryBreakpoint","resetReadGbMemoryBreakpoint","setWriteGbMemoryBreakpoint","resetWriteGbMemoryBreakpoint","getRegisterA","getRegisterB","getRegisterC","getRegisterD","getRegisterE","getRegisterH","getRegisterL","getRegisterF","getProgramCounter","getStackPointer","getOpcodeAtProgramCounter","getLY","drawBackgroundMapToWasmMemory","showColor","pixelStart","drawTileDataToWasmMemory","tileDataMapGridY","tileDataMapGridX","spriteRow","spriteColumn","currentSpriteAttributes","spriteVramBankId","foundTileMapAddress","drawOamToWasmMemory","tilesToDraw","getDIV","getTIMA","getTMA","getTAC","updateDebugGBMemory","getWasmBoyTsCore","instance","exports","WasmBoyCore","byteMemory","type"],"mappings":"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"}