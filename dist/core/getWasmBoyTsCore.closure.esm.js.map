{"version":3,"file":"getWasmBoyTsCore.closure.esm.js","sources":["core.esm.js","../../core/portable/getTsCore.js"],"sourcesContent":["// Banner placed by rollup to mock out some items on our esm build\n// This is useful for things like wasmmemory\n\nconst wasmboyMemorySize = 0x8b0000;\n\n// Simply initialized to the size we need\nconst wasmByteMemory = new Uint8ClampedArray(wasmboyMemorySize);\n\n// Memory mock\nexport const memory = {\n  size: () => {\n    return wasmboyMemorySize;\n  },\n  grow: () => {},\n  wasmByteMemory: wasmByteMemory\n};\n\nconst load = offset => {\n  return wasmByteMemory[offset];\n};\n\nconst store = (offset, value) => {\n  wasmByteMemory[offset] = value;\n};\n\nconst abs = value => {\n  return Math.abs(value);\n};\n\nconst ceil = value => {\n  return Math.ceil(value);\n};\n\n// Constants that will be shared by the wasm core of the emulator\n// And libraries built around the wasm (such as the official JS), or @CryZe wasmboy-rs\n// ----------------------------------\n// Wasmboy Memory Map\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// ----------------------------------\n// AssemblyScript\nvar ASSEMBLYSCRIPT_MEMORY_LOCATION = 0x000000;\nvar ASSEMBLYSCRIPT_MEMORY_SIZE = 0x000400;\n// WasmBoy States\nvar WASMBOY_STATE_LOCATION = ASSEMBLYSCRIPT_MEMORY_LOCATION + ASSEMBLYSCRIPT_MEMORY_SIZE;\nvar WASMBOY_STATE_SIZE = 0x000400;\n// Gameboy Internal Memory\nvar VIDEO_RAM_LOCATION = WASMBOY_STATE_LOCATION + WASMBOY_STATE_SIZE;\nvar VIDEO_RAM_SIZE = 0x004000;\nvar WORK_RAM_LOCATION = VIDEO_RAM_LOCATION + VIDEO_RAM_SIZE;\nvar WORK_RAM_SIZE = 0x008000;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION = WORK_RAM_LOCATION + WORK_RAM_SIZE;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE = 0x004000;\n// General Gameboy Internal Memory\nvar GAMEBOY_INTERNAL_MEMORY_LOCATION = VIDEO_RAM_LOCATION;\nvar GAMEBOY_INTERNAL_MEMORY_SIZE = OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION - VIDEO_RAM_LOCATION + OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE;\n// Graphics Output\nvar GBC_PALETTE_LOCATION = OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION + OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE;\nvar GBC_PALETTE_SIZE = 0x000080;\nvar BG_PRIORITY_MAP_LOCATION = GBC_PALETTE_LOCATION + GBC_PALETTE_SIZE;\nvar BG_PRIORITY_MAP_SIZE = 0x005c00;\nvar FRAME_LOCATION = BG_PRIORITY_MAP_LOCATION + BG_PRIORITY_MAP_SIZE;\nvar FRAME_SIZE = 0x016c00;\nvar BACKGROUND_MAP_LOCATION = FRAME_LOCATION + FRAME_SIZE;\nvar BACKGROUND_MAP_SIZE = 0x030000;\nvar TILE_DATA_LOCATION = BACKGROUND_MAP_LOCATION + BACKGROUND_MAP_SIZE;\nvar TILE_DATA_SIZE = 0x024000;\nvar OAM_TILES_LOCATION = TILE_DATA_LOCATION + TILE_DATA_SIZE;\nvar OAM_TILES_SIZE = 0x003c00;\n// General Graphics Output\nvar GRAPHICS_OUTPUT_LOCATION = GBC_PALETTE_LOCATION;\nvar GRAPHICS_OUTPUT_SIZE = OAM_TILES_LOCATION - GBC_PALETTE_LOCATION + OAM_TILES_SIZE;\n// Audio Output\nvar CHANNEL_1_BUFFER_LOCATION = OAM_TILES_LOCATION + OAM_TILES_SIZE;\nvar CHANNEL_1_BUFFER_SIZE = 0x020000;\nvar CHANNEL_2_BUFFER_LOCATION = CHANNEL_1_BUFFER_LOCATION + CHANNEL_1_BUFFER_SIZE;\nvar CHANNEL_2_BUFFER_SIZE = 0x020000;\nvar CHANNEL_3_BUFFER_LOCATION = CHANNEL_2_BUFFER_LOCATION + CHANNEL_2_BUFFER_SIZE;\nvar CHANNEL_3_BUFFER_SIZE = 0x020000;\nvar CHANNEL_4_BUFFER_LOCATION = CHANNEL_3_BUFFER_LOCATION + CHANNEL_3_BUFFER_SIZE;\nvar CHANNEL_4_BUFFER_SIZE = 0x020000;\nvar AUDIO_BUFFER_LOCATION = CHANNEL_4_BUFFER_LOCATION + CHANNEL_4_BUFFER_SIZE;\nvar AUDIO_BUFFER_SIZE = 0x020000;\n// Catridge Ram\nvar CARTRIDGE_RAM_LOCATION = AUDIO_BUFFER_LOCATION + AUDIO_BUFFER_SIZE;\nvar CARTRIDGE_RAM_SIZE = 0x020000;\n// Boot ROM\n// http://gbdev.gg8.se/files/roms/bootroms/\n// Largest Boot rom is GBC, at 2.5KB\nvar BOOT_ROM_LOCATION = CARTRIDGE_RAM_LOCATION + CARTRIDGE_RAM_SIZE;\nvar BOOT_ROM_SIZE = 0x000a00;\n// Cartridge ROM\nvar CARTRIDGE_ROM_LOCATION = BOOT_ROM_LOCATION + BOOT_ROM_SIZE;\nvar CARTRIDGE_ROM_SIZE = 0x7e0400;\n// Debug Memory\nvar DEBUG_GAMEBOY_MEMORY_LOCATION = CARTRIDGE_ROM_LOCATION + CARTRIDGE_ROM_SIZE;\nvar DEBUG_GAMEBOY_MEMORY_SIZE = 0xffff;\n// Final General Size\nvar WASMBOY_MEMORY_LOCATION = 0x000000;\nvar WASMBOY_MEMORY_SIZE = DEBUG_GAMEBOY_MEMORY_LOCATION + DEBUG_GAMEBOY_MEMORY_SIZE + 1;\nvar WASMBOY_WASM_PAGES = ceil(WASMBOY_MEMORY_SIZE / 1024 / 64) + 1;\n\nvar Config = /** @class */ (function () {\n    function Config() {\n    }\n    // Boot Rom\n    Config.enableBootRom = false;\n    // GBC Options\n    Config.useGbcWhenAvailable = true;\n    // Batch Processing\n    Config.audioBatchProcessing = false;\n    Config.graphicsBatchProcessing = false;\n    Config.timersBatchProcessing = false;\n    // Scanline Rendering\n    Config.graphicsDisableScanlineRendering = false;\n    // Acumulate Sound Samples\n    Config.audioAccumulateSamples = false;\n    // Tile Rednering\n    Config.tileRendering = false;\n    Config.tileCaching = false;\n    // Audio Debugging\n    Config.enableAudioDebugging = false;\n    return Config;\n}());\n\n// Portable Code for JS Wasm Benchmarking\n// https://github.com/AssemblyScript/assemblyscript/wiki/Writing-portable-code\n// https://github.com/AssemblyScript/assemblyscript/blob/master/std/portable/index.js\nfunction u8Portable(param) {\n    return param & 0xff;\n}\nfunction u16Portable(param) {\n    return param & 0xffff;\n}\nfunction i8Portable(param) {\n    return (param << 24) >> 24;\n}\nfunction i32Portable(param) {\n    return param | 0;\n}\n\n// Set flag bit on on register F. For instance set zero flag to zero -> (7, 0)\nfunction setFlagBit(flagBit, flagValue) {\n    var bitwiseOperand = u8Portable(1 << flagBit);\n    if (flagValue > 0) {\n        Cpu.registerF = Cpu.registerF | bitwiseOperand;\n    }\n    else {\n        // XOR out the two ones\n        bitwiseOperand = 0xff ^ bitwiseOperand;\n        Cpu.registerF = Cpu.registerF & bitwiseOperand;\n    }\n    return Cpu.registerF;\n}\n// Overload the set flag bit for ease of use\nfunction setZeroFlag$$1(value) {\n    setFlagBit(7, value);\n}\nfunction setSubtractFlag(value) {\n    setFlagBit(6, value);\n}\nfunction setHalfCarryFlag(value) {\n    setFlagBit(5, value);\n}\nfunction setCarryFlag(value) {\n    setFlagBit(4, value);\n}\n// Getters for flags\nfunction getZeroFlag$$1() {\n    return (Cpu.registerF >> 7) & 0x01;\n}\nfunction getSubtractFlag() {\n    return (Cpu.registerF >> 6) & 0x01;\n}\nfunction getHalfCarryFlag() {\n    return (Cpu.registerF >> 5) & 0x01;\n}\nfunction getCarryFlag$$1() {\n    return (Cpu.registerF >> 4) & 0x01;\n}\n// Must be run before the register actually performs the add\n// amountToAdd i16, since max number can be an u8\nfunction checkAndSetEightBitHalfCarryFlag(value, amountToAdd) {\n    if (amountToAdd >= 0) {\n        // https://robdor.com/2016/08/10/gameboy-emulator-half-carry-flag/\n        var result = u8Portable((value & 0x0f) + (amountToAdd & 0x0f)) & 0x10;\n        setHalfCarryFlag((result !== 0x00));\n    }\n    else {\n        // From: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n        // CTRL+F \"subBytes(a, b byte)\"\n        setHalfCarryFlag(((abs(amountToAdd) & 0x0f) > (value & 0x0f)));\n    }\n}\nfunction checkAndSetEightBitCarryFlag(value, amountToAdd) {\n    if (amountToAdd >= 0) {\n        var result = u8Portable(value + amountToAdd);\n        setCarryFlag((value > result));\n    }\n    else {\n        setCarryFlag((abs(amountToAdd) > value));\n    }\n}\n// Function to handle 16 bit addition overflow, and set the carry flags accordingly\n// i32 on valueTwo to support passing signed immedaite values\nfunction checkAndSetSixteenBitFlagsAddOverflow(valueOne, valueTwo, useStackPointerBits) {\n    // need to differentiate between HL and SP\n    // HL carries are at 11 and 15, SP carries are at 3 and 7 :p\n    if (useStackPointerBits) {\n        // Logic from : https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n        // CTRL+F add_sp_n\n        // using the stack pointer bits means we can safely assume the value is signed\n        var signedValueOne = valueOne;\n        var result = signedValueOne + valueTwo;\n        var flagXor = signedValueOne ^ valueTwo ^ result;\n        setHalfCarryFlag(((flagXor & 0x10) !== 0));\n        setCarryFlag(((flagXor & 0x100) !== 0));\n    }\n    else {\n        // Logic from: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n        // CTRL+F addWords\n        // Value two is not signed\n        var result = u16Portable(valueOne + valueTwo);\n        // Check the carry flag by allowing the overflow\n        setCarryFlag((result < valueOne));\n        // To check for half carry flag (bit 15), by XOR'ing valyes, and and'ing the bit in question\n        var halfCarryXor = valueOne ^ valueTwo ^ result;\n        var halfCarryAnd = u16Portable(halfCarryXor & 0x1000);\n        setHalfCarryFlag((halfCarryAnd !== 0x00));\n    }\n}\n\n// File for all of the colors for different GB Palletes\n// https://i.imgur.com/HupBY.png\n// https://www.libretro.com/index.php/gambatte-progress-report/\n// https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM\n// Our default wasmboy gb colors\nvar WasmBoyGBColors = /** @class */ (function () {\n    function WasmBoyGBColors() {\n    }\n    //Bg\n    WasmBoyGBColors.bgWhite = 0xf2f2f2;\n    WasmBoyGBColors.bgLightGrey = 0xa0a0a0;\n    WasmBoyGBColors.bgDarkGrey = 0x585858;\n    WasmBoyGBColors.bgBlack = 0x080808;\n    // Obj 0\n    WasmBoyGBColors.obj0White = 0xf2f2f2;\n    WasmBoyGBColors.obj0LightGrey = 0xa0a0a0;\n    WasmBoyGBColors.obj0DarkGrey = 0x585858;\n    WasmBoyGBColors.obj0Black = 0x080808;\n    // Obj1\n    WasmBoyGBColors.obj1White = 0xf2f2f2;\n    WasmBoyGBColors.obj1LightGrey = 0xa0a0a0;\n    WasmBoyGBColors.obj1DarkGrey = 0x585858;\n    WasmBoyGBColors.obj1Black = 0x080808;\n    return WasmBoyGBColors;\n}());\n// Action Button: Right\nvar GreenColors = /** @class */ (function () {\n    function GreenColors() {\n    }\n    //Bg\n    GreenColors.bgWhite = 0xffffff;\n    GreenColors.bgLightGrey = 0x52ff00;\n    GreenColors.bgDarkGrey = 0xff4200;\n    GreenColors.bgBlack = 0x000000;\n    // Obj 0\n    GreenColors.obj0White = 0xffffff;\n    GreenColors.obj0LightGrey = 0x52ff00;\n    GreenColors.obj0DarkGrey = 0xff4200;\n    GreenColors.obj0Black = 0x000000;\n    // Obj1\n    GreenColors.obj1White = 0xffffff;\n    GreenColors.obj1LightGrey = 0x52ff00;\n    GreenColors.obj1DarkGrey = 0xff4200;\n    GreenColors.obj1Black = 0x000000;\n    return GreenColors;\n}());\n// Action Button: A + Down\nvar OrangeColors = /** @class */ (function () {\n    function OrangeColors() {\n    }\n    //Bg\n    OrangeColors.bgWhite = 0xffffff;\n    OrangeColors.bgLightGrey = 0xffff00;\n    OrangeColors.bgDarkGrey = 0xff0000;\n    OrangeColors.bgBlack = 0x000000;\n    // Obj 0\n    OrangeColors.obj0White = 0xffffff;\n    OrangeColors.obj0LightGrey = 0xffff00;\n    OrangeColors.obj0DarkGrey = 0xff0000;\n    OrangeColors.obj0Black = 0x000000;\n    // Obj1\n    OrangeColors.obj1White = 0xffffff;\n    OrangeColors.obj1LightGrey = 0xffff00;\n    OrangeColors.obj1DarkGrey = 0xff0000;\n    OrangeColors.obj1Black = 0x000000;\n    return OrangeColors;\n}());\n// Action Button: Up\nvar BrownColors = /** @class */ (function () {\n    function BrownColors() {\n    }\n    //Bg\n    BrownColors.bgWhite = 0xffffff;\n    BrownColors.bgLightGrey = 0xffad63;\n    BrownColors.bgDarkGrey = 0x843100;\n    BrownColors.bgBlack = 0x000000;\n    // Obj 0\n    BrownColors.obj0White = 0xffffff;\n    BrownColors.obj0LightGrey = 0xffad63;\n    BrownColors.obj0DarkGrey = 0x843100;\n    BrownColors.obj0Black = 0x000000;\n    // Obj1\n    BrownColors.obj1White = 0xffffff;\n    BrownColors.obj1LightGrey = 0xffad63;\n    BrownColors.obj1DarkGrey = 0x843100;\n    BrownColors.obj1Black = 0x000000;\n    return BrownColors;\n}());\n// Action Button: B + Right\nvar InvertedColors = /** @class */ (function () {\n    function InvertedColors() {\n    }\n    //Bg\n    InvertedColors.bgWhite = 0x000000;\n    InvertedColors.bgLightGrey = 0x008484;\n    InvertedColors.bgDarkGrey = 0xffde00;\n    InvertedColors.bgBlack = 0xffffff;\n    // Obj 0\n    InvertedColors.obj0White = 0x000000;\n    InvertedColors.obj0LightGrey = 0x008484;\n    InvertedColors.obj0DarkGrey = 0xffde00;\n    InvertedColors.obj0Black = 0xffffff;\n    // Obj1\n    InvertedColors.obj1White = 0x000000;\n    InvertedColors.obj1LightGrey = 0x008484;\n    InvertedColors.obj1DarkGrey = 0xffde00;\n    InvertedColors.obj1Black = 0xffffff;\n    return InvertedColors;\n}());\n// Action Button: B + Left\nvar GrayscaleColors = /** @class */ (function () {\n    function GrayscaleColors() {\n    }\n    //Bg\n    GrayscaleColors.bgWhite = 0xffffff;\n    GrayscaleColors.bgLightGrey = 0xa5a5a5;\n    GrayscaleColors.bgDarkGrey = 0x525252;\n    GrayscaleColors.bgBlack = 0x000000;\n    // Obj 0\n    GrayscaleColors.obj0White = 0xffffff;\n    GrayscaleColors.obj0LightGrey = 0xa5a5a5;\n    GrayscaleColors.obj0DarkGrey = 0x525252;\n    GrayscaleColors.obj0Black = 0x000000;\n    // Obj1\n    GrayscaleColors.obj1White = 0xffffff;\n    GrayscaleColors.obj1LightGrey = 0xa5a5a5;\n    GrayscaleColors.obj1DarkGrey = 0x525252;\n    GrayscaleColors.obj1Black = 0x000000;\n    return GrayscaleColors;\n}());\n// Action Button: Down\nvar PastelMixColors = /** @class */ (function () {\n    function PastelMixColors() {\n    }\n    //Bg\n    PastelMixColors.bgWhite = 0xffffa5;\n    PastelMixColors.bgLightGrey = 0xff9494;\n    PastelMixColors.bgDarkGrey = 0x9494ff;\n    PastelMixColors.bgBlack = 0x000000;\n    // Obj 0\n    PastelMixColors.obj0White = 0xffffa5;\n    PastelMixColors.obj0LightGrey = 0xff9494;\n    PastelMixColors.obj0DarkGrey = 0x9494ff;\n    PastelMixColors.obj0Black = 0x000000;\n    // Obj1\n    PastelMixColors.obj1White = 0xffffa5;\n    PastelMixColors.obj1LightGrey = 0xff9494;\n    PastelMixColors.obj1DarkGrey = 0x9494ff;\n    PastelMixColors.obj1Black = 0x000000;\n    return PastelMixColors;\n}());\n// Action Button: B + Up\nvar DarkBrownColors = /** @class */ (function () {\n    function DarkBrownColors() {\n    }\n    //Bg\n    DarkBrownColors.bgWhite = 0xffe6c5;\n    DarkBrownColors.bgLightGrey = 0xce9c84;\n    DarkBrownColors.bgDarkGrey = 0x846b29;\n    DarkBrownColors.bgBlack = 0x5a3108;\n    // Obj 0\n    DarkBrownColors.obj0White = 0xffffff;\n    DarkBrownColors.obj0LightGrey = 0xffad63;\n    DarkBrownColors.obj0DarkGrey = 0x843100;\n    DarkBrownColors.obj0Black = 0x000000;\n    // Obj1\n    DarkBrownColors.obj1White = 0xffffff;\n    DarkBrownColors.obj1LightGrey = 0xffad63;\n    DarkBrownColors.obj1DarkGrey = 0x843100;\n    DarkBrownColors.obj1Black = 0x000000;\n    return DarkBrownColors;\n}());\n// Action Button: A + Right\nvar DarkGreenColors = /** @class */ (function () {\n    function DarkGreenColors() {\n    }\n    //Bg\n    DarkGreenColors.bgWhite = 0xffffff;\n    DarkGreenColors.bgLightGrey = 0x7bff31;\n    DarkGreenColors.bgDarkGrey = 0x0063c5;\n    DarkGreenColors.bgBlack = 0x000000;\n    // Obj 0\n    DarkGreenColors.obj0White = 0xffffff;\n    DarkGreenColors.obj0LightGrey = 0xff8484;\n    DarkGreenColors.obj0DarkGrey = 0x943a3a;\n    DarkGreenColors.obj0Black = 0x000000;\n    // Obj1\n    DarkGreenColors.obj1White = 0xffffff;\n    DarkGreenColors.obj1LightGrey = 0xff8484;\n    DarkGreenColors.obj1DarkGrey = 0x943a3a;\n    DarkGreenColors.obj1Black = 0x000000;\n    return DarkGreenColors;\n}());\n// Action Button: A + Left\nvar DarkBlueColors = /** @class */ (function () {\n    function DarkBlueColors() {\n    }\n    //Bg\n    DarkBlueColors.bgWhite = 0xffffff;\n    DarkBlueColors.bgLightGrey = 0x8c8cde;\n    DarkBlueColors.bgDarkGrey = 0x52528c;\n    DarkBlueColors.bgBlack = 0x000000;\n    // Obj 0\n    DarkBlueColors.obj0White = 0xffffff;\n    DarkBlueColors.obj0LightGrey = 0xff8484;\n    DarkBlueColors.obj0DarkGrey = 0x943a3a;\n    DarkBlueColors.obj0Black = 0x000000;\n    // Obj1\n    DarkBlueColors.obj1White = 0xffffff;\n    DarkBlueColors.obj1LightGrey = 0xffad63;\n    DarkBlueColors.obj1DarkGrey = 0x843100;\n    DarkBlueColors.obj1Black = 0x000000;\n    return DarkBlueColors;\n}());\n// Action Button: A + Up\nvar RedColors = /** @class */ (function () {\n    function RedColors() {\n    }\n    //Bg\n    RedColors.bgWhite = 0xffffff;\n    RedColors.bgLightGrey = 0xff8484;\n    RedColors.bgDarkGrey = 0x943a3a;\n    RedColors.bgBlack = 0x000000;\n    // Obj 0\n    RedColors.obj0White = 0xffffff;\n    RedColors.obj0LightGrey = 0x7bff31;\n    RedColors.obj0DarkGrey = 0x008400;\n    RedColors.obj0Black = 0x000000;\n    // Obj1\n    RedColors.obj1White = 0xffffff;\n    RedColors.obj1LightGrey = 0x63a5ff;\n    RedColors.obj1DarkGrey = 0x0000ff;\n    RedColors.obj1Black = 0x000000;\n    return RedColors;\n}());\n// Action Button: Left\nvar BlueColors = /** @class */ (function () {\n    function BlueColors() {\n    }\n    //Bg\n    BlueColors.bgWhite = 0xffffff;\n    BlueColors.bgLightGrey = 0x63a5ff;\n    BlueColors.bgDarkGrey = 0x0000ff;\n    BlueColors.bgBlack = 0x000000;\n    // Obj 0\n    BlueColors.obj0White = 0xffffff;\n    BlueColors.obj0LightGrey = 0xff8484;\n    BlueColors.obj0DarkGrey = 0x943a3a;\n    BlueColors.obj0Black = 0x000000;\n    // Obj1\n    BlueColors.obj1White = 0xffffff;\n    BlueColors.obj1LightGrey = 0x7bff31;\n    BlueColors.obj1DarkGrey = 0x008400;\n    BlueColors.obj1Black = 0x000000;\n    return BlueColors;\n}());\n// Action Button: B + Down\nvar YellowColors = /** @class */ (function () {\n    function YellowColors() {\n    }\n    //Bg\n    YellowColors.bgWhite = 0xffffff;\n    YellowColors.bgLightGrey = 0xffff00;\n    YellowColors.bgDarkGrey = 0x7b4a00;\n    YellowColors.bgBlack = 0x000000;\n    // Obj 0\n    YellowColors.obj0White = 0xffffff;\n    YellowColors.obj0LightGrey = 0x63a5ff;\n    YellowColors.obj0DarkGrey = 0x0000ff;\n    YellowColors.obj0Black = 0x000000;\n    // Obj1\n    YellowColors.obj1White = 0xffffff;\n    YellowColors.obj1LightGrey = 0x7bff31;\n    YellowColors.obj1DarkGrey = 0x008400;\n    YellowColors.obj1Black = 0x000000;\n    return YellowColors;\n}());\n// Assigned Color Palettes\n// Alleyway\nvar Table00Entry08Colors = /** @class */ (function () {\n    function Table00Entry08Colors() {\n    }\n    //Bg\n    Table00Entry08Colors.bgWhite = 0xa59cff;\n    Table00Entry08Colors.bgLightGrey = 0xffff00;\n    Table00Entry08Colors.bgDarkGrey = 0x006300;\n    Table00Entry08Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table00Entry08Colors.obj0White = 0xa59cff;\n    Table00Entry08Colors.obj0LightGrey = 0xffff00;\n    Table00Entry08Colors.obj0DarkGrey = 0x006300;\n    Table00Entry08Colors.obj0Black = 0x000000;\n    // Obj1\n    Table00Entry08Colors.obj1White = 0xa59cff;\n    Table00Entry08Colors.obj1LightGrey = 0xffff00;\n    Table00Entry08Colors.obj1DarkGrey = 0x006300;\n    Table00Entry08Colors.obj1Black = 0x000000;\n    return Table00Entry08Colors;\n}());\n// Pokemon Blue\nvar Table01Entry0BColors = /** @class */ (function () {\n    function Table01Entry0BColors() {\n    }\n    //Bg\n    Table01Entry0BColors.bgWhite = 0xffffff;\n    Table01Entry0BColors.bgLightGrey = 0x63a5ff;\n    Table01Entry0BColors.bgDarkGrey = 0x0000ff;\n    Table01Entry0BColors.bgBlack = 0x000000;\n    // Obj 0\n    Table01Entry0BColors.obj0White = 0xffffff;\n    Table01Entry0BColors.obj0LightGrey = 0xff8484;\n    Table01Entry0BColors.obj0DarkGrey = 0x943a3a;\n    Table01Entry0BColors.obj0Black = 0x000000;\n    // Obj1\n    Table01Entry0BColors.obj1White = 0xffffff;\n    Table01Entry0BColors.obj1LightGrey = 0x63a5ff;\n    Table01Entry0BColors.obj1DarkGrey = 0x0000ff;\n    Table01Entry0BColors.obj1Black = 0x000000;\n    return Table01Entry0BColors;\n}());\n// Pokemon Red\nvar Table01Entry10Colors = /** @class */ (function () {\n    function Table01Entry10Colors() {\n    }\n    //Bg\n    Table01Entry10Colors.bgWhite = 0xffffff;\n    Table01Entry10Colors.bgLightGrey = 0xff8484;\n    Table01Entry10Colors.bgDarkGrey = 0x943a3a;\n    Table01Entry10Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table01Entry10Colors.obj0White = 0xffffff;\n    Table01Entry10Colors.obj0LightGrey = 0x7bff31;\n    Table01Entry10Colors.obj0DarkGrey = 0x008400;\n    Table01Entry10Colors.obj0Black = 0x000000;\n    // Obj1\n    Table01Entry10Colors.obj1White = 0xffffff;\n    Table01Entry10Colors.obj1LightGrey = 0xff8484;\n    Table01Entry10Colors.obj1DarkGrey = 0x943a3a;\n    Table01Entry10Colors.obj1Black = 0x000000;\n    return Table01Entry10Colors;\n}());\n// Super Mario Land\nvar Table03Entry0AColors = /** @class */ (function () {\n    function Table03Entry0AColors() {\n    }\n    //Bg\n    Table03Entry0AColors.bgWhite = 0xb5b5ff;\n    Table03Entry0AColors.bgLightGrey = 0xffff94;\n    Table03Entry0AColors.bgDarkGrey = 0xad5a42;\n    Table03Entry0AColors.bgBlack = 0x000000;\n    // Obj 0\n    Table03Entry0AColors.obj0White = 0x000000;\n    Table03Entry0AColors.obj0LightGrey = 0xffffff;\n    Table03Entry0AColors.obj0DarkGrey = 0xff8484;\n    Table03Entry0AColors.obj0Black = 0x943a3a;\n    // Obj1\n    Table03Entry0AColors.obj1White = 0x000000;\n    Table03Entry0AColors.obj1LightGrey = 0xffffff;\n    Table03Entry0AColors.obj1DarkGrey = 0xff8484;\n    Table03Entry0AColors.obj1Black = 0x943a3a;\n    return Table03Entry0AColors;\n}());\n// Super Mario Land 3 - WarioLand\nvar Table05Entry00Colors = /** @class */ (function () {\n    function Table05Entry00Colors() {\n    }\n    //Bg\n    Table05Entry00Colors.bgWhite = 0xffffff;\n    Table05Entry00Colors.bgLightGrey = 0xadad84;\n    Table05Entry00Colors.bgDarkGrey = 0x42737b;\n    Table05Entry00Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry00Colors.obj0White = 0xffffff;\n    Table05Entry00Colors.obj0LightGrey = 0xff7300;\n    Table05Entry00Colors.obj0DarkGrey = 0x944200;\n    Table05Entry00Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry00Colors.obj1White = 0xffffff;\n    Table05Entry00Colors.obj1LightGrey = 0x5abdff;\n    Table05Entry00Colors.obj1DarkGrey = 0xff0000;\n    Table05Entry00Colors.obj1Black = 0x0000ff;\n    return Table05Entry00Colors;\n}());\n// Donkey Kong\nvar Table05Entry01Colors = /** @class */ (function () {\n    function Table05Entry01Colors() {\n    }\n    //Bg\n    Table05Entry01Colors.bgWhite = 0xffff9c;\n    Table05Entry01Colors.bgLightGrey = 0x94b5ff;\n    Table05Entry01Colors.bgDarkGrey = 0x639473;\n    Table05Entry01Colors.bgBlack = 0x003a3a;\n    // Obj 0\n    Table05Entry01Colors.obj0White = 0xffc542;\n    Table05Entry01Colors.obj0LightGrey = 0xffd600;\n    Table05Entry01Colors.obj0DarkGrey = 0x943a00;\n    Table05Entry01Colors.obj0Black = 0x4a0000;\n    // Obj1\n    Table05Entry01Colors.obj1White = 0xffffff;\n    Table05Entry01Colors.obj1LightGrey = 0xff8484;\n    Table05Entry01Colors.obj1DarkGrey = 0x943a3a;\n    Table05Entry01Colors.obj1Black = 0x000000;\n    return Table05Entry01Colors;\n}());\n// Tennis\nvar Table05Entry02Colors = /** @class */ (function () {\n    function Table05Entry02Colors() {\n    }\n    //Bg\n    Table05Entry02Colors.bgWhite = 0x6bff00;\n    Table05Entry02Colors.bgLightGrey = 0xffffff;\n    Table05Entry02Colors.bgDarkGrey = 0xff524a;\n    Table05Entry02Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry02Colors.obj0White = 0xffffff;\n    Table05Entry02Colors.obj0LightGrey = 0xffffff;\n    Table05Entry02Colors.obj0DarkGrey = 0x63a5ff;\n    Table05Entry02Colors.obj0Black = 0x0000ff;\n    // Obj1\n    Table05Entry02Colors.obj1White = 0xffffff;\n    Table05Entry02Colors.obj1LightGrey = 0xffad63;\n    Table05Entry02Colors.obj1DarkGrey = 0x843100;\n    Table05Entry02Colors.obj1Black = 0x000000;\n    return Table05Entry02Colors;\n}());\n// Kirby's Dream Land\nvar Table05Entry08Colors = /** @class */ (function () {\n    function Table05Entry08Colors() {\n    }\n    //Bg\n    Table05Entry08Colors.bgWhite = 0xa59cff;\n    Table05Entry08Colors.bgLightGrey = 0xffff00;\n    Table05Entry08Colors.bgDarkGrey = 0x006300;\n    Table05Entry08Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry08Colors.obj0White = 0xff6352;\n    Table05Entry08Colors.obj0LightGrey = 0xd60000;\n    Table05Entry08Colors.obj0DarkGrey = 0x630000;\n    Table05Entry08Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry08Colors.obj1White = 0x0000ff;\n    Table05Entry08Colors.obj1LightGrey = 0xffffff;\n    Table05Entry08Colors.obj1DarkGrey = 0xffff7b;\n    Table05Entry08Colors.obj1Black = 0x0084ff;\n    return Table05Entry08Colors;\n}());\n// Super Mario Land 2 BAYYYBEEE\nvar Table05Entry09Colors = /** @class */ (function () {\n    function Table05Entry09Colors() {\n    }\n    //Bg\n    Table05Entry09Colors.bgWhite = 0xffffce;\n    Table05Entry09Colors.bgLightGrey = 0x63efef;\n    Table05Entry09Colors.bgDarkGrey = 0x9c8431;\n    Table05Entry09Colors.bgBlack = 0x5a5a5a;\n    // Obj 0\n    Table05Entry09Colors.obj0White = 0xffffff;\n    Table05Entry09Colors.obj0LightGrey = 0xff7300;\n    Table05Entry09Colors.obj0DarkGrey = 0x944200;\n    Table05Entry09Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry09Colors.obj1White = 0xffffff;\n    Table05Entry09Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry09Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry09Colors.obj1Black = 0x000000;\n    return Table05Entry09Colors;\n}());\n// Link's Awakening\nvar Table05Entry11Colors = /** @class */ (function () {\n    function Table05Entry11Colors() {\n    }\n    // Bg\n    Table05Entry11Colors.bgWhite = 0xffffff;\n    Table05Entry11Colors.bgLightGrey = 0xff8484;\n    Table05Entry11Colors.bgDarkGrey = 0x943a3a;\n    Table05Entry11Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry11Colors.obj0White = 0xffffff;\n    Table05Entry11Colors.obj0LightGrey = 0x00ff00;\n    Table05Entry11Colors.obj0DarkGrey = 0x318400;\n    Table05Entry11Colors.obj0Black = 0x004a00;\n    // Obj1\n    Table05Entry11Colors.obj1White = 0xffffff;\n    Table05Entry11Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry11Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry11Colors.obj1Black = 0x000000;\n    return Table05Entry11Colors;\n}());\n// Metroid 2\nvar Table05Entry14Colors = /** @class */ (function () {\n    function Table05Entry14Colors() {\n    }\n    //Bg\n    Table05Entry14Colors.bgWhite = 0xffffff;\n    Table05Entry14Colors.bgLightGrey = 0x63a5ff;\n    Table05Entry14Colors.bgDarkGrey = 0x0000ff;\n    Table05Entry14Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry14Colors.obj0White = 0xffff00;\n    Table05Entry14Colors.obj0LightGrey = 0xff0000;\n    Table05Entry14Colors.obj0DarkGrey = 0x630000;\n    Table05Entry14Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry14Colors.obj1White = 0xffffff;\n    Table05Entry14Colors.obj1LightGrey = 0x7bff31;\n    Table05Entry14Colors.obj1DarkGrey = 0x008400;\n    Table05Entry14Colors.obj1Black = 0x000000;\n    return Table05Entry14Colors;\n}());\n// WarioLand 2\nvar Table05Entry15Colors = /** @class */ (function () {\n    function Table05Entry15Colors() {\n    }\n    //Bg\n    Table05Entry15Colors.bgWhite = 0xffffff;\n    Table05Entry15Colors.bgLightGrey = 0xadad84;\n    Table05Entry15Colors.bgDarkGrey = 0x42737b;\n    Table05Entry15Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry15Colors.obj0White = 0xffffff;\n    Table05Entry15Colors.obj0LightGrey = 0xffad63;\n    Table05Entry15Colors.obj0DarkGrey = 0xffad63;\n    Table05Entry15Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry15Colors.obj1White = 0xffffff;\n    Table05Entry15Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry15Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry15Colors.obj1Black = 0x000000;\n    return Table05Entry15Colors;\n}());\n\n// File for all of the logic of setting gameboy color plaettes\n// Current / exported color\nvar Colors = /** @class */ (function () {\n    function Colors() {\n    }\n    //Bg\n    Colors.bgWhite = WasmBoyGBColors.bgWhite;\n    Colors.bgLightGrey = WasmBoyGBColors.bgLightGrey;\n    Colors.bgDarkGrey = WasmBoyGBColors.bgDarkGrey;\n    Colors.bgBlack = WasmBoyGBColors.bgBlack;\n    // Obj 0\n    Colors.obj0White = WasmBoyGBColors.obj0White;\n    Colors.obj0LightGrey = WasmBoyGBColors.obj0LightGrey;\n    Colors.obj0DarkGrey = WasmBoyGBColors.obj0DarkGrey;\n    Colors.obj0Black = WasmBoyGBColors.obj0Black;\n    // Obj1\n    Colors.obj1White = WasmBoyGBColors.obj1White;\n    Colors.obj1LightGrey = WasmBoyGBColors.obj1LightGrey;\n    Colors.obj1DarkGrey = WasmBoyGBColors.obj1DarkGrey;\n    Colors.obj1Black = WasmBoyGBColors.obj1Black;\n    return Colors;\n}());\n// Inlined because closure compiler inlines\nfunction initializeColors() {\n    setManualColorizationPalette(0);\n    if (Cpu.GBCEnabled) {\n        // Don't need to continue this if a GBC game\n        return;\n    }\n    if (Cpu.BootROMEnabled) {\n        if (!Cpu.GBCEnabled) {\n            // GB\n            return;\n        }\n    }\n    // Do some automatic color palette swapping if we have a loaded ROM\n    var titleChecksum = 0x00;\n    for (var i = 0x0134; i <= 0x0143; i++) {\n        titleChecksum += eightBitLoadFromGBMemory(i);\n    }\n    // Set the colorization for the game automatically if assigned\n    // https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM\n    var hash = titleChecksum & 0xff;\n    setHashColorizationPalette(hash);\n}\nfunction getRedFromHexColor(color) {\n    return (color & 0xff0000) >> 16;\n}\nfunction getGreenFromHexColor(color) {\n    return (color & 0x00ff00) >> 8;\n}\nfunction getBlueFromHexColor(color) {\n    return color & 0x0000ff;\n}\n// Function to set the colorization\n// By manually pressing buttons\nfunction setManualColorizationPalette(colorizationId) {\n    // Set the colorizationId clockwise according to:\n    // https://en.wikipedia.org/wiki/Game_Boy_Color\n    switch (colorizationId) {\n        case 0:\n            Colors.bgWhite = WasmBoyGBColors.bgWhite;\n            Colors.bgLightGrey = WasmBoyGBColors.bgLightGrey;\n            Colors.bgDarkGrey = WasmBoyGBColors.bgDarkGrey;\n            Colors.bgBlack = WasmBoyGBColors.bgBlack;\n            Colors.obj0White = WasmBoyGBColors.obj0White;\n            Colors.obj0LightGrey = WasmBoyGBColors.obj0LightGrey;\n            Colors.obj0DarkGrey = WasmBoyGBColors.obj0DarkGrey;\n            Colors.obj0Black = WasmBoyGBColors.obj0Black;\n            Colors.obj1White = WasmBoyGBColors.obj1White;\n            Colors.obj1LightGrey = WasmBoyGBColors.obj1LightGrey;\n            Colors.obj1DarkGrey = WasmBoyGBColors.obj1DarkGrey;\n            Colors.obj1Black = WasmBoyGBColors.obj1Black;\n            break;\n        case 1:\n            // Up, Brown\n            Colors.bgWhite = BrownColors.bgWhite;\n            Colors.bgLightGrey = BrownColors.bgLightGrey;\n            Colors.bgDarkGrey = BrownColors.bgDarkGrey;\n            Colors.bgBlack = BrownColors.bgBlack;\n            Colors.obj0White = BrownColors.obj0White;\n            Colors.obj0LightGrey = BrownColors.obj0LightGrey;\n            Colors.obj0DarkGrey = BrownColors.obj0DarkGrey;\n            Colors.obj0Black = BrownColors.obj0Black;\n            Colors.obj1White = BrownColors.obj1White;\n            Colors.obj1LightGrey = BrownColors.obj1LightGrey;\n            Colors.obj1DarkGrey = BrownColors.obj1DarkGrey;\n            Colors.obj1Black = BrownColors.obj1Black;\n            break;\n        case 2:\n            // Up + A, Red\n            Colors.bgWhite = RedColors.bgWhite;\n            Colors.bgLightGrey = RedColors.bgLightGrey;\n            Colors.bgDarkGrey = RedColors.bgDarkGrey;\n            Colors.bgBlack = RedColors.bgBlack;\n            Colors.obj0White = RedColors.obj0White;\n            Colors.obj0LightGrey = RedColors.obj0LightGrey;\n            Colors.obj0DarkGrey = RedColors.obj0DarkGrey;\n            Colors.obj0Black = RedColors.obj0Black;\n            Colors.obj1White = RedColors.obj1White;\n            Colors.obj1LightGrey = RedColors.obj1LightGrey;\n            Colors.obj1DarkGrey = RedColors.obj1DarkGrey;\n            Colors.obj1Black = RedColors.obj1Black;\n            break;\n        case 3:\n            // Up + B, DarkBrown\n            Colors.bgWhite = DarkBrownColors.bgWhite;\n            Colors.bgLightGrey = DarkBrownColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkBrownColors.bgDarkGrey;\n            Colors.bgBlack = DarkBrownColors.bgBlack;\n            Colors.obj0White = DarkBrownColors.obj0White;\n            Colors.obj0LightGrey = DarkBrownColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkBrownColors.obj0DarkGrey;\n            Colors.obj0Black = DarkBrownColors.obj0Black;\n            Colors.obj1White = DarkBrownColors.obj1White;\n            Colors.obj1LightGrey = DarkBrownColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkBrownColors.obj1DarkGrey;\n            Colors.obj1Black = DarkBrownColors.obj1Black;\n            break;\n        case 4:\n            // Right, Green\n            Colors.bgWhite = GreenColors.bgWhite;\n            Colors.bgLightGrey = GreenColors.bgLightGrey;\n            Colors.bgDarkGrey = GreenColors.bgDarkGrey;\n            Colors.bgBlack = GreenColors.bgBlack;\n            Colors.obj0White = GreenColors.obj0White;\n            Colors.obj0LightGrey = GreenColors.obj0LightGrey;\n            Colors.obj0DarkGrey = GreenColors.obj0DarkGrey;\n            Colors.obj0Black = GreenColors.obj0Black;\n            Colors.obj1White = GreenColors.obj1White;\n            Colors.obj1LightGrey = GreenColors.obj1LightGrey;\n            Colors.obj1DarkGrey = GreenColors.obj1DarkGrey;\n            Colors.obj1Black = GreenColors.obj1Black;\n            break;\n        case 5:\n            // Right + A, DarkGreenColors\n            Colors.bgWhite = DarkGreenColors.bgWhite;\n            Colors.bgLightGrey = DarkGreenColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkGreenColors.bgDarkGrey;\n            Colors.bgBlack = DarkGreenColors.bgBlack;\n            Colors.obj0White = DarkGreenColors.obj0White;\n            Colors.obj0LightGrey = DarkGreenColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkGreenColors.obj0DarkGrey;\n            Colors.obj0Black = DarkGreenColors.obj0Black;\n            Colors.obj1White = DarkGreenColors.obj1White;\n            Colors.obj1LightGrey = DarkGreenColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkGreenColors.obj1DarkGrey;\n            Colors.obj1Black = DarkGreenColors.obj1Black;\n            break;\n        case 6:\n            // Right + B, InvertedColors\n            Colors.bgWhite = InvertedColors.bgWhite;\n            Colors.bgLightGrey = InvertedColors.bgLightGrey;\n            Colors.bgDarkGrey = InvertedColors.bgDarkGrey;\n            Colors.bgBlack = InvertedColors.bgBlack;\n            Colors.obj0White = InvertedColors.obj0White;\n            Colors.obj0LightGrey = InvertedColors.obj0LightGrey;\n            Colors.obj0DarkGrey = InvertedColors.obj0DarkGrey;\n            Colors.obj0Black = InvertedColors.obj0Black;\n            Colors.obj1White = InvertedColors.obj1White;\n            Colors.obj1LightGrey = InvertedColors.obj1LightGrey;\n            Colors.obj1DarkGrey = InvertedColors.obj1DarkGrey;\n            Colors.obj1Black = InvertedColors.obj1Black;\n            break;\n        case 7:\n            // Down, PastelMixColors\n            Colors.bgWhite = PastelMixColors.bgWhite;\n            Colors.bgLightGrey = PastelMixColors.bgLightGrey;\n            Colors.bgDarkGrey = PastelMixColors.bgDarkGrey;\n            Colors.bgBlack = PastelMixColors.bgBlack;\n            Colors.obj0White = PastelMixColors.obj0White;\n            Colors.obj0LightGrey = PastelMixColors.obj0LightGrey;\n            Colors.obj0DarkGrey = PastelMixColors.obj0DarkGrey;\n            Colors.obj0Black = PastelMixColors.obj0Black;\n            Colors.obj1White = PastelMixColors.obj1White;\n            Colors.obj1LightGrey = PastelMixColors.obj1LightGrey;\n            Colors.obj1DarkGrey = PastelMixColors.obj1DarkGrey;\n            Colors.obj1Black = PastelMixColors.obj1Black;\n            break;\n        case 8:\n            // Down + A, Orange\n            Colors.bgWhite = OrangeColors.bgWhite;\n            Colors.bgLightGrey = OrangeColors.bgLightGrey;\n            Colors.bgDarkGrey = OrangeColors.bgDarkGrey;\n            Colors.bgBlack = OrangeColors.bgBlack;\n            Colors.obj0White = OrangeColors.obj0White;\n            Colors.obj0LightGrey = OrangeColors.obj0LightGrey;\n            Colors.obj0DarkGrey = OrangeColors.obj0DarkGrey;\n            Colors.obj0Black = OrangeColors.obj0Black;\n            Colors.obj1White = OrangeColors.obj1White;\n            Colors.obj1LightGrey = OrangeColors.obj1LightGrey;\n            Colors.obj1DarkGrey = OrangeColors.obj1DarkGrey;\n            Colors.obj1Black = OrangeColors.obj1Black;\n            break;\n        case 9:\n            // Down + B, Yellow\n            Colors.bgWhite = YellowColors.bgWhite;\n            Colors.bgLightGrey = YellowColors.bgLightGrey;\n            Colors.bgDarkGrey = YellowColors.bgDarkGrey;\n            Colors.bgBlack = YellowColors.bgBlack;\n            Colors.obj0White = YellowColors.obj0White;\n            Colors.obj0LightGrey = YellowColors.obj0LightGrey;\n            Colors.obj0DarkGrey = YellowColors.obj0DarkGrey;\n            Colors.obj0Black = YellowColors.obj0Black;\n            Colors.obj1White = YellowColors.obj1White;\n            Colors.obj1LightGrey = YellowColors.obj1LightGrey;\n            Colors.obj1DarkGrey = YellowColors.obj1DarkGrey;\n            Colors.obj1Black = YellowColors.obj1Black;\n            break;\n        case 10:\n            // Left, Blue\n            Colors.bgWhite = BlueColors.bgWhite;\n            Colors.bgLightGrey = BlueColors.bgLightGrey;\n            Colors.bgDarkGrey = BlueColors.bgDarkGrey;\n            Colors.bgBlack = BlueColors.bgBlack;\n            Colors.obj0White = BlueColors.obj0White;\n            Colors.obj0LightGrey = BlueColors.obj0LightGrey;\n            Colors.obj0DarkGrey = BlueColors.obj0DarkGrey;\n            Colors.obj0Black = BlueColors.obj0Black;\n            Colors.obj1White = BlueColors.obj1White;\n            Colors.obj1LightGrey = BlueColors.obj1LightGrey;\n            Colors.obj1DarkGrey = BlueColors.obj1DarkGrey;\n            Colors.obj1Black = BlueColors.obj1Black;\n            break;\n        case 11:\n            // Left + A, Dark Blue\n            Colors.bgWhite = DarkBlueColors.bgWhite;\n            Colors.bgLightGrey = DarkBlueColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkBlueColors.bgDarkGrey;\n            Colors.bgBlack = DarkBlueColors.bgBlack;\n            Colors.obj0White = DarkBlueColors.obj0White;\n            Colors.obj0LightGrey = DarkBlueColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkBlueColors.obj0DarkGrey;\n            Colors.obj0Black = DarkBlueColors.obj0Black;\n            Colors.obj1White = DarkBlueColors.obj1White;\n            Colors.obj1LightGrey = DarkBlueColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkBlueColors.obj1DarkGrey;\n            Colors.obj1Black = DarkBlueColors.obj1Black;\n            break;\n        case 12:\n            // Left + B, GrayScale\n            Colors.bgWhite = GrayscaleColors.bgWhite;\n            Colors.bgLightGrey = GrayscaleColors.bgLightGrey;\n            Colors.bgDarkGrey = GrayscaleColors.bgDarkGrey;\n            Colors.bgBlack = GrayscaleColors.bgBlack;\n            Colors.obj0White = GrayscaleColors.obj0White;\n            Colors.obj0LightGrey = GrayscaleColors.obj0LightGrey;\n            Colors.obj0DarkGrey = GrayscaleColors.obj0DarkGrey;\n            Colors.obj0Black = GrayscaleColors.obj0Black;\n            Colors.obj1White = GrayscaleColors.obj1White;\n            Colors.obj1LightGrey = GrayscaleColors.obj1LightGrey;\n            Colors.obj1DarkGrey = GrayscaleColors.obj1DarkGrey;\n            Colors.obj1Black = GrayscaleColors.obj1Black;\n            break;\n    }\n}\n// Function to set the colorization\n// By checksum of the title\n// https://forums.nesdev.com/viewtopic.php?f=20&t=10226\n// TODO: torch2424 need to find how to get the \"disambiguation\"\n// Inlined because closure compiler inlines\nfunction setHashColorizationPalette(hash) {\n    switch (hash) {\n        case 0x88:\n            Colors.bgWhite = Table00Entry08Colors.bgWhite;\n            Colors.bgLightGrey = Table00Entry08Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table00Entry08Colors.bgDarkGrey;\n            Colors.bgBlack = Table00Entry08Colors.bgBlack;\n            Colors.obj0White = Table00Entry08Colors.obj0White;\n            Colors.obj0LightGrey = Table00Entry08Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table00Entry08Colors.obj0DarkGrey;\n            Colors.obj0Black = Table00Entry08Colors.obj0Black;\n            Colors.obj1White = Table00Entry08Colors.obj1White;\n            Colors.obj1LightGrey = Table00Entry08Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table00Entry08Colors.obj1DarkGrey;\n            Colors.obj1Black = Table00Entry08Colors.obj1Black;\n            break;\n        case 0x61:\n            Colors.bgWhite = Table01Entry0BColors.bgWhite;\n            Colors.bgLightGrey = Table01Entry0BColors.bgLightGrey;\n            Colors.bgDarkGrey = Table01Entry0BColors.bgDarkGrey;\n            Colors.bgBlack = Table01Entry0BColors.bgBlack;\n            Colors.obj0White = Table01Entry0BColors.obj0White;\n            Colors.obj0LightGrey = Table01Entry0BColors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table01Entry0BColors.obj0DarkGrey;\n            Colors.obj0Black = Table01Entry0BColors.obj0Black;\n            Colors.obj1White = Table01Entry0BColors.obj1White;\n            Colors.obj1LightGrey = Table01Entry0BColors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table01Entry0BColors.obj1DarkGrey;\n            Colors.obj1Black = Table01Entry0BColors.obj1Black;\n            break;\n        case 0x14:\n            Colors.bgWhite = Table01Entry10Colors.bgWhite;\n            Colors.bgLightGrey = Table01Entry10Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table01Entry10Colors.bgDarkGrey;\n            Colors.bgBlack = Table01Entry10Colors.bgBlack;\n            Colors.obj0White = Table01Entry10Colors.obj0White;\n            Colors.obj0LightGrey = Table01Entry10Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table01Entry10Colors.obj0DarkGrey;\n            Colors.obj0Black = Table01Entry10Colors.obj0Black;\n            Colors.obj1White = Table01Entry10Colors.obj1White;\n            Colors.obj1LightGrey = Table01Entry10Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table01Entry10Colors.obj1DarkGrey;\n            Colors.obj1Black = Table01Entry10Colors.obj1Black;\n            break;\n        case 0x46:\n            Colors.bgWhite = Table03Entry0AColors.bgWhite;\n            Colors.bgLightGrey = Table03Entry0AColors.bgLightGrey;\n            Colors.bgDarkGrey = Table03Entry0AColors.bgDarkGrey;\n            Colors.bgBlack = Table03Entry0AColors.bgBlack;\n            Colors.obj0White = Table03Entry0AColors.obj0White;\n            Colors.obj0LightGrey = Table03Entry0AColors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table03Entry0AColors.obj0DarkGrey;\n            Colors.obj0Black = Table03Entry0AColors.obj0Black;\n            Colors.obj1White = Table03Entry0AColors.obj1White;\n            Colors.obj1LightGrey = Table03Entry0AColors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table03Entry0AColors.obj1DarkGrey;\n            Colors.obj1Black = Table03Entry0AColors.obj1Black;\n            break;\n        case 0x59:\n        case 0xc6:\n            Colors.bgWhite = Table05Entry00Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry00Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry00Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry00Colors.bgBlack;\n            Colors.obj0White = Table05Entry00Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry00Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry00Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry00Colors.obj0Black;\n            Colors.obj1White = Table05Entry00Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry00Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry00Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry00Colors.obj1Black;\n            break;\n        case 0x86:\n        case 0xa8:\n            Colors.bgWhite = Table05Entry01Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry01Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry01Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry01Colors.bgBlack;\n            Colors.obj0White = Table05Entry01Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry01Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry01Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry01Colors.obj0Black;\n            Colors.obj1White = Table05Entry01Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry01Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry01Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry01Colors.obj1Black;\n            break;\n        case 0xbf:\n        case 0xce:\n        case 0xd1:\n        case 0xf0:\n            Colors.bgWhite = Table05Entry02Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry02Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry02Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry02Colors.bgBlack;\n            Colors.obj0White = Table05Entry02Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry02Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry02Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry02Colors.obj0Black;\n            Colors.obj1White = Table05Entry02Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry02Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry02Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry02Colors.obj1Black;\n            break;\n        case 0x27:\n        case 0x49:\n        case 0x5c:\n        case 0xb3:\n            Colors.bgWhite = Table05Entry08Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry08Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry08Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry08Colors.bgBlack;\n            Colors.obj0White = Table05Entry08Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry08Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry08Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry08Colors.obj0Black;\n            Colors.obj1White = Table05Entry08Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry08Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry08Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry08Colors.obj1Black;\n            break;\n        case 0xc9:\n            Colors.bgWhite = Table05Entry09Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry09Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry09Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry09Colors.bgBlack;\n            Colors.obj0White = Table05Entry09Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry09Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry09Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry09Colors.obj0Black;\n            Colors.obj1White = Table05Entry09Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry09Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry09Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry09Colors.obj1Black;\n            break;\n        case 0x70:\n            Colors.bgWhite = Table05Entry11Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry11Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry11Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry11Colors.bgBlack;\n            Colors.obj0White = Table05Entry11Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry11Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry11Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry11Colors.obj0Black;\n            Colors.obj1White = Table05Entry11Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry11Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry11Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry11Colors.obj1Black;\n            break;\n        case 0x46:\n            Colors.bgWhite = Table05Entry14Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry14Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry14Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry14Colors.bgBlack;\n            Colors.obj0White = Table05Entry14Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry14Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry14Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry14Colors.obj0Black;\n            Colors.obj1White = Table05Entry14Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry14Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry14Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry14Colors.obj1Black;\n            break;\n        case 0xd3:\n            Colors.bgWhite = Table05Entry15Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry15Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry15Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry15Colors.bgBlack;\n            Colors.obj0White = Table05Entry15Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry15Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry15Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry15Colors.obj0Black;\n            Colors.obj1White = Table05Entry15Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry15Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry15Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry15Colors.obj1Black;\n            break;\n    }\n}\n\n// Grouped registers\n// possible overload these later to performace actions\n// AF, BC, DE, HL\nfunction concatenateBytes(highByte, lowByte) {\n    //https://stackoverflow.com/questions/38298412/convert-two-bytes-into-signed-16-bit-integer-in-javascript\n    return ((highByte & 0xff) << 8) | (lowByte & 0xff);\n}\nfunction splitHighByte(groupedByte) {\n    return (groupedByte & 0xff00) >> 8;\n}\nfunction splitLowByte(groupedByte) {\n    return groupedByte & 0x00ff;\n}\nfunction rotateByteLeft(value) {\n    // Rotate left\n    // https://stackoverflow.com/questions/19204750/how-do-i-perform-a-circular-rotation-of-a-byte\n    // 4-bit example:\n    // 1010 -> 0100 | 0001\n    return u8Portable((value << 1) | (value >> 7));\n}\nfunction rotateByteLeftThroughCarry(value) {\n    // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Through carry meaning, instead of raotating the bit that gets dropped off, but the carry there instead\n    return u8Portable((value << 1) | getCarryFlag$$1());\n}\nfunction rotateByteRight(value) {\n    // Rotate right\n    // 4-bit example:\n    // 1010 -> 0101 | 0000\n    return u8Portable((value >> 1) | (value << 7));\n}\nfunction rotateByteRightThroughCarry(value) {\n    // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Through carry meaning, instead of raotating the bit that gets dropped off, put the carry there instead\n    return u8Portable((value >> 1) | (getCarryFlag$$1() << 7));\n}\nfunction setBitOnByte(bitPosition, byte) {\n    return byte | (0x01 << bitPosition);\n}\nfunction resetBitOnByte(bitPosition, byte) {\n    return byte & ~(0x01 << bitPosition);\n}\nfunction checkBitOnByte(bitPosition, byte) {\n    // Perforamnce improvements\n    // https://github.com/AssemblyScript/assemblyscript/issues/40\n    return (byte & (1 << bitPosition)) != 0;\n}\n\n// Class for GBC Color palletes\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\nvar Palette = /** @class */ (function () {\n    function Palette() {\n    }\n    Palette.memoryLocationBackgroundPaletteIndex = 0xff68;\n    Palette.memoryLocationBackgroundPaletteData = 0xff69;\n    Palette.memoryLocationSpritePaletteIndex = 0xff6a;\n    Palette.memoryLocationSpritePaletteData = 0xff6b;\n    // Palettes\n    Palette.memoryLocationBackgroundPalette = 0xff47;\n    Palette.memoryLocationSpritePaletteOne = 0xff48;\n    Palette.memoryLocationSpritePaletteTwo = 0xff49;\n    return Palette;\n}());\n// Inlined because closure compiler inlines\nfunction initializePalette() {\n    if (Cpu.GBCEnabled) {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff68, 0xc0);\n        eightBitStoreIntoGBMemory(0xff69, 0xff);\n        eightBitStoreIntoGBMemory(0xff6a, 0xc1);\n        eightBitStoreIntoGBMemory(0xff6b, 0x0d);\n    }\n    else {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff68, 0xff);\n        eightBitStoreIntoGBMemory(0xff69, 0xff);\n        eightBitStoreIntoGBMemory(0xff6a, 0xff);\n        eightBitStoreIntoGBMemory(0xff6b, 0xff);\n    }\n    // Override some values if using the bootrom\n    if (Cpu.BootROMEnabled && Cpu.GBCEnabled) {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff69, 0x20);\n        eightBitStoreIntoGBMemory(0xff6b, 0x8a);\n    }\n}\n// Simple get pallete color or monochrome GB\n// shouldRepresentColorByColorId is good for debugging tile data for GBC games that don't have\n// monochromePalettes\n// Inlined because closure compiler inlines\nfunction getMonochromeColorFromPalette(colorId, paletteMemoryLocation, shouldRepresentColorByColorId) {\n    if (shouldRepresentColorByColorId === void 0) { shouldRepresentColorByColorId = false; }\n    // Shift our paletteByte, 2 times for each color ID\n    // And off any extra bytes\n    // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n    var color = colorId;\n    if (!shouldRepresentColorByColorId) {\n        color = (eightBitLoadFromGBMemory(paletteMemoryLocation) >> (colorId << 1)) & 0x03;\n    }\n    // Since our max is 254, and max is 3.\n    // monochrome color palette is modified from bgb\n    // TODO: Make these colors into a constant\n    var rgbColor = 242;\n    switch (color) {\n        case 0:\n            break;\n        case 1:\n            rgbColor = 160;\n            break;\n        case 2:\n            rgbColor = 88;\n            break;\n        case 3:\n            rgbColor = 8;\n            break;\n    }\n    return rgbColor;\n}\n// Function to returns the Colorized color for a GB games\nfunction getColorizedGbHexColorFromPalette(colorId, paletteMemoryLocation) {\n    // Shift our paletteByte, 2 times for each color ID\n    // And off any extra bytes\n    // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n    var color = (eightBitLoadFromGBMemory(paletteMemoryLocation) >> (colorId * 2)) & 0x03;\n    // Check which palette we got, to apply the right color layer\n    var hexColor = 0;\n    if (paletteMemoryLocation === Palette.memoryLocationSpritePaletteOne) {\n        hexColor = Colors.obj0White;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.obj0LightGrey;\n                break;\n            case 2:\n                hexColor = Colors.obj0DarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.obj0Black;\n                break;\n        }\n    }\n    else if (paletteMemoryLocation === Palette.memoryLocationSpritePaletteTwo) {\n        hexColor = Colors.obj1White;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.obj1LightGrey;\n                break;\n            case 2:\n                hexColor = Colors.obj1DarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.obj1Black;\n                break;\n        }\n    }\n    else {\n        hexColor = Colors.bgWhite;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.bgLightGrey;\n                break;\n            case 2:\n                hexColor = Colors.bgDarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.bgBlack;\n                break;\n        }\n    }\n    return hexColor;\n}\n// Inlined because closure compiler inlines\nfunction writeColorPaletteToMemory(offset, value) {\n    // FF68\n    //  Bit 0-5   Index (00-3F)\n    var memoryLocationSpritePaletteData = Palette.memoryLocationSpritePaletteData;\n    if (offset === Palette.memoryLocationBackgroundPaletteData || offset === memoryLocationSpritePaletteData) {\n        // Get the palette index\n        var paletteIndex = eightBitLoadFromGBMemory(offset - 1);\n        // Clear the 6th bit, as it does nothing\n        paletteIndex = resetBitOnByte(6, paletteIndex);\n        // Check if we are changing the sprite pallete data\n        var isSprite = offset === memoryLocationSpritePaletteData;\n        storePaletteByteInWasmMemory(paletteIndex, value, isSprite);\n        incrementPaletteIndexIfSet(paletteIndex, offset - 1);\n    }\n}\n// Functions to Handle Write to pallete data registers\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\n// Function to handle incrementing the pallete index if required\n// Inlined because closure compiler inlines\nfunction incrementPaletteIndexIfSet(paletteIndex, offset) {\n    // Check ther auto increment box\n    if (checkBitOnByte(7, paletteIndex)) {\n        // Increment the index, and return the value before the increment\n        // Ensure we don't ouverflow our auto increment bit\n        paletteIndex += 1;\n        paletteIndex = setBitOnByte(7, paletteIndex);\n        eightBitStoreIntoGBMemory(offset, paletteIndex);\n    }\n}\n// FF68\n// Bit 0-5   Index (00-3F)\n// Bit 7     Auto Increment  (0=Disabled, 1=Increment after Writing)\n// Index is 00-0x3F because the means 0 - 63 (64),\n// and apparently there are 8 bytes per pallete to describe Color 0-3 (4 colors),\n// and 0-7 (8 palltetes). Therefore, 64!\nfunction getRgbColorFromPalette(paletteId, colorId, isSprite) {\n    // Each Pallete takes 8 bytes, so multiply by 8 to get the pallete\n    // And Each color takes 2 bytes, therefore, multiple by 2 for the correct color bytes in the palette\n    var paletteIndex = paletteId * 8 + colorId * 2;\n    // Load the Color that is seperated into two bytes\n    var paletteHighByte = loadPaletteByteFromWasmMemory(paletteIndex + 1, isSprite);\n    var paletteLowByte = loadPaletteByteFromWasmMemory(paletteIndex, isSprite);\n    // Return the concatenated color byte\n    return concatenateBytes(paletteHighByte, paletteLowByte);\n}\n// Function to return the color from a passed 16 bit color pallette\nfunction getColorComponentFromRgb(colorId, colorRgb) {\n    // Get our bitmask for the color ID\n    // bit mask tested good :)\n    colorId *= 5;\n    var bitMask = 0x1f << colorId;\n    var colorValue = (colorRgb & bitMask) >> colorId;\n    // Goal is to reach 254 for each color, so 255 / 31 (0x1F) ~8 TODO: Make exact\n    // Want 5 bits for each\n    return colorValue * 8;\n}\n// Function to load a byte from our Gbc Palette memory\nfunction loadPaletteByteFromWasmMemory(paletteIndexByte, isSprite) {\n    // Clear the top two bits to just get the bottom palette Index\n    var paletteIndex = paletteIndexByte & 0x3f;\n    // Move over the palette index to not overlap the background has 0x3F, so Zero for Sprites is 0x40)\n    if (isSprite) {\n        paletteIndex += 0x40;\n    }\n    return load(GBC_PALETTE_LOCATION + paletteIndex);\n}\n// Function to store a byte to our Gbc Palette memory\n// Inlined because closure compiler inlines\nfunction storePaletteByteInWasmMemory(paletteIndexByte, value, isSprite) {\n    // Clear the top two bits to just get the bottom palette Index\n    var paletteIndex = paletteIndexByte & 0x3f;\n    // Move over the palette index to not overlap the background (has 0x3F, so Zero for Sprites is 0x40)\n    if (isSprite) {\n        paletteIndex += 0x40;\n    }\n    store(GBC_PALETTE_LOCATION + paletteIndex, value);\n}\n\n// https://github.com/torch2424/wasmBoy/issues/51\nfunction addPriorityforPixel(x, y, colorId, hasGbcBgPriority) {\n    if (colorId === void 0) { colorId = 0; }\n    if (hasGbcBgPriority === void 0) { hasGbcBgPriority = false; }\n    var bgPriorityByte = colorId & 0x03;\n    if (hasGbcBgPriority) {\n        bgPriorityByte = setBitOnByte(2, bgPriorityByte);\n    }\n    store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), bgPriorityByte);\n}\n// Inlined because closure compiler inlines\nfunction getPriorityforPixel(x, y) {\n    return load(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y));\n}\n// Inlined because closure compiler inlines\nfunction clearPriorityMap() {\n    for (var y = 0; y < 144; ++y) {\n        for (var x = 0; x < 160; ++x) {\n            store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), 0);\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction getPixelStart(x, y) {\n    // Get the pixel number\n    return y * 160 + x;\n}\n\n// Functions for performance hacks, and debugging tiles\nvar TileCache = /** @class */ (function () {\n    function TileCache() {\n    }\n    TileCache.tileId = -1;\n    TileCache.horizontalFlip = false;\n    TileCache.nextXIndexToPerformCacheCheck = -1;\n    return TileCache;\n}());\n// Inlined because closure compiler inlines\nfunction resetTileCache() {\n    TileCache.tileId = -1;\n    TileCache.nextXIndexToPerformCacheCheck = -1;\n}\nfunction drawPixelsFromLineOfTile(tileId, tileDataMemoryLocation, vramBankId, tileLineXStart, tileLineXEnd, tileLineY, outputLineX, outputLineY, outputWidth, wasmMemoryStart, shouldRepresentMonochromeColorByColorId, paletteLocation, bgMapAttributes, spriteAttributes) {\n    // Get our number of pixels drawn\n    var pixelsDrawn = 0;\n    // Get our tile data address\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileId);\n    // Get the bytes for our tile\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2, vramBankId);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2 + 1, vramBankId);\n    // Loop through our X values to draw\n    for (var x = tileLineXStart; x <= tileLineXEnd; ++x) {\n        // First find where we are going to do our final output x\n        // And don't allow any width overflow\n        var iteratedOutputX = outputLineX + (x - tileLineXStart);\n        if (iteratedOutputX < outputWidth) {\n            // However, We need to reverse our byte (if not horizontally flipped),\n            // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n            // Therefore, is pixelX was 2, then really is need to be 5\n            // So 2 - 7 = -5, * 1 = 5\n            // Or to simplify, 7 - 2 = 5 haha!\n            var pixelXInTile = x;\n            if (bgMapAttributes < 0 || !checkBitOnByte(5, bgMapAttributes)) {\n                pixelXInTile = 7 - pixelXInTile;\n            }\n            // Get our pallete colors for the tile\n            var paletteColorId = 0;\n            if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n                // Byte one represents the second bit in our color id, so bit shift\n                paletteColorId += 1;\n                paletteColorId = paletteColorId << 1;\n            }\n            if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n                paletteColorId += 1;\n            }\n            // Get the pallete\n            var red = 0;\n            var green = 0;\n            var blue = 0;\n            // Check if we should draw color or not\n            if (Cpu.GBCEnabled && (bgMapAttributes >= 0 || spriteAttributes >= 0)) {\n                // Draw C O L O R\n                var isSprite = spriteAttributes >= 0;\n                // Call the helper function to grab the correct color from the palette\n                // Get the palette index byte\n                var bgPalette = bgMapAttributes & 0x07;\n                if (isSprite) {\n                    bgPalette = spriteAttributes & 0x07;\n                }\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, isSprite);\n                // Split off into red green and blue\n                red = getColorComponentFromRgb(0, rgbColorPalette);\n                green = getColorComponentFromRgb(1, rgbColorPalette);\n                blue = getColorComponentFromRgb(2, rgbColorPalette);\n            }\n            else {\n                // Draw Monochrome\n                // Get the default palette if none\n                if (paletteLocation <= 0) {\n                    paletteLocation = Graphics.memoryLocationBackgroundPalette;\n                }\n                if (shouldRepresentMonochromeColorByColorId) {\n                    var monochromeColor = getMonochromeColorFromPalette(paletteColorId, paletteLocation, shouldRepresentMonochromeColorByColorId);\n                    red = monochromeColor;\n                    green = monochromeColor;\n                    blue = monochromeColor;\n                }\n                else {\n                    var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, paletteLocation);\n                    red = getRedFromHexColor(hexColor);\n                    green = getGreenFromHexColor(hexColor);\n                    blue = getBlueFromHexColor(hexColor);\n                }\n            }\n            // Finally Lets place a pixel in memory\n            // Find where our tile line would start\n            var pixelStart = getTilePixelStart(iteratedOutputX, outputLineY, outputWidth);\n            // Can not optimize wasmMemoryStart any further, as this is in a loop.\n            store(wasmMemoryStart + pixelStart + 0, red);\n            store(wasmMemoryStart + pixelStart + 1, green);\n            store(wasmMemoryStart + pixelStart + 2, blue);\n            var gbcBgPriority = false;\n            if (bgMapAttributes >= 0) {\n                gbcBgPriority = checkBitOnByte(7, bgMapAttributes);\n            }\n            // Lastly, add the pixel to our background priority map\n            // https://github.com/torch2424/wasmBoy/issues/51\n            // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n            // Bit 2 will represent if the Bg/Window has GBC priority.\n            addPriorityforPixel(iteratedOutputX, outputLineY, paletteColorId, gbcBgPriority);\n            pixelsDrawn++;\n        }\n    }\n    return pixelsDrawn;\n}\n// Inlined because closure compiler inlines\nfunction getTilePixelStart(outputLineX, outputLineY, outputWidth) {\n    // Finally Lets place a pixel in memory\n    var pixelStart = outputLineY * outputWidth + outputLineX;\n    // Each pixel takes 3 slots, therefore, multiply by 3!\n    return pixelStart * 3;\n}\nfunction getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap) {\n    // Watch this part of The ultimate gameboy talk: https://youtu.be/HyzD8pNlpwI?t=30m50s\n    // A line of 8 pixels on a single tile, is represented by 2 bytes.\n    // since a single tile is 8x8 pixels, 8 * 2 = 16 bytes\n    // Get the tile ID's tile addess from tile data.\n    // For instance, let's say our first line of tile data represents tiles for letters:\n    // a b c d e f g\n    // And we have tileId 0x02. That means we want the tile for the 'c' character\n    // Since each tile is 16 bytes, it would be the starting tileDataAddress + (tileId * tileSize), to skip over tiles we dont want\n    // The whole signed thing is weird, and has something to do how the second set of tile data is stored :p\n    if (tileDataMemoryLocation === Graphics.memoryLocationTileDataSelectZeroStart) {\n        // Treat the tile Id as a signed int, subtract an offset of 128\n        // if the tileId was 0 then the tile would be in memory region 0x9000-0x900F\n        if (checkBitOnByte(7, tileIdFromTileMap)) {\n            tileIdFromTileMap -= 128;\n        }\n        else {\n            tileIdFromTileMap += 128;\n        }\n    }\n    // if the background layout gave us the tileId 0, then the tile data would be between 0x8000-0x800F.\n    return tileDataMemoryLocation + tileIdFromTileMap * 16;\n}\n\n// Functions to help with Handling Duty on Square Channels\n// Since there are no 2d arrays, we will use a byte to represent duty cycles (wave form from percentages)\nfunction isDutyCycleClockPositiveOrNegativeForWaveform(channelDuty, waveFormPositionOnDuty) {\n    // Get our Wave Form According to the Duty\n    // Default to a duty of 1\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n    switch (channelDuty) {\n        case 0x01:\n            // 1000 0001\n            return checkBitOnByte(waveFormPositionOnDuty, 0x81);\n        case 0x02:\n            // 1000 0111\n            return checkBitOnByte(waveFormPositionOnDuty, 0x87);\n        case 0x03:\n            // 0111 1110\n            return checkBitOnByte(waveFormPositionOnDuty, 0x7e);\n        default:\n            // 0000 0001\n            return checkBitOnByte(waveFormPositionOnDuty, 0x01);\n    }\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel1 = /** @class */ (function () {\n    function Channel1() {\n    }\n    Channel1.updateNRx0 = function (value) {\n        Channel1.NRx0SweepPeriod = (value & 0x70) >> 4;\n        Channel1.NRx0Negate = checkBitOnByte(3, value);\n        Channel1.NRx0SweepShift = value & 0x07;\n    };\n    Channel1.updateNRx1 = function (value) {\n        Channel1.NRx1Duty = (value >> 6) & 0x03;\n        Channel1.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel1.lengthCounter = 64 - Channel1.NRx1LengthLoad;\n    };\n    Channel1.updateNRx2 = function (value) {\n        Channel1.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel1.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel1.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        Channel1.isDacEnabled = (value & 0xf8) > 0;\n    };\n    Channel1.updateNRx3 = function (value) {\n        Channel1.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel1.frequency = (Channel1.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel1.updateNRx4 = function (value) {\n        Channel1.NRx4LengthEnabled = checkBitOnByte(6, value);\n        value &= 0x07;\n        Channel1.NRx4FrequencyMSB = value;\n        // Update Channel Frequency\n        Channel1.frequency = (value << 8) | Channel1.NRx3FrequencyLSB;\n    };\n    // Function to save the state of the class\n    Channel1.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot), Channel1.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel1.saveStateSlot), Channel1.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot), Channel1.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot), Channel1.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot), Channel1.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel1.saveStateSlot), Channel1.dutyCycle);\n        store(getSaveStateMemoryOffset(0x14, Channel1.saveStateSlot), Channel1.waveFormPositionOnDuty);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x19, Channel1.saveStateSlot), Channel1.isSweepEnabled);\n        store(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot), Channel1.sweepCounter);\n        store(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot), Channel1.sweepShadowFrequency);\n    };\n    // Function to load the save state from memory\n    Channel1.loadState = function () {\n        Channel1.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot));\n        Channel1.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel1.saveStateSlot));\n        Channel1.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot));\n        Channel1.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot));\n        Channel1.volume = load(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot));\n        Channel1.dutyCycle = load(getSaveStateMemoryOffset(0x13, Channel1.saveStateSlot));\n        Channel1.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x14, Channel1.saveStateSlot));\n        Channel1.isSweepEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x19, Channel1.saveStateSlot));\n        Channel1.sweepCounter = load(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot));\n        Channel1.sweepShadowFrequency = load(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot));\n    };\n    Channel1.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx0, 0x80);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx1, 0xbf);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx2, 0xf3);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, 0xc1);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, 0xbf);\n        // Override/reset some variables if the boot ROM is enabled\n        // For GBC and GB\n        if (Cpu.BootROMEnabled) {\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx1, 0x3f);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx2, 0x00);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, 0x00);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, 0xb8);\n        }\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel1.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel1.cycleCounter;\n        Channel1.cycleCounter = 0;\n        return Channel1.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel1.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel1.frequency) << 2;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        if (Cpu.GBCDoubleSpeed) {\n            frequencyTimer = frequencyTimer << 2;\n        }\n        Channel1.frequencyTimer = frequencyTimer;\n    };\n    Channel1.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel1.frequencyTimer - numberOfCycles;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            Channel1.frequencyTimer = frequencyTimer;\n            // Reset our timer\n            // A square channel's frequency timer period is set to (2048-frequency)*4.\n            // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n            Channel1.resetTimer();\n            Channel1.frequencyTimer -= overflowAmount;\n            // Also increment our duty cycle\n            // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n            // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n            Channel1.waveFormPositionOnDuty = (Channel1.waveFormPositionOnDuty + 1) & 7;\n        }\n        else {\n            Channel1.frequencyTimer = frequencyTimer;\n        }\n        // Get our ourput volume\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel1.isEnabled && Channel1.isDacEnabled) {\n            outputVolume = Channel1.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sampleValue\n        var sample = 1;\n        if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel1.NRx1Duty, Channel1.waveFormPositionOnDuty)) {\n            sample = -sample;\n        }\n        sample *= outputVolume;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel1.trigger = function () {\n        Channel1.isEnabled = true;\n        if (Channel1.lengthCounter === 0) {\n            Channel1.lengthCounter = 64;\n        }\n        // Reset our timer\n        // A square channel's frequency timer period is set to (2048-frequency)*4.\n        // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n        Channel1.resetTimer();\n        Channel1.envelopeCounter = Channel1.NRx2EnvelopePeriod;\n        Channel1.volume = Channel1.NRx2StartingVolume;\n        // Handle Channel Sweep\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        Channel1.sweepShadowFrequency = Channel1.frequency;\n        // Reset back to the sweep period\n        Channel1.sweepCounter = Channel1.NRx0SweepPeriod;\n        // The internal enabled flag is set if either the sweep period or shift are non-zero, cleared otherwise.\n        Channel1.isSweepEnabled = Channel1.NRx0SweepPeriod > 0 && Channel1.NRx0SweepShift > 0;\n        // If the sweep shift is non-zero, frequency calculation and the overflow check are performed immediately.\n        if (Channel1.NRx0SweepShift > 0) {\n            calculateSweepAndCheckOverflow();\n        }\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel1.isDacEnabled) {\n            Channel1.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel1.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        var cycleCounter = Channel1.cycleCounter + numberOfCycles;\n        Channel1.cycleCounter = cycleCounter;\n        // Dac enabled status cached by accumulator\n        return !(Channel1.frequencyTimer - cycleCounter > 0);\n    };\n    Channel1.updateSweep = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        // Decrement the sweep counter\n        var sweepCounter = Channel1.sweepCounter - 1;\n        if (sweepCounter <= 0) {\n            // Reset back to the sweep period\n            Channel1.sweepCounter = Channel1.NRx0SweepPeriod;\n            // Calculate our sweep\n            // When it generates a clock and the sweep's internal enabled flag is set and the sweep period is not zero,\n            // a new frequency is calculated and the overflow check is performed.\n            if (Channel1.isSweepEnabled && Channel1.NRx0SweepPeriod > 0) {\n                calculateSweepAndCheckOverflow();\n            }\n        }\n        else {\n            Channel1.sweepCounter = sweepCounter;\n        }\n    };\n    Channel1.updateLength = function () {\n        var lengthCounter = Channel1.lengthCounter;\n        if (lengthCounter > 0 && Channel1.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel1.isEnabled = false;\n        }\n        Channel1.lengthCounter = lengthCounter;\n    };\n    Channel1.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel1.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel1.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            // If notes are sustained for too long, this is probably why\n            if (envelopeCounter !== 0) {\n                var volume = Channel1.volume;\n                if (Channel1.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel1.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel1.volume = volume;\n            }\n        }\n        Channel1.envelopeCounter = envelopeCounter;\n    };\n    Channel1.setFrequency = function (frequency) {\n        // Get the high and low bits\n        var passedFrequencyHighBits = frequency >> 8;\n        var passedFrequencyLowBits = frequency & 0xff;\n        // Get the new register 4\n        var register4 = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx4);\n        // Knock off lower 3 bits, and Or on our high bits\n        var newRegister4 = register4 & 0xf8;\n        newRegister4 = newRegister4 | passedFrequencyHighBits;\n        // Set the registers\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, passedFrequencyLowBits);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, newRegister4);\n        // Save the frequency for ourselves without triggering memory traps\n        Channel1.NRx3FrequencyLSB = passedFrequencyLowBits;\n        Channel1.NRx4FrequencyMSB = passedFrequencyHighBits;\n        Channel1.frequency = (Channel1.NRx4FrequencyMSB << 8) | Channel1.NRx3FrequencyLSB;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel1.cycleCounter = 0;\n    // Squarewave channel with volume envelope and frequency sweep functions.\n    // NR10 -> Sweep Register R/W\n    Channel1.memoryLocationNRx0 = 0xff10;\n    // -PPP NSSS Sweep period, negate, shift\n    Channel1.NRx0SweepPeriod = 0;\n    Channel1.NRx0Negate = false;\n    Channel1.NRx0SweepShift = 0;\n    // NR11 -> Sound length/Wave pattern duty (R/W)\n    Channel1.memoryLocationNRx1 = 0xff11;\n    // DDLL LLLL Duty, Length load (64-L)\n    Channel1.NRx1Duty = 0;\n    Channel1.NRx1LengthLoad = 0;\n    // NR12 -> Volume Envelope (R/W)\n    Channel1.memoryLocationNRx2 = 0xff12;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel1.NRx2StartingVolume = 0;\n    Channel1.NRx2EnvelopeAddMode = false;\n    Channel1.NRx2EnvelopePeriod = 0;\n    // NR13 -> Frequency lo (W)\n    Channel1.memoryLocationNRx3 = 0xff13;\n    // FFFF FFFF Frequency LSB\n    Channel1.NRx3FrequencyLSB = 0;\n    // NR14 -> Frequency hi (R/W)\n    Channel1.memoryLocationNRx4 = 0xff14;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel1.NRx4LengthEnabled = false;\n    Channel1.NRx4FrequencyMSB = 0;\n    // Channel Properties\n    Channel1.channelNumber = 1;\n    Channel1.isEnabled = false;\n    Channel1.isDacEnabled = false;\n    Channel1.frequency = 0;\n    Channel1.frequencyTimer = 0x00;\n    Channel1.envelopeCounter = 0x00;\n    Channel1.lengthCounter = 0x00;\n    Channel1.volume = 0x00;\n    // Square Wave properties\n    Channel1.dutyCycle = 0x00;\n    Channel1.waveFormPositionOnDuty = 0x00;\n    // Channel 1 Sweep\n    Channel1.isSweepEnabled = false;\n    Channel1.sweepCounter = 0x00;\n    Channel1.sweepShadowFrequency = 0x00;\n    // Save States\n    Channel1.saveStateSlot = 7;\n    return Channel1;\n}());\n// Sweep Specific functions\nfunction calculateSweepAndCheckOverflow() {\n    var newFrequency = getNewFrequencyFromSweep();\n    // 7FF is the highest value of the frequency: 111 1111 1111\n    if (newFrequency <= 0x7ff && Channel1.NRx0SweepShift > 0) {\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // If the new frequency is 2047 or less and the sweep shift is not zero,\n        // this new frequency is written back to the shadow frequency and square 1's frequency in NR13 and NR14,\n        // then frequency calculation and overflow check are run AGAIN immediately using this new value,\n        // but this second new frequency is not written back.\n        Channel1.sweepShadowFrequency = newFrequency;\n        Channel1.setFrequency(newFrequency);\n        // Re calculate the new frequency\n        newFrequency = getNewFrequencyFromSweep();\n    }\n    // Next check if the new Frequency is above 0x7FF\n    // if So, disable our sweep\n    if (newFrequency > 0x7ff) {\n        Channel1.isEnabled = false;\n    }\n}\n// Function to determing a new sweep in the current context\nfunction getNewFrequencyFromSweep() {\n    // Start our new frequency, by making it equal to the \"shadow frequency\"\n    var oldFrequency = Channel1.sweepShadowFrequency;\n    var newFrequency = oldFrequency;\n    newFrequency = newFrequency >> Channel1.NRx0SweepShift;\n    // Check for sweep negation\n    if (Channel1.NRx0Negate) {\n        newFrequency = oldFrequency - newFrequency;\n    }\n    else {\n        newFrequency = oldFrequency + newFrequency;\n    }\n    return newFrequency;\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel2 = /** @class */ (function () {\n    function Channel2() {\n    }\n    Channel2.updateNRx1 = function (value) {\n        Channel2.NRx1Duty = (value >> 6) & 0x03;\n        Channel2.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel2.lengthCounter = 64 - Channel2.NRx1LengthLoad;\n    };\n    Channel2.updateNRx2 = function (value) {\n        Channel2.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel2.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel2.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        Channel2.isDacEnabled = (value & 0xf8) > 0;\n    };\n    Channel2.updateNRx3 = function (value) {\n        Channel2.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel2.frequency = (Channel2.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel2.updateNRx4 = function (value) {\n        Channel2.NRx4LengthEnabled = checkBitOnByte(6, value);\n        value &= 0x07;\n        Channel2.NRx4FrequencyMSB = value;\n        // Update Channel Frequency\n        Channel2.frequency = (value << 8) | Channel2.NRx3FrequencyLSB;\n    };\n    // Function to save the state of the class\n    Channel2.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot), Channel2.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel2.saveStateSlot), Channel2.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel2.saveStateSlot), Channel2.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel2.saveStateSlot), Channel2.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot), Channel2.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel2.saveStateSlot), Channel2.dutyCycle);\n        store(getSaveStateMemoryOffset(0x14, Channel2.saveStateSlot), Channel2.waveFormPositionOnDuty);\n    };\n    // Function to load the save state from memory\n    Channel2.loadState = function () {\n        Channel2.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot));\n        Channel2.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel2.saveStateSlot));\n        Channel2.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel2.saveStateSlot));\n        Channel2.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel2.saveStateSlot));\n        Channel2.volume = load(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot));\n        Channel2.dutyCycle = load(getSaveStateMemoryOffset(0x13, Channel2.saveStateSlot));\n        Channel2.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x14, Channel2.saveStateSlot));\n    };\n    Channel2.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1 - 1, 0xff);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1, 0x3f);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx2, 0x00);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, 0xb8);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel2.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel2.cycleCounter;\n        Channel2.cycleCounter = 0;\n        return Channel2.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel2.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel2.frequency) << 2;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        Channel2.frequencyTimer = frequencyTimer << Cpu.GBCDoubleSpeed;\n    };\n    Channel2.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel2.frequencyTimer - numberOfCycles;\n        Channel2.frequencyTimer = frequencyTimer;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            // A square channel's frequency timer period is set to (2048-frequency)*4.\n            // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n            Channel2.resetTimer();\n            Channel2.frequencyTimer -= overflowAmount;\n            // Also increment our duty cycle\n            // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n            // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n            Channel2.waveFormPositionOnDuty = (Channel2.waveFormPositionOnDuty + 1) & 7;\n        }\n        // Get our ourput volume\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel2.isEnabled && Channel2.isDacEnabled) {\n            outputVolume = Channel2.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sampleValue\n        var sample = 1;\n        if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel2.NRx1Duty, Channel2.waveFormPositionOnDuty)) {\n            sample = -sample;\n        }\n        sample = sample * outputVolume;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel2.trigger = function () {\n        Channel2.isEnabled = true;\n        if (Channel2.lengthCounter === 0) {\n            Channel2.lengthCounter = 64;\n        }\n        // Reset our timer\n        // A square channel's frequency timer period is set to (2048-frequency)*4.\n        // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n        Channel2.resetTimer();\n        Channel2.envelopeCounter = Channel2.NRx2EnvelopePeriod;\n        Channel2.volume = Channel2.NRx2StartingVolume;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel2.isDacEnabled) {\n            Channel2.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel2.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        var cycleCounter = Channel2.cycleCounter + numberOfCycles;\n        Channel2.cycleCounter = cycleCounter;\n        // Dac enabled status cached by accumulator\n        return !(Channel2.frequencyTimer - cycleCounter > 0);\n    };\n    Channel2.updateLength = function () {\n        var lengthCounter = Channel2.lengthCounter;\n        if (lengthCounter > 0 && Channel2.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel2.isEnabled = false;\n        }\n        Channel2.lengthCounter = lengthCounter;\n    };\n    Channel2.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel2.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel2.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            if (envelopeCounter !== 0) {\n                var volume = Channel2.volume;\n                if (Channel2.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel2.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel2.volume = volume;\n            }\n        }\n        Channel2.envelopeCounter = envelopeCounter;\n    };\n    Channel2.setFrequency = function (frequency) {\n        // Get the high and low bits\n        var passedFrequencyHighBits = frequency >> 8;\n        var passedFrequencyLowBits = frequency & 0xff;\n        // Get the new register 4\n        var register4 = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx4);\n        // Knock off lower 3 bits, and Or on our high bits\n        var newRegister4 = register4 & 0xf8;\n        newRegister4 = newRegister4 | passedFrequencyHighBits;\n        // Set the registers\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, passedFrequencyLowBits);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, newRegister4);\n        // Save the frequency for ourselves without triggering memory traps\n        Channel2.NRx3FrequencyLSB = passedFrequencyLowBits;\n        Channel2.NRx4FrequencyMSB = passedFrequencyHighBits;\n        Channel2.frequency = (passedFrequencyHighBits << 8) | passedFrequencyLowBits;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel2.cycleCounter = 0;\n    // Squarewave channel with volume envelope functions only.\n    // NR21 -> Sound length/Wave pattern duty (R/W)\n    Channel2.memoryLocationNRx1 = 0xff16;\n    // DDLL LLLL Duty, Length load (64-L)\n    Channel2.NRx1Duty = 0;\n    Channel2.NRx1LengthLoad = 0;\n    // NR22 -> Volume Envelope (R/W)\n    Channel2.memoryLocationNRx2 = 0xff17;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel2.NRx2StartingVolume = 0;\n    Channel2.NRx2EnvelopeAddMode = false;\n    Channel2.NRx2EnvelopePeriod = 0;\n    // NR23 -> Frequency lo (W)\n    Channel2.memoryLocationNRx3 = 0xff18;\n    // FFFF FFFF Frequency LSB\n    Channel2.NRx3FrequencyLSB = 0;\n    // NR24 -> Frequency hi (R/W)\n    Channel2.memoryLocationNRx4 = 0xff19;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel2.NRx4LengthEnabled = false;\n    Channel2.NRx4FrequencyMSB = 0;\n    // Channel Properties\n    Channel2.channelNumber = 2;\n    Channel2.isEnabled = false;\n    Channel2.isDacEnabled = false;\n    Channel2.frequency = 0;\n    Channel2.frequencyTimer = 0x00;\n    Channel2.envelopeCounter = 0x00;\n    Channel2.lengthCounter = 0x00;\n    Channel2.volume = 0x00;\n    // Square Wave properties\n    Channel2.dutyCycle = 0x00;\n    Channel2.waveFormPositionOnDuty = 0x00;\n    // Save States\n    Channel2.saveStateSlot = 8;\n    return Channel2;\n}());\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel3 = /** @class */ (function () {\n    function Channel3() {\n    }\n    // E--- ---- DAC power\n    Channel3.updateNRx0 = function (value) {\n        Channel3.isDacEnabled = checkBitOnByte(7, value);\n    };\n    Channel3.updateNRx1 = function (value) {\n        Channel3.NRx1LengthLoad = value;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        // Supposed to be 256, so subtracting 255 and then adding 1 if that makes sense\n        Channel3.lengthCounter = 256 - Channel3.NRx1LengthLoad;\n    };\n    Channel3.updateNRx2 = function (value) {\n        Channel3.NRx2VolumeCode = (value >> 5) & 0x0f;\n    };\n    Channel3.updateNRx3 = function (value) {\n        Channel3.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel3.frequency = (Channel3.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel3.updateNRx4 = function (value) {\n        Channel3.NRx4LengthEnabled = checkBitOnByte(6, value);\n        value &= 0x07;\n        Channel3.NRx4FrequencyMSB = value;\n        // Update Channel Frequency\n        Channel3.frequency = (value << 8) | Channel3.NRx3FrequencyLSB;\n    };\n    // Function to save the state of the class\n    Channel3.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot), Channel3.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel3.saveStateSlot), Channel3.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel3.saveStateSlot), Channel3.lengthCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel3.saveStateSlot), Channel3.waveTablePosition);\n    };\n    // Function to load the save state from memory\n    Channel3.loadState = function () {\n        Channel3.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot));\n        Channel3.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel3.saveStateSlot));\n        Channel3.lengthCounter = load(getSaveStateMemoryOffset(0x05, Channel3.saveStateSlot));\n        Channel3.waveTablePosition = load(getSaveStateMemoryOffset(0x09, Channel3.saveStateSlot));\n    };\n    Channel3.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx0, 0x7f);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx1, 0xff);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx2, 0x9f);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx4, 0xb8);\n        // The volume code changed\n        Channel3.volumeCodeChanged = true;\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel3.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel3.cycleCounter;\n        Channel3.cycleCounter = 0;\n        return Channel3.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel3.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel3.frequency) << 1;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        Channel3.frequencyTimer = frequencyTimer << Cpu.GBCDoubleSpeed;\n    };\n    Channel3.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel3.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            Channel3.frequencyTimer = frequencyTimer;\n            // Reset our timer\n            // A wave channel's frequency timer period is set to (2048-frequency) * 2.\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n            Channel3.resetTimer();\n            Channel3.frequencyTimer -= overflowAmount;\n            // Advance the wave table position, and loop back if needed\n            Channel3.waveTablePosition = (Channel3.waveTablePosition + 1) & 31;\n        }\n        else {\n            Channel3.frequencyTimer = frequencyTimer;\n        }\n        // Get our output volume\n        var volumeCode = Channel3.volumeCode;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel3.isEnabled && Channel3.isDacEnabled) {\n            // Get our volume code\n            if (Channel3.volumeCodeChanged) {\n                volumeCode = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx2);\n                volumeCode = volumeCode >> 5;\n                volumeCode = volumeCode & 0x0f;\n                Channel3.volumeCode = volumeCode;\n                Channel3.volumeCodeChanged = false;\n            }\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sample\n        var sample = 0;\n        // Will Find the position, and knock off any remainder\n        var waveTablePosition = Channel3.waveTablePosition;\n        var positionIndexToAdd = i32Portable(waveTablePosition >> 1);\n        var memoryLocationWaveSample = Channel3.memoryLocationWaveTable + positionIndexToAdd;\n        sample = eightBitLoadFromGBMemory(memoryLocationWaveSample);\n        // Need to grab the top or lower half for the correct sample\n        sample >>= ((waveTablePosition & 1) === 0) << 2;\n        sample &= 0x0f;\n        // Shift our sample and set our volume depending on the volume code\n        // Since we can't multiply by float, simply divide by 4, 2, 1\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n        var outputVolume = 0;\n        switch (volumeCode) {\n            case 0:\n                sample >>= 4;\n                break;\n            case 1:\n                // Dont Shift sample\n                outputVolume = 1;\n                break;\n            case 2:\n                sample >>= 1;\n                outputVolume = 2;\n                break;\n            default:\n                sample >>= 2;\n                outputVolume = 4;\n                break;\n        }\n        // Spply out output volume\n        sample = outputVolume > 0 ? sample / outputVolume : 0;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel3.trigger = function () {\n        Channel3.isEnabled = true;\n        if (Channel3.lengthCounter === 0) {\n            Channel3.lengthCounter = 256;\n        }\n        // Reset our timer\n        // A wave channel's frequency timer period is set to (2048-frequency)*2.\n        Channel3.resetTimer();\n        // Reset our wave table position\n        Channel3.waveTablePosition = 0;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel3.isDacEnabled) {\n            Channel3.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel3.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        Channel3.cycleCounter += numberOfCycles;\n        // Dac enabled status cached by accumulator\n        return !(!Channel3.volumeCodeChanged && Channel3.frequencyTimer - Channel3.cycleCounter > 0);\n    };\n    Channel3.updateLength = function () {\n        var lengthCounter = Channel3.lengthCounter;\n        if (lengthCounter > 0 && Channel3.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel3.isEnabled = false;\n        }\n        Channel3.lengthCounter = lengthCounter;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel3.cycleCounter = 0;\n    // Voluntary Wave channel with 32 4-bit programmable samples, played in sequence.\n    // NR30 -> Sound on/off (R/W)\n    Channel3.memoryLocationNRx0 = 0xff1a;\n    // NR31 -> Sound length (R/W)\n    Channel3.memoryLocationNRx1 = 0xff1b;\n    // LLLL LLLL Length load (256-L)\n    Channel3.NRx1LengthLoad = 0;\n    // NR32 -> Select ouput level (R/W)\n    Channel3.memoryLocationNRx2 = 0xff1c;\n    // -VV- ---- Volume code (00=0%, 01=100%, 10=50%, 11=25%)\n    Channel3.NRx2VolumeCode = 0;\n    // NR33 -> Frequency lower data (W)\n    Channel3.memoryLocationNRx3 = 0xff1d;\n    // FFFF FFFF Frequency LSB\n    Channel3.NRx3FrequencyLSB = 0;\n    // NR34 -> Frequency higher data (R/W)\n    Channel3.memoryLocationNRx4 = 0xff1e;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel3.NRx4LengthEnabled = false;\n    Channel3.NRx4FrequencyMSB = 0;\n    // Our wave table location\n    Channel3.memoryLocationWaveTable = 0xff30;\n    // Channel Properties\n    Channel3.channelNumber = 3;\n    Channel3.isEnabled = false;\n    Channel3.isDacEnabled = false;\n    Channel3.frequency = 0;\n    Channel3.frequencyTimer = 0x00;\n    Channel3.lengthCounter = 0x00;\n    Channel3.waveTablePosition = 0x00;\n    Channel3.volumeCode = 0x00;\n    Channel3.volumeCodeChanged = false;\n    // Save States\n    Channel3.saveStateSlot = 9;\n    return Channel3;\n}());\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel4 = /** @class */ (function () {\n    function Channel4() {\n    }\n    Channel4.updateNRx1 = function (value) {\n        Channel4.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel4.lengthCounter = 64 - Channel4.NRx1LengthLoad;\n    };\n    Channel4.updateNRx2 = function (value) {\n        Channel4.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel4.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel4.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        Channel4.isDacEnabled = (value & 0xf8) > 0;\n    };\n    Channel4.updateNRx3 = function (value) {\n        var divisorCode = value & 0x07;\n        Channel4.NRx3ClockShift = value >> 4;\n        Channel4.NRx3WidthMode = checkBitOnByte(3, value);\n        Channel4.NRx3DivisorCode = divisorCode;\n        // Also, get our divisor\n        divisorCode <<= 1;\n        if (divisorCode < 1)\n            divisorCode = 1;\n        Channel4.divisor = divisorCode << 3;\n    };\n    Channel4.updateNRx4 = function (value) {\n        Channel4.NRx4LengthEnabled = checkBitOnByte(6, value);\n    };\n    // Function to save the state of the class\n    Channel4.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot), Channel4.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel4.saveStateSlot), Channel4.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel4.saveStateSlot), Channel4.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot), Channel4.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel4.saveStateSlot), Channel4.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel4.saveStateSlot), Channel4.linearFeedbackShiftRegister);\n    };\n    // Function to load the save state from memory\n    Channel4.loadState = function () {\n        Channel4.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot));\n        Channel4.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel4.saveStateSlot));\n        Channel4.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel4.saveStateSlot));\n        Channel4.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot));\n        Channel4.volume = load(getSaveStateMemoryOffset(0x0e, Channel4.saveStateSlot));\n        Channel4.linearFeedbackShiftRegister = load(getSaveStateMemoryOffset(0x13, Channel4.saveStateSlot));\n    };\n    Channel4.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1 - 1, 0xff);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1, 0xff);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx2, 0x00);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx4, 0xbf);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel4.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel4.cycleCounter;\n        Channel4.cycleCounter = 0;\n        return Channel4.getSample(accumulatedCycles);\n    };\n    Channel4.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel4.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n            frequencyTimer -= overflowAmount;\n            // Do some cool stuff with lfsr\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Noise_Channel\n            // First XOR bit zero and one\n            var linearFeedbackShiftRegister = Channel4.linearFeedbackShiftRegister;\n            var lfsrBitZero = linearFeedbackShiftRegister & 0x01;\n            var lfsrBitOne = linearFeedbackShiftRegister >> 1;\n            lfsrBitOne = lfsrBitOne & 0x01;\n            var xorLfsrBitZeroOne = lfsrBitZero ^ lfsrBitOne;\n            // Shift all lsfr bits by one\n            linearFeedbackShiftRegister = linearFeedbackShiftRegister >> 1;\n            // Place the XOR result on bit 15\n            linearFeedbackShiftRegister = linearFeedbackShiftRegister | (xorLfsrBitZeroOne << 14);\n            // If the width mode is set, set xor on bit 6, and make lfsr 7 bit\n            if (Channel4.NRx3WidthMode) {\n                // Make 7 bit, by knocking off lower bits. Want to keeps bits 8 - 16, and then or on 7\n                linearFeedbackShiftRegister = linearFeedbackShiftRegister & ~0x40;\n                linearFeedbackShiftRegister = linearFeedbackShiftRegister | (xorLfsrBitZeroOne << 6);\n            }\n            Channel4.linearFeedbackShiftRegister = linearFeedbackShiftRegister;\n        }\n        Channel4.frequencyTimer = frequencyTimer;\n        // Get our ourput volume, set to zero for silence\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel4.isEnabled && Channel4.isDacEnabled) {\n            outputVolume = Channel4.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Declare our sample\n        var sample = 0;\n        // Wave form output is bit zero of lfsr, INVERTED\n        sample = !checkBitOnByte(0, Channel4.linearFeedbackShiftRegister) ? 1 : -1;\n        sample = sample * outputVolume;\n        // Noise Can range from -15 - 15. Therefore simply add 15\n        sample = sample + 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel4.trigger = function () {\n        Channel4.isEnabled = true;\n        if (Channel4.lengthCounter === 0) {\n            Channel4.lengthCounter = 64;\n        }\n        // Reset our timers\n        Channel4.frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n        Channel4.envelopeCounter = Channel4.NRx2EnvelopePeriod;\n        Channel4.volume = Channel4.NRx2StartingVolume;\n        // Noise channel's LFSR bits are all set to 1.\n        Channel4.linearFeedbackShiftRegister = 0x7fff;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel4.isDacEnabled) {\n            Channel4.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel4.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        Channel4.cycleCounter += numberOfCycles;\n        // Dac enabled status cached by accumulator\n        return !(Channel4.frequencyTimer - Channel4.cycleCounter > 0);\n    };\n    Channel4.getNoiseChannelFrequencyPeriod = function () {\n        // Get our divisor from the divisor code, and shift by the clock shift\n        var response = Channel4.divisor << Channel4.NRx3ClockShift;\n        return response << Cpu.GBCDoubleSpeed;\n    };\n    Channel4.updateLength = function () {\n        var lengthCounter = Channel4.lengthCounter;\n        if (lengthCounter > 0 && Channel4.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel4.isEnabled = false;\n        }\n        Channel4.lengthCounter = lengthCounter;\n    };\n    Channel4.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel4.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel4.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            if (envelopeCounter !== 0) {\n                var volume = Channel4.volume;\n                if (Channel4.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel4.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel4.volume = volume;\n            }\n        }\n        Channel4.envelopeCounter = envelopeCounter;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel4.cycleCounter = 0;\n    // Channel 4\n    // 'white noise' channel with volume envelope functions.\n    // NR41 -> Sound length (R/W)\n    Channel4.memoryLocationNRx1 = 0xff20;\n    // --LL LLLL Length load (64-L)\n    Channel4.NRx1LengthLoad = 0;\n    // NR42 -> Volume Envelope (R/W)\n    Channel4.memoryLocationNRx2 = 0xff21;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel4.NRx2StartingVolume = 0;\n    Channel4.NRx2EnvelopeAddMode = false;\n    Channel4.NRx2EnvelopePeriod = 0;\n    // NR43 -> Polynomial Counter (R/W)\n    Channel4.memoryLocationNRx3 = 0xff22;\n    // SSSS WDDD Clock shift, Width mode of LFSR, Divisor code\n    Channel4.NRx3ClockShift = 0;\n    Channel4.NRx3WidthMode = false;\n    Channel4.NRx3DivisorCode = 0;\n    // NR44 -> Trigger, Length Enable\n    Channel4.memoryLocationNRx4 = 0xff23;\n    // TL-- ---- Trigger, Length enable\n    Channel4.NRx4LengthEnabled = false;\n    // Channel Properties\n    Channel4.channelNumber = 4;\n    Channel4.isEnabled = false;\n    Channel4.isDacEnabled = false;\n    Channel4.frequencyTimer = 0x00;\n    Channel4.envelopeCounter = 0x00;\n    Channel4.lengthCounter = 0x00;\n    Channel4.volume = 0x00;\n    Channel4.divisor = 0;\n    // Noise properties\n    // NOTE: Is only 15 bits\n    Channel4.linearFeedbackShiftRegister = 0x00;\n    // Save States\n    Channel4.saveStateSlot = 10;\n    return Channel4;\n}());\n\n// Another class simply for accumulating samples\n// Default everything to silence\nvar SoundAccumulator = /** @class */ (function () {\n    function SoundAccumulator() {\n    }\n    SoundAccumulator.channel1Sample = 15;\n    SoundAccumulator.channel2Sample = 15;\n    SoundAccumulator.channel3Sample = 15;\n    SoundAccumulator.channel4Sample = 15;\n    SoundAccumulator.channel1DacEnabled = false;\n    SoundAccumulator.channel2DacEnabled = false;\n    SoundAccumulator.channel3DacEnabled = false;\n    SoundAccumulator.channel4DacEnabled = false;\n    SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n    SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n    SoundAccumulator.mixerVolumeChanged = false;\n    SoundAccumulator.mixerEnabledChanged = false;\n    //If a channel was updated, need to also track if we need to need to mix them again\n    SoundAccumulator.needToRemixSamples = false;\n    return SoundAccumulator;\n}());\n// Inlined because closure compiler inlines\nfunction initializeSoundAccumulator() {\n    SoundAccumulator.channel1Sample = 15;\n    SoundAccumulator.channel2Sample = 15;\n    SoundAccumulator.channel3Sample = 15;\n    SoundAccumulator.channel4Sample = 15;\n    SoundAccumulator.channel1DacEnabled = false;\n    SoundAccumulator.channel2DacEnabled = false;\n    SoundAccumulator.channel3DacEnabled = false;\n    SoundAccumulator.channel4DacEnabled = false;\n    SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n    SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n    SoundAccumulator.mixerVolumeChanged = true;\n    SoundAccumulator.mixerEnabledChanged = true;\n    SoundAccumulator.needToRemixSamples = false;\n}\n// Inlined because closure compiler inlines\nfunction accumulateSound(numberOfCycles) {\n    // Check if any of the individual channels will update\n    var channel1WillUpdate = Channel1.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel1.channelNumber);\n    var channel2WillUpdate = Channel2.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel2.channelNumber);\n    var channel3WillUpdate = Channel3.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel3.channelNumber);\n    var channel4WillUpdate = Channel4.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel4.channelNumber);\n    if (channel1WillUpdate) {\n        SoundAccumulator.channel1Sample = Channel1.getSampleFromCycleCounter();\n    }\n    if (channel2WillUpdate) {\n        SoundAccumulator.channel2Sample = Channel2.getSampleFromCycleCounter();\n    }\n    if (channel3WillUpdate) {\n        SoundAccumulator.channel3Sample = Channel3.getSampleFromCycleCounter();\n    }\n    if (channel4WillUpdate) {\n        SoundAccumulator.channel4Sample = Channel4.getSampleFromCycleCounter();\n    }\n    // If any channel updated, we need to re-mix our samples\n    if (channel1WillUpdate || channel2WillUpdate || channel3WillUpdate || channel4WillUpdate) {\n        SoundAccumulator.needToRemixSamples = true;\n    }\n    // Do Some downsampling magic\n    var downSampleCycleCounter = Sound.downSampleCycleCounter;\n    downSampleCycleCounter += numberOfCycles * Sound.downSampleCycleMultiplier;\n    var maxDownSampleCycles = Sound.maxDownSampleCycles();\n    if (downSampleCycleCounter >= maxDownSampleCycles) {\n        // Reset the downsample counter\n        // Don't set to zero to catch overflowed cycles\n        downSampleCycleCounter -= maxDownSampleCycles;\n        if (SoundAccumulator.needToRemixSamples || SoundAccumulator.mixerVolumeChanged || SoundAccumulator.mixerEnabledChanged) {\n            mixChannelSamples(SoundAccumulator.channel1Sample, SoundAccumulator.channel2Sample, SoundAccumulator.channel3Sample, SoundAccumulator.channel4Sample);\n        }\n        else {\n            Sound.downSampleCycleCounter = downSampleCycleCounter;\n        }\n        // Finally Simply place the accumulated sample in memory\n        // Set our volumes in memory\n        // +1 so it can not be zero\n        setLeftAndRightOutputForAudioQueue(SoundAccumulator.leftChannelSampleUnsignedByte + 1, SoundAccumulator.rightChannelSampleUnsignedByte + 1, AUDIO_BUFFER_LOCATION);\n        var audioQueueIndex = Sound.audioQueueIndex + 1;\n        // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n        // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n        // Not 0xFFFF because we need half of 64kb since we store left and right channel\n        var maxIndex = i32Portable(Sound.wasmBoyMemoryMaxBufferSize >> 1) - 1;\n        if (audioQueueIndex >= maxIndex) {\n            audioQueueIndex -= 1;\n        }\n        Sound.audioQueueIndex = audioQueueIndex;\n    }\n    Sound.downSampleCycleCounter = downSampleCycleCounter;\n}\n// Function used by SoundAccumulator to find out if a channel Dac Changed\nfunction didChannelDacChange(channelNumber) {\n    switch (channelNumber) {\n        case Channel1.channelNumber: {\n            var isDacEnabled = Channel1.isDacEnabled;\n            var channel1EnabledChanged = SoundAccumulator.channel1DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel1DacEnabled = isDacEnabled;\n            return channel1EnabledChanged;\n        }\n        case Channel2.channelNumber: {\n            var isDacEnabled = Channel2.isDacEnabled;\n            var channel2EnabledChanged = SoundAccumulator.channel2DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel2DacEnabled = isDacEnabled;\n            return channel2EnabledChanged;\n        }\n        case Channel3.channelNumber: {\n            var isDacEnabled = Channel3.isDacEnabled;\n            var channel3EnabledChanged = SoundAccumulator.channel3DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel3DacEnabled = isDacEnabled;\n            return channel3EnabledChanged;\n        }\n        case Channel4.channelNumber: {\n            var isDacEnabled = Channel4.isDacEnabled;\n            var channel4EnabledChanged = SoundAccumulator.channel4DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel4DacEnabled = isDacEnabled;\n            return channel4EnabledChanged;\n        }\n    }\n    return false;\n}\n\n// https://emu-docs.org/Game%20Boy/gb_sound.txt\nvar Sound = /** @class */ (function () {\n    function Sound() {\n    }\n    // Number of cycles to run in each batch process\n    // This number should be in sync so that sound doesn't run too many cyles at once\n    // and does not exceed the minimum number of cyles for either down sampling, or\n    // How often we change the frame, or a channel's update process\n    // Number of cycles is 87, because:\n    // Number of cycles before downsampling a single sample\n    // TODO: Find out how to make this number bigger\n    // Or, don't call this in syncCycles, and make the lib responsible.\n    Sound.batchProcessCycles = function () {\n        // return Cpu.GBCDoubleSpeed ? 174 : 87;\n        return 87 << Cpu.GBCDoubleSpeed;\n    };\n    Sound.updateNR50 = function (value) {\n        Sound.NR50LeftMixerVolume = (value >> 4) & 0x07;\n        Sound.NR50RightMixerVolume = value & 0x07;\n    };\n    Sound.updateNR51 = function (value) {\n        Sound.NR51IsChannel4EnabledOnLeftOutput = checkBitOnByte(7, value);\n        Sound.NR51IsChannel3EnabledOnLeftOutput = checkBitOnByte(6, value);\n        Sound.NR51IsChannel2EnabledOnLeftOutput = checkBitOnByte(5, value);\n        Sound.NR51IsChannel1EnabledOnLeftOutput = checkBitOnByte(4, value);\n        Sound.NR51IsChannel4EnabledOnRightOutput = checkBitOnByte(3, value);\n        Sound.NR51IsChannel3EnabledOnRightOutput = checkBitOnByte(2, value);\n        Sound.NR51IsChannel2EnabledOnRightOutput = checkBitOnByte(1, value);\n        Sound.NR51IsChannel1EnabledOnRightOutput = checkBitOnByte(0, value);\n    };\n    Sound.updateNR52 = function (value) {\n        Sound.NR52IsSoundEnabled = checkBitOnByte(7, value);\n    };\n    Sound.maxFrameSequenceCycles = function () {\n        // return Cpu.GBCDoubleSpeed ? 16384 : 8192;\n        return 8192 << Cpu.GBCDoubleSpeed;\n    };\n    Sound.maxDownSampleCycles = function () {\n        return Cpu.CLOCK_SPEED();\n    };\n    // Function to save the state of the class\n    Sound.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot), Sound.frameSequenceCycleCounter);\n        store(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot), Sound.downSampleCycleCounter);\n        store(getSaveStateMemoryOffset(0x05, Sound.saveStateSlot), Sound.frameSequencer);\n    };\n    // Function to load the save state from memory\n    Sound.loadState = function () {\n        Sound.frameSequenceCycleCounter = load(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot));\n        Sound.downSampleCycleCounter = load(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot));\n        Sound.frameSequencer = load(getSaveStateMemoryOffset(0x05, Sound.saveStateSlot));\n        clearAudioBuffer();\n    };\n    // Current cycles\n    // This will be used for batch processing\n    // https://github.com/binji/binjgb/commit/e028f45e805bc0b0aa4697224a209f9ae514c954\n    // TODO: May Also need to do this for Reads\n    Sound.currentCycles = 0;\n    // Channel control / On-OFF / Volume (RW)\n    Sound.memoryLocationNR50 = 0xff24;\n    Sound.NR50LeftMixerVolume = 0;\n    Sound.NR50RightMixerVolume = 0;\n    // 0xFF25 selects which output each channel goes to, Referred to as NR51\n    Sound.memoryLocationNR51 = 0xff25;\n    Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel1EnabledOnRightOutput = true;\n    Sound.NR51IsChannel2EnabledOnRightOutput = true;\n    Sound.NR51IsChannel3EnabledOnRightOutput = true;\n    Sound.NR51IsChannel4EnabledOnRightOutput = true;\n    // Sound on/off\n    Sound.memoryLocationNR52 = 0xff26;\n    Sound.NR52IsSoundEnabled = true;\n    // $FF30 -- $FF3F is the load register space for the 4-bit samples for channel 3\n    Sound.memoryLocationChannel3LoadRegisterStart = 0xff30;\n    // Need to count how often we need to increment our frame sequencer\n    // Which you can read about below\n    Sound.frameSequenceCycleCounter = 0x0000;\n    // Also need to downsample our audio to average audio qualty\n    // https://www.reddit.com/r/EmuDev/comments/5gkwi5/gb_apu_sound_emulation/\n    // Want to do 48000hz, so CpuRate / Sound Rate, 4194304 / 48000 ~ 87 cycles\n    Sound.downSampleCycleCounter = 0x00;\n    Sound.downSampleCycleMultiplier = 48000;\n    // Frame sequencer controls what should be updated and and ticked\n    // Every time the sound is updated :) It is updated everytime the\n    // Cycle counter reaches the max cycle\n    Sound.frameSequencer = 0x00;\n    // Our current sample number we are passing back to the wasmboy memory map\n    // Found that a static number of samples doesn't work well on mobile\n    // Will just update the queue index, grab as much as we can whenever we need more audio, then reset\n    // NOTE: Giving a really large sample rate gives more latency, but less pops!\n    //static readonly MAX_NUMBER_OF_SAMPLES: i32 = 4096;\n    Sound.audioQueueIndex = 0x0000;\n    Sound.wasmBoyMemoryMaxBufferSize = 0x20000;\n    // Save States\n    Sound.saveStateSlot = 6;\n    return Sound;\n}());\n// Initialize sound registers\n// From: https://emu-docs.org/Game%20Boy/gb_sound.txt\n// Inlined because closure compiler inlines\nfunction initializeSound() {\n    // Reset Stateful variables\n    Sound.currentCycles = 0;\n    Sound.NR50LeftMixerVolume = 0;\n    Sound.NR50RightMixerVolume = 0;\n    Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel1EnabledOnRightOutput = true;\n    Sound.NR51IsChannel2EnabledOnRightOutput = true;\n    Sound.NR51IsChannel3EnabledOnRightOutput = true;\n    Sound.NR51IsChannel4EnabledOnRightOutput = true;\n    Sound.NR52IsSoundEnabled = true;\n    Sound.frameSequenceCycleCounter = 0x0000;\n    Sound.downSampleCycleCounter = 0x00;\n    Sound.frameSequencer = 0x00;\n    Sound.audioQueueIndex = 0x0000;\n    // intiialize our channels\n    Channel1.initialize();\n    Channel2.initialize();\n    Channel3.initialize();\n    Channel4.initialize();\n    // Other Sound Registers\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR50, 0x77);\n    Sound.updateNR50(0x77);\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR51, 0xf3);\n    Sound.updateNR51(0xf3);\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR52, 0xf1);\n    Sound.updateNR52(0xf1);\n    // Override/reset some variables if the boot ROM is enabled\n    // For both GB and GBC\n    if (Cpu.BootROMEnabled) {\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR50, 0x00);\n        Sound.updateNR50(0x00);\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR51, 0x00);\n        Sound.updateNR51(0x00);\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR52, 0x70);\n        Sound.updateNR52(0x70);\n    }\n    initializeSoundAccumulator();\n}\n// Function to batch process our audio after we skipped so many cycles\nfunction batchProcessAudio() {\n    var batchProcessCycles = Sound.batchProcessCycles();\n    var currentCycles = Sound.currentCycles;\n    while (currentCycles >= batchProcessCycles) {\n        updateSound(batchProcessCycles);\n        currentCycles -= batchProcessCycles;\n    }\n    Sound.currentCycles = currentCycles;\n}\n// Function for updating sound\nfunction updateSound(numberOfCycles) {\n    // Check if our frameSequencer updated\n    var frameSequencerUpdated = updateFrameSequencer(numberOfCycles);\n    if (Config.audioAccumulateSamples && !frameSequencerUpdated) {\n        accumulateSound(numberOfCycles);\n    }\n    else {\n        calculateSound(numberOfCycles);\n    }\n}\n// Funciton to get the current Audio Queue index\nfunction getNumberOfSamplesInAudioBuffer() {\n    return Sound.audioQueueIndex;\n}\n// Function to reset the audio queue\nfunction clearAudioBuffer() {\n    Sound.audioQueueIndex = 0;\n}\n// Inlined because closure compiler inlines\nfunction calculateSound(numberOfCycles) {\n    // Update all of our channels\n    // All samples will be returned as 0 to 30\n    // 0 being -1.0, and 30 being 1.0\n    // (see blurb at top)\n    var channel1Sample = i32Portable(Channel1.getSample(numberOfCycles));\n    var channel2Sample = i32Portable(Channel2.getSample(numberOfCycles));\n    var channel3Sample = i32Portable(Channel3.getSample(numberOfCycles));\n    var channel4Sample = i32Portable(Channel4.getSample(numberOfCycles));\n    // TODO: Allow individual channels to be muted\n    // let channel1Sample: i32 = 15;\n    // let channel2Sample: i32 = 15;\n    // let channel3Sample: i32 = 15;\n    // let channel4Sample: i32 = 15;\n    // Save the samples in the accumulator\n    SoundAccumulator.channel1Sample = channel1Sample;\n    SoundAccumulator.channel2Sample = channel2Sample;\n    SoundAccumulator.channel3Sample = channel3Sample;\n    SoundAccumulator.channel4Sample = channel4Sample;\n    // Do Some downsampling magic\n    var downSampleCycleCounter = Sound.downSampleCycleCounter + numberOfCycles * Sound.downSampleCycleMultiplier;\n    if (downSampleCycleCounter >= Sound.maxDownSampleCycles()) {\n        // Reset the downsample counter\n        // Don't set to zero to catch overflowed cycles\n        downSampleCycleCounter -= Sound.maxDownSampleCycles();\n        // Mix our samples\n        var mixedSample = mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample);\n        var leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n        var rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n        // Set our volumes in memory\n        // +1 so it can not be zero\n        setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, AUDIO_BUFFER_LOCATION);\n        if (Config.enableAudioDebugging) {\n            // Channel 1\n            mixedSample = mixChannelSamples(channel1Sample, 15, 15, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_1_BUFFER_LOCATION);\n            // Channel 2\n            mixedSample = mixChannelSamples(15, channel2Sample, 15, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_2_BUFFER_LOCATION);\n            // Channel 3\n            mixedSample = mixChannelSamples(15, 15, channel3Sample, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_3_BUFFER_LOCATION);\n            // Channel 4\n            mixedSample = mixChannelSamples(15, 15, 15, channel4Sample);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_4_BUFFER_LOCATION);\n        }\n        var audioQueueIndex = Sound.audioQueueIndex + 1;\n        // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n        // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n        // Not 0xFFFF because we need half of 64kb since we store left and right channel\n        var maxIndex = i32Portable(Sound.wasmBoyMemoryMaxBufferSize >> 1) - 1;\n        if (audioQueueIndex >= maxIndex) {\n            audioQueueIndex -= 1;\n        }\n        Sound.audioQueueIndex = audioQueueIndex;\n    }\n    Sound.downSampleCycleCounter = downSampleCycleCounter;\n}\n// Inlined because closure compiler inlines\nfunction updateFrameSequencer(numberOfCycles) {\n    // APU runs at 4194304 / 512\n    // Or Cpu.clockSpeed / 512\n    // Which means, we need to update once every 8192 cycles :)\n    var maxFrameSequenceCycles = Sound.maxFrameSequenceCycles();\n    var frameSequenceCycleCounter = Sound.frameSequenceCycleCounter + numberOfCycles;\n    if (frameSequenceCycleCounter >= maxFrameSequenceCycles) {\n        // Reset the frameSequenceCycleCounter\n        // Not setting to zero as we do not want to drop cycles\n        frameSequenceCycleCounter -= maxFrameSequenceCycles;\n        Sound.frameSequenceCycleCounter = frameSequenceCycleCounter;\n        // Check our frame sequencer\n        // https://gist.github.com/drhelius/3652407\n        var frameSequencer = Sound.frameSequencer;\n        switch (frameSequencer) {\n            case 0:\n                // Update Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                break;\n            /* Do Nothing on one */\n            case 2:\n                // Update Sweep and Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                Channel1.updateSweep();\n                break;\n            /* Do Nothing on three */\n            case 4:\n                // Update Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                break;\n            /* Do Nothing on five */\n            case 6:\n                // Update Sweep and Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                Channel1.updateSweep();\n                break;\n            case 7:\n                // Update Envelope on channels\n                Channel1.updateEnvelope();\n                Channel2.updateEnvelope();\n                Channel4.updateEnvelope();\n                break;\n        }\n        // Update our frame sequencer\n        Sound.frameSequencer = (frameSequencer + 1) & 7;\n        return true;\n    }\n    else {\n        Sound.frameSequenceCycleCounter = frameSequenceCycleCounter;\n    }\n    return false;\n}\nfunction mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample) {\n    // Do Some Cool mixing\n    // NR50 FF24 ALLL BRRR Vin L enable, Left vol, Vin R enable, Right vol\n    // NR51 FF25 NW21 NW21 Left enables, Right enables\n    // NR52 FF26 P--- NW21 Power control/status, Channel length statuses\n    // NW21 = 4 bits on byte\n    // 3 -> Channel 4, 2 -> Channel 3, 1 -> Channel 2, 0 -> Channel 1\n    if (channel1Sample === void 0) { channel1Sample = 15; }\n    if (channel2Sample === void 0) { channel2Sample = 15; }\n    if (channel3Sample === void 0) { channel3Sample = 15; }\n    if (channel4Sample === void 0) { channel4Sample = 15; }\n    // Matt's Proccess\n    // I push out 1024 samples at a time and use 96000 hz sampling rate, so I guess i'm a bit less than one frame,\n    // but I let the queue fill up with 4 x 1024 samples before I start waiting for the audio\n    // TODO: Vin Mixing\n    SoundAccumulator.mixerVolumeChanged = false;\n    // Get our channel volume for left/right\n    var leftChannelSample = 0;\n    var rightChannelSample = 0;\n    // Find the sample for the left if enabled\n    // other wise add silence (15) for the channel\n    leftChannelSample += Sound.NR51IsChannel1EnabledOnLeftOutput ? channel1Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel2EnabledOnLeftOutput ? channel2Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel3EnabledOnLeftOutput ? channel3Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel4EnabledOnLeftOutput ? channel4Sample : 15;\n    // Find the sample for the right if enabled\n    // other wise add silence (15) for the channel\n    rightChannelSample += Sound.NR51IsChannel1EnabledOnRightOutput ? channel1Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel2EnabledOnRightOutput ? channel2Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel3EnabledOnRightOutput ? channel3Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel4EnabledOnRightOutput ? channel4Sample : 15;\n    // Update our accumulator\n    SoundAccumulator.mixerEnabledChanged = false;\n    SoundAccumulator.needToRemixSamples = false;\n    // Finally multiply our volumes by the mixer volume\n    // Mixer volume can be at most 7 + 1\n    // Can be at most 7, because we only have 3 bits, 111 = 7\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Mixer\n    // Done in the getSampleAsUnsignedByte(), since we are doing some weirdness there :)\n    // Convert our samples from unsigned 32 to unsigned byte\n    // Reason being, We want to be able to pass in wasm memory as usigned byte. Javascript will handle the conversion back\n    var leftChannelSampleUnsignedByte = getSampleAsUnsignedByte(leftChannelSample, Sound.NR50LeftMixerVolume + 1);\n    var rightChannelSampleUnsignedByte = getSampleAsUnsignedByte(rightChannelSample, Sound.NR50RightMixerVolume + 1);\n    // Save these samples in the accumulator\n    SoundAccumulator.leftChannelSampleUnsignedByte = leftChannelSampleUnsignedByte;\n    SoundAccumulator.rightChannelSampleUnsignedByte = rightChannelSampleUnsignedByte;\n    return concatenateBytes(leftChannelSampleUnsignedByte, rightChannelSampleUnsignedByte);\n}\nfunction getSampleAsUnsignedByte(sample, mixerVolume) {\n    // If the sample is silence, return silence as unsigned byte\n    // Silence is common, and should be checked for performance\n    if (sample === 60) {\n        return 127;\n    }\n    // convert to a signed, precise scale of -6000 to 6000 (cheap way of -1.0 to 1.0)\n    // Multiply by the mixer volume fraction (to find the actual volume)\n    var precision = 100000;\n    var convertedSample = sample - 60;\n    convertedSample = convertedSample * precision;\n    // Multiply by the mixer volume fraction (to find the actual volume)\n    convertedSample = (convertedSample * mixerVolume) >> 3;\n    // Convert back to scale of 0 to 120\n    convertedSample = i32Portable(convertedSample / precision) + 60;\n    // Finally, convert to an unsigned byte scale\n    // With Four Channels (0 to 30) and no global volume. Max is 120\n    // max unsigned byte goal is 254 (see blurb at top).\n    // 120 / 254 should give the correct conversion\n    // For example, 120 / 254 = 0.47244094488188976\n    // Multiply by 1000 to increase the float into an int\n    // so, 120 * 1000 / (0.47244094488188976 * 1000) should give approximate answer for max mixer volume\n    var maxDivider = i32Portable((120 * precision) / 254);\n    convertedSample = i32Portable((convertedSample * precision) / maxDivider);\n    // Ensure we have an i32 and not a float for JS builds\n    convertedSample = i32Portable(convertedSample);\n    return convertedSample;\n}\n// Function to set our left and right channels at the correct queue index\nfunction setLeftAndRightOutputForAudioQueue(leftVolume, rightVolume, bufferLocation) {\n    // Get our stereo index\n    var audioQueueOffset = bufferLocation + (Sound.audioQueueIndex << 1);\n    // Store our volumes\n    // +1 that way we don't have empty data to ensure that the value is set\n    store(audioQueueOffset + 0, (leftVolume + 1));\n    store(audioQueueOffset + 1, (rightVolume + 1));\n}\n\n// Functions involved in R/W of sound registers\n// Function to check and handle writes to sound registers\n// Inlined because closure compiler inlines\nfunction SoundRegisterWriteTraps(offset, value) {\n    if (offset !== Sound.memoryLocationNR52 && !Sound.NR52IsSoundEnabled) {\n        // Block all writes to any sound register EXCEPT NR52!\n        // This is under the assumption that the check for\n        // offset >= 0xFF10 && offset <= 0xFF26\n        // is done in writeTraps.ts (which it is)\n        // NOTE: Except on DMG, length can still be written (whatever that means)\n        return false;\n    }\n    switch (offset) {\n        // Handle NRx0 on Channels\n        case Channel1.memoryLocationNRx0:\n            Channel1.updateNRx0(value);\n            return true;\n        case Channel3.memoryLocationNRx0:\n            Channel3.updateNRx0(value);\n            return true;\n        // Handle NRx1 (Length Counter) on Channels\n        case Channel1.memoryLocationNRx1:\n            Channel1.updateNRx1(value);\n            return true;\n        case Channel2.memoryLocationNRx1:\n            Channel2.updateNRx1(value);\n            return true;\n        case Channel3.memoryLocationNRx1:\n            Channel3.updateNRx1(value);\n            return true;\n        case Channel4.memoryLocationNRx1:\n            Channel4.updateNRx1(value);\n            return true;\n        // Handle NRx2 (Envelope / Volume) on Channels\n        case Channel1.memoryLocationNRx2:\n            Channel1.updateNRx2(value);\n            return true;\n        case Channel2.memoryLocationNRx2:\n            Channel2.updateNRx2(value);\n            return true;\n        case Channel3.memoryLocationNRx2:\n            // Check if channel 3's volume code was written too\n            // This is handcy to know for accumulation of samples\n            Channel3.volumeCodeChanged = true;\n            Channel3.updateNRx2(value);\n            return true;\n        case Channel4.memoryLocationNRx2:\n            Channel4.updateNRx2(value);\n            return true;\n        // Handle NRx3 (Frequency / Noise Properties) on Channels\n        case Channel1.memoryLocationNRx3:\n            Channel1.updateNRx3(value);\n            return true;\n        case Channel2.memoryLocationNRx3:\n            Channel2.updateNRx3(value);\n            return true;\n        case Channel3.memoryLocationNRx3:\n            Channel3.updateNRx3(value);\n            return true;\n        case Channel4.memoryLocationNRx3:\n            Channel4.updateNRx3(value);\n            return true;\n        // Check our NRx4 registers to trap our trigger bits\n        case Channel1.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel1.updateNRx4(value);\n                Channel1.trigger();\n            }\n            return true;\n        case Channel2.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel2.updateNRx4(value);\n                Channel2.trigger();\n            }\n            return true;\n        case Channel3.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel3.updateNRx4(value);\n                Channel3.trigger();\n            }\n            return true;\n        case Channel4.memoryLocationNRx4:\n            if (checkBitOnByte(7, value)) {\n                Channel4.updateNRx4(value);\n                Channel4.trigger();\n            }\n            return true;\n        // Tell the sound accumulator if volumes changes\n        case Sound.memoryLocationNR50:\n            Sound.updateNR50(value);\n            SoundAccumulator.mixerVolumeChanged = true;\n            return true;\n        // Tell the sound accumulator if volumes changes\n        case Sound.memoryLocationNR51:\n            Sound.updateNR51(value);\n            SoundAccumulator.mixerEnabledChanged = true;\n            return true;\n        case Sound.memoryLocationNR52:\n            // Reset all registers except NR52\n            Sound.updateNR52(value);\n            if (!checkBitOnByte(7, value)) {\n                for (var i = 0xff10; i < 0xff26; ++i) {\n                    eightBitStoreIntoGBMemory(i, 0x00);\n                }\n            }\n            return true;\n    }\n    // We did not handle the write, Allow the write\n    return true;\n}\n// http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n// Inlined because closure compiler inlines\nfunction SoundRegisterReadTraps(offset) {\n    // TODO: OR All Registers\n    // This will fix bugs in orcale of ages :)\n    if (offset === Sound.memoryLocationNR52) {\n        // Get our registerNR52\n        var registerNR52 = eightBitLoadFromGBMemory(Sound.memoryLocationNR52);\n        // Knock off lower 7 bits\n        registerNR52 &= 0x80;\n        // Or from the table\n        registerNR52 |= 0x70;\n        return registerNR52;\n    }\n    return -1;\n}\n\nvar Interrupts = /** @class */ (function () {\n    function Interrupts() {\n    }\n    Interrupts.updateInterruptEnabled = function (value) {\n        Interrupts.isVBlankInterruptEnabled = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n        Interrupts.isLcdInterruptEnabled = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n        Interrupts.isTimerInterruptEnabled = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n        Interrupts.isSerialInterruptEnabled = checkBitOnByte(Interrupts.bitPositionSerialInterrupt, value);\n        Interrupts.isJoypadInterruptEnabled = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n        Interrupts.interruptsEnabledValue = value;\n    };\n    Interrupts.updateInterruptRequested = function (value) {\n        Interrupts.isVBlankInterruptRequested = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n        Interrupts.isLcdInterruptRequested = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n        Interrupts.isTimerInterruptRequested = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n        Interrupts.isSerialInterruptRequested = checkBitOnByte(Interrupts.bitPositionSerialInterrupt, value);\n        Interrupts.isJoypadInterruptRequested = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n        Interrupts.interruptsRequestedValue = value;\n    };\n    // Function to return if we have any pending interrupts\n    Interrupts.areInterruptsPending = function () {\n        return (Interrupts.interruptsRequestedValue & Interrupts.interruptsEnabledValue & 0x1f) > 0;\n    };\n    // Function to save the state of the class\n    Interrupts.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitch);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitchDelay);\n        // Interrupts enabled and requested are stored in actual GB memory, thus, don't need to be saved\n    };\n    // Function to load the save state from memory\n    Interrupts.loadState = function () {\n        Interrupts.masterInterruptSwitch = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot));\n        Interrupts.masterInterruptSwitchDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot));\n        Interrupts.updateInterruptEnabled(eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptEnabled));\n        Interrupts.updateInterruptRequested(eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest));\n    };\n    Interrupts.masterInterruptSwitch = false;\n    // According to mooneye, interrupts are not handled until AFTER\n    // Next instruction\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown\n    Interrupts.masterInterruptSwitchDelay = false;\n    // Biut position for each part of the interrupts HW registers\n    Interrupts.bitPositionVBlankInterrupt = 0;\n    Interrupts.bitPositionLcdInterrupt = 1;\n    Interrupts.bitPositionTimerInterrupt = 2;\n    Interrupts.bitPositionSerialInterrupt = 3;\n    Interrupts.bitPositionJoypadInterrupt = 4;\n    Interrupts.memoryLocationInterruptEnabled = 0xffff; // A.K.A interrupt Flag (IE)\n    // Cache which Interrupts are enabled\n    Interrupts.interruptsEnabledValue = 0;\n    Interrupts.isVBlankInterruptEnabled = false;\n    Interrupts.isLcdInterruptEnabled = false;\n    Interrupts.isTimerInterruptEnabled = false;\n    Interrupts.isSerialInterruptEnabled = false;\n    Interrupts.isJoypadInterruptEnabled = false;\n    Interrupts.memoryLocationInterruptRequest = 0xff0f; // A.K.A interrupt Flag (IF)\n    // Cache which Interrupts are requested\n    Interrupts.interruptsRequestedValue = 0;\n    Interrupts.isVBlankInterruptRequested = false;\n    Interrupts.isLcdInterruptRequested = false;\n    Interrupts.isTimerInterruptRequested = false;\n    Interrupts.isSerialInterruptRequested = false;\n    Interrupts.isJoypadInterruptRequested = false;\n    // Save States\n    Interrupts.saveStateSlot = 2;\n    return Interrupts;\n}());\n// Inlined because closure compiler inlines\nfunction initializeInterrupts() {\n    // Values from BGB\n    // IE\n    Interrupts.updateInterruptEnabled(0x00);\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptEnabled, Interrupts.interruptsEnabledValue);\n    // IF\n    Interrupts.updateInterruptRequested(0xe1);\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, Interrupts.interruptsRequestedValue);\n}\n// NOTE: Interrupts should be handled before reading an opcode\n// Inlined because closure compiler inlines\nfunction checkInterrupts() {\n    // First check for our delay was enabled\n    if (Interrupts.masterInterruptSwitchDelay) {\n        Interrupts.masterInterruptSwitch = true;\n        Interrupts.masterInterruptSwitchDelay = false;\n    }\n    // Check if we have an enabled and requested interrupt\n    var isAnInterruptRequestedAndEnabledValue = Interrupts.interruptsEnabledValue & Interrupts.interruptsRequestedValue & 0x1f;\n    if (isAnInterruptRequestedAndEnabledValue > 0) {\n        // Boolean to track if interrupts were handled\n        // Interrupt handling requires 20 cycles\n        // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n        var wasInterruptHandled = false;\n        // Service our interrupts, if we have the master switch enabled\n        // https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/\n        if (Interrupts.masterInterruptSwitch && !Cpu.isHaltNoJump) {\n            if (Interrupts.isVBlankInterruptEnabled && Interrupts.isVBlankInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionVBlankInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isLcdInterruptEnabled && Interrupts.isLcdInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionLcdInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isTimerInterruptEnabled && Interrupts.isTimerInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionTimerInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isSerialInterruptEnabled && Interrupts.isSerialInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionSerialInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isJoypadInterruptEnabled && Interrupts.isJoypadInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionJoypadInterrupt);\n                wasInterruptHandled = true;\n            }\n        }\n        var interuptHandlerCycles = 0;\n        if (wasInterruptHandled) {\n            // Interrupt handling requires 20 cycles, TCAGBD\n            interuptHandlerCycles = 20;\n            if (Cpu.isHalted()) {\n                // If the CPU was halted, now is the time to un-halt\n                // Should be done here when the jump occurs according to:\n                // https://www.reddit.com/r/EmuDev/comments/6fmjch/gb_glitches_in_links_awakening_and_pok%C3%A9mon_gold/\n                Cpu.exitHaltAndStop();\n                interuptHandlerCycles += 4;\n            }\n        }\n        if (Cpu.isHalted()) {\n            Cpu.exitHaltAndStop();\n        }\n        return interuptHandlerCycles;\n    }\n    return 0;\n}\nfunction _handleInterrupt(bitPosition) {\n    // Disable the master switch\n    setInterrupts(false);\n    // Disable the bit on the interruptRequest\n    var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n    interruptRequest = resetBitOnByte(bitPosition, interruptRequest);\n    Interrupts.interruptsRequestedValue = interruptRequest;\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n    // Push the programCounter onto the stacks\n    // Push the next instruction, not the halt itself (TCAGBD).\n    Cpu.stackPointer = Cpu.stackPointer - 2;\n    if (Cpu.isHalted()) {\n        // TODO: This breaks Pokemon Yellow, And OG Link's awakening. Find out why...\n        // sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter + 1);\n        sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter);\n    }\n    else {\n        sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter);\n    }\n    // Jump to the correct interrupt location\n    // Also piggyback off of the switch to reset our HW Register caching\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/interupts.html\n    switch (bitPosition) {\n        case Interrupts.bitPositionVBlankInterrupt:\n            Interrupts.isVBlankInterruptRequested = false;\n            Cpu.programCounter = 0x40;\n            break;\n        case Interrupts.bitPositionLcdInterrupt:\n            Interrupts.isLcdInterruptRequested = false;\n            Cpu.programCounter = 0x48;\n            break;\n        case Interrupts.bitPositionTimerInterrupt:\n            Interrupts.isTimerInterruptRequested = false;\n            Cpu.programCounter = 0x50;\n            break;\n        case Interrupts.bitPositionSerialInterrupt:\n            Interrupts.isSerialInterruptRequested = false;\n            Cpu.programCounter = 0x58;\n            break;\n        case Interrupts.bitPositionJoypadInterrupt:\n            Interrupts.isJoypadInterruptRequested = false;\n            Cpu.programCounter = 0x60;\n            break;\n    }\n}\nfunction _requestInterrupt(bitPosition) {\n    var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n    // Pass to set the correct interrupt bit on interruptRequest\n    interruptRequest = setBitOnByte(bitPosition, interruptRequest);\n    Interrupts.interruptsRequestedValue = interruptRequest;\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n}\nfunction setInterrupts(value) {\n    // If we are enabling interrupts,\n    // we want to wait 4 cycles before enabling\n    if (value) {\n        Interrupts.masterInterruptSwitchDelay = true;\n    }\n    else {\n        Interrupts.masterInterruptSwitch = false;\n    }\n}\n// Inlined because closure compiler inlines\nfunction requestVBlankInterrupt() {\n    Interrupts.isVBlankInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionVBlankInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestLcdInterrupt() {\n    Interrupts.isLcdInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionLcdInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestTimerInterrupt() {\n    Interrupts.isTimerInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionTimerInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestJoypadInterrupt() {\n    Interrupts.isJoypadInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionJoypadInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestSerialInterrupt() {\n    Interrupts.isSerialInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionSerialInterrupt);\n}\n\nvar Timers = /** @class */ (function () {\n    function Timers() {\n    }\n    // Number of cycles to run in each batch process\n    Timers.batchProcessCycles = function () {\n        return 256;\n    };\n    Timers.updateDividerRegister = function () {\n        var oldDividerRegister = Timers.dividerRegister;\n        Timers.dividerRegister = 0;\n        eightBitStoreIntoGBMemory(Timers.memoryLocationDividerRegister, 0);\n        if (Timers.timerEnabled && _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, 0)) {\n            _incrementTimerCounter();\n        }\n    };\n    Timers.updateTimerCounter = function (value) {\n        if (Timers.timerEnabled) {\n            // From binjgb, dont write TIMA if we were just reset\n            if (Timers.timerCounterWasReset) {\n                return;\n            }\n            // Mooneye Test, tima_write_reloading\n            // Writing in this strange delay cycle, will cancel\n            // Both the interrupt and the TMA reload\n            if (Timers.timerCounterOverflowDelay) {\n                Timers.timerCounterOverflowDelay = false;\n            }\n        }\n        Timers.timerCounter = value;\n    };\n    Timers.updateTimerModulo = function (value) {\n        Timers.timerModulo = value;\n        // Mooneye Test, tma_write_reloading\n        // Don't update if we were reloading\n        if (Timers.timerEnabled && Timers.timerCounterWasReset) {\n            Timers.timerCounter = value;\n            Timers.timerCounterWasReset = false;\n        }\n    };\n    Timers.updateTimerControl = function (value) {\n        // Get some initial values\n        var oldTimerEnabled = Timers.timerEnabled;\n        Timers.timerEnabled = checkBitOnByte(2, value);\n        var newTimerInputClock = value & 0x03;\n        // Do some obscure behavior for if we should increment TIMA\n        // This does the timer increments from rapid_toggle mooneye tests\n        if (!oldTimerEnabled) {\n            var oldTimerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n            var newTimerCounterMaskBit = _getTimerCounterMaskBit(newTimerInputClock);\n            var shouldIncrementTimerCounter = false;\n            var dividerRegister = Timers.dividerRegister;\n            if (Timers.timerEnabled) {\n                shouldIncrementTimerCounter = checkBitOnByte(oldTimerCounterMaskBit, dividerRegister);\n            }\n            else {\n                shouldIncrementTimerCounter =\n                    checkBitOnByte(oldTimerCounterMaskBit, dividerRegister) && checkBitOnByte(newTimerCounterMaskBit, dividerRegister);\n            }\n            if (shouldIncrementTimerCounter) {\n                _incrementTimerCounter();\n            }\n        }\n        Timers.timerInputClock = newTimerInputClock;\n    };\n    // Function to save the state of the class\n    // TODO: Save state for new properties on Timers\n    Timers.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot), Timers.currentCycles);\n        store(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot), Timers.dividerRegister);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot), Timers.timerCounterOverflowDelay);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0b, Timers.saveStateSlot), Timers.timerCounterWasReset);\n        eightBitStoreIntoGBMemory(Timers.memoryLocationTimerCounter, Timers.timerCounter);\n    };\n    // Function to load the save state from memory\n    Timers.loadState = function () {\n        Timers.currentCycles = load(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot));\n        Timers.dividerRegister = load(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot));\n        Timers.timerCounterOverflowDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot));\n        Timers.timerCounterWasReset = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0b, Timers.saveStateSlot));\n        Timers.timerCounter = eightBitLoadFromGBMemory(Timers.memoryLocationTimerCounter);\n        Timers.timerModulo = eightBitLoadFromGBMemory(Timers.memoryLocationTimerModulo);\n        Timers.timerInputClock = eightBitLoadFromGBMemory(Timers.memoryLocationTimerControl);\n    };\n    // Current cycles\n    // This will be used for batch processing\n    Timers.currentCycles = 0;\n    // Divider Register = DIV\n    // Divider Register is 16 bits.\n    // Divider Register when read is just the upper 8 bits\n    // But internally is used as the full 16\n    // Essentially dividerRegister is an always counting clock\n    // DIV Drives everything, it is the heart of the timer.\n    // All other timing registers base them selves relative to the DIV register\n    // Think of the div register as like a cycle counter :)\n    // DIV will increment TIMA, whenever there is a falling edge, see below for that.\n    Timers.memoryLocationDividerRegister = 0xff04; // DIV\n    Timers.dividerRegister = 0;\n    // timerCounter = TIMA\n    // TIMA is the actual counter.\n    // Whenever the DIV gets the falling edge, and other obscure cases,\n    // This is incremented. When this overflows, we need to fire an interrupt.\n    Timers.memoryLocationTimerCounter = 0xff05;\n    Timers.timerCounter = 0;\n    Timers.timerCounterOverflowDelay = false;\n    Timers.timerCounterWasReset = false;\n    Timers.timerCounterMask = 0;\n    // Timer Modulo = TMA\n    // TMA is what TIMA (Notice the I :p) is counting from, and TIMA will load\n    // Whenever TIMA overflow.\n    // For instance, we count like 1,2,3,4,5,6,7,8,9, and then overflow to 10.\n    // TMA would be like \"Hey, start counting from 5 whenever we reset\"\n    // Then we would be like 5,6,7,8,9...5,6,7,8,9...etc...\n    Timers.memoryLocationTimerModulo = 0xff06;\n    Timers.timerModulo = 0;\n    // Timer Control = TAC\n    // TAC Says how fast we are counting.\n    // TAC controls which bit we are watching for the falling edge on the DIV register\n    // And whenever the bit has the falling edge, we increment TIMA (The thing counting).\n    // Therefore, depending on the value, we will either count faster or slower.\n    Timers.memoryLocationTimerControl = 0xff07;\n    // Bit 2    - Timer Stop  (0=Stop, 1=Start)\n    // Bits 1-0 - Input Clock Select\n    //            00:   4096 Hz    (~4194 Hz SGB) (1024 cycles)\n    //            01: 262144 Hz  (~268400 Hz SGB) (16 cycles)\n    //            10:  65536 Hz   (~67110 Hz SGB) (64 cycles)\n    //            11:  16384 Hz   (~16780 Hz SGB) (256 cycles)\n    Timers.timerEnabled = false;\n    Timers.timerInputClock = 0;\n    // Save States\n    Timers.saveStateSlot = 5;\n    return Timers;\n}());\n// Inlined because closure compiler inlines\nfunction initializeTimers() {\n    // Reset stateful Variables\n    Timers.currentCycles = 0;\n    Timers.dividerRegister = 0;\n    Timers.timerCounter = 0;\n    Timers.timerModulo = 0;\n    Timers.timerEnabled = false;\n    Timers.timerInputClock = 0;\n    Timers.timerCounterOverflowDelay = false;\n    Timers.timerCounterWasReset = false;\n    if (Cpu.GBCEnabled) {\n        // DIV\n        eightBitStoreIntoGBMemory(0xff04, 0x1e);\n        Timers.dividerRegister = 0x1ea0;\n        // 0xFF05 -> 0xFF06 = 0x00\n        // TAC\n        eightBitStoreIntoGBMemory(0xff07, 0xf8);\n        Timers.timerInputClock = 0xf8;\n    }\n    else {\n        // DIV\n        eightBitStoreIntoGBMemory(0xff04, 0xab);\n        Timers.dividerRegister = 0xabcc;\n        // 0xFF05 -> 0xFF06 = 0x00\n        // TAC\n        eightBitStoreIntoGBMemory(0xff07, 0xf8);\n        Timers.timerInputClock = 0xf8;\n    }\n    // Override/reset some variables if the boot ROM is enabled\n    if (Cpu.BootROMEnabled) {\n        if (Cpu.GBCEnabled) ;\n        else {\n            // GB\n            // DIV\n            eightBitStoreIntoGBMemory(0xff04, 0x00);\n            Timers.dividerRegister = 0x0004;\n        }\n    }\n}\n// Batch Process Timers\n// Only checked on writes\n// Function to batch process our Timers after we skipped so many cycles\nfunction batchProcessTimers() {\n    // TODO: Did a timer rewrite, make a proper batch processing\n    // For timers\n    updateTimers(Timers.currentCycles);\n    Timers.currentCycles = 0;\n}\nfunction updateTimers(numberOfCycles) {\n    // Want to increment 4 cycles at a time like an actual GB would\n    var cyclesIncreased = 0;\n    while (cyclesIncreased < numberOfCycles) {\n        var oldDividerRegister = Timers.dividerRegister;\n        var curDividerRegister = oldDividerRegister;\n        cyclesIncreased += 4;\n        curDividerRegister += 4;\n        curDividerRegister &= 0xffff;\n        Timers.dividerRegister = curDividerRegister;\n        if (Timers.timerEnabled) {\n            var timerCounterWasReset = Timers.timerCounterWasReset;\n            if (Timers.timerCounterOverflowDelay) {\n                Timers.timerCounter = Timers.timerModulo;\n                // Fire off timer interrupt\n                requestTimerInterrupt();\n                Timers.timerCounterOverflowDelay = false;\n                Timers.timerCounterWasReset = true;\n            }\n            else if (timerCounterWasReset) {\n                Timers.timerCounterWasReset = false;\n            }\n            if (_checkDividerRegisterFallingEdgeDetector(oldDividerRegister, curDividerRegister)) {\n                _incrementTimerCounter();\n            }\n        }\n    }\n}\n// Function to increment our Timer Counter\n// This fires off interrupts once we overflow\nfunction _incrementTimerCounter() {\n    var counter = Timers.timerCounter;\n    if (++counter > 255) {\n        // Whenever the timer overflows, there is a slight delay (4 cycles)\n        // Of when TIMA gets TMA's value, and the interrupt is fired.\n        // Thus we will set the delay, which can be handled in the update timer or write trap\n        Timers.timerCounterOverflowDelay = true;\n        counter = 0;\n    }\n    Timers.timerCounter = counter;\n}\n// Function to act as our falling edge detector\n// Whenever we have a falling edge, we need to increment TIMA\n// http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n// https://github.com/binji/binjgb/blob/master/src/emulator.c#L1944\nfunction _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, newDividerRegister) {\n    // Get our mask\n    var timerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n    // If the old register's watched bit was zero,\n    // but after adding the new registers wastch bit is now 1\n    return checkBitOnByte(timerCounterMaskBit, oldDividerRegister) && !checkBitOnByte(timerCounterMaskBit, newDividerRegister);\n}\n// Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\nfunction _getTimerCounterMaskBit(timerInputClock) {\n    switch (timerInputClock) {\n        case 0x00:\n            return 9;\n        case 0x01:\n            return 3;\n        case 0x02:\n            return 5;\n        case 0x03:\n            return 7;\n    }\n    return 0;\n}\n\n// Link cable / serial implementation\nvar Serial = /** @class */ (function () {\n    function Serial() {\n    }\n    Serial.updateTransferControl = function (value) {\n        Serial.isShiftClockInternal = checkBitOnByte(0, value);\n        Serial.isClockSpeedFast = checkBitOnByte(1, value);\n        Serial.transferStartFlag = checkBitOnByte(7, value);\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    };\n    // Cycle counter\n    Serial.currentCycles = 0x00;\n    // Register locations\n    Serial.memoryLocationSerialTransferData = 0xff01; // SB\n    Serial.memoryLocationSerialTransferControl = 0xff02; // SC\n    // Number of bits transferred\n    Serial.numberOfBitsTransferred = 0;\n    // Transfer control variables\n    Serial.isShiftClockInternal = false;\n    Serial.isClockSpeedFast = false;\n    Serial.transferStartFlag = false;\n    return Serial;\n}());\n// Function to initialize our serial values\n// Inlined because closure compiler inlines\nfunction initializeSerial() {\n    Serial.currentCycles = 0x00;\n    Serial.numberOfBitsTransferred = 0;\n    if (Cpu.GBCEnabled) {\n        // FF01 = 0x00\n        eightBitStoreIntoGBMemory(0xff02, 0x7c);\n        Serial.updateTransferControl(0x7c);\n    }\n    else {\n        // FF01 = 0x00\n        eightBitStoreIntoGBMemory(0xff02, 0x7e);\n        Serial.updateTransferControl(0x7e);\n    }\n}\n// TODO: Finish serial\n// See minimal serial: https://github.com/binji/binjgb/commit/64dece05c4ef5a052c4b9b75eb3ddbbfc6677cbe\n// Inlined because closure compiler inlines\nfunction updateSerial(numberOfCycles) {\n    // If we aren't starting our transfer, or transferring,\n    // return\n    if (!Serial.transferStartFlag) {\n        return;\n    }\n    // Want to increment 4 cycles at a time like an actual GB would\n    var cyclesIncreased = 0;\n    while (cyclesIncreased < numberOfCycles) {\n        var oldCycles = Serial.currentCycles;\n        var curCycles = oldCycles;\n        cyclesIncreased += 4;\n        curCycles += 4;\n        if (curCycles > 0xffff) {\n            curCycles -= 0x10000;\n        }\n        Serial.currentCycles = curCycles;\n        if (_checkFallingEdgeDetector(oldCycles, curCycles)) {\n            // TODO: Since no actual connection, always transfer 1\n            // Need to fix this\n            var memoryLocationSerialTransferData = Serial.memoryLocationSerialTransferData;\n            var transferData = eightBitLoadFromGBMemory(memoryLocationSerialTransferData);\n            transferData = (transferData << 1) + 1;\n            transferData = transferData & 0xff;\n            eightBitStoreIntoGBMemory(memoryLocationSerialTransferData, transferData);\n            var numberOfBitsTransferred = Serial.numberOfBitsTransferred;\n            if (++numberOfBitsTransferred === 8) {\n                Serial.numberOfBitsTransferred = 0;\n                requestSerialInterrupt();\n                // Disable transfer start\n                var memoryLocationSerialTransferControl = Serial.memoryLocationSerialTransferControl;\n                var transferControl = eightBitLoadFromGBMemory(memoryLocationSerialTransferControl);\n                eightBitStoreIntoGBMemory(memoryLocationSerialTransferControl, resetBitOnByte(7, transferControl));\n                Serial.transferStartFlag = false;\n            }\n            else {\n                Serial.numberOfBitsTransferred = numberOfBitsTransferred;\n            }\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction _checkFallingEdgeDetector(oldCycles, newCycles) {\n    // Get our mask\n    var maskBit = _getFallingEdgeMaskBit();\n    // If the old register's watched bit was zero,\n    // but after adding the new registers wastch bit is now 1\n    return checkBitOnByte(maskBit, oldCycles) && !checkBitOnByte(maskBit, newCycles);\n}\n// Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\n// Inlined because closure compiler inlines\nfunction _getFallingEdgeMaskBit() {\n    return Serial.isClockSpeedFast ? 2 : 7;\n}\n\n// http://www.codeslinger.co.uk/pages/projects/gameboy/joypad.html\n// Joypad Register\n// Taken from pandocs\n// Bit 7 - Not used\n// Bit 6 - Not used\n// Bit 5 - P15 Select Button Keys (0=Select)\n// Bit 4 - P14 Select Direction Keys (0=Select)\n// Bit 3 - P13 Input Down or Start (0=Pressed) (Read Only)\n// Bit 2 - P12 Input Up or Select (0=Pressed) (Read Only)\n// Bit 1 - P11 Input Left or Button B (0=Pressed) (Read Only)\n// Bit 0 - P10 Input Right or Button A (0=Pressed) (Read Only)\n// Button Ids will be the following:\n// UP - 0\n// RIGHT - 1\n// DOWN - 2\n// LEFT - 3\n// A - 4\n// B - 5\n// SELECT - 6\n// START - 7\nvar Joypad = /** @class */ (function () {\n    function Joypad() {\n    }\n    Joypad.updateJoypad = function (value) {\n        Joypad.joypadRegisterFlipped = value ^ 0xff;\n        Joypad.isDpadType = checkBitOnByte(4, Joypad.joypadRegisterFlipped);\n        Joypad.isButtonType = checkBitOnByte(5, Joypad.joypadRegisterFlipped);\n    };\n    // Function to save the state of the class\n    Joypad.saveState = function () { };\n    // Function to load the save state from memory\n    Joypad.loadState = function () {\n        Joypad.updateJoypad(eightBitLoadFromGBMemory(Joypad.memoryLocationJoypadRegister));\n    };\n    Joypad.up = false;\n    Joypad.down = false;\n    Joypad.left = false;\n    Joypad.right = false;\n    Joypad.a = false;\n    Joypad.b = false;\n    Joypad.select = false;\n    Joypad.start = false;\n    Joypad.memoryLocationJoypadRegister = 0xff00;\n    // Cache some values on the Joypad register\n    Joypad.joypadRegisterFlipped = 0;\n    Joypad.isDpadType = false;\n    Joypad.isButtonType = false;\n    // Save States\n    // Not doing anything for Joypad for now\n    Joypad.saveStateSlot = 3;\n    return Joypad;\n}());\n// Inlined because closure compiler inlines\nfunction getJoypadState() {\n    // Get the joypad register\n    var joypadRegister = Joypad.joypadRegisterFlipped;\n    if (Joypad.isDpadType) {\n        // D-pad buttons\n        // Up\n        if (Joypad.up) {\n            joypadRegister = resetBitOnByte(2, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(2, joypadRegister);\n        }\n        // Right\n        if (Joypad.right) {\n            joypadRegister = resetBitOnByte(0, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(0, joypadRegister);\n        }\n        // Down\n        if (Joypad.down) {\n            joypadRegister = resetBitOnByte(3, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(3, joypadRegister);\n        }\n        // Left\n        if (Joypad.left) {\n            joypadRegister = resetBitOnByte(1, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(1, joypadRegister);\n        }\n    }\n    else if (Joypad.isButtonType) {\n        // A\n        if (Joypad.a) {\n            joypadRegister = resetBitOnByte(0, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(0, joypadRegister);\n        }\n        // B\n        if (Joypad.b) {\n            joypadRegister = resetBitOnByte(1, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(1, joypadRegister);\n        }\n        // Select\n        if (Joypad.select) {\n            joypadRegister = resetBitOnByte(2, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(2, joypadRegister);\n        }\n        // Start\n        if (Joypad.start) {\n            joypadRegister = resetBitOnByte(3, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(3, joypadRegister);\n        }\n    }\n    // Set the top 4 bits to on\n    joypadRegister = joypadRegister | 0xf0;\n    return joypadRegister;\n}\nfunction setJoypadState(up, right, down, left, a, b, select, start) {\n    if (up > 0) {\n        _pressJoypadButton(0);\n    }\n    else {\n        _releaseJoypadButton(0);\n    }\n    if (right > 0) {\n        _pressJoypadButton(1);\n    }\n    else {\n        _releaseJoypadButton(1);\n    }\n    if (down > 0) {\n        _pressJoypadButton(2);\n    }\n    else {\n        _releaseJoypadButton(2);\n    }\n    if (left > 0) {\n        _pressJoypadButton(3);\n    }\n    else {\n        _releaseJoypadButton(3);\n    }\n    if (a > 0) {\n        _pressJoypadButton(4);\n    }\n    else {\n        _releaseJoypadButton(4);\n    }\n    if (b > 0) {\n        _pressJoypadButton(5);\n    }\n    else {\n        _releaseJoypadButton(5);\n    }\n    if (select > 0) {\n        _pressJoypadButton(6);\n    }\n    else {\n        _releaseJoypadButton(6);\n    }\n    if (start > 0) {\n        _pressJoypadButton(7);\n    }\n    else {\n        _releaseJoypadButton(7);\n    }\n}\nfunction _pressJoypadButton(buttonId) {\n    // Un stop the CPU\n    Cpu.isStopped = false;\n    // Check if the button state changed from not pressed\n    var isButtonStateChanging = false;\n    if (!_getJoypadButtonStateFromButtonId(buttonId)) {\n        isButtonStateChanging = true;\n    }\n    // Set our joypad state\n    _setJoypadButtonStateFromButtonId(buttonId, true);\n    // If the button state is changing, check for an interrupt\n    if (isButtonStateChanging) {\n        // Determine if it is a button or a dpad button\n        var isDpadTypeButton = false;\n        if (buttonId <= 3) {\n            isDpadTypeButton = true;\n        }\n        // Determine if we should request an interrupt\n        var shouldRequestInterrupt = false;\n        // Check if the game is looking for a dpad type button press\n        if (Joypad.isDpadType && isDpadTypeButton) {\n            shouldRequestInterrupt = true;\n        }\n        // Check if the game is looking for a button type button press\n        if (Joypad.isButtonType && !isDpadTypeButton) {\n            shouldRequestInterrupt = true;\n        }\n        // Finally, request the interrupt, if the button state actually changed\n        if (shouldRequestInterrupt) {\n            requestJoypadInterrupt();\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction _releaseJoypadButton(buttonId) {\n    // Set our joypad state\n    _setJoypadButtonStateFromButtonId(buttonId, false);\n}\nfunction _getJoypadButtonStateFromButtonId(buttonId) {\n    switch (buttonId) {\n        case 0:\n            return Joypad.up;\n        case 1:\n            return Joypad.right;\n        case 2:\n            return Joypad.down;\n        case 3:\n            return Joypad.left;\n        case 4:\n            return Joypad.a;\n        case 5:\n            return Joypad.b;\n        case 6:\n            return Joypad.select;\n        case 7:\n            return Joypad.start;\n        default:\n            return false;\n    }\n}\nfunction _setJoypadButtonStateFromButtonId(buttonId, isPressed) {\n    switch (buttonId) {\n        case 0:\n            Joypad.up = isPressed;\n            break;\n        case 1:\n            Joypad.right = isPressed;\n            break;\n        case 2:\n            Joypad.down = isPressed;\n            break;\n        case 3:\n            Joypad.left = isPressed;\n            break;\n        case 4:\n            Joypad.a = isPressed;\n            break;\n        case 5:\n            Joypad.b = isPressed;\n            break;\n        case 6:\n            Joypad.select = isPressed;\n            break;\n        case 7:\n            Joypad.start = isPressed;\n            break;\n    }\n}\n\n// Function to handle rom/rambanking\n// Inlined because closure compiler inlines\nfunction handleBanking(offset, value) {\n    // Is rom Only does not bank\n    if (Memory.isRomOnly) {\n        return;\n    }\n    var isMBC1 = Memory.isMBC1;\n    var isMBC2 = Memory.isMBC2;\n    // Enable Ram Banking\n    if (offset <= 0x1fff) {\n        if (isMBC2 && !checkBitOnByte(4, value)) {\n            // Do Nothing\n            return;\n        }\n        else {\n            var romEnableByte = value & 0x0f;\n            if (romEnableByte === 0x00) {\n                Memory.isRamBankingEnabled = false;\n            }\n            else if (romEnableByte === 0x0a) {\n                Memory.isRamBankingEnabled = true;\n            }\n        }\n    }\n    else if (offset <= 0x3fff) {\n        var isMBC5 = Memory.isMBC5;\n        if (!isMBC5 || offset <= 0x2fff) {\n            // Change Low Bits on the Current Rom Bank\n            var currentRomBank = Memory.currentRomBank;\n            if (isMBC2) {\n                currentRomBank = value & 0x0f;\n            }\n            // Set the number of bottom bytes from the MBC type\n            var romBankLowerBits = value;\n            if (isMBC1) {\n                // Only want the bottom 5\n                romBankLowerBits = romBankLowerBits & 0x1f;\n                currentRomBank &= 0xe0;\n            }\n            else if (Memory.isMBC3) {\n                // Only Want the bottom 7\n                romBankLowerBits = romBankLowerBits & 0x7f;\n                currentRomBank &= 0x80;\n            }\n            else if (isMBC5) {\n                // Going to switch the whole thing\n                currentRomBank &= 0x00;\n            }\n            // Set the lower bytes\n            currentRomBank |= romBankLowerBits;\n            Memory.currentRomBank = currentRomBank;\n            return;\n        }\n        else {\n            // TODO: MBC5 High bits Rom bank, check if this works, not sure about the value\n            var lowByte = splitLowByte(Memory.currentRomBank);\n            var highByte = (value > 0);\n            Memory.currentRomBank = concatenateBytes(highByte, lowByte);\n        }\n    }\n    else if (!isMBC2 && offset <= 0x5fff) {\n        // ROM / RAM Banking, MBC2 doesn't do this\n        if (isMBC1 && Memory.isMBC1RomModeEnabled) {\n            // Do an upper bit rom bank for MBC 1\n            // Remove upper bits of currentRomBank\n            var currentRomBank = Memory.currentRomBank & 0x1f;\n            var romBankHigherBits = value & 0xe0;\n            currentRomBank |= romBankHigherBits;\n            Memory.currentRomBank = currentRomBank;\n            return;\n        }\n        var ramBankBits = value;\n        if (!Memory.isMBC5) {\n            // Get the bottom 2 bits\n            ramBankBits &= 0x03;\n        }\n        else {\n            // Get the bottom nibble\n            ramBankBits &= 0x0f;\n        }\n        // Set our ram bank\n        Memory.currentRamBank = ramBankBits;\n        return;\n    }\n    else if (!isMBC2 && offset <= 0x7fff) {\n        if (isMBC1) {\n            Memory.isMBC1RomModeEnabled = checkBitOnByte(0, value);\n        }\n        // TODO: MBC3 Latch Clock Data\n    }\n}\n// Inlined because closure compiler inlines\nfunction getRomBankAddress(gameboyOffset) {\n    var currentRomBank = Memory.currentRomBank;\n    if (!Memory.isMBC5 && currentRomBank === 0) {\n        currentRomBank = 1;\n    }\n    // Adjust our gameboy offset relative to zero for the gameboy memory map\n    return (0x4000 * currentRomBank + (gameboyOffset - Memory.switchableCartridgeRomLocation));\n}\n// Inlined because closure compiler inlines\nfunction getRamBankAddress(gameboyOffset) {\n    // Adjust our gameboy offset relative to zero for the gameboy memory map\n    return (0x2000 * Memory.currentRamBank + (gameboyOffset - Memory.cartridgeRamLocation));\n}\n\n// Inlined because closure compiler inlines\nfunction initializeDma() {\n    if (Cpu.GBCEnabled) {\n        // GBC DMA\n        eightBitStoreIntoGBMemory(0xff51, 0xff);\n        eightBitStoreIntoGBMemory(0xff52, 0xff);\n        eightBitStoreIntoGBMemory(0xff53, 0xff);\n        eightBitStoreIntoGBMemory(0xff54, 0xff);\n        eightBitStoreIntoGBMemory(0xff55, 0xff);\n    }\n    else {\n        // GB DMA\n        eightBitStoreIntoGBMemory(0xff51, 0xff);\n        eightBitStoreIntoGBMemory(0xff52, 0xff);\n        eightBitStoreIntoGBMemory(0xff53, 0xff);\n        eightBitStoreIntoGBMemory(0xff54, 0xff);\n        eightBitStoreIntoGBMemory(0xff55, 0xff);\n    }\n}\n// Inlined because closure compiler inlines\nfunction startDmaTransfer(sourceAddressOffset) {\n    var sourceAddress = sourceAddressOffset << 8;\n    for (var i = 0; i <= 0x9f; ++i) {\n        var spriteInformationByte = eightBitLoadFromGBMemory(sourceAddress + i);\n        var spriteInformationAddress = Memory.spriteInformationTableLocation + i;\n        eightBitStoreIntoGBMemory(spriteInformationAddress, spriteInformationByte);\n    }\n    // TCAGBD:  This copy (DMA) needs 160 × 4 + 4 clocks to complete in both double speed and single speeds modes\n    // Increment all of our Cycle coiunters in ../cpu/opcodes\n    Memory.DMACycles = 644;\n}\n// https://gist.github.com/drhelius/3394856\n// http://bgb.bircd.org/pandocs.htm\n// Inlined because closure compiler inlines\nfunction startHdmaTransfer(hdmaTriggerByteToBeWritten) {\n    // Check if we are Gbc\n    if (!Cpu.GBCEnabled) {\n        return;\n    }\n    // Check if we are trying to terminate an already active HBLANK HDMA\n    if (Memory.isHblankHdmaActive && !checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n        // Don't reset anything, just set bit 7 to 1 on the trigger byte\n        Memory.isHblankHdmaActive = false;\n        var hdmaTriggerByte = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaTrigger);\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, setBitOnByte(7, hdmaTriggerByte));\n        return;\n    }\n    // Get our source and destination for the HDMA\n    var hdmaSource = getHdmaSourceFromMemory();\n    var hdmaDestination = getHdmaDestinationFromMemory();\n    // Get the length from the trigger\n    // Lower 7 bits, Add 1, times 16\n    // https://gist.github.com/drhelius/3394856\n    var transferLength = resetBitOnByte(7, hdmaTriggerByteToBeWritten);\n    transferLength = (transferLength + 1) << 4;\n    // Get bit 7 of the trigger for the HDMA type\n    if (checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n        // H-Blank DMA\n        Memory.isHblankHdmaActive = true;\n        Memory.hblankHdmaTransferLengthRemaining = transferLength;\n        Memory.hblankHdmaSource = hdmaSource;\n        Memory.hblankHdmaDestination = hdmaDestination;\n        // This will be handled in updateHblankHdma()\n        // Since we return false in write traps, we need to now write the byte\n        // Be sure to reset bit 7, to show that the hdma is active\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, resetBitOnByte(7, hdmaTriggerByteToBeWritten));\n    }\n    else {\n        // General DMA\n        hdmaTransfer(hdmaSource, hdmaDestination, transferLength);\n        // Stop the DMA\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, 0xff);\n    }\n}\n// Inlined because closure compiler inlines\nfunction updateHblankHdma() {\n    if (!Memory.isHblankHdmaActive) {\n        return;\n    }\n    // Get our amount of bytes to transfer (Only 0x10 bytes at a time)\n    var bytesToTransfer = 0x10;\n    var hblankHdmaTransferLengthRemaining = Memory.hblankHdmaTransferLengthRemaining;\n    if (hblankHdmaTransferLengthRemaining < bytesToTransfer) {\n        // Set to the difference\n        bytesToTransfer = hblankHdmaTransferLengthRemaining;\n    }\n    // Do the transfer (Only 0x10 bytes at a time)\n    hdmaTransfer(Memory.hblankHdmaSource, Memory.hblankHdmaDestination, bytesToTransfer);\n    // Update our source and destination\n    Memory.hblankHdmaSource += bytesToTransfer;\n    Memory.hblankHdmaDestination += bytesToTransfer;\n    hblankHdmaTransferLengthRemaining -= bytesToTransfer;\n    Memory.hblankHdmaTransferLengthRemaining = hblankHdmaTransferLengthRemaining;\n    var memoryLocationHdmaTrigger = Memory.memoryLocationHdmaTrigger;\n    if (hblankHdmaTransferLengthRemaining <= 0) {\n        // End the transfer\n        Memory.isHblankHdmaActive = false;\n        // Need to clear the HDMA with 0xFF, which sets bit 7 to 1 to show the HDMA has ended\n        eightBitStoreIntoGBMemory(memoryLocationHdmaTrigger, 0xff);\n    }\n    else {\n        // Set our new transfer length, make sure it is in the weird format,\n        // and make sure bit 7 is 0, to show that the HDMA is Active\n        var remainingTransferLength = hblankHdmaTransferLengthRemaining;\n        var transferLengthAsByte = (remainingTransferLength >> 4) - 1;\n        eightBitStoreIntoGBMemory(memoryLocationHdmaTrigger, resetBitOnByte(7, transferLengthAsByte));\n    }\n}\n// Simple Function to transfer the bytes from a destination to a source for a general pourpose or Hblank HDMA\nfunction hdmaTransfer(hdmaSource, hdmaDestination, transferLength) {\n    for (var i = 0; i < transferLength; ++i) {\n        var sourceByte = eightBitLoadFromGBMemoryWithTraps(hdmaSource + i);\n        // get the hdmaDestination with wrapping\n        // See issue #61: https://github.com/torch2424/wasmBoy/issues/61\n        var hdmaDestinationWithWrapping = hdmaDestination + i;\n        while (hdmaDestinationWithWrapping > 0x9fff) {\n            // Simply clear the top 3 bits\n            hdmaDestinationWithWrapping -= 0x2000;\n        }\n        eightBitStoreIntoGBMemoryWithTraps(hdmaDestinationWithWrapping, sourceByte);\n    }\n    // Set our Cycles used for the HDMA\n    // Since DMA in GBC Double Speed Mode takes 80 micro seconds,\n    // And HDMA takes 8 micro seconds per 0x10 bytes in GBC Double Speed mode (and GBC Normal Mode)\n    // Will assume (644 / 10) cycles for GBC Double Speed Mode,\n    // and (644 / 10 / 2) for GBC Normal Mode\n    var hdmaCycles = 32 << Cpu.GBCDoubleSpeed;\n    hdmaCycles = hdmaCycles * (transferLength >> 4);\n    Memory.DMACycles += hdmaCycles;\n}\n// Function to get our HDMA Source\n// Follows the poan docs\n// Inlined because closure compiler inlines\nfunction getHdmaSourceFromMemory() {\n    // Get our source for the HDMA\n    var hdmaSourceHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceHigh);\n    var hdmaSourceLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceLow);\n    var hdmaSource = concatenateBytes(hdmaSourceHigh, hdmaSourceLow);\n    // And off the appopriate bits for the source and destination\n    // And off the bottom 4 bits\n    hdmaSource = hdmaSource & 0xfff0;\n    return hdmaSource;\n}\n// Function to get our HDMA Destination\n// Follows the poan docs\n// Inlined because closure compiler inlines\nfunction getHdmaDestinationFromMemory() {\n    var hdmaDestinationHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationHigh);\n    var hdmaDestinationLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationLow);\n    var hdmaDestination = concatenateBytes(hdmaDestinationHigh, hdmaDestinationLow);\n    // Can only be in VRAM, 0x8000 -> 0x9FF0\n    // Pan docs says to knock off upper 3 bits, and lower 4 bits\n    // Which gives us: 0001111111110000 or 0x1FF0\n    // Meaning we must add 0x8000\n    hdmaDestination = hdmaDestination & 0x1ff0;\n    hdmaDestination += Memory.videoRamLocation;\n    return hdmaDestination;\n}\n\n// Internal function to trap any modify data trying to be written to Gameboy memory\n// Follows the Gameboy memory map\n// Return true if you want to continue the write, return false to end it here\nfunction checkWriteTraps(offset, value) {\n    // Cpu\n    if (offset === Cpu.memoryLocationSpeedSwitch) {\n        // TCAGBD, only Bit 0 is writable\n        eightBitStoreIntoGBMemory(Cpu.memoryLocationSpeedSwitch, value & 0x01);\n        // We did the write, dont need to\n        return false;\n    }\n    // Handle Boot ROM Switch\n    if (Cpu.BootROMEnabled && offset === Cpu.memoryLocationBootROMSwitch) {\n        // Disable the boot rom\n        Cpu.BootROMEnabled = false;\n        // Set the program counter to be incremented after this command\n        Cpu.programCounter = 0x00ff;\n        // Allow the write\n        return true;\n    }\n    // Graphics\n    // Cache globals used multiple times for performance\n    var videoRamLocation = Memory.videoRamLocation;\n    var spriteInformationTableLocation = Memory.spriteInformationTableLocation;\n    // Handle banking\n    if (offset < videoRamLocation) {\n        handleBanking(offset, value);\n        return false;\n    }\n    // Check the graphics mode to see if we can write to VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n    if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n        // Can only read/write from VRAM During Modes 0 - 2\n        // See graphics/lcd.ts\n        // TODO: This can do more harm than good in a beta emulator,\n        // requires precise timing disabling for now\n        // if (Graphics.currentLcdMode > 2) {\n        //   return false;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Be sure to copy everything in EchoRam to Work Ram\n    // Codeslinger: The ECHO memory region (0xE000-0xFDFF) is quite different because any data written here is also written in the equivelent ram memory region 0xC000-0xDDFF.\n    // Hence why it is called echo\n    if (offset >= Memory.echoRamLocation && offset < spriteInformationTableLocation) {\n        var wramOffset = offset - 0x2000;\n        eightBitStoreIntoGBMemory(wramOffset, value);\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Also check for individal writes\n    // Can only read/write from OAM During Modes 0 - 1\n    // See graphics/lcd.ts\n    if (offset >= spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n        // Can only read/write from OAM During Mode 2\n        // See graphics/lcd.ts\n        // if (Lcd.currentLcdMode < 2) {\n        // return false;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // Allow the original write, and return since we dont need to look anymore\n        // return true;\n        return Lcd.currentLcdMode >= 2;\n    }\n    if (offset >= Memory.unusableMemoryLocation && offset <= Memory.unusableMemoryEndLocation) {\n        return false;\n    }\n    // Serial\n    if (offset === Serial.memoryLocationSerialTransferControl) {\n        // SC\n        return Serial.updateTransferControl(value);\n    }\n    // Sound\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    if (offset >= 0xff10 && offset <= 0xff26) {\n        batchProcessAudio();\n        return SoundRegisterWriteTraps(offset, value);\n    }\n    // FF27 - FF2F not used\n    // Final Wave Table for Channel 3\n    if (offset >= 0xff30 && offset <= 0xff3f) {\n        batchProcessAudio();\n    }\n    // Other Memory effects fomr read/write to Lcd/Graphics\n    if (offset >= Lcd.memoryLocationLcdControl && offset <= Graphics.memoryLocationWindowX) {\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        if (offset === Lcd.memoryLocationLcdControl) {\n            // Shorcut for isLCD Enabled since it gets \"hot\"\n            Lcd.updateLcdControl(value);\n            return true;\n        }\n        if (offset === Lcd.memoryLocationLcdStatus) {\n            // We are handling the write here\n            Lcd.updateLcdStatus(value);\n            return false;\n        }\n        // reset the current scanline if the game tries to write to it\n        if (offset === Graphics.memoryLocationScanlineRegister) {\n            Graphics.scanlineRegister = 0;\n            eightBitStoreIntoGBMemory(offset, 0);\n            return false;\n        }\n        // Cache our coincidence compare\n        if (offset === Lcd.memoryLocationCoincidenceCompare) {\n            Lcd.coincidenceCompare = value;\n            return true;\n        }\n        // Do the direct memory access transfer for spriteInformationTable\n        // Check the graphics mode to see if we can write to VRAM\n        // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n        if (offset === Graphics.memoryLocationDmaTransfer) {\n            // otherwise, perform a DMA transfer\n            // And allow the original write\n            startDmaTransfer(value);\n            return true;\n        }\n        // Scroll and Window XY\n        switch (offset) {\n            case Graphics.memoryLocationScrollX:\n                Graphics.scrollX = value;\n                return true;\n            case Graphics.memoryLocationScrollY:\n                Graphics.scrollY = value;\n                return true;\n            case Graphics.memoryLocationWindowX:\n                Graphics.windowX = value;\n                return true;\n            case Graphics.memoryLocationWindowY:\n                Graphics.windowY = value;\n                return true;\n        }\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Do an HDMA\n    if (offset === Memory.memoryLocationHdmaTrigger) {\n        startHdmaTransfer(value);\n        return false;\n    }\n    // Don't allow banking if we are doing an Hblank HDM transfer\n    // https://gist.github.com/drhelius/3394856\n    if (offset === Memory.memoryLocationGBCWRAMBank || offset === Memory.memoryLocationGBCVRAMBank) {\n        if (Memory.isHblankHdmaActive) {\n            var hblankHdmaSource = Memory.hblankHdmaSource;\n            if ((hblankHdmaSource >= 0x4000 && hblankHdmaSource <= 0x7fff) || (hblankHdmaSource >= 0xd000 && hblankHdmaSource <= 0xdfff)) {\n                return false;\n            }\n        }\n    }\n    // Handle GBC Pallete Write\n    if (offset >= Palette.memoryLocationBackgroundPaletteIndex && offset <= Palette.memoryLocationSpritePaletteData) {\n        // Incremeenting the palette handled by the write\n        writeColorPaletteToMemory(offset, value);\n        return true;\n    }\n    // Handle timer writes\n    if (offset >= Timers.memoryLocationDividerRegister && offset <= Timers.memoryLocationTimerControl) {\n        // Batch Process\n        batchProcessTimers();\n        switch (offset) {\n            case Timers.memoryLocationDividerRegister:\n                Timers.updateDividerRegister();\n                return false;\n            case Timers.memoryLocationTimerCounter:\n                Timers.updateTimerCounter(value);\n                return true;\n            case Timers.memoryLocationTimerModulo:\n                Timers.updateTimerModulo(value);\n                return true;\n            case Timers.memoryLocationTimerControl:\n                Timers.updateTimerControl(value);\n                return true;\n        }\n        return true;\n    }\n    // Handle Joypad writes for HW reg caching\n    if (offset === Joypad.memoryLocationJoypadRegister) {\n        Joypad.updateJoypad(value);\n    }\n    // Handle Interrupt writes\n    if (offset === Interrupts.memoryLocationInterruptRequest) {\n        Interrupts.updateInterruptRequested(value);\n        return true;\n    }\n    if (offset === Interrupts.memoryLocationInterruptEnabled) {\n        Interrupts.updateInterruptEnabled(value);\n        return true;\n    }\n    // Allow the original write\n    return true;\n}\n\n// WasmBoy memory map:\n// Private function to translate a offset meant for the gameboy memory map\n// To the wasmboy memory map\n// Following: http://gameboy.mongenel.com/dmg/asmmemmap.html\n// And https://github.com/Dooskington/GameLad/wiki/Part-11---Memory-Bank-Controllers\n// Performance help from @dcodeIO, and awesome-gbdev\nfunction getWasmBoyOffsetFromGameBoyOffset(gameboyOffset) {\n    // Get the top byte and switch\n    var gameboyOffsetHighByte = gameboyOffset >> 12;\n    switch (gameboyOffsetHighByte) {\n        case 0x00:\n            // Check if we are currently executing the boot rom\n            // Otherwise, bottom 0x0000 -> 0x03FF is Cartridge ROM Ram Bank 1\n            if (Cpu.BootROMEnabled) {\n                if (Cpu.GBCEnabled) {\n                    // See: http://gbdev.gg8.se/wiki/articles/Gameboy_Bootstrap_ROM\n                    // \"The rom dump includes the 256 byte rom (0x0000-0x00FF) and the,\n                    // 1792 byte rom (0x0200-0x08FF) which Dr. Decapitator observed,\n                    // but not the 512 byte rom,\n                    // which may be cpu microcode or lcd color lookup related.\"\n                    // First 0xFF bytes are BOOT rom\n                    if (gameboyOffset < 0x0100) {\n                        return gameboyOffset + BOOT_ROM_LOCATION;\n                    }\n                    // 0x100 -> 0x1FF is the actual ROM\n                    // Everything from 0x200 -> 0x8FF is BOOT ROM Again\n                    if (gameboyOffset > 0x01ff && gameboyOffset < 0x0900) {\n                        return gameboyOffset + BOOT_ROM_LOCATION;\n                    }\n                }\n                else if (!Cpu.GBCEnabled && gameboyOffset < 0x0100) {\n                    return gameboyOffset + BOOT_ROM_LOCATION;\n                }\n            }\n        case 0x01:\n        case 0x02:\n        case 0x03:\n            // Cartridge ROM - Bank 0 (fixed)\n            // 0x0000 -> 0x0D2400\n            return gameboyOffset + CARTRIDGE_ROM_LOCATION;\n        case 0x04:\n        case 0x05:\n        case 0x06:\n        case 0x07:\n            // Cartridge ROM - Switchable Banks 1-xx\n            // 0x4000 -> (0x0D2400 + 0x4000)\n            return getRomBankAddress(gameboyOffset) + CARTRIDGE_ROM_LOCATION;\n        case 0x08:\n        case 0x09:\n            // Video RAM\n            // 0x8000 -> 0x000400\n            var vramBankId = 0;\n            if (Cpu.GBCEnabled) {\n                // Find our current VRAM Bank\n                vramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCVRAMBank) & 0x01;\n                // Even though We added another 0x2000, the Cartridge ram is pulled out of our Internal Memory Space\n                // Therefore, we do not need to adjust for this extra 0x2000\n            }\n            return gameboyOffset - Memory.videoRamLocation + VIDEO_RAM_LOCATION + 0x2000 * vramBankId;\n        case 0x0a:\n        case 0x0b:\n            // Cartridge RAM - A.K.A External RAM\n            // 0xA000 -> 0x008400\n            return getRamBankAddress(gameboyOffset) + CARTRIDGE_RAM_LOCATION;\n        case 0x0c:\n            // Gameboy Ram Bank 0\n            // 0xC000 -> 0x000400\n            // Don't need to add head, since we move out 0x200 from the cartridge ram\n            return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION;\n        case 0x0d:\n            // Gameboy Ram Banks, Switchable in GBC Mode\n            // 0xD000 -> 0x000400\n            // In CGB Mode 32 KBytes internal RAM are available.\n            // This memory is divided into 8 banks of 4 KBytes each.\n            // Bank 0 is always available in memory at C000-CFFF,\n            // Bank 1-7 can be selected into the address space at D000-DFFF.\n            // http://gbdev.gg8.se/wiki/articles/CGB_Registers#FF70_-_SVBK_-_CGB_Mode_Only_-_WRAM_Bank\n            // Get the last 3 bits to find our wram ID\n            var wramBankId = 0;\n            if (Cpu.GBCEnabled) {\n                wramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCWRAMBank) & 0x07;\n            }\n            wramBankId = wramBankId < 1 ? 1 : wramBankId;\n            // (0x1000 * (wramBankId - 1)) -> To find the correct wram bank.\n            // wramBankId - 1, because we alreayd have the space for wramBank 1, and are currently in it\n            // So need to address space for 6 OTHER banks\n            return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION + 0x1000 * (wramBankId - 1);\n        default:\n            // Everything Else after Gameboy Ram Banks\n            // 0xE000 -> 0x000400\n            // 0x6000 For the Extra WRAM Banks\n            return gameboyOffset - Memory.echoRamLocation + OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION;\n    }\n}\n\n// Breakpoints for memory / cpu\nvar Breakpoints = /** @class */ (function () {\n    function Breakpoints() {\n    }\n    Breakpoints.programCounter = -1;\n    Breakpoints.readGbMemory = -1;\n    Breakpoints.writeGbMemory = -1;\n    Breakpoints.reachedBreakpoint = false;\n    return Breakpoints;\n}());\nfunction setProgramCounterBreakpoint(breakpoint) {\n    Breakpoints.programCounter = breakpoint;\n}\nfunction resetProgramCounterBreakpoint() {\n    Breakpoints.programCounter = -1;\n}\nfunction setReadGbMemoryBreakpoint(breakpoint) {\n    Breakpoints.readGbMemory = breakpoint;\n}\nfunction resetReadGbMemoryBreakpoint() {\n    Breakpoints.readGbMemory = -1;\n}\nfunction setWriteGbMemoryBreakpoint(breakpoint) {\n    Breakpoints.writeGbMemory = breakpoint;\n}\nfunction resetWriteGbMemoryBreakpoint() {\n    Breakpoints.writeGbMemory = -1;\n}\n\n// Store / Write memory access\nfunction eightBitStoreIntoGBMemory(gameboyOffset, value) {\n    store(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset), value);\n}\nfunction eightBitStoreIntoGBMemoryWithTraps(offset, value) {\n    if (offset === Breakpoints.writeGbMemory) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    if (checkWriteTraps(offset, value)) {\n        eightBitStoreIntoGBMemory(offset, value);\n    }\n}\nfunction sixteenBitStoreIntoGBMemoryWithTraps(offset, value) {\n    // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n    // Split the value into two seperate bytes\n    var highByte = splitHighByte(value);\n    var lowByte = splitLowByte(value);\n    if (checkWriteTraps(offset, lowByte)) {\n        eightBitStoreIntoGBMemory(offset, lowByte);\n    }\n    var nextOffset = offset + 1;\n    if (checkWriteTraps(nextOffset, highByte)) {\n        eightBitStoreIntoGBMemory(nextOffset, highByte);\n    }\n}\nfunction sixteenBitStoreIntoGBMemory(offset, value) {\n    // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n    // Split the value into two seperate bytes\n    var highByte = splitHighByte(value);\n    var lowByte = splitLowByte(value);\n    eightBitStoreIntoGBMemory(offset + 0, lowByte);\n    eightBitStoreIntoGBMemory(offset + 1, highByte);\n}\nfunction storeBooleanDirectlyToWasmMemory(offset, value) {\n    store(offset, value);\n}\n\n// Funcitons for setting and checking the LCD\nvar Lcd = /** @class */ (function () {\n    function Lcd() {\n    }\n    // Function called in write traps to update our hardware registers\n    Lcd.updateLcdStatus = function (value) {\n        // Bottom three bits are read only\n        var currentLcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        var valueNoBottomBits = value & 0xf8;\n        var lcdStatusOnlyBottomBits = currentLcdStatus & 0x07;\n        value = valueNoBottomBits | lcdStatusOnlyBottomBits;\n        // Top bit is always 1\n        value = setBitOnByte(7, value);\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, value);\n    };\n    // Function called in write traps to update our hardware registers\n    Lcd.updateLcdControl = function (value) {\n        var wasLcdEnabled = Lcd.enabled;\n        Lcd.enabled = checkBitOnByte(7, value);\n        Lcd.windowTileMapDisplaySelect = checkBitOnByte(6, value);\n        Lcd.windowDisplayEnabled = checkBitOnByte(5, value);\n        Lcd.bgWindowTileDataSelect = checkBitOnByte(4, value);\n        Lcd.bgTileMapDisplaySelect = checkBitOnByte(3, value);\n        Lcd.tallSpriteSize = checkBitOnByte(2, value);\n        Lcd.spriteDisplayEnable = checkBitOnByte(1, value);\n        Lcd.bgDisplayEnabled = checkBitOnByte(0, value);\n        if (wasLcdEnabled && !Lcd.enabled) {\n            // Disable the LCD\n            resetLcd(true);\n        }\n        if (!wasLcdEnabled && Lcd.enabled) {\n            // Re-enable the LCD\n            resetLcd(false);\n        }\n    };\n    // Memory Locations\n    // Also known at STAT\n    // LCD Status (0xFF41) bits Explanation\n    // 0                0                    000                    0             00\n    //       |Coicedence Interrupt|     |Mode Interrupts|  |coincidence flag|  | Mode |\n    // Modes:\n    // 0 or 00: H-Blank\n    // 1 or 01: V-Blank\n    // 2 or 10: Searching Sprites Atts\n    // 3 or 11: Transfering Data to LCD Driver\n    Lcd.memoryLocationLcdStatus = 0xff41;\n    Lcd.currentLcdMode = 0;\n    Lcd.memoryLocationCoincidenceCompare = 0xff45;\n    Lcd.coincidenceCompare = 0;\n    // Also known as LCDC\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    // Bit 7 - LCD Display Enable (0=Off, 1=On)\n    // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 5 - Window Display Enable (0=Off, 1=On)\n    // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n    // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n    // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n    // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On\n    Lcd.memoryLocationLcdControl = 0xff40;\n    // Decoupled LCDC for caching\n    Lcd.enabled = true;\n    Lcd.windowTileMapDisplaySelect = false;\n    Lcd.windowDisplayEnabled = false;\n    Lcd.bgWindowTileDataSelect = false;\n    Lcd.bgTileMapDisplaySelect = false;\n    Lcd.tallSpriteSize = false;\n    Lcd.spriteDisplayEnable = false;\n    Lcd.bgDisplayEnabled = false;\n    return Lcd;\n}());\nfunction resetLcd(shouldBlankScreen) {\n    // Reset scanline cycle counter\n    Graphics.scanlineCycleCounter = 0;\n    Graphics.scanlineRegister = 0;\n    eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, 0);\n    // Set to mode 0\n    // https://www.reddit.com/r/EmuDev/comments/4w6479/gb_dr_mario_level_generation_issues/\n    var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n    lcdStatus = resetBitOnByte(1, lcdStatus);\n    lcdStatus = resetBitOnByte(0, lcdStatus);\n    Lcd.currentLcdMode = 0;\n    // Store the status in memory\n    eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    // Blank the screen\n    if (shouldBlankScreen) {\n        for (var i = 0; i < FRAME_SIZE; ++i) {\n            store(FRAME_LOCATION + i, 255);\n        }\n    }\n}\n// Pass in the lcd status for performance\n// Inlined because closure compiler inlines\nfunction setLcdStatus() {\n    // Check if the Lcd was disabled\n    if (!Lcd.enabled) {\n        return;\n    }\n    // Get our current scanline, and lcd mode\n    var scanlineRegister = Graphics.scanlineRegister;\n    var lcdMode = Lcd.currentLcdMode;\n    // Default to  H-Blank\n    var newLcdMode = 0;\n    // Find our newLcd mode\n    if (scanlineRegister >= 144) {\n        // VBlank mode\n        newLcdMode = 1;\n    }\n    else {\n        var scanlineCycleCounter = Graphics.scanlineCycleCounter;\n        var MIN_CYCLES_SPRITES_LCD_MODE = Graphics.MIN_CYCLES_SPRITES_LCD_MODE();\n        if (scanlineCycleCounter >= MIN_CYCLES_SPRITES_LCD_MODE) {\n            // Searching Sprites Atts\n            newLcdMode = 2;\n        }\n        else if (scanlineCycleCounter >= MIN_CYCLES_SPRITES_LCD_MODE) {\n            // Transferring data to lcd\n            newLcdMode = 3;\n        }\n    }\n    if (lcdMode !== newLcdMode) {\n        // Get our lcd status\n        var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        // Save our lcd mode\n        Lcd.currentLcdMode = newLcdMode;\n        var shouldRequestInterrupt = false;\n        // Set our LCD Status accordingly\n        switch (newLcdMode) {\n            case 0x00:\n                lcdStatus = resetBitOnByte(0, lcdStatus);\n                lcdStatus = resetBitOnByte(1, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(3, lcdStatus);\n                break;\n            case 0x01:\n                lcdStatus = resetBitOnByte(1, lcdStatus);\n                lcdStatus = setBitOnByte(0, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(4, lcdStatus);\n                break;\n            case 0x02:\n                lcdStatus = resetBitOnByte(0, lcdStatus);\n                lcdStatus = setBitOnByte(1, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(5, lcdStatus);\n                break;\n            case 0x03:\n                lcdStatus = setBitOnByte(0, lcdStatus);\n                lcdStatus = setBitOnByte(1, lcdStatus);\n                break;\n        }\n        // Check if we want to request an interrupt, and we JUST changed modes\n        if (shouldRequestInterrupt) {\n            requestLcdInterrupt();\n        }\n        // Check for updating the Hblank HDMA\n        if (newLcdMode === 0) {\n            // Update the Hblank DMA, will simply return if not active\n            updateHblankHdma();\n        }\n        // Check for requesting a VBLANK interrupt\n        if (newLcdMode === 1) {\n            requestVBlankInterrupt();\n        }\n        // Check for the coincidence\n        lcdStatus = checkCoincidence(newLcdMode, lcdStatus);\n        // Finally, save our status\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    }\n    else if (scanlineRegister === 153) {\n        // Special Case, need to check LYC\n        // Fix prehistorik man freeze\n        var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        lcdStatus = checkCoincidence(newLcdMode, lcdStatus);\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    }\n}\nfunction checkCoincidence(lcdMode, lcdStatus) {\n    // Check for the coincidence flag\n    // Need to check on every mode, and not just HBLANK, as checking on hblank breaks shantae, which checks on vblank\n    if ((lcdMode === 0 || lcdMode === 1) && Graphics.scanlineRegister === Lcd.coincidenceCompare) {\n        lcdStatus = setBitOnByte(2, lcdStatus);\n        if (checkBitOnByte(6, lcdStatus)) {\n            requestLcdInterrupt();\n        }\n    }\n    else {\n        lcdStatus = resetBitOnByte(2, lcdStatus);\n    }\n    return lcdStatus;\n}\n\n// Functions for rendering the background\n// NOTE: i32Portable wraps modulo here as somehow it gets converted to a double:\n// https://github.com/torch2424/wasmboy/issues/216\n// Inlined because closure compiler inlines\nfunction renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n    // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n    // Get our scrollX and scrollY (u16 to play nice with assemblyscript)\n    // let scrollX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollX);\n    // let scrollY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollY);\n    var scrollX = Graphics.scrollX;\n    var scrollY = Graphics.scrollY;\n    // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n    // this is done by getting the current scroll Y position,\n    // and adding it do what Y Value the scanline is drawing on the camera.\n    var pixelYPositionInMap = scanlineRegister + scrollY;\n    // Gameboy camera will \"wrap\" around the background map,\n    // meaning that if the pixelValue is 350, then we need to subtract 256 (decimal) to get it's actual value\n    // pixel values (scrollX and scrollY) range from 0x00 - 0xFF\n    pixelYPositionInMap &= 0x100 - 1;\n    // Draw the Background scanline\n    drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, 0, scrollX);\n}\n// Inlined because closure compiler inlines\nfunction renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n    // Get our windowX and windowY\n    // let windowX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowX);\n    // let windowY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowY);\n    var windowX = Graphics.windowX;\n    var windowY = Graphics.windowY;\n    // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n    // First ensure that the scanline is greater than our window\n    if (scanlineRegister < windowY) {\n        // Window is not within the current camera view\n        return;\n    }\n    // WindowX is offset by 7\n    windowX -= 7;\n    // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n    var pixelYPositionInMap = scanlineRegister - windowY;\n    // xOffset is simply a neagative window x\n    // NOTE: This can become negative zero?\n    // https://github.com/torch2424/wasmboy/issues/216\n    var xOffset = i32Portable(-windowX);\n    // Draw the Background scanline\n    drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, windowX, xOffset);\n}\n// Function frankenstein'd together to allow background and window to share the same draw scanline function\nfunction drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, iStart, xOffset) {\n    // Get our tile Y position in the map\n    var tileYPositionInMap = pixelYPositionInMap >> 3;\n    // Loop through x to draw the line like a CRT\n    for (var i = iStart; i < 160; ++i) {\n        // Get our Current X position of our pixel on the on the 160x144 camera\n        // this is done by getting the current scroll X position,\n        // and adding it do what X Value the scanline is drawing on the camera.\n        var pixelXPositionInMap = i + xOffset;\n        // This is to compensate wrapping, same as pixelY\n        if (pixelXPositionInMap >= 0x100) {\n            pixelXPositionInMap -= 0x100;\n        }\n        // Divide our pixel position by 8 to get our tile.\n        // Since, there are 256x256 pixels, and 32x32 tiles.\n        // 256 / 8 = 32.\n        // Also, bitshifting by 3, do do a division by 8\n        // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n        var tileXPositionInMap = pixelXPositionInMap >> 3;\n        // Get our tile address on the tileMap\n        // NOTE: (tileMap represents where each tile is displayed on the screen)\n        // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n        // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n        // And we have x pixel 160. 160 / 8 = 20.\n        // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n        // Think like indexing a 2d array, as a 1d array and it make sense :)\n        var tileMapAddress = tileMapMemoryLocation + (tileYPositionInMap << 5) + tileXPositionInMap;\n        // Get the tile Id on the Tile Map\n        var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n        // Now that we have our Tile Id, let's check our Tile Cache\n        var usedTileCache = false;\n        if (Config.tileCaching) {\n            var pixelsDrawn = drawLineOfTileFromTileCache(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            // Increment i by 7, not 8 because i will be incremented at end of for loop\n            if (pixelsDrawn > 0) {\n                i += pixelsDrawn - 1;\n                usedTileCache = true;\n            }\n        }\n        if (Config.tileRendering && !usedTileCache) {\n            var pixelsDrawn = drawLineOfTileFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            // A line of a tile is 8 pixels wide, therefore increase i by (pixelsDrawn - 1), and then the for loop will increment by 1\n            // For a net increment for 8\n            if (pixelsDrawn > 0) {\n                i += pixelsDrawn - 1;\n            }\n        }\n        else if (!usedTileCache) {\n            if (Cpu.GBCEnabled) {\n                // Draw the individual pixel\n                drawColorPixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            }\n            else {\n                // Draw the individual pixel\n                drawMonochromePixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap);\n            }\n        }\n    }\n}\n// Function to draw a pixel for the standard GB\n// Inlined because closure compiler inlines\nfunction drawMonochromePixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Now we can process the the individual bytes that represent the pixel on a tile\n    // Now get our tileDataAddress for the corresponding tileID we found in the map\n    // Read the comments in _getTileDataAddress() to see what's going on.\n    // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n    // This funcitons returns the start of memory locaiton for the tile 'c'.\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n    // Get the y pixel of the 8 by 8 tile.\n    // Simply modulo the scanline.\n    // For instance, let's say we are printing the first line of pixels on our camera,\n    // And the first line of pixels on our tile.\n    // yPixel = 1. 1 % 8 = 1.\n    // And for the last line\n    // yPixel = 144. 144 % 8 = 0.\n    // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n    // Because remember, we are counting lines on the display NOT including zero\n    var pixelYInTile = i32Portable(pixelYPositionInMap & 7);\n    // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n    // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n    // Again, think like you had to map a 2d array as a 1d.\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, 0);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, 0);\n    // Same logic as pixelYInTile.\n    // However, We need to reverse our byte,\n    // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n    // Therefore, is pixelX was 2, then really is need to be 5\n    // So 2 - 7 = -5, * 1 = 5\n    // Or to simplify, 7 - 2 = 5 haha!\n    var pixelXInTile = i32Portable(pixelXPositionInMap & 7);\n    pixelXInTile = 7 - pixelXInTile;\n    // Now we can get the color for that pixel\n    // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n    // To Get the color Id.\n    // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n    // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    var paletteColorId = 0;\n    if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n    }\n    if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n    }\n    // Not checking u8 Portability overflow here, since it can't be greater than i32 over :p\n    // Now get the colorId from the pallete, to get our final color\n    // Developers could change colorIds to represents different colors\n    // in their palette, thus we need to grab the color from there\n    //let pixelColorInTileFromPalette: u8 = getColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n    // Moved below for perofrmance\n    // FINALLY, RENDER THAT PIXEL!\n    // Only rendering camera for now, so coordinates are for the camera.\n    // Get the rgb value for the color Id, will be repeated into R, G, B. if not colorized\n    var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n    setPixelOnFrame(xPixel, yPixel, 0, getRedFromHexColor(hexColor));\n    setPixelOnFrame(xPixel, yPixel, 1, getGreenFromHexColor(hexColor));\n    setPixelOnFrame(xPixel, yPixel, 2, getBlueFromHexColor(hexColor));\n    // Lastly, add the pixel to our background priority map\n    // https://github.com/torch2424/wasmBoy/issues/51\n    // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n    // Bit 2 will represent if the Bg/Window has GBC priority.\n    addPriorityforPixel(xPixel, yPixel, paletteColorId);\n}\n// Function to draw a pixel from a tile in C O L O R\n// See above for more context on some variables\n// Inlined because closure compiler inlines\nfunction drawColorPixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Now get our tileDataAddress for the corresponding tileID we found in the map\n    // Read the comments in _getTileDataAddress() to see what's going on.\n    // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n    // This funcitons returns the start of memory locaiton for the tile 'c'.\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n    // Get the GB Map Attributes\n    // Bit 0-2  Background Palette number  (BGP0-7)\n    // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n    // Bit 4    Not used\n    // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n    // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n    // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n    var bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n    // See above for explanation\n    var pixelYInTile = i32Portable(pixelYPositionInMap & 7);\n    if (checkBitOnByte(6, bgMapAttributes)) {\n        // We are mirroring the tile, therefore, we need to opposite byte\n        // So if our pixel was 0 our of 8, it wild become 7 :)\n        pixelYInTile = 7 - pixelYInTile;\n    }\n    // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n    // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n    // But we need to load the time from a specific Vram bank\n    var vramBankId = i32Portable(checkBitOnByte(3, bgMapAttributes));\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId);\n    // Get our X pixel. Need to NOT reverse it if it was flipped.\n    // See above, you have to reverse this normally\n    var pixelXInTile = i32Portable(pixelXPositionInMap & 7);\n    if (!checkBitOnByte(5, bgMapAttributes)) {\n        pixelXInTile = 7 - pixelXInTile;\n    }\n    // Now we can get the color for that pixel\n    // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n    // To Get the color Id.\n    // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n    // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    var paletteColorId = 0;\n    if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n    }\n    if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n    }\n    // Finally lets add some, C O L O R\n    // Want the botom 3 bits\n    var bgPalette = bgMapAttributes & 0x07;\n    // Call the helper function to grab the correct color from the palette\n    var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false);\n    // Split off into red green and blue\n    var red = getColorComponentFromRgb(0, rgbColorPalette);\n    var green = getColorComponentFromRgb(1, rgbColorPalette);\n    var blue = getColorComponentFromRgb(2, rgbColorPalette);\n    // Finally Place our colors on the things\n    setPixelOnFrame(xPixel, yPixel, 0, red);\n    setPixelOnFrame(xPixel, yPixel, 1, green);\n    setPixelOnFrame(xPixel, yPixel, 2, blue);\n    // Lastly, add the pixel to our background priority map\n    // https://github.com/torch2424/wasmBoy/issues/51\n    // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n    // Bit 2 will represent if the Bg/Window has GBC priority.\n    addPriorityforPixel(xPixel, yPixel, paletteColorId, checkBitOnByte(7, bgMapAttributes));\n}\n// Function to attempt to draw the tile from the tile cache\n// Inlined because closure compiler inlines\nfunction drawLineOfTileFromTileCache(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // First, initialize how many pixels we have drawn\n    var pixelsDrawn = 0;\n    // Check if the current tile matches our tileId\n    // TODO: Allow the first line to use the tile cache, for some odd reason it doesn't work when scanline is 0\n    var nextXIndexToPerformCacheCheck = TileCache.nextXIndexToPerformCacheCheck;\n    if (yPixel > 0 && xPixel > 8 && tileIdFromTileMap === TileCache.tileId && xPixel === nextXIndexToPerformCacheCheck) {\n        // Was last tile flipped\n        var wasLastTileHorizontallyFlipped = checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress - 1));\n        var isCurrentTileHorizontallyFlipped = checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress));\n        // Simply copy the last 8 pixels from memory to copy the line from the tile\n        for (var tileCacheIndex = 0; tileCacheIndex < 8; ++tileCacheIndex) {\n            // Check if we need to render backwards for flipping\n            if (wasLastTileHorizontallyFlipped !== isCurrentTileHorizontallyFlipped) {\n                tileCacheIndex = 7 - tileCacheIndex;\n            }\n            var xPos = xPixel + tileCacheIndex;\n            // First check for overflow\n            if (xPos <= 160) {\n                // Get the pixel location in memory of the tile\n                var previousXPixel = xPixel - (8 - tileCacheIndex);\n                var previousTilePixelLocation = FRAME_LOCATION + getRgbPixelStart(xPos, yPixel);\n                // Cycle through the RGB\n                // for (let tileCacheRgb = 0; tileCacheRgb < 3; ++tileCacheRgb) {\n                //  setPixelOnFrame(xPixel + tileCacheIndex, yPixel, tileCacheRgb, load<u8>(previousTilePixelLocation + tileCacheRgb));\n                // }\n                // unroll\n                setPixelOnFrame(xPos, yPixel, 0, load(previousTilePixelLocation, 0));\n                setPixelOnFrame(xPos, yPixel, 1, load(previousTilePixelLocation, 1));\n                setPixelOnFrame(xPos, yPixel, 2, load(previousTilePixelLocation, 2));\n                // Copy the priority for the pixel\n                var pixelPriority = getPriorityforPixel(previousXPixel, yPixel);\n                addPriorityforPixel(xPos, yPixel, resetBitOnByte(2, pixelPriority), checkBitOnByte(2, pixelPriority));\n                pixelsDrawn++;\n            }\n        }\n    }\n    else {\n        // Save our current tile Id, and the next x value we should check the x index\n        TileCache.tileId = tileIdFromTileMap;\n    }\n    // Calculate when we should do the tileCache calculation again\n    if (xPixel >= nextXIndexToPerformCacheCheck) {\n        nextXIndexToPerformCacheCheck = xPixel + 8;\n        var xOffsetTileWidthRemainder = i32Portable(pixelXPositionInMap & 7);\n        if (xPixel < xOffsetTileWidthRemainder) {\n            nextXIndexToPerformCacheCheck += xOffsetTileWidthRemainder;\n        }\n    }\n    TileCache.nextXIndexToPerformCacheCheck = nextXIndexToPerformCacheCheck;\n    return pixelsDrawn;\n}\n// Function to draw a line of a tile in Color\n// This is for tile rendering shortcuts\n// Inlined because closure compiler inlines\nfunction drawLineOfTileFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Get the which line of the tile we are rendering\n    var tileLineY = i32Portable(pixelYPositionInMap & 7);\n    // Now lets find our tileX start and end\n    // This is for the case where i = 0, but scroll X was 3.\n    // Or i is 157, and our camera is only 160 pixels wide\n    var tileXStart = 0;\n    if (xPixel == 0) {\n        tileXStart = pixelXPositionInMap - ((pixelXPositionInMap >> 3) << 3);\n    }\n    var tileXEnd = 7;\n    if (xPixel + 8 > 160) {\n        tileXEnd = 160 - xPixel;\n    }\n    // initialize some variables for GBC\n    var bgMapAttributes = -1;\n    var vramBankId = 0;\n    if (Cpu.GBCEnabled) {\n        // Get Our GBC properties\n        bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n        vramBankId = i32Portable(checkBitOnByte(3, bgMapAttributes));\n        if (checkBitOnByte(6, bgMapAttributes)) {\n            // We are mirroring the tile, therefore, we need to opposite byte\n            // So if our pixel was 0 our of 8, it wild become 7 :)\n            tileLineY = 7 - tileLineY;\n        }\n    }\n    // Return the number of pixels drawn\n    return drawPixelsFromLineOfTile(tileIdFromTileMap, tileDataMemoryLocation, vramBankId, tileXStart, tileXEnd, tileLineY, xPixel, yPixel, 160, FRAME_LOCATION, false, 0, bgMapAttributes, -1);\n}\n\n// Functions for rendering the sprites\n// Inlined because closure compiler inlines\nfunction renderSprites(scanlineRegister, useLargerSprites) {\n    // Need to loop through all 40 sprites to check their status\n    // Going backwards since lower sprites draw over higher ones\n    // Will fix dragon warrior 3 intro\n    for (var i = 39; i >= 0; --i) {\n        // Sprites occupy 4 bytes in the sprite attribute table\n        var spriteTableIndex = i * 4;\n        // Y positon is offset by 16, X position is offset by 8\n        var index = Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex;\n        var spriteYPosition = eightBitLoadFromGBMemory(index + 0);\n        var spriteXPosition = eightBitLoadFromGBMemory(index + 1);\n        var spriteTileId = eightBitLoadFromGBMemory(index + 2);\n        // Pan docs of sprite attirbute table\n        // Bit7   OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3)\n        //      (Used for both BG and Window. BG color 0 is always behind OBJ)\n        // Bit6   Y flip          (0=Normal, 1=Vertically mirrored)\n        // Bit5   X flip          (0=Normal, 1=Horizontally mirrored)\n        // Bit4   Palette number  **Non CGB Mode Only** (0=OBP0, 1=OBP1)\n        // Bit3   Tile VRAM-Bank  **CGB Mode Only**     (0=Bank 0, 1=Bank 1)\n        // Bit2-0 Palette number  **CGB Mode Only**     (OBP0-7)\n        // Apply sprite X and Y offset\n        // TODO: Sprites are overflowing on x if less than 8\n        spriteYPosition -= 16;\n        spriteXPosition -= 8;\n        // Find our sprite height\n        var spriteHeight = 8;\n        if (useLargerSprites) {\n            spriteHeight = 16;\n            // @binji says in 8x16 mode, even tileId always drawn first\n            // This will fix shantae sprites which always uses odd numbered indexes\n            // TODO: Do the actual Pandocs thing:\n            // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n            // So just knock off the last bit? :)\n            spriteTileId -= spriteTileId & 1;\n        }\n        // Find if our sprite is on the current scanline\n        if (scanlineRegister >= spriteYPosition && scanlineRegister < spriteYPosition + spriteHeight) {\n            // Then we need to draw the current sprite\n            // Get our sprite attributes since we know we shall be drawing the tile\n            var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n            // Check sprite Priority\n            var isSpritePriorityBehindWindowAndBackground = checkBitOnByte(7, spriteAttributes);\n            // Check if we should flip the sprite on the x or y axis\n            var flipSpriteY = checkBitOnByte(6, spriteAttributes);\n            var flipSpriteX = checkBitOnByte(5, spriteAttributes);\n            // TODO: Torch2424 continue here.\n            // Find which line on the sprite we are on\n            var currentSpriteLine = scanlineRegister - spriteYPosition;\n            // If we fliiped the Y axis on our sprite, need to read from memory backwards to acheive the same effect\n            if (flipSpriteY) {\n                currentSpriteLine = spriteHeight - currentSpriteLine;\n                // Bug fix for the flipped flies in link's awakening\n                currentSpriteLine -= 1;\n            }\n            // Each line of a tile takes two bytes of memory\n            currentSpriteLine <<= 1;\n            // Get our sprite tile address, need to also add the current sprite line to get the correct bytes\n            var spriteTileAddressStart = getTileDataAddress(Graphics.memoryLocationTileDataSelectOneStart, spriteTileId);\n            spriteTileAddressStart += currentSpriteLine;\n            var spriteTileAddress = spriteTileAddressStart;\n            // Find which VRAM Bank to load from\n            var vramBankId = (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes));\n            var spriteDataByteOneForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 0, vramBankId);\n            var spriteDataByteTwoForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 1, vramBankId);\n            // Iterate over the width of our sprite to find our individual pixels\n            for (var tilePixel = 7; tilePixel >= 0; --tilePixel) {\n                // Get our spritePixel, and check for flipping\n                var spritePixelXInTile = tilePixel;\n                if (flipSpriteX) {\n                    spritePixelXInTile -= 7;\n                    spritePixelXInTile = -spritePixelXInTile;\n                }\n                // Get the color Id of our sprite, similar to renderBackground()\n                // With the first byte, and second byte lined up method thing\n                // Yes, the second byte comes before the first, see ./background.ts\n                var spriteColorId = 0;\n                if (checkBitOnByte(spritePixelXInTile, spriteDataByteTwoForLineOfTilePixels)) {\n                    // Byte one represents the second bit in our color id, so bit shift\n                    spriteColorId = (spriteColorId + 1) << 1;\n                }\n                if (checkBitOnByte(spritePixelXInTile, spriteDataByteOneForLineOfTilePixels)) {\n                    spriteColorId += 1;\n                }\n                // ColorId zero (last two bits of pallette) are transparent\n                // http://gbdev.gg8.se/wiki/articles/Video_Display\n                if (spriteColorId !== 0) {\n                    // Find our actual X pixel location on the gameboy \"camera\" view\n                    // This cannot be less than zero, i32 will overflow\n                    var spriteXPixelLocationInCameraView = spriteXPosition + (7 - tilePixel);\n                    if (spriteXPixelLocationInCameraView >= 0 && spriteXPixelLocationInCameraView <= 160) {\n                        // There are two cases where wouldnt draw the pixel on top of the Bg/window\n                        // 1. if isSpritePriorityBehindWindowAndBackground, sprite can only draw over color 0\n                        // 2. if bit 2 of our priority is set, then BG-to-OAM Priority from pandoc\n                        //  is active, meaning BG tile will have priority above all OBJs\n                        //  (regardless of the priority bits in OAM memory)\n                        // But if GBC and Bit 0 of LCDC is set, we always draw the object\n                        var shouldShowFromLcdcPriority = Cpu.GBCEnabled && !Lcd.bgDisplayEnabled; // LCDC Priority\n                        var shouldHideFromOamPriority = false;\n                        var shouldHideFromBgPriority = false;\n                        if (!shouldShowFromLcdcPriority) {\n                            // Now that we have our coordinates, check for sprite priority\n                            // Lets get the priority byte we put in memory\n                            var bgPriorityByte = getPriorityforPixel(spriteXPixelLocationInCameraView, scanlineRegister);\n                            var bgColorFromPriorityByte = bgPriorityByte & 0x03;\n                            // Doing an else if, since either will automatically stop drawing the pixel\n                            if (isSpritePriorityBehindWindowAndBackground && bgColorFromPriorityByte > 0) {\n                                // OAM Priority\n                                shouldHideFromOamPriority = true;\n                            }\n                            else if (Cpu.GBCEnabled && checkBitOnByte(2, bgPriorityByte) && bgColorFromPriorityByte > 0) {\n                                // Bg priority\n                                shouldHideFromBgPriority = true;\n                            }\n                        }\n                        if (shouldShowFromLcdcPriority || (!shouldHideFromOamPriority && !shouldHideFromBgPriority)) {\n                            if (!Cpu.GBCEnabled) {\n                                // Get our monochrome color RGB from the current sprite pallete\n                                // Get our sprite pallete\n                                var spritePaletteLocation = Graphics.memoryLocationSpritePaletteOne;\n                                if (checkBitOnByte(4, spriteAttributes)) {\n                                    spritePaletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                                }\n                                var hexColor = getColorizedGbHexColorFromPalette(spriteColorId, spritePaletteLocation);\n                                // Finally set the pixel!\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, getRedFromHexColor(hexColor));\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, getGreenFromHexColor(hexColor));\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, getBlueFromHexColor(hexColor));\n                            }\n                            else {\n                                // Get our RGB Color\n                                // Finally lets add some, C O L O R\n                                // Want the botom 3 bits\n                                var bgPalette = spriteAttributes & 0x07;\n                                // Call the helper function to grab the correct color from the palette\n                                var rgbColorPalette = getRgbColorFromPalette(bgPalette, spriteColorId, true);\n                                // Split off into red green and blue\n                                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                                var blue = getColorComponentFromRgb(2, rgbColorPalette);\n                                // Finally Place our colors on the things\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, red);\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, green);\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, blue);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main Class and funcitons for rendering the gameboy display\nvar Graphics = /** @class */ (function () {\n    function Graphics() {\n    }\n    // Number of cycles to run in each batch process\n    // This number should be in sync so that graphics doesn't run too many cyles at once\n    // and does not exceed the minimum number of cyles for either scanlines, or\n    // How often we change the frame, or a channel's update process\n    Graphics.batchProcessCycles = function () {\n        return Graphics.MAX_CYCLES_PER_SCANLINE();\n    };\n    // TCAGBD says 456 per scanline, but 153 only a handful\n    Graphics.MAX_CYCLES_PER_SCANLINE = function () {\n        if (Graphics.scanlineRegister === 153) {\n            return 4 << Cpu.GBCDoubleSpeed;\n        }\n        else {\n            return 456 << Cpu.GBCDoubleSpeed;\n        }\n    };\n    Graphics.MIN_CYCLES_SPRITES_LCD_MODE = function () {\n        // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n        return 376 << Cpu.GBCDoubleSpeed;\n    };\n    Graphics.MIN_CYCLES_TRANSFER_DATA_LCD_MODE = function () {\n        // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n        return 249 << Cpu.GBCDoubleSpeed;\n    };\n    // Function to save the state of the class\n    Graphics.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot), Graphics.scanlineCycleCounter);\n        store(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot), Lcd.currentLcdMode);\n        eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, Graphics.scanlineRegister);\n    };\n    // Function to load the save state from memory\n    Graphics.loadState = function () {\n        Graphics.scanlineCycleCounter = load(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot));\n        Lcd.currentLcdMode = load(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot));\n        Graphics.scanlineRegister = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n        Lcd.updateLcdControl(eightBitLoadFromGBMemory(Lcd.memoryLocationLcdControl));\n    };\n    // Current cycles\n    // This will be used for batch processing\n    Graphics.currentCycles = 0;\n    // Count the number of cycles to keep synced with cpu cycles\n    // Found GBC cycles by finding clock speed from Gb Cycles\n    // See TCAGBD For cycles\n    Graphics.scanlineCycleCounter = 0x00;\n    // LCD\n    // scanlineRegister also known as LY\n    // See: http://bgb.bircd.org/pandocs.txt , and search \" LY \"\n    Graphics.memoryLocationScanlineRegister = 0xff44;\n    Graphics.scanlineRegister = 0;\n    Graphics.memoryLocationDmaTransfer = 0xff46;\n    // Scroll and Window\n    Graphics.memoryLocationScrollX = 0xff43;\n    Graphics.scrollX = 0;\n    Graphics.memoryLocationScrollY = 0xff42;\n    Graphics.scrollY = 0;\n    Graphics.memoryLocationWindowX = 0xff4b;\n    Graphics.windowX = 0;\n    Graphics.memoryLocationWindowY = 0xff4a;\n    Graphics.windowY = 0;\n    // Tile Maps And Data\n    Graphics.memoryLocationTileMapSelectZeroStart = 0x9800;\n    Graphics.memoryLocationTileMapSelectOneStart = 0x9c00;\n    Graphics.memoryLocationTileDataSelectZeroStart = 0x8800;\n    Graphics.memoryLocationTileDataSelectOneStart = 0x8000;\n    // Sprites\n    Graphics.memoryLocationSpriteAttributesTable = 0xfe00;\n    // Palettes\n    Graphics.memoryLocationBackgroundPalette = 0xff47;\n    Graphics.memoryLocationSpritePaletteOne = 0xff48;\n    Graphics.memoryLocationSpritePaletteTwo = 0xff49;\n    // Screen data needs to be stored in wasm memory\n    // Save States\n    Graphics.saveStateSlot = 1;\n    return Graphics;\n}());\n// Batch Process Graphics\n// http://gameboy.mongenel.com/dmg/asmmemmap.html and http://gbdev.gg8.se/wiki/articles/Video_Display\n// Function to batch process our graphics after we skipped so many cycles\n// This is not currently checked in memory read/write\nfunction batchProcessGraphics() {\n    var batchProcessCycles = Graphics.batchProcessCycles();\n    while (Graphics.currentCycles >= batchProcessCycles) {\n        updateGraphics(batchProcessCycles);\n        Graphics.currentCycles -= batchProcessCycles;\n    }\n}\n// Inlined because closure compiler inlines\nfunction initializeGraphics() {\n    // Reset Stateful Variables\n    Graphics.currentCycles = 0;\n    Graphics.scanlineCycleCounter = 0x00;\n    Graphics.scanlineRegister = 0;\n    Graphics.scrollX = 0;\n    Graphics.scrollY = 0;\n    Graphics.windowX = 0;\n    Graphics.windowY = 0;\n    Graphics.scanlineRegister = 0x90;\n    if (Cpu.GBCEnabled) {\n        eightBitStoreIntoGBMemory(0xff41, 0x81);\n        // 0xFF42 -> 0xFF43 = 0x00\n        eightBitStoreIntoGBMemory(0xff44, 0x90);\n        // 0xFF45 -> 0xFF46 = 0x00\n        eightBitStoreIntoGBMemory(0xff47, 0xfc);\n        // 0xFF48 -> 0xFF4B = 0x00\n    }\n    else {\n        eightBitStoreIntoGBMemory(0xff41, 0x85);\n        // 0xFF42 -> 0xFF45 = 0x00\n        eightBitStoreIntoGBMemory(0xff46, 0xff);\n        eightBitStoreIntoGBMemory(0xff47, 0xfc);\n        eightBitStoreIntoGBMemory(0xff48, 0xff);\n        eightBitStoreIntoGBMemory(0xff49, 0xff);\n        // 0xFF4A -> 0xFF4B = 0x00\n        // GBC VRAM Banks (Handled by Memory, initializeCartridge)\n    }\n    // Scanline\n    // Bgb says LY is 90 on boot\n    Graphics.scanlineRegister = 0x90;\n    eightBitStoreIntoGBMemory(0xff40, 0x90);\n    // GBC VRAM Banks\n    eightBitStoreIntoGBMemory(0xff4f, 0x00);\n    eightBitStoreIntoGBMemory(0xff70, 0x01);\n    // Override/reset some variables if the boot ROM is enabled\n    if (Cpu.BootROMEnabled) {\n        if (Cpu.GBCEnabled) {\n            // GBC\n            Graphics.scanlineRegister = 0x00;\n            eightBitStoreIntoGBMemory(0xff40, 0x00);\n            eightBitStoreIntoGBMemory(0xff41, 0x80);\n            eightBitStoreIntoGBMemory(0xff44, 0x00);\n        }\n        else {\n            // GB\n            Graphics.scanlineRegister = 0x00;\n            eightBitStoreIntoGBMemory(0xff40, 0x00);\n            eightBitStoreIntoGBMemory(0xff41, 0x84);\n        }\n    }\n    initializeColors();\n}\nfunction updateGraphics(numberOfCycles) {\n    if (Lcd.enabled) {\n        Graphics.scanlineCycleCounter += numberOfCycles;\n        var graphicsDisableScanlineRendering = Config.graphicsDisableScanlineRendering;\n        while (Graphics.scanlineCycleCounter >= Graphics.MAX_CYCLES_PER_SCANLINE()) {\n            // Reset the scanlineCycleCounter\n            // Don't set to zero to catch extra cycles\n            Graphics.scanlineCycleCounter -= Graphics.MAX_CYCLES_PER_SCANLINE();\n            // Move to next scanline\n            // let scanlineRegister: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n            var scanlineRegister = Graphics.scanlineRegister;\n            // Check if we've reached the last scanline\n            if (scanlineRegister === 144) {\n                // Draw the scanline\n                if (!graphicsDisableScanlineRendering) {\n                    _drawScanline(scanlineRegister);\n                }\n                else {\n                    _renderEntireFrame();\n                }\n                // Clear the priority map\n                clearPriorityMap();\n                // Reset the tile cache\n                resetTileCache();\n            }\n            else if (scanlineRegister < 144) {\n                // Draw the scanline\n                if (!graphicsDisableScanlineRendering) {\n                    _drawScanline(scanlineRegister);\n                }\n            }\n            // Post increment the scanline register after drawing\n            // TODO: Need to fix graphics timing\n            if (scanlineRegister > 153) {\n                // Check if we overflowed scanlines\n                // if so, reset our scanline number\n                scanlineRegister = 0;\n            }\n            else {\n                scanlineRegister += 1;\n            }\n            // Store our new scanline value\n            Graphics.scanlineRegister = scanlineRegister;\n            // eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, scanlineRegister);\n        }\n    }\n    // Games like Pokemon crystal want the vblank right as it turns to the value, and not have it increment after\n    // It will break and lead to an infinite loop in crystal\n    // Therefore, we want to be checking/Setting our LCD status after the scanline updates\n    setLcdStatus();\n}\n// TODO: Make this a _drawPixelOnScanline, as values can be updated while drawing a scanline\nfunction _drawScanline(scanlineRegister) {\n    // Get our seleted tile data memory location\n    var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n    if (Lcd.bgWindowTileDataSelect) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n    }\n    // Check if the background is enabled\n    // NOTE: On Gameboy color, Pandocs says this does something completely different\n    // LCDC.0 - 2) CGB in CGB Mode: BG and Window Master Priority\n    // When Bit 0 is cleared, the background and window lose their priority -\n    // the sprites will be always displayed on top of background and window,\n    // independently of the priority flags in OAM and BG Map attributes.\n    // TODO: Enable this different feature for GBC\n    if (Cpu.GBCEnabled || Lcd.bgDisplayEnabled) {\n        // Get our map memory location\n        var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n        if (Lcd.bgTileMapDisplaySelect) {\n            tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n        }\n        // Finally, pass everything to draw the background\n        renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n    }\n    // Check if the window is enabled, and we are currently\n    // Drawing lines on the window\n    if (Lcd.windowDisplayEnabled) {\n        // Get our map memory location\n        var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n        if (Lcd.windowTileMapDisplaySelect) {\n            tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n        }\n        // Finally, pass everything to draw the background\n        renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n    }\n    if (Lcd.spriteDisplayEnable) {\n        // Sprites are enabled, render them!\n        renderSprites(scanlineRegister, Lcd.tallSpriteSize);\n    }\n}\n// Function to render everything for a frame at once\n// This is to improve performance\n// See above for comments on how things are donw\nfunction _renderEntireFrame() {\n    // Scanline needs to be in sync while we draw, thus, we can't shortcut anymore than here\n    for (var i = 0; i <= 144; ++i) {\n        _drawScanline(i);\n    }\n}\n// Function to get the start of a RGB pixel (R, G, B)\n// Inlined because closure compiler inlines\nfunction getRgbPixelStart(x, y) {\n    // Get the pixel number\n    // let pixelNumber: i32 = (y * 160) + x;\n    // Each pixel takes 3 slots, therefore, multiply by 3!\n    return (y * 160 + x) * 3;\n}\n// Also need to store current frame in memory to be read by JS\nfunction setPixelOnFrame(x, y, colorId, color) {\n    // Currently only supports 160x144\n    // Storing in X, then y\n    // So need an offset\n    store(FRAME_LOCATION + getRgbPixelStart(x, y) + colorId, color);\n}\n// Function to shortcut the memory map, and load directly from the VRAM Bank\nfunction loadFromVramBank(gameboyOffset, vramBankId) {\n    var wasmBoyAddress = gameboyOffset - Memory.videoRamLocation + GAMEBOY_INTERNAL_MEMORY_LOCATION + 0x2000 * (vramBankId & 0x01);\n    return load(wasmBoyAddress);\n}\n\n// Returns -1 if no trap found, otherwise returns a value that should be fed for the address\nfunction checkReadTraps(offset) {\n    // Cache globals used multiple times for performance\n    var videoRamLocation = Memory.videoRamLocation;\n    // Try to break early for most common scenario\n    if (offset < videoRamLocation) {\n        return -1;\n    }\n    // Check the graphics mode to see if we can read VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n    if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n        // Can only read/write from VRAM During Modes 0 - 2\n        // See graphics/lcd.ts\n        // TODO: This can do more harm than good in a beta emulator,\n        // requres precise timing, disabling for now\n        // if (Graphics.currentLcdMode > 2) {\n        //   return 0xFF;\n        // }\n        return -1;\n    }\n    // ECHO Ram, E000\tFDFF\tMirror of C000~DDFF (ECHO RAM)\n    // http://gbdev.gg8.se/wiki/articles/Memory_Map\n    if (offset >= Memory.echoRamLocation && offset < Memory.spriteInformationTableLocation) {\n        // Simply return the mirror'd value\n        return eightBitLoadFromGBMemory(offset - 0x2000);\n    }\n    // Check for individal writes\n    // Can only read/write from OAM During Modes 0 - 1\n    // See graphics/lcd.ts\n    if (offset >= Memory.spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n        // Can only read/write from OAM During Mode 2\n        // See graphics/lcd.ts\n        // if (Lcd.currentLcdMode < 2) {\n        // return 0xff;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // return -1;\n        return Lcd.currentLcdMode < 2 ? 0xff : -1;\n    }\n    // CPU\n    if (offset === Cpu.memoryLocationSpeedSwitch) {\n        // TCAGBD, only Bit 7 and 0 are readable, all others are 1\n        var response = 0xff;\n        var currentSpeedSwitchRegister = eightBitLoadFromGBMemory(Cpu.memoryLocationSpeedSwitch);\n        if (!checkBitOnByte(0, currentSpeedSwitchRegister)) {\n            response = resetBitOnByte(0, response);\n        }\n        if (!Cpu.GBCDoubleSpeed) {\n            response = resetBitOnByte(7, response);\n        }\n        return response;\n    }\n    // Graphics\n    // Not batch processing here for performance\n    // batchProcessGraphics();\n    if (offset === Graphics.memoryLocationScanlineRegister) {\n        eightBitStoreIntoGBMemory(offset, Graphics.scanlineRegister);\n        return Graphics.scanlineRegister;\n    }\n    // Sound\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    // TODO: Put these bounds on the Sound Class\n    if (offset >= 0xff10 && offset <= 0xff26) {\n        batchProcessAudio();\n        return SoundRegisterReadTraps(offset);\n    }\n    // FF27 - FF2F not used\n    // Final Wave Table for Channel 3\n    if (offset >= 0xff30 && offset <= 0xff3f) {\n        batchProcessAudio();\n        return -1;\n    }\n    // Timers\n    if (offset === Timers.memoryLocationDividerRegister) {\n        // Divider register in memory is just the upper 8 bits\n        // http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n        var upperDividerRegisterBits = splitHighByte(Timers.dividerRegister);\n        eightBitStoreIntoGBMemory(offset, upperDividerRegisterBits);\n        return upperDividerRegisterBits;\n    }\n    if (offset === Timers.memoryLocationTimerCounter) {\n        eightBitStoreIntoGBMemory(offset, Timers.timerCounter);\n        return Timers.timerCounter;\n    }\n    // Interrupts\n    if (offset === Interrupts.memoryLocationInterruptRequest) {\n        // TCAGB and BGB say the top 5 bits are always 1.\n        return 0xe0 | Interrupts.interruptsRequestedValue;\n    }\n    // Joypad\n    if (offset === Joypad.memoryLocationJoypadRegister) {\n        return getJoypadState();\n    }\n    return -1;\n}\n\n// Load/Read functionality for memory\nfunction eightBitLoadFromGBMemory(gameboyOffset) {\n    return load(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset));\n}\nfunction eightBitLoadFromGBMemoryWithTraps(offset) {\n    if (offset === Breakpoints.readGbMemory) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    var readTrapResult = checkReadTraps(offset);\n    return readTrapResult === -1 ? eightBitLoadFromGBMemory(offset) : readTrapResult;\n}\n// TODO: Rename this to sixteenBitLoadFromGBMemoryWithTraps\n// Inlined because closure compiler inlines\nfunction sixteenBitLoadFromGBMemory(offset) {\n    // Get our low byte\n    var lowByteReadTrapResult = checkReadTraps(offset);\n    var lowByte = lowByteReadTrapResult === -1 ? eightBitLoadFromGBMemory(offset) : lowByteReadTrapResult;\n    // Get the next offset for the second byte\n    var nextOffset = offset + 1;\n    // Get our high byte\n    var highByteReadTrapResult = checkReadTraps(nextOffset);\n    var highByte = highByteReadTrapResult === -1 ? eightBitLoadFromGBMemory(nextOffset) : highByteReadTrapResult;\n    // Concatenate the bytes and return\n    return concatenateBytes(highByte, lowByte);\n}\nfunction loadBooleanDirectlyFromWasmMemory(offset) {\n    return load(offset) > 0;\n}\n\n// WasmBoy memory map:\nvar Memory = /** @class */ (function () {\n    function Memory() {\n    }\n    // Function to save the state of the class\n    Memory.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot), Memory.currentRomBank);\n        store(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot), Memory.currentRamBank);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot), Memory.isRamBankingEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot), Memory.isMBC1RomModeEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot), Memory.isRomOnly);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot), Memory.isMBC1);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot), Memory.isMBC2);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot), Memory.isMBC3);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot), Memory.isMBC5);\n    };\n    // Function to load the save state from memory\n    Memory.loadState = function () {\n        Memory.currentRomBank = load(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot));\n        Memory.currentRamBank = load(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot));\n        Memory.isRamBankingEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot));\n        Memory.isMBC1RomModeEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot));\n        Memory.isRomOnly = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot));\n        Memory.isMBC1 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot));\n        Memory.isMBC2 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot));\n        Memory.isMBC3 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot));\n        Memory.isMBC5 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot));\n    };\n    // ----------------------------------\n    // Gameboy Memory Map\n    // ----------------------------------\n    // https://github.com/AntonioND/giibiiadvance/blob/master/docs/TCAGBD.pdf\n    // http://gameboy.mongenel.com/dmg/asmmemmap.html\n    // using Arrays, first index is start, second is end\n    Memory.cartridgeRomLocation = 0x0000;\n    Memory.switchableCartridgeRomLocation = 0x4000;\n    Memory.videoRamLocation = 0x8000;\n    Memory.cartridgeRamLocation = 0xa000;\n    Memory.internalRamBankZeroLocation = 0xc000;\n    // This ram bank is switchable\n    Memory.internalRamBankOneLocation = 0xd000;\n    Memory.echoRamLocation = 0xe000;\n    Memory.spriteInformationTableLocation = 0xfe00;\n    Memory.spriteInformationTableLocationEnd = 0xfe9f;\n    Memory.unusableMemoryLocation = 0xfea0;\n    Memory.unusableMemoryEndLocation = 0xfeff;\n    // Hardware I/O, 0xFF00 -> 0xFF7F\n    // Zero Page, 0xFF80 -> 0xFFFE\n    // Intterupt Enable Flag, 0xFFFF\n    // ----------------------------------\n    // Rom/Ram Banking\n    // ----------------------------------\n    // http://gbdev.gg8.se/wiki/articles/Memory_Bank_Controllers#MBC3_.28max_2MByte_ROM_and.2For_32KByte_RAM_and_Timer.29\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/banking.html\n    Memory.currentRomBank = 0x00;\n    Memory.currentRamBank = 0x00;\n    Memory.isRamBankingEnabled = false;\n    Memory.isMBC1RomModeEnabled = true;\n    // Cartridge Types\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    Memory.isRomOnly = true;\n    Memory.isMBC1 = false;\n    Memory.isMBC2 = false;\n    Memory.isMBC3 = false;\n    Memory.isMBC5 = false;\n    // DMA\n    Memory.memoryLocationHdmaSourceHigh = 0xff51;\n    Memory.memoryLocationHdmaSourceLow = 0xff52;\n    Memory.memoryLocationHdmaDestinationHigh = 0xff53;\n    Memory.memoryLocationHdmaDestinationLow = 0xff54;\n    Memory.memoryLocationHdmaTrigger = 0xff55;\n    // Cycles accumulated for DMA\n    Memory.DMACycles = 0;\n    // Boolean we will mirror to indicate if Hdma is active\n    Memory.isHblankHdmaActive = false;\n    Memory.hblankHdmaTransferLengthRemaining = 0x00;\n    // Store the source and destination for performance, and update as needed\n    Memory.hblankHdmaSource = 0x00;\n    Memory.hblankHdmaDestination = 0x00;\n    // GBC Registers\n    Memory.memoryLocationGBCVRAMBank = 0xff4f;\n    Memory.memoryLocationGBCWRAMBank = 0xff70;\n    // Save States\n    Memory.saveStateSlot = 4;\n    return Memory;\n}());\n// Inlined because closure compiler inlines\nfunction initializeCartridge() {\n    // Reset stateful variables\n    Memory.isRamBankingEnabled = false;\n    Memory.isMBC1RomModeEnabled = true;\n    // Get our game MBC type from the cartridge header\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    var cartridgeType = eightBitLoadFromGBMemory(0x0147);\n    // Reset our Cartridge types\n    Memory.isRomOnly = cartridgeType === 0x00;\n    Memory.isMBC1 = cartridgeType >= 0x01 && cartridgeType <= 0x03;\n    Memory.isMBC2 = cartridgeType >= 0x05 && cartridgeType <= 0x06;\n    Memory.isMBC3 = cartridgeType >= 0x0f && cartridgeType <= 0x13;\n    Memory.isMBC5 = cartridgeType >= 0x19 && cartridgeType <= 0x1e;\n    Memory.currentRomBank = 0x01;\n    Memory.currentRamBank = 0x00;\n    // Set our GBC Banks\n    eightBitStoreIntoGBMemory(Memory.memoryLocationGBCVRAMBank, 0x00);\n    eightBitStoreIntoGBMemory(Memory.memoryLocationGBCWRAMBank, 0x01);\n}\n\n// WasmBoy memory map:\n\n// Everything Static as class instances just aren't quite there yet\n// https://github.com/AssemblyScript/assemblyscript/blob/master/tests/compiler/showcase.ts\nvar Cpu = /** @class */ (function () {\n    function Cpu() {\n    }\n    Cpu.CLOCK_SPEED = function () {\n        // 2^23, thanks binji!\n        // return Cpu.GBCDoubleSpeed ? 8388608 : 4194304;\n        return 4194304 << Cpu.GBCDoubleSpeed;\n    };\n    // Cycles Per Frame = Clock Speed / fps\n    // So: 4194304 / 59.73\n    Cpu.MAX_CYCLES_PER_FRAME = function () {\n        // return Cpu.GBCDoubleSpeed ? 140448 : 70224;\n        return 70224 << Cpu.GBCDoubleSpeed;\n    };\n    // See section 4.10 of TCAGBD\n    // Cpu Halting explained: https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/db7xnbe/\n    Cpu.enableHalt = function () {\n        if (Interrupts.masterInterruptSwitch) {\n            Cpu.isHaltNormal = true;\n            return;\n        }\n        var haltTypeValue = Interrupts.interruptsEnabledValue & Interrupts.interruptsRequestedValue & 0x1f;\n        if (haltTypeValue === 0) {\n            Cpu.isHaltNoJump = true;\n            return;\n        }\n        Cpu.isHaltBug = true;\n    };\n    Cpu.exitHaltAndStop = function () {\n        Cpu.isHaltNoJump = false;\n        Cpu.isHaltNormal = false;\n        Cpu.isHaltBug = false;\n        Cpu.isStopped = false;\n    };\n    Cpu.isHalted = function () {\n        return Cpu.isHaltNormal || Cpu.isHaltNoJump;\n    };\n    // Function to save the state of the class\n    Cpu.saveState = function () {\n        // Registers\n        store(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot), Cpu.registerA);\n        store(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot), Cpu.registerB);\n        store(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot), Cpu.registerC);\n        store(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot), Cpu.registerD);\n        store(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot), Cpu.registerE);\n        store(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot), Cpu.registerH);\n        store(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot), Cpu.registerL);\n        store(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot), Cpu.registerF);\n        store(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot), Cpu.stackPointer);\n        store(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot), Cpu.programCounter);\n        store(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot), Cpu.currentCycles);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot), Cpu.isHaltNormal);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot), Cpu.isHaltNoJump);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x13, Cpu.saveStateSlot), Cpu.isHaltBug);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x14, Cpu.saveStateSlot), Cpu.isStopped);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x15, Cpu.saveStateSlot), Cpu.BootROMEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x16, Cpu.saveStateSlot), Cpu.GBCEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x17, Cpu.saveStateSlot), Cpu.GBCDoubleSpeed);\n    };\n    // Function to load the save state from memory\n    Cpu.loadState = function () {\n        // Registers\n        Cpu.registerA = load(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot));\n        Cpu.registerB = load(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot));\n        Cpu.registerC = load(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot));\n        Cpu.registerD = load(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot));\n        Cpu.registerE = load(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot));\n        Cpu.registerH = load(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot));\n        Cpu.registerL = load(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot));\n        Cpu.registerF = load(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot));\n        Cpu.stackPointer = load(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot));\n        Cpu.programCounter = load(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot));\n        Cpu.currentCycles = load(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot));\n        Cpu.isHaltNormal = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot));\n        Cpu.isHaltNoJump = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot));\n        Cpu.isHaltBug = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x13, Cpu.saveStateSlot));\n        Cpu.isStopped = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x14, Cpu.saveStateSlot));\n        Cpu.BootROMEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x15, Cpu.saveStateSlot));\n        Cpu.GBCEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x16, Cpu.saveStateSlot));\n        Cpu.GBCDoubleSpeed = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x17, Cpu.saveStateSlot));\n    };\n    // Status to track if we are currently executing the boot rom\n    Cpu.memoryLocationBootROMSwitch = 0xff50;\n    Cpu.BootROMEnabled = false;\n    // Status to track if we are in Gameboy Color Mode, and GBC State\n    Cpu.GBCEnabled = false;\n    // Memory Location for the GBC Speed switch\n    // And the current status\n    Cpu.memoryLocationSpeedSwitch = 0xff4d;\n    Cpu.GBCDoubleSpeed = false;\n    // 8-bit Cpu.registers\n    Cpu.registerA = 0;\n    Cpu.registerB = 0;\n    Cpu.registerC = 0;\n    Cpu.registerD = 0;\n    Cpu.registerE = 0;\n    Cpu.registerH = 0;\n    Cpu.registerL = 0;\n    Cpu.registerF = 0;\n    // 16-bit Cpu.registers\n    Cpu.stackPointer = 0;\n    // Boot rom from 0x00 to 0x99, all games start at 0x100\n    Cpu.programCounter = 0x00;\n    // Current number of cycles, shouldn't execeed max number of cycles\n    Cpu.currentCycles = 0;\n    // HALT and STOP instructions need to stop running opcodes, but simply check timers\n    // https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Matt said is should work to, so it must work!\n    // TCAGBD shows three different HALT states. Therefore, we need to handle each\n    Cpu.isHaltNormal = false;\n    Cpu.isHaltNoJump = false;\n    Cpu.isHaltBug = false;\n    Cpu.isStopped = false;\n    // Save States\n    Cpu.saveStateSlot = 0;\n    return Cpu;\n}());\n// Inlined because closure compiler does so\nfunction initializeCpu() {\n    // Reset all stateful Cpu variables\n    // Cpu.GBCEnabled is done by core/initialize\n    Cpu.GBCDoubleSpeed = false;\n    Cpu.registerA = 0;\n    Cpu.registerB = 0;\n    Cpu.registerC = 0;\n    Cpu.registerD = 0;\n    Cpu.registerE = 0;\n    Cpu.registerH = 0;\n    Cpu.registerL = 0;\n    Cpu.registerF = 0;\n    Cpu.stackPointer = 0;\n    Cpu.programCounter = 0x00;\n    Cpu.currentCycles = 0;\n    Cpu.isHaltNormal = false;\n    Cpu.isHaltNoJump = false;\n    Cpu.isHaltBug = false;\n    Cpu.isStopped = false;\n    // Everything is done by Boot ROM is enabled.\n    if (Cpu.BootROMEnabled) {\n        return;\n    }\n    if (Cpu.GBCEnabled) {\n        // CPU Registers\n        Cpu.registerA = 0x11;\n        Cpu.registerF = 0x80;\n        Cpu.registerB = 0x00;\n        Cpu.registerC = 0x00;\n        Cpu.registerD = 0xff;\n        Cpu.registerE = 0x56;\n        Cpu.registerH = 0x00;\n        Cpu.registerL = 0x0d;\n    }\n    else {\n        // Cpu Registers\n        Cpu.registerA = 0x01;\n        Cpu.registerF = 0xb0;\n        Cpu.registerB = 0x00;\n        Cpu.registerC = 0x13;\n        Cpu.registerD = 0x00;\n        Cpu.registerE = 0xd8;\n        Cpu.registerH = 0x01;\n        Cpu.registerL = 0x4d;\n    }\n    // Cpu Control Flow\n    Cpu.programCounter = 0x100;\n    Cpu.stackPointer = 0xfffe;\n}\n\n// Imports\n// General Logic Instructions\n// Such as the ones found on the CB table and 0x40 - 0xBF\n// NOTE: Only CB table uses these for now, was mostly me realizing that I messed up, trying to be all cute and verbose :p\n// NOTE: TODO: Refactor honestly shouldn't take that long, and may happen once assembly script is improved\nfunction addARegister(register) {\n    var registerA = Cpu.registerA;\n    checkAndSetEightBitHalfCarryFlag(registerA, register);\n    checkAndSetEightBitCarryFlag(registerA, register);\n    registerA = u8Portable(registerA + register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n}\nfunction addAThroughCarryRegister(register) {\n    // Handling flags manually as they require some special overflow\n    // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F adc\n    var registerA = Cpu.registerA;\n    var result = u8Portable(registerA + register + getCarryFlag$$1());\n    setHalfCarryFlag(((u8Portable(registerA ^ register ^ result) & 0x10) != 0));\n    var overflowedResult = u16Portable(registerA + register + getCarryFlag$$1());\n    setCarryFlag(((overflowedResult & 0x100) > 0));\n    Cpu.registerA = result;\n    setZeroFlag$$1((result === 0));\n    setSubtractFlag(0);\n}\nfunction subARegister(register) {\n    // Need to convert the register on one line, and flip the sign on another\n    var negativeRegister = register;\n    negativeRegister = negativeRegister * -1;\n    var registerA = Cpu.registerA;\n    checkAndSetEightBitHalfCarryFlag(registerA, negativeRegister);\n    checkAndSetEightBitCarryFlag(registerA, negativeRegister);\n    registerA = u8Portable(registerA - register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(1);\n}\nfunction subAThroughCarryRegister(register) {\n    // Handling flags manually as they require some special overflow\n    // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F adc\n    var registerA = Cpu.registerA;\n    var result = u8Portable(registerA - register - getCarryFlag$$1());\n    var carryRegisterCheck = u8Portable((registerA ^ register ^ result) & 0x10);\n    setHalfCarryFlag((carryRegisterCheck != 0));\n    var overflowedResult = u16Portable(registerA - register - getCarryFlag$$1());\n    setCarryFlag(((overflowedResult & 0x100) > 0));\n    Cpu.registerA = result;\n    setZeroFlag$$1((result === 0));\n    setSubtractFlag(1);\n}\nfunction andARegister(register) {\n    var registerA = Cpu.registerA & register;\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(1);\n    setCarryFlag(0);\n}\nfunction xorARegister(register) {\n    var registerA = u8Portable(Cpu.registerA ^ register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n}\nfunction orARegister(register) {\n    var registerA = Cpu.registerA | register;\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n}\nfunction cpARegister(register) {\n    // 0xB8 - 0xBF\n    // CP B\n    // 1  4\n    // Z 1 H C\n    var registerA = Cpu.registerA;\n    var negativeRegister = register;\n    negativeRegister = negativeRegister * -1;\n    checkAndSetEightBitHalfCarryFlag(registerA, negativeRegister);\n    checkAndSetEightBitCarryFlag(registerA, negativeRegister);\n    var tempResult = registerA + negativeRegister;\n    setZeroFlag$$1((tempResult === 0));\n    setSubtractFlag(1);\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterLeft(register) {\n    // RLC register 8-bit\n    // Z 0 0 C\n    setCarryFlag(((register & 0x80) === 0x80));\n    register = rotateByteLeft(register);\n    setZeroFlag$$1((register === 0));\n    // Set all other flags to zero\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    // Return the register\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterRight(register) {\n    // RLC register 8-bit\n    // Z 0 0 C\n    // Check for the last bit, to see if it will be carried\n    setCarryFlag(((register & 0x01) > 0));\n    register = rotateByteRight(register);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    // Return the register\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterLeftThroughCarry(register) {\n    // RL register 8-bit\n    // Z 0 0 C\n    // setting has first bit since we need to use carry\n    var hasHighbit = (register & 0x80) === 0x80;\n    register = rotateByteLeftThroughCarry(register);\n    setCarryFlag(hasHighbit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterRightThroughCarry(register) {\n    // RR register 8-bit\n    // Z 0 0 C\n    var hasLowBit = (register & 0x01) === 0x01;\n    register = rotateByteRightThroughCarry(register);\n    setCarryFlag(hasLowBit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftLeftRegister(register) {\n    // SLA register 8-bit\n    // Z 0 0 C\n    var hasHighbit = (register & 0x80) === 0x80;\n    register = u8Portable(register << 1);\n    setCarryFlag(hasHighbit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftRightArithmeticRegister(register) {\n    // SRA register 8-bit\n    // Z 0 0 C\n    // NOTE: This C flag may need to be set to 0;\n    // This preserves the MSB (Most significant bit)\n    var hasHighbit = (register & 0x80) === 0x80;\n    var hasLowbit = (register & 0x01) === 0x01;\n    register = u8Portable(register >> 1);\n    if (hasHighbit) {\n        register = register | 0x80;\n    }\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(hasLowbit);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction swapNibblesOnRegister(register) {\n    // SWAP register 8-bit\n    // Z 0 0 0\n    var highNibble = register & 0xf0;\n    var lowNibble = register & 0x0f;\n    register = u8Portable((lowNibble << 4) | (highNibble >> 4));\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftRightLogicalRegister(register) {\n    // SRA register 8-bit\n    // Z 0 0 C\n    // NOTE: This C flag may need to be set to 0;\n    // This does NOT preserve MSB (most significant bit)\n    var hasLowbit = (register & 0x01) === 0x01;\n    register = u8Portable(register >> 1);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(hasLowbit);\n    return register;\n}\nfunction testBitOnRegister(bitPosition, register) {\n    // BIT bitPosition ,register 8-bit\n    // Z 0 1 -\n    var testByte = 0x01 << bitPosition;\n    var result = register & testByte;\n    setZeroFlag$$1((result === 0x00));\n    setSubtractFlag(0);\n    setHalfCarryFlag(1);\n    return register;\n}\nfunction setBitOnRegister(bitPosition, bitValue, register) {\n    // RES 0,B or SET 0,B depending on bit value\n    if (bitValue > 0) {\n        var setByte = 0x01 << bitPosition;\n        register = register | setByte;\n    }\n    else {\n        // NOT (byte we want)\n        // 0000 0100 becomes 1111 1011\n        var setByte = ~(0x01 << bitPosition);\n        register = register & setByte;\n    }\n    return register;\n}\n// Private function for our relative jumps\nfunction relativeJump(value) {\n    // Need to convert the value to i8, since in this case, u8 can be negative\n    var relativeJumpOffset = i8Portable(value);\n    var programCounter = Cpu.programCounter;\n    programCounter = u16Portable(programCounter + relativeJumpOffset);\n    // Realtive jump, using bgb debugger\n    // and my debugger shows,\n    // on JR you need to jump to the relative jump offset,\n    // However, if the jump fails (such as conditional), only jump +2 in total\n    programCounter = u16Portable(programCounter + 1);\n    Cpu.programCounter = programCounter;\n}\n\n// Imports\n// Handle CB Opcodes\n// NOTE: Program stpes and cycles are standardized depending on the register type\n// NOTE: Doing some funny stuff to get around not having arrays or objects\n// Inlined because closure compiler inlines.\nfunction handleCbOpcode(cbOpcode) {\n    var numberOfCycles = -1;\n    var handledOpcode = false;\n    // The result of our cb logic instruction\n    var instructionRegisterValue = 0;\n    var instructionRegisterResult = 0;\n    // Get our register number by modulo 0x08 (number of registers)\n    // cbOpcode % 0x08\n    var registerNumber = cbOpcode & 0x07;\n    // NOTE: registerNumber = register on CB table. Cpu.registerB = 0, Cpu.registerC = 1....Cpu.registerA = 7\n    switch (registerNumber) {\n        case 0:\n            instructionRegisterValue = Cpu.registerB;\n            break;\n        case 1:\n            instructionRegisterValue = Cpu.registerC;\n            break;\n        case 2:\n            instructionRegisterValue = Cpu.registerD;\n            break;\n        case 3:\n            instructionRegisterValue = Cpu.registerE;\n            break;\n        case 4:\n            instructionRegisterValue = Cpu.registerH;\n            break;\n        case 5:\n            instructionRegisterValue = Cpu.registerL;\n            break;\n        case 6:\n            // Value at register HL\n            // 4 cycles\n            instructionRegisterValue = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            break;\n        case 7:\n            instructionRegisterValue = Cpu.registerA;\n            break;\n    }\n    // Grab the high nibble to perform skips to speed up performance\n    var opcodeHighNibble = cbOpcode & 0xf0;\n    opcodeHighNibble = opcodeHighNibble >> 4;\n    // Send to the correct function\n    switch (opcodeHighNibble) {\n        case 0x00:\n            if (cbOpcode <= 0x07) {\n                // RLC register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterLeft(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x0f) {\n                // RRC register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterRight(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x01:\n            if (cbOpcode <= 0x17) {\n                // RL register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterLeftThroughCarry(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x1f) {\n                // RR register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterRightThroughCarry(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x02:\n            if (cbOpcode <= 0x27) {\n                // SLA register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = shiftLeftRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x2f) {\n                // SRA register 8-bit\n                // Z 0 0 0\n                instructionRegisterResult = shiftRightArithmeticRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x03:\n            if (cbOpcode <= 0x37) {\n                // SWAP register 8-bit\n                // Z 0 0 0\n                instructionRegisterResult = swapNibblesOnRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x3f) {\n                // SRL B\n                // Z 0 0 C\n                instructionRegisterResult = shiftRightLogicalRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x04:\n            if (cbOpcode <= 0x47) {\n                // BIT 0,register 8-bit\n                // Z 0 1 -\n                //TODO: Optimize this not to do logic of setting register back\n                instructionRegisterResult = testBitOnRegister(0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x4f) {\n                // BIT 1,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x05:\n            if (cbOpcode <= 0x57) {\n                // BIT 2,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(2, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x5f) {\n                // BIT 3,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(3, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x06:\n            if (cbOpcode <= 0x67) {\n                // BIT 4,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(4, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x6f) {\n                // BIT 5,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(5, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x07:\n            if (cbOpcode <= 0x77) {\n                // BIT 6,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(6, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x7f) {\n                // BIT 7,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(7, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x08:\n            if (cbOpcode <= 0x87) {\n                // Res 0,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(0, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x8f) {\n                // Res 1,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(1, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x09:\n            if (cbOpcode <= 0x97) {\n                // Res 2,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(2, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x9f) {\n                // Res 3,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(3, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0a:\n            if (cbOpcode <= 0xa7) {\n                // Res 4,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(4, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xaf) {\n                // Res 5,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(5, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0b:\n            if (cbOpcode <= 0xb7) {\n                // Res 6,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(6, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xbf) {\n                // Res 7,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(7, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0c:\n            if (cbOpcode <= 0xc7) {\n                // SET 0,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(0, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xcf) {\n                // SET 1,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(1, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0d:\n            if (cbOpcode <= 0xd7) {\n                // SET 2,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(2, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xdf) {\n                // SET 3,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(3, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0e:\n            if (cbOpcode <= 0xe7) {\n                // SET 4,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(4, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xef) {\n                // SET 5,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(5, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0f:\n            if (cbOpcode <= 0xf7) {\n                // SET 6,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(6, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xff) {\n                // SET 7,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(7, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n    }\n    // Finally Pass back into the correct register\n    switch (registerNumber) {\n        case 0:\n            Cpu.registerB = instructionRegisterResult;\n            break;\n        case 1:\n            Cpu.registerC = instructionRegisterResult;\n            break;\n        case 2:\n            Cpu.registerD = instructionRegisterResult;\n            break;\n        case 3:\n            Cpu.registerE = instructionRegisterResult;\n            break;\n        case 4:\n            Cpu.registerH = instructionRegisterResult;\n            break;\n        case 5:\n            Cpu.registerL = instructionRegisterResult;\n            break;\n        case 6:\n            // Value at register HL\n            // Opcodes 0x40 -> 0x7F only do simple\n            // Bit test, and don't need to be stored back in memory\n            // Thus they take 4 less cycles to run\n            if (opcodeHighNibble < 0x04 || opcodeHighNibble > 0x07) {\n                // Store the result back\n                // 4 cycles\n                eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), instructionRegisterResult);\n            }\n            break;\n        case 7:\n            Cpu.registerA = instructionRegisterResult;\n            break;\n    }\n    // Finally our number of cycles\n    // Set if we handled the opcode\n    if (handledOpcode) {\n        numberOfCycles = 4;\n    }\n    // Return our number of cycles\n    return numberOfCycles;\n}\n\n// Imports\n// Take in any opcode, and decode it, and return the number of cycles\n// Program counter can be gotten from getProgramCounter();\n// Setting return value to i32 instead of u16, as we want to return a negative number on error\n// https://rednex.github.io/rgbds/gbz80.7.html\n// http://pastraiser.com/cpu/gameboy/gameboyopcodes.html\nfunction executeOpcode$$1(opcode) {\n    // Always implement the program counter by one\n    // Any other value can just subtract or add however much offset before reaching this line\n    var programCounter = Cpu.programCounter;\n    programCounter = u16Portable(programCounter + 1);\n    // Check if we are in the halt bug\n    if (Cpu.isHaltBug) {\n        // Need to not increment program counter,\n        // thus, running the next opcode twice\n        // E.g\n        // 0x76 - halt\n        // FA 34 12 - ld a,(1234)\n        // Becomes\n        // FA FA 34 ld a,(34FA)\n        // 12 ld (de),a\n        programCounter = u16Portable(programCounter - 1);\n    }\n    Cpu.programCounter = programCounter;\n    // Split our opcode into a high nibble to speed up performance\n    // Running 255 if statements is slow, even in wasm haha!\n    var opcodeHighNibble = opcode & 0xf0;\n    opcodeHighNibble = opcodeHighNibble >> 4;\n    // NOTE: @binji rule of thumb: it takes 4 cpu cycles to read one byte\n    // Therefore isntructions that use more than just the opcode (databyte one and two) will take at least\n    // 8 cyckles to use getDataByteOne(), and two cycles to use the concatented\n    // Not using a switch statement to avoid cannot redeclare this variable errors\n    // And it would be a ton of work :p\n    switch (opcodeHighNibble) {\n        case 0x00:\n            return handleOpcode0x(opcode);\n        case 0x01:\n            return handleOpcode1x(opcode);\n        case 0x02:\n            return handleOpcode2x(opcode);\n        case 0x03:\n            return handleOpcode3x(opcode);\n        case 0x04:\n            return handleOpcode4x(opcode);\n        case 0x05:\n            return handleOpcode5x(opcode);\n        case 0x06:\n            return handleOpcode6x(opcode);\n        case 0x07:\n            return handleOpcode7x(opcode);\n        case 0x08:\n            return handleOpcode8x(opcode);\n        case 0x09:\n            return handleOpcode9x(opcode);\n        case 0x0a:\n            return handleOpcodeAx(opcode);\n        case 0x0b:\n            return handleOpcodeBx(opcode);\n        case 0x0c:\n            return handleOpcodeCx(opcode);\n        case 0x0d:\n            return handleOpcodeDx(opcode);\n        case 0x0e:\n            return handleOpcodeEx(opcode);\n        default:\n            return handleOpcodeFx(opcode);\n    }\n}\n// Wrapper functions around loading and storing memory, and syncing those cycles\nfunction eightBitLoadSyncCycles(gameboyOffset) {\n    syncCycles(4);\n    return eightBitLoadFromGBMemoryWithTraps(gameboyOffset);\n}\nfunction eightBitStoreSyncCycles(gameboyOffset, value) {\n    syncCycles(4);\n    eightBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\nfunction sixteenBitLoadSyncCycles(gameboyOffset) {\n    syncCycles(8);\n    // sixteen bit load has traps even though it has no label\n    return sixteenBitLoadFromGBMemory(gameboyOffset);\n}\nfunction sixteenBitStoreSyncCycles(gameboyOffset, value) {\n    syncCycles(8);\n    sixteenBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\n// Functions to access the next operands of a opcode, reffering to them as \"dataBytes\"\nfunction getDataByteOne() {\n    syncCycles(4);\n    return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\nfunction getDataByteTwo() {\n    syncCycles(4);\n    return eightBitLoadFromGBMemory(u16Portable(Cpu.programCounter + 1));\n}\n// Get our concatenated databyte one and getDataByteTwo()\n// Find and replace with : getConcatenatedDataByte()\nfunction getConcatenatedDataByte() {\n    return concatenateBytes(getDataByteTwo(), getDataByteOne());\n}\nfunction handleOpcode0x(opcode) {\n    switch (opcode) {\n        case 0x00:\n            // NOP\n            // 1  4\n            // No Operation\n            return 4;\n        case 0x01: {\n            // LD BC,d16\n            // 3  12\n            // 8 cycles\n            var concatenatedDataByte = getConcatenatedDataByte();\n            Cpu.registerB = splitHighByte(concatenatedDataByte);\n            Cpu.registerC = splitLowByte(concatenatedDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x02: {\n            // LD (BC),A\n            // 1  8\n            // () means load into address pointed by BC\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC), Cpu.registerA);\n            return 4;\n        }\n        case 0x03: {\n            // INC BC\n            // 1  8\n            var registerBC3 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            registerBC3++;\n            Cpu.registerB = splitHighByte(registerBC3);\n            Cpu.registerC = splitLowByte(registerBC3);\n            return 8;\n        }\n        case 0x04: {\n            // INC B\n            // 1  4\n            // Z 0 H -\n            var registerB = Cpu.registerB;\n            checkAndSetEightBitHalfCarryFlag(registerB, 1);\n            registerB = u8Portable(registerB + 1);\n            Cpu.registerB = registerB;\n            setZeroFlag$$1((registerB === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x05: {\n            // DEC B\n            // 1  4\n            // Z 1 H -\n            var registerB = Cpu.registerB;\n            checkAndSetEightBitHalfCarryFlag(registerB, -1);\n            registerB = u8Portable(registerB - 1);\n            Cpu.registerB = registerB;\n            setZeroFlag$$1((registerB === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x06: {\n            // LD B,d8\n            // 2  8\n            // 4 cycles\n            Cpu.registerB = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x07: {\n            // RLCA\n            // 1  4\n            // 0 0 0 C\n            // Check for the carry\n            var registerA = Cpu.registerA;\n            setCarryFlag(((registerA & 0x80) === 0x80));\n            Cpu.registerA = rotateByteLeft(registerA);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n        case 0x08: {\n            // LD (a16),SP\n            // 3  20\n            // Load the stack pointer into the 16 bit address represented by the two data bytes\n            // 16 cycles, 8 from data byte, 8 from sixteenbit store\n            sixteenBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.stackPointer);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x09: {\n            // ADD HL,BC\n            // 1 8\n            // - 0 H C\n            var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            var registerBC9 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerBC9, false);\n            var result = u16Portable((registerHL + registerBC9));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x0a: {\n            // LD A,(BC)\n            // 1 8\n            // 4 cycles from load\n            Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC));\n            return 4;\n        }\n        case 0x0b: {\n            // DEC BC\n            // 1  8\n            var registerBCB = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            registerBCB = u16Portable(registerBCB - 1);\n            Cpu.registerB = splitHighByte(registerBCB);\n            Cpu.registerC = splitLowByte(registerBCB);\n            return 8;\n        }\n        case 0x0c: {\n            // INC C\n            // 1  4\n            // Z 0 H -\n            var registerC = Cpu.registerC;\n            checkAndSetEightBitHalfCarryFlag(registerC, 1);\n            registerC = u8Portable(registerC + 1);\n            Cpu.registerC = registerC;\n            setZeroFlag$$1((registerC === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x0d: {\n            // DEC C\n            // 1  4\n            // Z 1 H -\n            var registerC = Cpu.registerC;\n            checkAndSetEightBitHalfCarryFlag(registerC, -1);\n            registerC = u8Portable(registerC - 1);\n            Cpu.registerC = registerC;\n            setZeroFlag$$1((registerC === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x0e: {\n            // LD C,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerC = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x0f: {\n            // RRCA\n            // 1 4\n            // 0 0 0 C\n            // Check for the last bit, to see if it will be carried\n            var registerA = Cpu.registerA;\n            setCarryFlag(((registerA & 0x01) > 0));\n            Cpu.registerA = rotateByteRight(registerA);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode1x(opcode) {\n    switch (opcode) {\n        case 0x10: {\n            // STOP 0\n            // 2 4\n            // Enter CPU very low power mode. Also used to switch between double and normal speed CPU modes in GBC.\n            // Meaning Don't Decode anymore opcodes , or updated the LCD until joypad interrupt (or when button is pressed if I am wrong)\n            // See HALT\n            // If we are in gameboy color mode, set the new speed\n            if (Cpu.GBCEnabled) {\n                // 4 cycles\n                var speedSwitch = eightBitLoadSyncCycles(Cpu.memoryLocationSpeedSwitch);\n                if (checkBitOnByte(0, speedSwitch)) {\n                    // Reset the prepare bit\n                    speedSwitch = resetBitOnByte(0, speedSwitch);\n                    // Switch to the new mode, and set the speed switch to the OTHER speed, to represent our new speed\n                    if (!checkBitOnByte(7, speedSwitch)) {\n                        Cpu.GBCDoubleSpeed = true;\n                        speedSwitch = setBitOnByte(7, speedSwitch);\n                    }\n                    else {\n                        Cpu.GBCDoubleSpeed = false;\n                        speedSwitch = resetBitOnByte(7, speedSwitch);\n                    }\n                    // Store the final speed switch\n                    // 4 cycles\n                    eightBitStoreSyncCycles(Cpu.memoryLocationSpeedSwitch, speedSwitch);\n                    // Cycle accurate gameboy docs says this takes 76 clocks\n                    // 76 - 8 cycles (from load/store) = 68\n                    return 68;\n                }\n            }\n            // NOTE: This breaks Blarggs CPU tests if CGB Stop is not implemented\n            Cpu.isStopped = true;\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x11: {\n            // LD DE,d16\n            // 3  12\n            // 8 cycles\n            var concatenatedDataByte = getConcatenatedDataByte();\n            Cpu.registerD = splitHighByte(concatenatedDataByte);\n            Cpu.registerE = splitLowByte(concatenatedDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x12: {\n            // LD (DE),A\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerD, Cpu.registerE), Cpu.registerA);\n            return 4;\n        }\n        case 0x13: {\n            // INC DE\n            // 1 8\n            var registerDE3 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            registerDE3 = u16Portable(registerDE3 + 1);\n            Cpu.registerD = splitHighByte(registerDE3);\n            Cpu.registerE = splitLowByte(registerDE3);\n            return 8;\n        }\n        case 0x14: {\n            // INC D\n            // 1  4\n            // Z 0 H -\n            var registerD = Cpu.registerD;\n            checkAndSetEightBitHalfCarryFlag(registerD, 1);\n            registerD = u8Portable(registerD + 1);\n            Cpu.registerD = registerD;\n            setZeroFlag$$1((Cpu.registerD === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x15: {\n            // DEC D\n            // 1  4\n            // Z 1 H -\n            var registerD = Cpu.registerD;\n            checkAndSetEightBitHalfCarryFlag(registerD, -1);\n            registerD = u8Portable(registerD - 1);\n            Cpu.registerD = registerD;\n            setZeroFlag$$1((Cpu.registerD === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x16: {\n            // LD D,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerD = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x17: {\n            // RLA\n            // 1 4\n            // 0 0 0 C\n            // Check for the carry\n            // setting has first bit since we need to use carry\n            var hasHighbit = (Cpu.registerA & 0x80) === 0x80;\n            Cpu.registerA = rotateByteLeftThroughCarry(Cpu.registerA);\n            // OR the carry flag to the end\n            setCarryFlag(hasHighbit);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n        case 0x18: {\n            // JR r8\n            // 2  12\n            // NOTE: Discoved dataByte is signed\n            // However the relative Jump Function handles this\n            // 4 cycles\n            relativeJump(getDataByteOne());\n            return 8;\n        }\n        // Relative Jump Function Handles program counter\n        case 0x19: {\n            // ADD HL,DE\n            // 1  8\n            // - 0 H C\n            var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            var registerDE9 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerDE9, false);\n            var result = u16Portable((registerHL + registerDE9));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x1a: {\n            // LD A,(DE)\n            // 1 8\n            var registerDEA = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerDEA);\n            return 4;\n        }\n        case 0x1b: {\n            // DEC DE\n            // 1 8\n            var registerDEB = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            registerDEB = u16Portable(registerDEB - 1);\n            Cpu.registerD = splitHighByte(registerDEB);\n            Cpu.registerE = splitLowByte(registerDEB);\n            return 8;\n        }\n        case 0x1c: {\n            // INC E\n            // 1  4\n            // Z 0 H -\n            var registerE = Cpu.registerE;\n            checkAndSetEightBitHalfCarryFlag(registerE, 1);\n            registerE = u8Portable(registerE + 1);\n            Cpu.registerE = registerE;\n            setZeroFlag$$1((registerE === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x1d: {\n            // DEC E\n            // 1  4\n            // Z 1 H -\n            var registerE = Cpu.registerE;\n            checkAndSetEightBitHalfCarryFlag(registerE, -1);\n            registerE = u8Portable(registerE - 1);\n            Cpu.registerE = registerE;\n            setZeroFlag$$1((registerE === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x1e: {\n            // LD E,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerE = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x1f: {\n            // RRA\n            // 1 4\n            // 0 0 0 C\n            // Check for the carry\n            // setting has low bit since we need to use carry\n            var hasLowBit = (Cpu.registerA & 0x01) === 0x01;\n            Cpu.registerA = rotateByteRightThroughCarry(Cpu.registerA);\n            setCarryFlag(hasLowBit);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode2x(opcode) {\n    switch (opcode) {\n        case 0x20: {\n            // JR NZ,r8\n            // 2  12/8\n            // NOTE: NZ stands for not [flag], so in this case, not zero flag\n            // Also, / means, if condition. so if met, 12 cycles, otherwise 8 cycles\n            if (getZeroFlag$$1() === 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump Funciton handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x21: {\n            // LD HL,d16\n            // 3  12\n            // 8 cycles\n            var sixteenBitDataByte = getConcatenatedDataByte();\n            Cpu.registerH = splitHighByte(sixteenBitDataByte);\n            Cpu.registerL = splitLowByte(sixteenBitDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x22: {\n            // LD (HL+),A\n            // 1 8\n            var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n            registerHL2 = u16Portable(registerHL2 + 1);\n            Cpu.registerH = splitHighByte(registerHL2);\n            Cpu.registerL = splitLowByte(registerHL2);\n            return 4;\n        }\n        case 0x23: {\n            // INC HL\n            // 1  8\n            var registerHL3 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            registerHL3 = u16Portable(registerHL3 + 1);\n            Cpu.registerH = splitHighByte(registerHL3);\n            Cpu.registerL = splitLowByte(registerHL3);\n            return 8;\n        }\n        case 0x24: {\n            // INC H\n            // 1  4\n            // Z 0 H -\n            var registerH = Cpu.registerH;\n            checkAndSetEightBitHalfCarryFlag(registerH, 1);\n            registerH = u8Portable(registerH + 1);\n            Cpu.registerH = registerH;\n            setZeroFlag$$1((registerH === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x25: {\n            // DEC H\n            // 1  4\n            // Z 1 H -\n            var registerH = Cpu.registerH;\n            checkAndSetEightBitHalfCarryFlag(registerH, -1);\n            registerH = u8Portable(registerH - 1);\n            Cpu.registerH = registerH;\n            setZeroFlag$$1((registerH === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x26: {\n            // LD H,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerH = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x27: {\n            // DAA\n            // 1 4\n            // Z - 0 C\n            var adjustedRegister = 0;\n            var adjustment = 0;\n            if (getHalfCarryFlag() > 0) {\n                adjustment = adjustment | 0x06;\n            }\n            if (getCarryFlag$$1() > 0) {\n                adjustment = adjustment | 0x60;\n            }\n            var registerA = Cpu.registerA;\n            if (getSubtractFlag() > 0) {\n                adjustedRegister = u8Portable(registerA - adjustment);\n            }\n            else {\n                if ((registerA & 0x0f) > 0x09) {\n                    adjustment = adjustment | 0x06;\n                }\n                if (registerA > 0x99) {\n                    adjustment = adjustment | 0x60;\n                }\n                adjustedRegister = u8Portable(registerA + adjustment);\n            }\n            // Now set our flags to the correct values\n            setZeroFlag$$1((adjustedRegister === 0));\n            setCarryFlag(((adjustment & 0x60) !== 0));\n            setHalfCarryFlag(0);\n            Cpu.registerA = adjustedRegister;\n            return 4;\n        }\n        case 0x28: {\n            // JR Z,r8\n            // 2  12/8\n            if (getZeroFlag$$1() > 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump funciton handles pogram counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x29: {\n            // ADD HL,HL\n            // 1  8\n            // - 0 H C\n            var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL9, registerHL9, false);\n            registerHL9 = u16Portable(registerHL9 * 2);\n            Cpu.registerH = splitHighByte(registerHL9);\n            Cpu.registerL = splitLowByte(registerHL9);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x2a: {\n            // LD A,(HL+)\n            // 1  8\n            var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n            registerHLA = u16Portable(registerHLA + 1);\n            Cpu.registerH = splitHighByte(registerHLA);\n            Cpu.registerL = splitLowByte(registerHLA);\n            return 4;\n        }\n        case 0x2b: {\n            // DEC HL\n            // 1 8\n            var registerHLB = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            registerHLB = u16Portable(registerHLB - 1);\n            Cpu.registerH = splitHighByte(registerHLB);\n            Cpu.registerL = splitLowByte(registerHLB);\n            return 8;\n        }\n        case 0x2c: {\n            // INC L\n            // 1  4\n            // Z 0 H -\n            var registerL = Cpu.registerL;\n            checkAndSetEightBitHalfCarryFlag(registerL, 1);\n            registerL = u8Portable(registerL + 1);\n            Cpu.registerL = registerL;\n            setZeroFlag$$1((registerL === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x2d: {\n            // DEC L\n            // 1  4\n            // Z 1 H -\n            var registerL = Cpu.registerL;\n            checkAndSetEightBitHalfCarryFlag(registerL, -1);\n            registerL = u8Portable(registerL - 1);\n            Cpu.registerL = registerL;\n            setZeroFlag$$1((registerL === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x2e: {\n            // LD L,d8\n            // 2  8\n            // 4 cycles\n            Cpu.registerL = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x2f: {\n            // CPL\n            // 1 4\n            // - 1 1 -\n            Cpu.registerA = ~Cpu.registerA;\n            setSubtractFlag(1);\n            setHalfCarryFlag(1);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode3x(opcode) {\n    switch (opcode) {\n        case 0x30: {\n            // JR NC,r8\n            // 2 12 / 8\n            if (getCarryFlag$$1() === 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump function handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x31: {\n            // LD SP,d16\n            // 3 12\n            // 8 cycles\n            Cpu.stackPointer = getConcatenatedDataByte();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x32: {\n            // LD (HL-),A\n            // 1 8\n            var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n            registerHL2 = u16Portable(registerHL2 - 1);\n            Cpu.registerH = splitHighByte(registerHL2);\n            Cpu.registerL = splitLowByte(registerHL2);\n            return 4;\n        }\n        case 0x33: {\n            // INC SP\n            // 1 8\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + 1);\n            return 8;\n        }\n        case 0x34: {\n            // INC (HL)\n            // 1  12\n            // Z 0 H -\n            var registerHL4 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            var valueAtHL4 = eightBitLoadSyncCycles(registerHL4);\n            // Creating a varible for this to fix assemblyscript overflow bug\n            // Requires explicit casting\n            // https://github.com/AssemblyScript/assemblyscript/issues/26\n            var incrementer = 1;\n            checkAndSetEightBitHalfCarryFlag(valueAtHL4, incrementer);\n            valueAtHL4 = u8Portable(valueAtHL4 + incrementer);\n            setZeroFlag$$1((valueAtHL4 === 0));\n            setSubtractFlag(0);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL4, valueAtHL4);\n            return 4;\n        }\n        case 0x35: {\n            // DEC (HL)\n            // 1  12\n            // Z 1 H -\n            var registerHL5 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            var valueAtHL5 = eightBitLoadSyncCycles(registerHL5);\n            // NOTE: This opcode may not overflow correctly,\n            // Please see previous opcode\n            checkAndSetEightBitHalfCarryFlag(valueAtHL5, -1);\n            valueAtHL5 = u8Portable(valueAtHL5 - 1);\n            setZeroFlag$$1((valueAtHL5 === 0));\n            setSubtractFlag(1);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL5, valueAtHL5);\n            return 4;\n        }\n        case 0x36: {\n            // LD (HL),d8\n            // 2  12\n            // 8 cycles, 4 from store, 4 from data byte\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x37: {\n            // SCF\n            // 1  4\n            // - 0 0 1\n            // Simply set the carry flag\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            setCarryFlag(1);\n            return 4;\n        }\n        case 0x38: {\n            // JR C,r8\n            // 2 12/8\n            if (getCarryFlag$$1() === 1) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump Funciton handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x39: {\n            // ADD HL,SP\n            // 1 8\n            // - 0 H C\n            var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL9, Cpu.stackPointer, false);\n            var result = u16Portable((registerHL9 + Cpu.stackPointer));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x3a: {\n            // LD A,(HL-)\n            // 1 8\n            var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n            registerHLA = u16Portable(registerHLA - 1);\n            Cpu.registerH = splitHighByte(registerHLA);\n            Cpu.registerL = splitLowByte(registerHLA);\n            return 4;\n        }\n        case 0x3b: {\n            // DEC SP\n            // 1 8\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer - 1);\n            return 8;\n        }\n        case 0x3c: {\n            // INC A\n            // 1  4\n            // Z 0 H -\n            var registerA = Cpu.registerA;\n            checkAndSetEightBitHalfCarryFlag(registerA, 1);\n            registerA = u8Portable(registerA + 1);\n            Cpu.registerA = registerA;\n            setZeroFlag$$1((registerA === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x3d: {\n            // DEC A\n            // 1  4\n            // Z 1 H -\n            var registerA = Cpu.registerA;\n            checkAndSetEightBitHalfCarryFlag(registerA, -1);\n            registerA = u8Portable(registerA - 1);\n            Cpu.registerA = registerA;\n            setZeroFlag$$1((registerA === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x3e: {\n            // LD A,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerA = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x3f: {\n            // CCF\n            // 1 4\n            // - 0 0 C\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            setCarryFlag((getCarryFlag$$1() <= 0));\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode4x(opcode) {\n    switch (opcode) {\n        case 0x40:\n            // LD B,B\n            // 1 4\n            // Load B into B, Do nothing\n            return 4;\n        case 0x41:\n            // LD B,C\n            // 1 4\n            Cpu.registerB = Cpu.registerC;\n            return 4;\n        case 0x42:\n            // LD B,D\n            // 1 4\n            Cpu.registerB = Cpu.registerD;\n            return 4;\n        case 0x43:\n            // LD B,E\n            // 1 4\n            Cpu.registerB = Cpu.registerE;\n            return 4;\n        case 0x44:\n            // LD B,H\n            // 1 4\n            Cpu.registerB = Cpu.registerH;\n            return 4;\n        case 0x45:\n            // LD B,L\n            // 1 4\n            Cpu.registerB = Cpu.registerL;\n            return 4;\n        case 0x46:\n            // LD B,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerB = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x47:\n            // LD B,A\n            // 1 4\n            Cpu.registerB = Cpu.registerA;\n            return 4;\n        case 0x48:\n            // LD C,B\n            // 1 4\n            Cpu.registerC = Cpu.registerB;\n            return 4;\n        case 0x49:\n            // LD C,C\n            // 1 4\n            // Do nothing\n            return 4;\n        case 0x4a:\n            // LD C,D\n            // 1 4\n            Cpu.registerC = Cpu.registerD;\n            return 4;\n        case 0x4b:\n            // LD C,E\n            // 1 4\n            Cpu.registerC = Cpu.registerE;\n            return 4;\n        case 0x4c:\n            // LD C,H\n            // 1 4\n            Cpu.registerC = Cpu.registerH;\n            return 4;\n        case 0x4d:\n            // LD C,L\n            // 1 4\n            Cpu.registerC = Cpu.registerL;\n            return 4;\n        case 0x4e:\n            // LD C,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerC = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x4f:\n            // LD C,A\n            // 1 4\n            Cpu.registerC = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode5x(opcode) {\n    switch (opcode) {\n        case 0x50:\n            // LD D,B\n            // 1 4\n            Cpu.registerD = Cpu.registerB;\n            return 4;\n        case 0x51:\n            // LD D,C\n            // 1 4\n            Cpu.registerD = Cpu.registerC;\n            return 4;\n        case 0x52:\n            // LD D,D\n            // 1 4\n            // Do Nothing\n            return 4;\n        case 0x53:\n            // LD D,E\n            // 1 4\n            Cpu.registerD = Cpu.registerE;\n            return 4;\n        case 0x54:\n            // LD D,H\n            // 1 4\n            Cpu.registerD = Cpu.registerH;\n            return 4;\n        case 0x55:\n            // LD D,L\n            // 1 4\n            Cpu.registerD = Cpu.registerL;\n            return 4;\n        case 0x56:\n            // LD D,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerD = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x57:\n            // LD D,A\n            // 1 4\n            Cpu.registerD = Cpu.registerA;\n            return 4;\n        case 0x58:\n            // LD E,B\n            // 1 4\n            Cpu.registerE = Cpu.registerB;\n            return 4;\n        case 0x59:\n            // LD E,C\n            // 1 4\n            Cpu.registerE = Cpu.registerC;\n            return 4;\n        case 0x5a:\n            // LD E,D\n            // 1 4\n            Cpu.registerE = Cpu.registerD;\n            return 4;\n        case 0x5b:\n            // LD E,E\n            // 1 4\n            // Do Nothing\n            return 4;\n        case 0x5c:\n            // LD E,H\n            // 1 4\n            Cpu.registerE = Cpu.registerH;\n            return 4;\n        case 0x5d:\n            // LD E,L\n            // 1 4\n            Cpu.registerE = Cpu.registerL;\n            return 4;\n        case 0x5e:\n            // LD E,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x5f:\n            // LD E,A\n            // 1 4\n            Cpu.registerE = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode6x(opcode) {\n    switch (opcode) {\n        case 0x60:\n            // LD H,B\n            // 1 4\n            Cpu.registerH = Cpu.registerB;\n            return 4;\n        case 0x61:\n            // LD H,C\n            // 1 4\n            Cpu.registerH = Cpu.registerC;\n            return 4;\n        case 0x62:\n            // LD H,D\n            // 1 4\n            Cpu.registerH = Cpu.registerD;\n            return 4;\n        case 0x63:\n            // LD H,E\n            // 1 4\n            Cpu.registerH = Cpu.registerE;\n            return 4;\n        case 0x64:\n            // LD H,H\n            // 1 4\n            Cpu.registerH = Cpu.registerH;\n            return 4;\n        case 0x65:\n            // LD H,L\n            // 1 4\n            Cpu.registerH = Cpu.registerL;\n            return 4;\n        case 0x66:\n            // LD H,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerH = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x67:\n            // LD H,A\n            // 1 4\n            Cpu.registerH = Cpu.registerA;\n            return 4;\n        case 0x68:\n            // LD L,B\n            // 1 4\n            Cpu.registerL = Cpu.registerB;\n            return 4;\n        case 0x69:\n            // LD L,C\n            // 1 4\n            Cpu.registerL = Cpu.registerC;\n            return 4;\n        case 0x6a:\n            // LD L,D\n            // 1 4\n            Cpu.registerL = Cpu.registerD;\n            return 4;\n        case 0x6b:\n            // LD L,E\n            // 1 4\n            Cpu.registerL = Cpu.registerE;\n            return 4;\n        case 0x6c:\n            // LD L,H\n            // 1 4\n            Cpu.registerL = Cpu.registerH;\n            return 4;\n        case 0x6d:\n            // LD L,L\n            // 1 4\n            Cpu.registerL = Cpu.registerL;\n            return 4;\n        case 0x6e:\n            // LD L,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerL = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x6f:\n            // LD L,A\n            // 1 4\n            Cpu.registerL = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode7x(opcode) {\n    switch (opcode) {\n        case 0x70:\n            // LD (HL),B\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerB);\n            return 4;\n        case 0x71:\n            // LD (HL),C\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerC);\n            return 4;\n        case 0x72:\n            // LD (HL),D\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerD);\n            return 4;\n        case 0x73:\n            // LD (HL),E\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerE);\n            return 4;\n        case 0x74:\n            // LD (HL),H\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerH);\n            return 4;\n        case 0x75:\n            // LD (HL),L\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerL);\n            return 4;\n        case 0x76:\n            // HALT\n            // 1 4\n            // Enter CPU very low power mode\n            // Meaning Don't Decode anymore opcodes until an interrupt occurs\n            // Still need to do timers and things\n            // Can't Halt during an HDMA\n            // https://gist.github.com/drhelius/3394856\n            if (!Memory.isHblankHdmaActive) {\n                Cpu.enableHalt();\n            }\n            return 4;\n        case 0x77:\n            // LD (HL),A\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerA);\n            return 4;\n        case 0x78:\n            // LD A,B\n            // 1 4\n            Cpu.registerA = Cpu.registerB;\n            return 4;\n        case 0x79:\n            // LD A,C\n            // 1 4\n            Cpu.registerA = Cpu.registerC;\n            return 4;\n        case 0x7a:\n            // LD A,D\n            // 1 4\n            Cpu.registerA = Cpu.registerD;\n            return 4;\n        case 0x7b:\n            // LD A,E\n            // 1 4\n            Cpu.registerA = Cpu.registerE;\n            return 4;\n        case 0x7c:\n            // LD A,H\n            // 1 4\n            Cpu.registerA = Cpu.registerH;\n            return 4;\n        case 0x7d:\n            // LD A,L\n            // 1 4\n            Cpu.registerA = Cpu.registerL;\n            return 4;\n        case 0x7e:\n            // LD A,(HL)\n            // 1 8\n            // NOTE: Thanks to @binji for catching that this should be 8 cycles, not 4\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x7f:\n            // LD A,A\n            // 1 4\n            // Do Nothing\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode8x(opcode) {\n    switch (opcode) {\n        case 0x80:\n            // ADD A,B\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerB);\n            return 4;\n        case 0x81:\n            // ADD A,C\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerC);\n            return 4;\n        case 0x82:\n            // ADD A,D\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerD);\n            return 4;\n        case 0x83:\n            // ADD A,E\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerE);\n            return 4;\n        case 0x84:\n            // ADD A,H\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerH);\n            return 4;\n        case 0x85:\n            // ADD A,L\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerL);\n            return 4;\n        case 0x86:\n            // ADD A,(HL)\n            // 1 8\n            // Z 0 H C\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            addARegister(valueAtHL6);\n            return 4;\n        case 0x87:\n            // ADD A,A\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerA);\n            return 4;\n        case 0x88:\n            // ADC A,B\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerB);\n            return 4;\n        case 0x89:\n            // ADC A,C\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerC);\n            return 4;\n        case 0x8a:\n            // ADC A,D\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerD);\n            return 4;\n        case 0x8b:\n            // ADC A,E\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerE);\n            return 4;\n        case 0x8c:\n            // ADC A,H\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerH);\n            return 4;\n        case 0x8d:\n            // ADC A,L\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerL);\n            return 4;\n        case 0x8e:\n            // ADC A,(HL)\n            // 1 8\n            // Z 0 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            addAThroughCarryRegister(valueAtHLE);\n            return 4;\n        case 0x8f:\n            // ADC A,A\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode9x(opcode) {\n    switch (opcode) {\n        case 0x90:\n            // SUB B\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerB);\n            return 4;\n        case 0x91:\n            // SUB C\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerC);\n            return 4;\n        case 0x92:\n            // SUB D\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerD);\n            return 4;\n        case 0x93:\n            // SUB E\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerE);\n            return 4;\n        case 0x94:\n            // SUB H\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerH);\n            return 4;\n        case 0x95:\n            // SUB L\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerL);\n            return 4;\n        case 0x96:\n            // SUB (HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            subARegister(valueAtHL6);\n            return 4;\n        case 0x97:\n            // SUB A\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerA);\n            return 4;\n        case 0x98:\n            // SBC A,B\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerB);\n            return 4;\n        case 0x99:\n            // SBC A,C\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerC);\n            return 4;\n        case 0x9a:\n            // SBC A,D\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerD);\n            return 4;\n        case 0x9b:\n            // SBC A,E\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerE);\n            return 4;\n        case 0x9c:\n            // SBC A,H\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerH);\n            return 4;\n        case 0x9d:\n            // SBC A,L\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerL);\n            return 4;\n        case 0x9e:\n            // SBC A,(HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            subAThroughCarryRegister(valueAtHLE);\n            return 4;\n        case 0x9f:\n            // SBC A,A\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeAx(opcode) {\n    switch (opcode) {\n        case 0xa0:\n            // AND B\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerB);\n            return 4;\n        case 0xa1:\n            // AND C\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerC);\n            return 4;\n        case 0xa2:\n            // AND D\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerD);\n            return 4;\n        case 0xa3:\n            // AND E\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerE);\n            return 4;\n        case 0xa4:\n            // AND H\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerH);\n            return 4;\n        case 0xa5:\n            // AND L\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerL);\n            return 4;\n        case 0xa6:\n            // AND (HL)\n            // 1  8\n            // Z 0 1 0\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            andARegister(valueAtHL6);\n            return 4;\n        case 0xa7:\n            // AND A\n            // 1  4\n            // Z 0 1 0\n            // NOTE: & Yourself, does nothing\n            andARegister(Cpu.registerA);\n            return 4;\n        case 0xa8:\n            // XOR B\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerB);\n            return 4;\n        case 0xa9:\n            // XOR C\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerC);\n            return 4;\n        case 0xaa:\n            // XOR D\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerD);\n            return 4;\n        case 0xab:\n            // XOR E\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerE);\n            return 4;\n        case 0xac:\n            // XOR H\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerH);\n            return 4;\n        case 0xad:\n            // XOR L\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerL);\n            return 4;\n        case 0xae:\n            // XOR (HL)\n            // 1  8\n            // Z 0 0 0\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            xorARegister(valueAtHLE);\n            return 4;\n        case 0xaf:\n            // XOR A\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeBx(opcode) {\n    switch (opcode) {\n        case 0xb0:\n            // OR B\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerB);\n            return 4;\n        case 0xb1:\n            // OR C\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerC);\n            return 4;\n        case 0xb2:\n            // OR D\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerD);\n            return 4;\n        case 0xb3:\n            // OR E\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerE);\n            return 4;\n        case 0xb4:\n            // OR H\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerH);\n            return 4;\n        case 0xb5:\n            // OR L\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerL);\n            return 4;\n        case 0xb6:\n            // OR (HL)\n            // 1  8\n            // Z 0 0 0\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            orARegister(valueAtHL6);\n            return 4;\n        case 0xb7:\n            // OR A\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerA);\n            return 4;\n        case 0xb8:\n            // CP B\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerB);\n            return 4;\n        case 0xb9:\n            // CP C\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerC);\n            return 4;\n        case 0xba:\n            // CP D\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerD);\n            return 4;\n        case 0xbb:\n            // CP E\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerE);\n            return 4;\n        case 0xbc:\n            // CP H\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerH);\n            return 4;\n        case 0xbd:\n            // CP L\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerL);\n            return 4;\n        case 0xbe:\n            // CP (HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            cpARegister(valueAtHLE);\n            return 4;\n        case 0xbf:\n            // CP A\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeCx(opcode) {\n    switch (opcode) {\n        case 0xc0: {\n            // RET NZ\n            // 1  20/8\n            if (getZeroFlag$$1() === 0) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xc1: {\n            // POP BC\n            // 1  12\n            // 8 cycles\n            var registerBC1 = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n            Cpu.registerB = splitHighByte(registerBC1);\n            Cpu.registerC = splitLowByte(registerBC1);\n            return 4;\n        }\n        case 0xc2: {\n            // JP NZ,a16\n            // 3  16/12\n            if (getZeroFlag$$1() === 0) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xc3: {\n            // JP a16\n            // 3  16\n            // 8 cycles\n            Cpu.programCounter = getConcatenatedDataByte();\n            return 8;\n        }\n        case 0xc4: {\n            // CALL NZ,a16\n            // 3  24/12\n            if (getZeroFlag$$1() === 0) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xc5: {\n            // PUSH BC\n            // 1  16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerB, Cpu.registerC));\n            return 8;\n        }\n        case 0xc6: {\n            // ADD A,d8\n            // 2 8\n            // Z 0 H C\n            // 4 cycles\n            addARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xc7: {\n            // RST 00H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x00;\n            return 8;\n        }\n        case 0xc8: {\n            // RET Z\n            // 1  20/8\n            if (getZeroFlag$$1() === 1) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xc9: {\n            // RET\n            // 1 16\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            return 8;\n        }\n        case 0xca: {\n            // JP Z,a16\n            // 3 16/12\n            if (getZeroFlag$$1() === 1) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xcb: {\n            // PREFIX CB\n            // 1  4\n            // 4 cycles\n            var cbCycles = handleCbOpcode(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return cbCycles;\n        }\n        case 0xcc: {\n            // CALL Z,a16\n            // 3  24/12\n            if (getZeroFlag$$1() === 1) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter + 2);\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xcd: {\n            // CALL a16\n            // 3  24\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n            // 8 cycles\n            Cpu.programCounter = getConcatenatedDataByte();\n            return 8;\n        }\n        case 0xce: {\n            // ADC A,d8\n            // 2  8\n            // Z 0 H C\n            // 4 cycles\n            addAThroughCarryRegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xcf: {\n            // RST 08H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x08;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeDx(opcode) {\n    switch (opcode) {\n        case 0xd0: {\n            // RET NC\n            // 1  20/8\n            if (getCarryFlag$$1() === 0) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xd1: {\n            // POP DE\n            // 1  12\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerDE1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerD = splitHighByte(registerDE1);\n            Cpu.registerE = splitLowByte(registerDE1);\n            return 4;\n        }\n        case 0xd2: {\n            // JP NC,a16\n            // 3  16/12\n            if (getCarryFlag$$1() === 0) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xD3 */\n        case 0xd4: {\n            // CALL NC,a16\n            // 3  24/12\n            if (getCarryFlag$$1() === 0) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter + 2);\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xd5: {\n            // PUSH DE\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerD, Cpu.registerE));\n            return 8;\n        }\n        case 0xd6: {\n            // SUB d8\n            // 2  8\n            // Z 1 H C\n            // 4 cycles\n            subARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xd7: {\n            // RST 10H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x10;\n            return 8;\n        }\n        case 0xd8: {\n            // RET C\n            // 1  20/8\n            if (getCarryFlag$$1() === 1) {\n                var stackPointer = Cpu.stackPointer;\n                // 8 cycles\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xd9: {\n            // RETI\n            // 1  16\n            var stackPointer = Cpu.stackPointer;\n            // 8 cycles\n            Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n            // Enable interrupts\n            setInterrupts(true);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            return 8;\n        }\n        case 0xda: {\n            // JP C,a16\n            // 3 16/12\n            if (getCarryFlag$$1() === 1) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xDB */\n        case 0xdc: {\n            // CALL C,a16\n            // 3  24/12\n            if (getCarryFlag$$1() === 1) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xDD */\n        case 0xde: {\n            // SBC A,d8\n            // 2 8\n            // Z 1 H C\n            // 4 cycles\n            subAThroughCarryRegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xdf: {\n            // RST 18H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x18;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeEx(opcode) {\n    switch (opcode) {\n        case 0xe0: {\n            // LDH (a8),A\n            // 2  12\n            // Store value in high RAM ($FF00 + a8)\n            // 4 cycles\n            var largeDataByteOne = getDataByteOne();\n            // 4 cycles\n            eightBitStoreSyncCycles(0xff00 + largeDataByteOne, Cpu.registerA);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xe1: {\n            // POP HL\n            // 1  12\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerHL1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerH = splitHighByte(registerHL1);\n            Cpu.registerL = splitLowByte(registerHL1);\n            return 4;\n        }\n        case 0xe2: {\n            // LD (C),A\n            // 1  8\n            // NOTE: Table says 2 Program counter,\n            // But stepping through the boot rom, should be one\n            // Also should change 0xF2\n            // Store value in high RAM ($FF00 + register c)\n            // 4 cycles\n            eightBitStoreSyncCycles(0xff00 + Cpu.registerC, Cpu.registerA);\n            return 4;\n        }\n        /* No Opcode for: 0xE3, 0xE4 */\n        case 0xe5: {\n            // PUSH HL\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 8;\n        }\n        case 0xe6: {\n            // AND d8\n            // 2  8\n            // Z 0 1 0\n            // 4 cycles\n            andARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xe7: {\n            // RST 20H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x20;\n            return 8;\n        }\n        case 0xe8: {\n            // ADD SP, r8\n            // 2 16\n            // 0 0 H C\n            // NOTE: Discoved dataByte is signed\n            // 4 cycles\n            var signedDataByteOne = i8Portable(getDataByteOne());\n            checkAndSetSixteenBitFlagsAddOverflow(Cpu.stackPointer, signedDataByteOne, true);\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + signedDataByteOne);\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 12;\n        }\n        case 0xe9: {\n            // JP HL\n            // 1 4\n            Cpu.programCounter = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            return 4;\n        }\n        case 0xea: {\n            // LD (a16),A\n            // 3 16\n            // 12 cycles, 4 from store, 8 from concatenated data byte\n            eightBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.registerA);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        /* No Opcode for: 0xEB, 0xEC, 0xED */\n        case 0xee: {\n            // XOR d8\n            // 2 8\n            // Z 0 0 0\n            // 4 cycles\n            xorARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xef: {\n            // RST 28H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x28;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeFx(opcode) {\n    switch (opcode) {\n        case 0xf0: {\n            // LDH A,(a8)\n            // 2 12\n            // 4 cycles\n            var largeDataByteOne = getDataByteOne();\n            // 4 cycles\n            Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + largeDataByteOne));\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xf1: {\n            // POP AF\n            // 1 12\n            // Z N H C (But No work require, flags are already set)\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerAF1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerA = splitHighByte(registerAF1);\n            Cpu.registerF = splitLowByte(registerAF1);\n            return 4;\n        }\n        case 0xf2: {\n            // LD A,(C)\n            // 1 8\n            // 4 cycles\n            Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + Cpu.registerC));\n            return 4;\n        }\n        case 0xf3: {\n            // DI\n            // 1 4\n            setInterrupts(false);\n            return 4;\n        }\n        /* No Opcode for: 0xF4 */\n        case 0xf5: {\n            // PUSH AF\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerA, Cpu.registerF));\n            return 8;\n        }\n        case 0xf6: {\n            // OR d8\n            // 2 8\n            // Z 0 0 0\n            // 4 cycles\n            orARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xf7: {\n            // RST 30H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x30;\n            return 8;\n        }\n        case 0xf8: {\n            // LD HL,SP+r8\n            // 2 12\n            // 0 0 H C\n            // NOTE: Discoved dataByte is signed\n            // 4 cycles\n            var signedDataByteOne = i8Portable(getDataByteOne());\n            var stackPointer = Cpu.stackPointer;\n            // First, let's handle flags\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            checkAndSetSixteenBitFlagsAddOverflow(stackPointer, signedDataByteOne, true);\n            var registerHL = u16Portable(stackPointer + signedDataByteOne);\n            Cpu.registerH = splitHighByte(registerHL);\n            Cpu.registerL = splitLowByte(registerHL);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 8;\n        }\n        case 0xf9: {\n            // LD SP,HL\n            // 1 8\n            Cpu.stackPointer = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            return 8;\n        }\n        case 0xfa: {\n            // LD A,(a16)\n            // 3 16\n            // 12 cycles, 4 from load, 8 from concatenated data byte\n            Cpu.registerA = eightBitLoadSyncCycles(getConcatenatedDataByte());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0xfb: {\n            // EI\n            // 1 4\n            setInterrupts(true);\n            return 4;\n        }\n        /* No Opcode for: 0xFC, 0xFD */\n        case 0xfe: {\n            // CP d8\n            // 2 8\n            // Z 1 H C\n            // 4 cycles\n            cpARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xff: {\n            // RST 38H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x38;\n            return 8;\n        }\n    }\n    return -1;\n}\n\n// NOTE: Code is very verbose, and will have some copy pasta'd lines.\n\n// Syncing and Tracking executed cycles\nvar Cycles = /** @class */ (function () {\n    function Cycles() {\n    }\n    // An even number below the max 32 bit integer\n    Cycles.cyclesPerCycleSet = 2000000000;\n    Cycles.cycleSets = 0;\n    Cycles.cycles = 0;\n    return Cycles;\n}());\nfunction getCyclesPerCycleSet() {\n    return Cycles.cyclesPerCycleSet;\n}\nfunction getCycleSets() {\n    return Cycles.cycleSets;\n}\nfunction getCycles() {\n    return Cycles.cycles;\n}\n// Inlined because closure compiler inlines\nfunction trackCyclesRan(numberOfCycles) {\n    var cycles = Cycles.cycles;\n    cycles += numberOfCycles;\n    if (cycles >= Cycles.cyclesPerCycleSet) {\n        Cycles.cycleSets += 1;\n        cycles -= Cycles.cyclesPerCycleSet;\n    }\n    Cycles.cycles = cycles;\n}\n// Inlined because closure compiler inlines\nfunction resetCycles() {\n    Cycles.cyclesPerCycleSet = 2000000000;\n    Cycles.cycleSets = 0;\n    Cycles.cycles = 0;\n}\n// Sync other GB Components with the number of cycles\nfunction syncCycles(numberOfCycles) {\n    // Check if we did a DMA TRansfer, if we did add the cycles\n    if (Memory.DMACycles > 0) {\n        numberOfCycles += Memory.DMACycles;\n        Memory.DMACycles = 0;\n    }\n    // Finally, Add our number of cycles to the CPU Cycles\n    Cpu.currentCycles += numberOfCycles;\n    // Check other Gameboy components\n    if (!Cpu.isStopped) {\n        if (Config.graphicsBatchProcessing) {\n            // Need to do this, since a lot of things depend on the scanline\n            // Batch processing will simply return if the number of cycles is too low\n            Graphics.currentCycles += numberOfCycles;\n            batchProcessGraphics();\n        }\n        else {\n            updateGraphics(numberOfCycles);\n        }\n        if (Config.audioBatchProcessing) {\n            Sound.currentCycles += numberOfCycles;\n            batchProcessAudio();\n        }\n        else {\n            updateSound(numberOfCycles);\n        }\n        updateSerial(numberOfCycles);\n    }\n    if (Config.timersBatchProcessing) {\n        // Batch processing will simply return if the number of cycles is too low\n        Timers.currentCycles += numberOfCycles;\n        batchProcessTimers();\n    }\n    else {\n        updateTimers(numberOfCycles);\n    }\n    trackCyclesRan(numberOfCycles);\n}\n\n// Functions involving executing/running the emulator after initializtion\nvar Execute = /** @class */ (function () {\n    function Execute() {\n    }\n    // An even number bewlow the max 32 bit integer\n    Execute.stepsPerStepSet = 2000000000;\n    Execute.stepSets = 0;\n    Execute.steps = 0;\n    // Response Codes from Execute Conditions\n    Execute.RESPONSE_CONDITION_ERROR = -1;\n    Execute.RESPONSE_CONDITION_FRAME = 0;\n    Execute.RESPONSE_CONDITION_AUDIO = 1;\n    Execute.RESPONSE_CONDITION_BREAKPOINT = 2;\n    return Execute;\n}());\nfunction getStepsPerStepSet() {\n    return Execute.stepsPerStepSet;\n}\nfunction getStepSets() {\n    return Execute.stepSets;\n}\nfunction getSteps() {\n    return Execute.steps;\n}\n// Inlined because closure compiler inlines\nfunction trackStepsRan(steps) {\n    var esteps = Execute.steps;\n    esteps += steps;\n    if (esteps >= Execute.stepsPerStepSet) {\n        Execute.stepSets += 1;\n        esteps -= Execute.stepsPerStepSet;\n    }\n    Execute.steps = esteps;\n}\n// Inlined because closure compiler inlines\nfunction resetSteps() {\n    Execute.stepsPerStepSet = 2000000000;\n    Execute.stepSets = 0;\n    Execute.steps = 0;\n}\n// // Public funciton to run frames until,\n// the specified number of frames have run or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\nfunction executeMultipleFrames(numberOfFrames) {\n    var frameResponse = 0;\n    var framesRun = 0;\n    while (framesRun < numberOfFrames && frameResponse >= 0) {\n        frameResponse = executeFrame();\n        framesRun += 1;\n    }\n    if (frameResponse < 0) {\n        return frameResponse;\n    }\n    return 0;\n}\n// Public funciton to run opcodes until,\n// a frame is ready, or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\nfunction executeFrame() {\n    return executeUntilCondition(true, -1);\n}\n// Public Function to run opcodes until,\n// a frame is ready, audio bufer is filled, or error\nfunction executeFrameAndCheckAudio(maxAudioBuffer) {\n    if (maxAudioBuffer === void 0) { maxAudioBuffer = 0; }\n    return executeUntilCondition(true, maxAudioBuffer);\n}\n// Base function that executes steps, and checks conditions\n// Return values:\nfunction executeUntilCondition(checkMaxCyclesPerFrame, maxAudioBuffer) {\n    if (checkMaxCyclesPerFrame === void 0) { checkMaxCyclesPerFrame = true; }\n    if (maxAudioBuffer === void 0) { maxAudioBuffer = -1; }\n    // Common tracking variables\n    var numberOfCycles = -1;\n    var audioBufferSize = 1024;\n    if (maxAudioBuffer > 0) {\n        audioBufferSize = maxAudioBuffer;\n    }\n    else if (maxAudioBuffer < 0) {\n        audioBufferSize = -1;\n    }\n    var errorCondition = false;\n    var frameCondition = false;\n    var audioBufferCondition = false;\n    while (!errorCondition && !frameCondition && !audioBufferCondition && !Breakpoints.reachedBreakpoint) {\n        numberOfCycles = executeStep();\n        // Error Condition\n        if (numberOfCycles < 0) {\n            errorCondition = true;\n        }\n        else if (Cpu.currentCycles >= Cpu.MAX_CYCLES_PER_FRAME()) {\n            frameCondition = true;\n        }\n        else if (audioBufferSize > -1 && getNumberOfSamplesInAudioBuffer() >= audioBufferSize) {\n            audioBufferCondition = true;\n        }\n    }\n    // Find our exit reason\n    if (frameCondition) {\n        // Render a frame\n        // Reset our currentCycles\n        Cpu.currentCycles -= Cpu.MAX_CYCLES_PER_FRAME();\n        return Execute.RESPONSE_CONDITION_FRAME;\n    }\n    if (audioBufferCondition) {\n        return Execute.RESPONSE_CONDITION_AUDIO;\n    }\n    if (Breakpoints.reachedBreakpoint) {\n        Breakpoints.reachedBreakpoint = false;\n        return Execute.RESPONSE_CONDITION_BREAKPOINT;\n    }\n    // TODO: Boot ROM handling\n    // There was an error, return -1, and push the program counter back to grab the error opcode\n    Cpu.programCounter = u16Portable(Cpu.programCounter - 1);\n    return -1;\n}\n// Function to execute an opcode, and update other gameboy hardware.\n// http://www.codeslinger.co.uk/pages/projects/gameboy/beginning.html\nfunction executeStep() {\n    // Set has started to 1 since we ran a emulation step\n    setHasCoreStarted(true);\n    // Check if we are in the halt bug\n    if (Cpu.isHaltBug) {\n        // Need to not increment program counter,\n        // thus, running the next opcode twice\n        // E.g\n        // 0x76 - halt\n        // FA 34 12 - ld a,(1234)\n        // Becomes\n        // FA FA 34 ld a,(34FA)\n        // 12 ld (de),a\n        var haltBugOpcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n        // Execute opcode will handle the actual PC behavior\n        var haltBugCycles = executeOpcode$$1(haltBugOpcode);\n        syncCycles(haltBugCycles);\n        Cpu.exitHaltAndStop();\n    }\n    // Interrupts should be handled before reading an opcode\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n    var interruptCycles = checkInterrupts();\n    if (interruptCycles > 0) {\n        syncCycles(interruptCycles);\n    }\n    // Get the opcode, and additional bytes to be handled\n    // Number of cycles defaults to 4, because while we're halted, we run 4 cycles (according to matt :))\n    var numberOfCycles = 4;\n    var opcode = 0;\n    // If we are not halted or stopped, run instructions\n    // If we are halted, this will be skipped and just sync the 4 cycles\n    if (!Cpu.isHalted() && !Cpu.isStopped) {\n        opcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n        numberOfCycles = executeOpcode$$1(opcode);\n    }\n    // blarggFixes, don't allow register F to have the bottom nibble\n    Cpu.registerF = Cpu.registerF & 0xf0;\n    // Check if there was an error decoding the opcode\n    if (numberOfCycles <= 0) {\n        return numberOfCycles;\n    }\n    // Sync other GB Components with the number of cycles\n    syncCycles(numberOfCycles);\n    // Update our steps\n    trackStepsRan(1);\n    // Check if we reached the CPU breakpoint\n    if (Cpu.programCounter === Breakpoints.programCounter) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    return numberOfCycles;\n}\n\n// Imports\n// Grow our memory to the specified size\nif (memory.size() < WASMBOY_WASM_PAGES) {\n    memory.grow(WASMBOY_WASM_PAGES - memory.size());\n}\n// Function to track if the core has started\nvar hasStarted = false;\nfunction setHasCoreStarted(value) {\n    hasStarted = value;\n}\nfunction hasCoreStarted() {\n    return hasStarted;\n}\n// Function to configure & initialize wasmboy\nfunction config(enableBootRom, useGbcWhenAvailable, audioBatchProcessing, graphicsBatchProcessing, timersBatchProcessing, graphicsDisableScanlineRendering, audioAccumulateSamples, tileRendering, tileCaching, enableAudioDebugging) {\n    // TODO: depending on the boot rom, initialization may be different\n    // From: http://www.codeslinger.co.uk/pages/projects/gameboy/hardware.html\n    // All values default to zero in memory, so not setting them yet\n    // log('initializing (includeBootRom=$0)', 1, enableBootRom);\n    Config.enableBootRom = enableBootRom > 0;\n    Config.useGbcWhenAvailable = useGbcWhenAvailable > 0;\n    Config.audioBatchProcessing = audioBatchProcessing > 0;\n    Config.graphicsBatchProcessing = graphicsBatchProcessing > 0;\n    Config.timersBatchProcessing = timersBatchProcessing > 0;\n    Config.graphicsDisableScanlineRendering = graphicsDisableScanlineRendering > 0;\n    Config.audioAccumulateSamples = audioAccumulateSamples > 0;\n    Config.tileRendering = tileRendering > 0;\n    Config.tileCaching = tileCaching > 0;\n    Config.enableAudioDebugging = enableAudioDebugging > 0;\n    initialize();\n}\n// Function to initiialize the core\nfunction initialize() {\n    // Initialization variables from BGB\n    // First, try to switch to Gameboy Color Mode\n    // Get our GBC support from the cartridge header\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    var gbcType = eightBitLoadFromGBMemory(0x0143);\n    // Detecting GBC http://bgb.bircd.org/pandocs.htm#cgbregisters\n    if (gbcType === 0xc0 || (Config.useGbcWhenAvailable && gbcType === 0x80)) {\n        Cpu.GBCEnabled = true;\n    }\n    else {\n        Cpu.GBCEnabled = false;\n    }\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Reset our cycles ran\n    resetCycles();\n    resetSteps();\n    if (Config.enableBootRom) {\n        Cpu.BootROMEnabled = true;\n    }\n    else {\n        Cpu.BootROMEnabled = false;\n    }\n    // Call our respective classes intialization\n    // NOTE: Boot ROM Only handles some initialization, thus we need to check in each one\n    // respecitvely :p\n    initializeCpu();\n    initializeCartridge();\n    initializeDma();\n    initializeGraphics();\n    initializePalette();\n    initializeSound();\n    initializeInterrupts();\n    initializeTimers();\n    initializeSerial();\n    initializeVarious();\n}\nfunction initializeVarious() {\n    // Various Other Registers\n    if (Cpu.GBCEnabled) {\n        // Various other registers\n        eightBitStoreIntoGBMemory(0xff70, 0xf8);\n        eightBitStoreIntoGBMemory(0xff4f, 0xfe);\n        eightBitStoreIntoGBMemory(0xff4d, 0x7e);\n        eightBitStoreIntoGBMemory(0xff00, 0xcf);\n        eightBitStoreIntoGBMemory(0xff0f, 0xe1);\n        // 0xFFFF = 0x00\n        // Undocumented from Pandocs\n        eightBitStoreIntoGBMemory(0xff6c, 0xfe);\n        eightBitStoreIntoGBMemory(0xff75, 0x8f);\n    }\n    else {\n        eightBitStoreIntoGBMemory(0xff70, 0xff);\n        eightBitStoreIntoGBMemory(0xff4f, 0xff);\n        eightBitStoreIntoGBMemory(0xff4d, 0xff);\n        eightBitStoreIntoGBMemory(0xff00, 0xcf);\n        eightBitStoreIntoGBMemory(0xff0f, 0xe1);\n        // 0xFFFF = 0x00\n    }\n}\n// Function to return if we are currently playing a GBC ROM\nfunction isGBC() {\n    return Cpu.GBCEnabled;\n}\n// Function to return an address to store into save state memory\n// this is to regulate our 20 slots\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// Inlined because closure compiler inlines\nfunction getSaveStateMemoryOffset(offset, saveStateSlot) {\n    // 50 bytes per save state memory partiton sli32\n    return WASMBOY_STATE_LOCATION + offset + 50 * saveStateSlot;\n}\n// Function to save state to memory for all of our classes\nfunction saveState() {\n    Cpu.saveState();\n    Graphics.saveState();\n    Interrupts.saveState();\n    Joypad.saveState();\n    Memory.saveState();\n    Timers.saveState();\n    Sound.saveState();\n    Channel1.saveState();\n    Channel2.saveState();\n    Channel3.saveState();\n    Channel4.saveState();\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Don't want to reset cycles here, as this does not reset the emulator\n}\n// Function to load state from memory for all of our classes\nfunction loadState() {\n    Cpu.loadState();\n    Graphics.loadState();\n    Interrupts.loadState();\n    Joypad.loadState();\n    Memory.loadState();\n    Timers.loadState();\n    Sound.loadState();\n    Channel1.loadState();\n    Channel2.loadState();\n    Channel3.loadState();\n    Channel4.loadState();\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Reset our cycles ran\n    resetCycles();\n    resetSteps();\n}\n\n// Functions to get information about the emulator for debugging purposes\nfunction getRegisterA() {\n    return Cpu.registerA;\n}\nfunction getRegisterB() {\n    return Cpu.registerB;\n}\nfunction getRegisterC() {\n    return Cpu.registerC;\n}\nfunction getRegisterD() {\n    return Cpu.registerD;\n}\nfunction getRegisterE() {\n    return Cpu.registerE;\n}\nfunction getRegisterH() {\n    return Cpu.registerH;\n}\nfunction getRegisterL() {\n    return Cpu.registerL;\n}\nfunction getRegisterF() {\n    return Cpu.registerF;\n}\nfunction getProgramCounter() {\n    return Cpu.programCounter;\n}\nfunction getStackPointer() {\n    return Cpu.stackPointer;\n}\nfunction getOpcodeAtProgramCounter() {\n    return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\n\n// Functions to debug graphical output\n// Some Simple internal getters\nfunction getLY() {\n    return Graphics.scanlineRegister;\n}\n// TODO: Render by tile, rather than by pixel\nfunction drawBackgroundMapToWasmMemory(showColor) {\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    // Bit 7 - LCD Display Enable (0=Off, 1=On)\n    // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 5 - Window Display Enable (0=Off, 1=On)\n    // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n    // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n    // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n    // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On)\n    // Get our seleted tile data memory location\n    var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n    if (Lcd.bgWindowTileDataSelect) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n    }\n    var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n    if (Lcd.bgTileMapDisplaySelect) {\n        tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n    }\n    for (var y = 0; y < 256; y++) {\n        for (var x = 0; x < 256; x++) {\n            // Get our current Y\n            var pixelYPositionInMap = y;\n            // Get our Current X position of our pixel on the on the 160x144 camera\n            // this is done by getting the current scroll X position,\n            // and adding it do what X Value the scanline is drawing on the camera.\n            var pixelXPositionInMap = x;\n            // Divide our pixel position by 8 to get our tile.\n            // Since, there are 256x256 pixels, and 32x32 tiles.\n            // 256 / 8 = 32.\n            // Also, bitshifting by 3, do do a division by 8\n            // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n            var tileXPositionInMap = pixelXPositionInMap >> 3;\n            var tileYPositionInMap = pixelYPositionInMap >> 3;\n            // Get our tile address on the tileMap\n            // NOTE: (tileMap represents where each tile is displayed on the screen)\n            // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n            // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n            // And we have x pixel 160. 160 / 8 = 20.\n            // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n            // Think like indexing a 2d array, as a 1d array and it make sense :)\n            var tileMapAddress = tileMapMemoryLocation + tileYPositionInMap * 32 + tileXPositionInMap;\n            // Get the tile Id on the Tile Map\n            var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n            // Now get our tileDataAddress for the corresponding tileID we found in the map\n            // Read the comments in _getTileDataAddress() to see what's going on.\n            // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n            // This funcitons returns the start of memory locaiton for the tile 'c'.\n            var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n            // Now we can process the the individual bytes that represent the pixel on a tile\n            // Get the y pixel of the 8 by 8 tile.\n            // Simply modulo the scanline.\n            // For instance, let's say we are printing the first line of pixels on our camera,\n            // And the first line of pixels on our tile.\n            // yPixel = 1. 1 % 8 = 1.\n            // And for the last line\n            // yPixel = 144. 144 % 8 = 0.\n            // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n            // Because remember, we are counting lines on the display NOT including zero\n            var pixelYInTile = pixelYPositionInMap % 8;\n            // Same logic as pixelYInTile.\n            // However, We need to reverse our byte,\n            // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n            // Therefore, is pixelX was 2, then really is need to be 5\n            // So 2 - 7 = -5, * 1 = 5\n            // Or to simplify, 7 - 2 = 5 haha!\n            var pixelXInTile = pixelXPositionInMap % 8;\n            pixelXInTile = 7 - pixelXInTile;\n            // Get the GB Map Attributes\n            // Bit 0-2  Background Palette number  (BGP0-7)\n            // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n            // Bit 4    Not used\n            // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n            // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n            // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n            var bgMapAttributes = 0;\n            if (Cpu.GBCEnabled && showColor > 0) {\n                bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n            }\n            if (checkBitOnByte(6, bgMapAttributes)) {\n                // We are mirroring the tile, therefore, we need to opposite byte\n                // So if our pizel was 0 our of 8, it wild become 7 :)\n                // TODO: This may be wrong :p\n                pixelYInTile = 7 - pixelYInTile;\n            }\n            // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n            // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n            // But we need to load the time from a specific Vram bank\n            var vramBankId = 0;\n            if (checkBitOnByte(3, bgMapAttributes)) {\n                vramBankId = 1;\n            }\n            // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n            // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n            // Again, think like you had to map a 2d array as a 1d.\n            var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n            var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId);\n            // Now we can get the color for that pixel\n            // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n            // To Get the color Id.\n            // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n            // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n            var paletteColorId = 0;\n            if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n                // Byte one represents the second bit in our color id, so bit shift\n                paletteColorId += 1;\n                paletteColorId = paletteColorId << 1;\n            }\n            if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n                paletteColorId += 1;\n            }\n            // FINALLY, RENDER THAT PIXEL!\n            var pixelStart = (y * 256 + x) * 3;\n            if (Cpu.GBCEnabled && showColor > 0) {\n                // Finally lets add some, C O L O R\n                // Want the botom 3 bits\n                var bgPalette = bgMapAttributes & 0x07;\n                // Call the helper function to grab the correct color from the palette\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false);\n                // Split off into red green and blue\n                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                var blue = getColorComponentFromRgb(2, rgbColorPalette);\n                var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n                store(offset, red);\n                store(offset + 1, green);\n                store(offset + 2, blue);\n            }\n            else {\n                // Only rendering camera for now, so coordinates are for the camera.\n                // Get the rgb value for the color Id, will be repeated into R, G, B (if not colorized)\n                var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n                var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n                // Red\n                store(offset + 0, getRedFromHexColor(hexColor));\n                // Green\n                store(offset + 1, getGreenFromHexColor(hexColor));\n                // Blue\n                store(offset + 2, getBlueFromHexColor(hexColor));\n            }\n        }\n    }\n}\nfunction drawTileDataToWasmMemory() {\n    for (var tileDataMapGridY = 0; tileDataMapGridY < 0x17; tileDataMapGridY++) {\n        for (var tileDataMapGridX = 0; tileDataMapGridX < 0x1f; tileDataMapGridX++) {\n            // Get Our VramBankID\n            var vramBankId = 0;\n            if (tileDataMapGridX > 0x0f) {\n                vramBankId = 1;\n            }\n            // Get our tile ID\n            var tileId = tileDataMapGridY;\n            if (tileDataMapGridY > 0x0f) {\n                tileId -= 0x0f;\n            }\n            tileId = tileId << 4;\n            if (tileDataMapGridX > 0x0f) {\n                tileId = tileId + (tileDataMapGridX - 0x0f);\n            }\n            else {\n                tileId = tileId + tileDataMapGridX;\n            }\n            // Finally get our tile Data location\n            var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n            if (tileDataMapGridY > 0x0f) {\n                tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n            }\n            // Let's see if we have C O L O R\n            // Set the map and sprite attributes to -1\n            // Meaning, we will draw monochrome\n            var paletteLocation = Graphics.memoryLocationBackgroundPalette;\n            var bgMapAttributes = -1;\n            var spriteAttributes = -1;\n            // Let's see if the tile is being used by a sprite\n            for (var spriteRow = 0; spriteRow < 8; spriteRow++) {\n                for (var spriteColumn = 0; spriteColumn < 5; spriteColumn++) {\n                    var spriteIndex = spriteColumn * 8 + spriteRow;\n                    // Sprites occupy 4 bytes in the sprite attribute table\n                    var spriteTableIndex = spriteIndex * 4;\n                    var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2);\n                    if (tileId === spriteTileId) {\n                        var currentSpriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n                        var spriteVramBankId = 0;\n                        if (Cpu.GBCEnabled && checkBitOnByte(3, currentSpriteAttributes)) {\n                            spriteVramBankId = 1;\n                        }\n                        if (spriteVramBankId === vramBankId) {\n                            spriteAttributes = currentSpriteAttributes;\n                            spriteRow = 8;\n                            spriteColumn = 5;\n                            // Set our paletteLocation\n                            paletteLocation = Graphics.memoryLocationSpritePaletteOne;\n                            if (checkBitOnByte(4, spriteAttributes)) {\n                                paletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                            }\n                        }\n                    }\n                }\n            }\n            // If we didn't find a sprite,\n            // Let's see if the tile is on the bg tile map\n            // If so, use that bg map for attributes\n            if (Cpu.GBCEnabled && spriteAttributes < 0) {\n                var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n                if (Lcd.bgTileMapDisplaySelect) {\n                    tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n                }\n                // Loop through the tileMap, and find if we have our current ID\n                var foundTileMapAddress = -1;\n                for (var x = 0; x < 32; x++) {\n                    for (var y = 0; y < 32; y++) {\n                        var tileMapAddress = tileMapMemoryLocation + y * 32 + x;\n                        var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n                        // Check if we found our tileId\n                        if (tileId === tileIdFromTileMap) {\n                            foundTileMapAddress = tileMapAddress;\n                            x = 32;\n                            y = 32;\n                        }\n                    }\n                }\n                if (foundTileMapAddress >= 0) {\n                    bgMapAttributes = loadFromVramBank(foundTileMapAddress, 1);\n                }\n            }\n            // Draw each Y line of the tile\n            for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n                drawPixelsFromLineOfTile(tileId, // tileId\n                tileDataMemoryLocation, // Graphics.memoryLocationTileDataSelect\n                vramBankId, // Vram Bank\n                0, // Tile Line X Start\n                7, // Tile Line X End\n                tileLineY, // Tile Line Y\n                tileDataMapGridX * 8, // Output line X\n                tileDataMapGridY * 8 + tileLineY, // Output line Y\n                0x1f * 8, // Output Width\n                TILE_DATA_LOCATION, // Wasm Memory Start\n                false, // shouldRepresentMonochromeColorByColorId\n                paletteLocation, // paletteLocation\n                bgMapAttributes, // bgMapAttributes\n                spriteAttributes // spriteAttributes\n                );\n            }\n        }\n    }\n}\nfunction drawOamToWasmMemory() {\n    // Draw all 40 sprites\n    // Going to be like BGB and do 8 x 5 sprites\n    for (var spriteRow = 0; spriteRow < 8; spriteRow++) {\n        for (var spriteColumn = 0; spriteColumn < 5; spriteColumn++) {\n            var spriteIndex = spriteColumn * 8 + spriteRow;\n            // Sprites occupy 4 bytes in the sprite attribute table\n            var spriteTableIndex = spriteIndex * 4;\n            // Y positon is offset by 16, X position is offset by 8\n            var spriteYPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex);\n            var spriteXPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 1);\n            var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2);\n            var tilesToDraw = 1;\n            if (Lcd.tallSpriteSize) {\n                // @binji says in 8x16 mode, even tileId always drawn first\n                // This will fix shantae sprites which always uses odd numbered indexes\n                // TODO: Do the actual Pandocs thing:\n                // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n                // So just knock off the last bit? :)\n                if (spriteTileId % 2 === 1) {\n                    spriteTileId -= 1;\n                }\n                tilesToDraw += 1;\n            }\n            // Get our sprite attributes since we know we shall be drawing the tile\n            var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n            // Find which VRAM Bank to load from\n            var vramBankId = 0;\n            if (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes)) {\n                vramBankId = 1;\n            }\n            // Find which monochrome palette we should use\n            var paletteLocation = Graphics.memoryLocationSpritePaletteOne;\n            if (checkBitOnByte(4, spriteAttributes)) {\n                paletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n            }\n            // Start Drawing our tiles\n            for (var i = 0; i < tilesToDraw; i++) {\n                // Draw each Y line of the tile\n                for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n                    drawPixelsFromLineOfTile(spriteTileId + i, // tileId\n                    Graphics.memoryLocationTileDataSelectOneStart, // Graphics.memoryLocationTileDataSelect\n                    vramBankId, // VRAM Bank\n                    0, // Tile Line X Start\n                    7, // Tile Line X End\n                    tileLineY, // Tile Line Y\n                    spriteRow * 8, // Output line X\n                    spriteColumn * 16 + tileLineY + i * 8, // Output line Y\n                    8 * 8, // Output Width\n                    OAM_TILES_LOCATION, // Wasm Memory Start\n                    false, // shouldRepresentMonochromeColorByColorId\n                    paletteLocation, // paletteLocation\n                    -1, // bgMapAttributes\n                    spriteAttributes // spriteAttributes\n                    );\n                }\n            }\n        }\n    }\n}\n\nfunction getDIV() {\n    return Timers.dividerRegister;\n}\nfunction getTIMA() {\n    return Timers.timerCounter;\n}\nfunction getTMA() {\n    return Timers.timerModulo;\n}\nfunction getTAC() {\n    var response = Timers.timerInputClock;\n    if (Timers.timerEnabled) {\n        response = setBitOnByte(2, response);\n    }\n    return response;\n}\n\n// Functions to debug internal gameboy memory\nfunction updateDebugGBMemory() {\n    for (var i = 0; i < DEBUG_GAMEBOY_MEMORY_SIZE; i++) {\n        store(DEBUG_GAMEBOY_MEMORY_LOCATION + i, eightBitLoadFromGBMemoryWithTraps(i));\n    }\n    // Since we are debugging, we don't want to be responsible for tripping the breakpoints\n    Breakpoints.reachedBreakpoint = false;\n}\n\n// Public Exports\n\nexport { config, hasCoreStarted, saveState, loadState, isGBC, getStepsPerStepSet, getStepSets, getSteps, executeMultipleFrames, executeFrame, executeFrameAndCheckAudio, executeUntilCondition, executeStep, getCyclesPerCycleSet, getCycleSets, getCycles, setJoypadState, getNumberOfSamplesInAudioBuffer, clearAudioBuffer, setManualColorizationPalette, WASMBOY_MEMORY_LOCATION, WASMBOY_MEMORY_SIZE, WASMBOY_WASM_PAGES, ASSEMBLYSCRIPT_MEMORY_LOCATION, ASSEMBLYSCRIPT_MEMORY_SIZE, WASMBOY_STATE_LOCATION, WASMBOY_STATE_SIZE, GAMEBOY_INTERNAL_MEMORY_LOCATION, GAMEBOY_INTERNAL_MEMORY_SIZE, VIDEO_RAM_LOCATION, VIDEO_RAM_SIZE, WORK_RAM_LOCATION, WORK_RAM_SIZE, OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION, OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE, GRAPHICS_OUTPUT_LOCATION, GRAPHICS_OUTPUT_SIZE, GBC_PALETTE_LOCATION, GBC_PALETTE_SIZE, BG_PRIORITY_MAP_LOCATION, BG_PRIORITY_MAP_SIZE, FRAME_LOCATION, FRAME_SIZE, BACKGROUND_MAP_LOCATION, BACKGROUND_MAP_SIZE, TILE_DATA_LOCATION, TILE_DATA_SIZE, OAM_TILES_LOCATION, OAM_TILES_SIZE, AUDIO_BUFFER_LOCATION, AUDIO_BUFFER_SIZE, CHANNEL_1_BUFFER_LOCATION, CHANNEL_1_BUFFER_SIZE, CHANNEL_2_BUFFER_LOCATION, CHANNEL_2_BUFFER_SIZE, CHANNEL_3_BUFFER_LOCATION, CHANNEL_3_BUFFER_SIZE, CHANNEL_4_BUFFER_LOCATION, CHANNEL_4_BUFFER_SIZE, CARTRIDGE_RAM_LOCATION, CARTRIDGE_RAM_SIZE, BOOT_ROM_LOCATION, BOOT_ROM_SIZE, CARTRIDGE_ROM_LOCATION, CARTRIDGE_ROM_SIZE, DEBUG_GAMEBOY_MEMORY_LOCATION, DEBUG_GAMEBOY_MEMORY_SIZE, getWasmBoyOffsetFromGameBoyOffset, setProgramCounterBreakpoint, resetProgramCounterBreakpoint, setReadGbMemoryBreakpoint, resetReadGbMemoryBreakpoint, setWriteGbMemoryBreakpoint, resetWriteGbMemoryBreakpoint, getRegisterA, getRegisterB, getRegisterC, getRegisterD, getRegisterE, getRegisterH, getRegisterL, getRegisterF, getProgramCounter, getStackPointer, getOpcodeAtProgramCounter, getLY, drawBackgroundMapToWasmMemory, drawTileDataToWasmMemory, drawOamToWasmMemory, getDIV, getTIMA, getTMA, getTAC, updateDebugGBMemory };\n","import * as WasmBoyCore from '../../dist/core/core.esm';\n\nconst getWasmBoyTsCore = async () => {\n  const response = {\n    instance: {\n      exports: WasmBoyCore\n    },\n    byteMemory: WasmBoyCore.memory.wasmByteMemory,\n    type: 'TypeScript'\n  };\n  return response;\n};\n\nexport default getWasmBoyTsCore;\n"],"names":["wasmByteMemory","Uint8ClampedArray","wasmboyMemorySize","memory","size","grow","GAMEBOY_INTERNAL_MEMORY_SIZE","OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION","GBC_PALETTE_LOCATION","BG_PRIORITY_MAP_LOCATION","GBC_PALETTE_SIZE","FRAME_LOCATION","BG_PRIORITY_MAP_SIZE","BACKGROUND_MAP_LOCATION","FRAME_SIZE","TILE_DATA_LOCATION","BACKGROUND_MAP_SIZE","OAM_TILES_LOCATION","TILE_DATA_SIZE","GRAPHICS_OUTPUT_SIZE","OAM_TILES_SIZE","CHANNEL_1_BUFFER_LOCATION","CHANNEL_2_BUFFER_LOCATION","CHANNEL_1_BUFFER_SIZE","CHANNEL_3_BUFFER_LOCATION","CHANNEL_2_BUFFER_SIZE","CHANNEL_4_BUFFER_LOCATION","CHANNEL_3_BUFFER_SIZE","AUDIO_BUFFER_LOCATION","CHANNEL_4_BUFFER_SIZE","CARTRIDGE_RAM_LOCATION","AUDIO_BUFFER_SIZE","BOOT_ROM_LOCATION","CARTRIDGE_RAM_SIZE","CARTRIDGE_ROM_LOCATION","BOOT_ROM_SIZE","DEBUG_GAMEBOY_MEMORY_LOCATION","CARTRIDGE_ROM_SIZE","WASMBOY_MEMORY_SIZE","DEBUG_GAMEBOY_MEMORY_SIZE","WASMBOY_WASM_PAGES","Math","Config","setFlagBit","flagBit","flagValue","bitwiseOperand","Cpu","setZeroFlag$$1","value","setSubtractFlag","setHalfCarryFlag","setCarryFlag","getZeroFlag$$1","getCarryFlag$$1","checkAndSetEightBitHalfCarryFlag","amountToAdd","checkAndSetEightBitCarryFlag","checkAndSetSixteenBitFlagsAddOverflow","valueOne","valueTwo","useStackPointerBits","flagXor","result","WasmBoyGBColors","GreenColors","OrangeColors","BrownColors","InvertedColors","GrayscaleColors","PastelMixColors","DarkBrownColors","DarkGreenColors","DarkBlueColors","RedColors","BlueColors","YellowColors","Table00Entry08Colors","Table01Entry0BColors","Table01Entry10Colors","Table03Entry0AColors","Table05Entry00Colors","Table05Entry01Colors","Table05Entry02Colors","Table05Entry08Colors","Table05Entry09Colors","Table05Entry11Colors","Table05Entry14Colors","Table05Entry15Colors","Colors","setManualColorizationPalette","colorizationId","concatenateBytes","highByte","lowByte","splitHighByte","groupedByte","resetBitOnByte","bitPosition","byte","checkBitOnByte","Palette","getColorizedGbHexColorFromPalette","colorId","paletteMemoryLocation","color","eightBitLoadFromGBMemory","hexColor","getRgbColorFromPalette","paletteId","isSprite","paletteIndex","paletteHighByte","loadPaletteByteFromWasmMemory","paletteLowByte","getColorComponentFromRgb","colorRgb","paletteIndexByte","addPriorityforPixel","x","y","hasGbcBgPriority","bgPriorityByte","TileCache","drawPixelsFromLineOfTile","tileId","tileDataMemoryLocation","vramBankId","tileLineXStart","tileLineXEnd","tileLineY","outputLineX","outputLineY","outputWidth","wasmMemoryStart","shouldRepresentMonochromeColorByColorId","paletteLocation","bgMapAttributes","spriteAttributes","pixelsDrawn","tileDataAddress","getTileDataAddress","byteOneForLineOfTilePixels","loadFromVramBank","byteTwoForLineOfTilePixels","iteratedOutputX","pixelXInTile","paletteColorId","bgPalette","rgbColorPalette","red","green","blue","Graphics","shouldRepresentColorByColorId","rgbColor","pixelStart","gbcBgPriority","tileIdFromTileMap","isDutyCycleClockPositiveOrNegativeForWaveform","channelDuty","waveFormPositionOnDuty","Channel1","Channel1.updateNRx0","Channel1.updateNRx1","Channel1.updateNRx2","Channel1.updateNRx3","Channel1.updateNRx4","Channel1.saveState","WASMBOY_STATE_LOCATION","Channel1.loadState","loadBooleanDirectlyFromWasmMemory","Channel1.initialize","eightBitStoreIntoGBMemory","Channel1.getSampleFromCycleCounter","accumulatedCycles","Channel1.resetTimer","frequencyTimer","Channel1.getSample","numberOfCycles","overflowAmount","outputVolume","sample","Channel1.trigger","calculateSweepAndCheckOverflow","Channel1.willChannelUpdate","cycleCounter","Channel1.updateSweep","sweepCounter","Channel1.updateLength","lengthCounter","Channel1.updateEnvelope","envelopeCounter","volume","Channel1.setFrequency","frequency","passedFrequencyHighBits","passedFrequencyLowBits","newRegister4","newFrequency","getNewFrequencyFromSweep","oldFrequency","Channel2","Channel2.updateNRx1","Channel2.updateNRx2","Channel2.updateNRx3","Channel2.updateNRx4","Channel2.saveState","Channel2.loadState","Channel2.initialize","Channel2.getSampleFromCycleCounter","Channel2.resetTimer","Channel2.getSample","Channel2.trigger","Channel2.willChannelUpdate","Channel2.updateLength","Channel2.updateEnvelope","Channel2.setFrequency","Channel3","Channel3.updateNRx0","Channel3.updateNRx1","Channel3.updateNRx2","Channel3.updateNRx3","Channel3.updateNRx4","Channel3.saveState","Channel3.loadState","Channel3.initialize","Channel3.getSampleFromCycleCounter","Channel3.resetTimer","Channel3.getSample","volumeCode","waveTablePosition","Channel3.trigger","Channel3.willChannelUpdate","Channel3.updateLength","Channel4","Channel4.updateNRx1","Channel4.updateNRx2","Channel4.updateNRx3","divisorCode","Channel4.updateNRx4","Channel4.saveState","Channel4.loadState","Channel4.initialize","Channel4.getSampleFromCycleCounter","Channel4.getSample","linearFeedbackShiftRegister","xorLfsrBitZeroOne","Channel4.trigger","Channel4.willChannelUpdate","Channel4.getNoiseChannelFrequencyPeriod","Channel4.updateLength","Channel4.updateEnvelope","SoundAccumulator","didChannelDacChange","channelNumber","isDacEnabled","channel1EnabledChanged","channel2EnabledChanged","channel3EnabledChanged","channel4EnabledChanged","Sound","Sound.batchProcessCycles","Sound.updateNR50","Sound.updateNR51","Sound.updateNR52","Sound.maxFrameSequenceCycles","Sound.maxDownSampleCycles","Sound.saveState","Sound.loadState","clearAudioBuffer","batchProcessAudio","batchProcessCycles","currentCycles","updateSound","maxFrameSequenceCycles","frameSequenceCycleCounter","frameSequencer","frameSequencerUpdated","channel1WillUpdate","channel2WillUpdate","channel3WillUpdate","channel4WillUpdate","downSampleCycleCounter","maxDownSampleCycles","mixChannelSamples","setLeftAndRightOutputForAudioQueue","audioQueueIndex","channel1Sample","channel2Sample","channel3Sample","channel4Sample","mixedSample","leftChannelSampleUnsignedByte","getNumberOfSamplesInAudioBuffer","leftChannelSample","rightChannelSample","getSampleAsUnsignedByte","rightChannelSampleUnsignedByte","mixerVolume","convertedSample","precision","leftVolume","rightVolume","bufferLocation","audioQueueOffset","Interrupts","Interrupts.updateInterruptEnabled","Interrupts.updateInterruptRequested","Interrupts.areInterruptsPending","Interrupts.saveState","Interrupts.loadState","_handleInterrupt","setInterrupts","interruptRequest","offset","_requestInterrupt","Timers","Timers.batchProcessCycles","Timers.updateDividerRegister","oldDividerRegister","_checkDividerRegisterFallingEdgeDetector","_incrementTimerCounter","Timers.updateTimerCounter","Timers.updateTimerModulo","Timers.updateTimerControl","oldTimerEnabled","newTimerInputClock","oldTimerCounterMaskBit","_getTimerCounterMaskBit","newTimerCounterMaskBit","dividerRegister","Timers.saveState","Timers.loadState","updateTimers","cyclesIncreased","curDividerRegister","timerCounterWasReset","counter","newDividerRegister","timerCounterMaskBit","timerInputClock","Serial","Serial.updateTransferControl","Joypad","Joypad.updateJoypad","Joypad.saveState","Joypad.loadState","_pressJoypadButton","buttonId","isButtonStateChanging","_getJoypadButtonStateFromButtonId","_setJoypadButtonStateFromButtonId","isDpadTypeButton","shouldRequestInterrupt","isPressed","hdmaTransfer","hdmaSource","hdmaDestination","transferLength","i","sourceByte","eightBitLoadFromGBMemoryWithTraps","hdmaDestinationWithWrapping","eightBitStoreIntoGBMemoryWithTraps","Memory","checkWriteTraps","videoRamLocation","spriteInformationTableLocation","isMBC1","isMBC2","romEnableByte","isMBC5","currentRomBank","romBankLowerBits","ramBankBits","Lcd","SoundRegisterWriteTraps","sourceAddress","spriteInformationByte","hdmaTriggerByte","hdmaSourceHigh","hdmaSourceLow","hdmaDestinationHigh","hdmaDestinationLow","hblankHdmaSource","memoryLocationSpritePaletteData","getWasmBoyOffsetFromGameBoyOffset","gameboyOffset","VIDEO_RAM_LOCATION","wramBankId","WORK_RAM_LOCATION","Breakpoints","Lcd.updateLcdStatus","currentLcdStatus","Lcd.updateLcdControl","wasLcdEnabled","resetLcd","shouldBlankScreen","lcdStatus","checkCoincidence","lcdMode","drawBackgroundWindowScanline","scanlineRegister","tileMapMemoryLocation","pixelYPositionInMap","iStart","xOffset","tileYPositionInMap","pixelXPositionInMap","tileMapAddress","usedTileCache","nextXIndexToPerformCacheCheck","yPixel","xPixel","wasLastTileHorizontallyFlipped","isCurrentTileHorizontallyFlipped","tileCacheIndex","xPos","previousXPixel","previousTilePixelLocation","setPixelOnFrame","pixelPriority","xOffsetTileWidthRemainder","tileXStart","tileXEnd","pixelYInTile","Graphics.batchProcessCycles","Graphics.MAX_CYCLES_PER_SCANLINE","Graphics.MIN_CYCLES_SPRITES_LCD_MODE","Graphics.MIN_CYCLES_TRANSFER_DATA_LCD_MODE","Graphics.saveState","Graphics.loadState","updateGraphics","graphicsDisableScanlineRendering","_drawScanline","newLcdMode","scanlineCycleCounter","MIN_CYCLES_SPRITES_LCD_MODE","bytesToTransfer","hblankHdmaTransferLengthRemaining","memoryLocationHdmaTrigger","windowX","windowY","param","spriteTableIndex","index","spriteYPosition","spriteXPosition","spriteTileId","spriteHeight","useLargerSprites","isSpritePriorityBehindWindowAndBackground","flipSpriteY","flipSpriteX","currentSpriteLine","spriteTileAddressStart","spriteDataByteOneForLineOfTilePixels","spriteTileAddress","spriteDataByteTwoForLineOfTilePixels","tilePixel","spritePixelXInTile","spriteColorId","spriteXPixelLocationInCameraView","shouldShowFromLcdcPriority","shouldHideFromOamPriority","shouldHideFromBgPriority","bgColorFromPriorityByte","spritePaletteLocation","checkReadTraps","response","currentSpeedSwitchRegister","SoundRegisterReadTraps","upperDividerRegisterBits","joypadRegister","readTrapResult","Memory.saveState","Memory.loadState","Cpu.CLOCK_SPEED","Cpu.MAX_CYCLES_PER_FRAME","Cpu.enableHalt","Cpu.exitHaltAndStop","Cpu.isHalted","Cpu.saveState","Cpu.loadState","addARegister","register","registerA","addAThroughCarryRegister","overflowedResult","subARegister","negativeRegister","subAThroughCarryRegister","andARegister","xorARegister","orARegister","cpARegister","testBitOnRegister","setBitOnRegister","bitValue","setByte","relativeJump","programCounter","executeOpcode$$1","opcode","handleOpcode0x","handleOpcode1x","handleOpcode2x","handleOpcode3x","handleOpcode4x","handleOpcode5x","handleOpcode6x","handleOpcode7x","handleOpcode8x","handleOpcode9x","handleOpcodeAx","handleOpcodeBx","handleOpcodeCx","handleOpcodeDx","handleOpcodeEx","handleOpcodeFx","eightBitLoadSyncCycles","syncCycles","eightBitStoreSyncCycles","sixteenBitLoadSyncCycles","lowByteReadTrapResult","nextOffset","highByteReadTrapResult","sixteenBitStoreSyncCycles","getDataByteOne","getConcatenatedDataByte","getDataByteTwo","concatenatedDataByte","registerBC3","registerB","registerHL","registerBC9","registerBCB","registerC","speedSwitch","registerDE3","registerD","hasHighbit","registerDE9","registerDEA","registerDEB","registerE","hasLowBit","sixteenBitDataByte","registerHL2","registerHL3","registerH","adjustment","adjustedRegister","registerHL9","registerHLA","registerHLB","registerL","registerHL4","valueAtHL4","incrementer","registerHL5","valueAtHL5","valueAtHL6","valueAtHLE","stackPointer","registerBC1","handledOpcode","instructionRegisterValue","instructionRegisterResult","registerNumber","cbOpcode","opcodeHighNibble","hasLowbit","registerDE1","largeDataByteOne","registerHL1","signedDataByteOne","registerAF1","Cycles","oldCycles","curCycles","maskBit","newCycles","memoryLocationSerialTransferData","transferData","numberOfBitsTransferred","memoryLocationSerialTransferControl","transferControl","cycles","Execute","executeFrame","executeUntilCondition","checkMaxCyclesPerFrame","maxAudioBuffer","audioBufferSize","errorCondition","frameCondition","audioBufferCondition","executeStep","hasStarted","haltBugOpcode","haltBugCycles","wasInterruptHandled","interuptHandlerCycles","interruptCycles","esteps","steps","config","enableBootRom","useGbcWhenAvailable","audioBatchProcessing","graphicsBatchProcessing","timersBatchProcessing","audioAccumulateSamples","tileRendering","tileCaching","enableAudioDebugging","gbcType","cartridgeType","titleChecksum","hasCoreStarted","saveState","loadState","isGBC","getStepsPerStepSet","getStepSets","getSteps","executeMultipleFrames","numberOfFrames","frameResponse","framesRun","executeFrameAndCheckAudio","getCyclesPerCycleSet","getCycleSets","getCycles","setJoypadState","up","right","down","left","a","b","select","start","WASMBOY_MEMORY_LOCATION","ASSEMBLYSCRIPT_MEMORY_LOCATION","ASSEMBLYSCRIPT_MEMORY_SIZE","WASMBOY_STATE_SIZE","VIDEO_RAM_SIZE","WORK_RAM_SIZE","OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE","setProgramCounterBreakpoint","breakpoint","resetProgramCounterBreakpoint","setReadGbMemoryBreakpoint","resetReadGbMemoryBreakpoint","setWriteGbMemoryBreakpoint","resetWriteGbMemoryBreakpoint","getRegisterA","getRegisterB","getRegisterC","getRegisterD","getRegisterE","getRegisterH","getRegisterL","getRegisterF","getProgramCounter","getStackPointer","getOpcodeAtProgramCounter","getLY","drawBackgroundMapToWasmMemory","showColor","drawTileDataToWasmMemory","tileDataMapGridY","tileDataMapGridX","spriteRow","spriteColumn","currentSpriteAttributes","spriteVramBankId","foundTileMapAddress","drawOamToWasmMemory","tilesToDraw","getDIV","getTIMA","getTMA","getTAC","updateDebugGBMemory","getWasmBoyTsCore","instance","exports","WasmBoyCore","byteMemory","type"],"mappings":"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"}