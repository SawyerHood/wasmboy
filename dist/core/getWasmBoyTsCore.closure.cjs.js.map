{"version":3,"file":"getWasmBoyTsCore.closure.cjs.js","sources":["core.esm.js","../../core/portable/getTsCore.js"],"sourcesContent":["// Banner placed by rollup to mock out some items on our esm build\n// This is useful for things like wasmmemory\n\nconst wasmboyMemorySize = 0x8b0000;\n\n// Simply initialized to the size we need\nconst wasmByteMemory = new Uint8ClampedArray(wasmboyMemorySize);\n\n// Memory mock\nexport const memory = {\n  size: () => {\n    return wasmboyMemorySize;\n  },\n  grow: () => {},\n  wasmByteMemory: wasmByteMemory\n};\n\nconst load = offset => {\n  return wasmByteMemory[offset];\n};\n\nconst store = (offset, value) => {\n  wasmByteMemory[offset] = value;\n};\n\nconst abs = value => {\n  return Math.abs(value);\n};\n\nconst ceil = value => {\n  return Math.ceil(value);\n};\n\n// Constants that will be shared by the wasm core of the emulator\n// And libraries built around the wasm (such as the official JS), or @CryZe wasmboy-rs\n// ----------------------------------\n// Wasmboy Memory Map\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// ----------------------------------\n// AssemblyScript\nvar ASSEMBLYSCRIPT_MEMORY_LOCATION = 0x000000;\nvar ASSEMBLYSCRIPT_MEMORY_SIZE = 0x000400;\n// WasmBoy States\nvar WASMBOY_STATE_LOCATION = ASSEMBLYSCRIPT_MEMORY_LOCATION + ASSEMBLYSCRIPT_MEMORY_SIZE;\nvar WASMBOY_STATE_SIZE = 0x000400;\n// Gameboy Internal Memory\nvar VIDEO_RAM_LOCATION = WASMBOY_STATE_LOCATION + WASMBOY_STATE_SIZE;\nvar VIDEO_RAM_SIZE = 0x004000;\nvar WORK_RAM_LOCATION = VIDEO_RAM_LOCATION + VIDEO_RAM_SIZE;\nvar WORK_RAM_SIZE = 0x008000;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION = WORK_RAM_LOCATION + WORK_RAM_SIZE;\nvar OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE = 0x004000;\n// General Gameboy Internal Memory\nvar GAMEBOY_INTERNAL_MEMORY_LOCATION = VIDEO_RAM_LOCATION;\nvar GAMEBOY_INTERNAL_MEMORY_SIZE = OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION - VIDEO_RAM_LOCATION + OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE;\n// Graphics Output\nvar GBC_PALETTE_LOCATION = OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION + OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE;\nvar GBC_PALETTE_SIZE = 0x000080;\nvar BG_PRIORITY_MAP_LOCATION = GBC_PALETTE_LOCATION + GBC_PALETTE_SIZE;\nvar BG_PRIORITY_MAP_SIZE = 0x005c00;\nvar FRAME_LOCATION = BG_PRIORITY_MAP_LOCATION + BG_PRIORITY_MAP_SIZE;\nvar FRAME_SIZE = 0x016c00;\nvar BACKGROUND_MAP_LOCATION = FRAME_LOCATION + FRAME_SIZE;\nvar BACKGROUND_MAP_SIZE = 0x030000;\nvar TILE_DATA_LOCATION = BACKGROUND_MAP_LOCATION + BACKGROUND_MAP_SIZE;\nvar TILE_DATA_SIZE = 0x024000;\nvar OAM_TILES_LOCATION = TILE_DATA_LOCATION + TILE_DATA_SIZE;\nvar OAM_TILES_SIZE = 0x003c00;\n// General Graphics Output\nvar GRAPHICS_OUTPUT_LOCATION = GBC_PALETTE_LOCATION;\nvar GRAPHICS_OUTPUT_SIZE = OAM_TILES_LOCATION - GBC_PALETTE_LOCATION + OAM_TILES_SIZE;\n// Audio Output\nvar CHANNEL_1_BUFFER_LOCATION = OAM_TILES_LOCATION + OAM_TILES_SIZE;\nvar CHANNEL_1_BUFFER_SIZE = 0x020000;\nvar CHANNEL_2_BUFFER_LOCATION = CHANNEL_1_BUFFER_LOCATION + CHANNEL_1_BUFFER_SIZE;\nvar CHANNEL_2_BUFFER_SIZE = 0x020000;\nvar CHANNEL_3_BUFFER_LOCATION = CHANNEL_2_BUFFER_LOCATION + CHANNEL_2_BUFFER_SIZE;\nvar CHANNEL_3_BUFFER_SIZE = 0x020000;\nvar CHANNEL_4_BUFFER_LOCATION = CHANNEL_3_BUFFER_LOCATION + CHANNEL_3_BUFFER_SIZE;\nvar CHANNEL_4_BUFFER_SIZE = 0x020000;\nvar AUDIO_BUFFER_LOCATION = CHANNEL_4_BUFFER_LOCATION + CHANNEL_4_BUFFER_SIZE;\nvar AUDIO_BUFFER_SIZE = 0x020000;\n// Catridge Ram\nvar CARTRIDGE_RAM_LOCATION = AUDIO_BUFFER_LOCATION + AUDIO_BUFFER_SIZE;\nvar CARTRIDGE_RAM_SIZE = 0x020000;\n// Boot ROM\n// http://gbdev.gg8.se/files/roms/bootroms/\n// Largest Boot rom is GBC, at 2.5KB\nvar BOOT_ROM_LOCATION = CARTRIDGE_RAM_LOCATION + CARTRIDGE_RAM_SIZE;\nvar BOOT_ROM_SIZE = 0x000a00;\n// Cartridge ROM\nvar CARTRIDGE_ROM_LOCATION = BOOT_ROM_LOCATION + BOOT_ROM_SIZE;\nvar CARTRIDGE_ROM_SIZE = 0x7e0400;\n// Debug Memory\nvar DEBUG_GAMEBOY_MEMORY_LOCATION = CARTRIDGE_ROM_LOCATION + CARTRIDGE_ROM_SIZE;\nvar DEBUG_GAMEBOY_MEMORY_SIZE = 0xffff;\n// Final General Size\nvar WASMBOY_MEMORY_LOCATION = 0x000000;\nvar WASMBOY_MEMORY_SIZE = DEBUG_GAMEBOY_MEMORY_LOCATION + DEBUG_GAMEBOY_MEMORY_SIZE + 1;\nvar WASMBOY_WASM_PAGES = ceil(WASMBOY_MEMORY_SIZE / 1024 / 64) + 1;\n\nvar Config = /** @class */ (function () {\n    function Config() {\n    }\n    // Boot Rom\n    Config.enableBootRom = false;\n    // GBC Options\n    Config.useGbcWhenAvailable = true;\n    // Batch Processing\n    Config.audioBatchProcessing = false;\n    Config.graphicsBatchProcessing = false;\n    Config.timersBatchProcessing = false;\n    // Scanline Rendering\n    Config.graphicsDisableScanlineRendering = false;\n    // Acumulate Sound Samples\n    Config.audioAccumulateSamples = false;\n    // Tile Rednering\n    Config.tileRendering = false;\n    Config.tileCaching = false;\n    // Audio Debugging\n    Config.enableAudioDebugging = false;\n    return Config;\n}());\n\n// Portable Code for JS Wasm Benchmarking\n// https://github.com/AssemblyScript/assemblyscript/wiki/Writing-portable-code\n// https://github.com/AssemblyScript/assemblyscript/blob/master/std/portable/index.js\nfunction u8Portable(param) {\n    return param & 0xff;\n}\nfunction u16Portable(param) {\n    return param & 0xffff;\n}\nfunction i8Portable(param) {\n    return (param << 24) >> 24;\n}\nfunction i32Portable(param) {\n    return param | 0;\n}\n\n// Set flag bit on on register F. For instance set zero flag to zero -> (7, 0)\nfunction setFlagBit(flagBit, flagValue) {\n    var bitwiseOperand = u8Portable(1 << flagBit);\n    if (flagValue > 0) {\n        Cpu.registerF = Cpu.registerF | bitwiseOperand;\n    }\n    else {\n        // XOR out the two ones\n        bitwiseOperand = 0xff ^ bitwiseOperand;\n        Cpu.registerF = Cpu.registerF & bitwiseOperand;\n    }\n    return Cpu.registerF;\n}\n// Overload the set flag bit for ease of use\nfunction setZeroFlag$$1(value) {\n    setFlagBit(7, value);\n}\nfunction setSubtractFlag(value) {\n    setFlagBit(6, value);\n}\nfunction setHalfCarryFlag(value) {\n    setFlagBit(5, value);\n}\nfunction setCarryFlag(value) {\n    setFlagBit(4, value);\n}\n// Getters for flags\nfunction getZeroFlag$$1() {\n    return (Cpu.registerF >> 7) & 0x01;\n}\nfunction getSubtractFlag() {\n    return (Cpu.registerF >> 6) & 0x01;\n}\nfunction getHalfCarryFlag() {\n    return (Cpu.registerF >> 5) & 0x01;\n}\nfunction getCarryFlag$$1() {\n    return (Cpu.registerF >> 4) & 0x01;\n}\n// Must be run before the register actually performs the add\n// amountToAdd i16, since max number can be an u8\nfunction checkAndSetEightBitHalfCarryFlag(value, amountToAdd) {\n    if (amountToAdd >= 0) {\n        // https://robdor.com/2016/08/10/gameboy-emulator-half-carry-flag/\n        var result = u8Portable((value & 0x0f) + (amountToAdd & 0x0f)) & 0x10;\n        setHalfCarryFlag((result !== 0x00));\n    }\n    else {\n        // From: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n        // CTRL+F \"subBytes(a, b byte)\"\n        setHalfCarryFlag(((abs(amountToAdd) & 0x0f) > (value & 0x0f)));\n    }\n}\nfunction checkAndSetEightBitCarryFlag(value, amountToAdd) {\n    if (amountToAdd >= 0) {\n        var result = u8Portable(value + amountToAdd);\n        setCarryFlag((value > result));\n    }\n    else {\n        setCarryFlag((abs(amountToAdd) > value));\n    }\n}\n// Function to handle 16 bit addition overflow, and set the carry flags accordingly\n// i32 on valueTwo to support passing signed immedaite values\nfunction checkAndSetSixteenBitFlagsAddOverflow(valueOne, valueTwo, useStackPointerBits) {\n    // need to differentiate between HL and SP\n    // HL carries are at 11 and 15, SP carries are at 3 and 7 :p\n    if (useStackPointerBits) {\n        // Logic from : https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n        // CTRL+F add_sp_n\n        // using the stack pointer bits means we can safely assume the value is signed\n        var signedValueOne = valueOne;\n        var result = signedValueOne + valueTwo;\n        var flagXor = signedValueOne ^ valueTwo ^ result;\n        setHalfCarryFlag(((flagXor & 0x10) !== 0));\n        setCarryFlag(((flagXor & 0x100) !== 0));\n    }\n    else {\n        // Logic from: https://github.com/djhworld/gomeboycolor/blob/master/src/cpu/index.go\n        // CTRL+F addWords\n        // Value two is not signed\n        var result = u16Portable(valueOne + valueTwo);\n        // Check the carry flag by allowing the overflow\n        setCarryFlag((result < valueOne));\n        // To check for half carry flag (bit 15), by XOR'ing valyes, and and'ing the bit in question\n        var halfCarryXor = valueOne ^ valueTwo ^ result;\n        var halfCarryAnd = u16Portable(halfCarryXor & 0x1000);\n        setHalfCarryFlag((halfCarryAnd !== 0x00));\n    }\n}\n\n// File for all of the colors for different GB Palletes\n// https://i.imgur.com/HupBY.png\n// https://www.libretro.com/index.php/gambatte-progress-report/\n// https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM\n// Our default wasmboy gb colors\nvar WasmBoyGBColors = /** @class */ (function () {\n    function WasmBoyGBColors() {\n    }\n    //Bg\n    WasmBoyGBColors.bgWhite = 0xf2f2f2;\n    WasmBoyGBColors.bgLightGrey = 0xa0a0a0;\n    WasmBoyGBColors.bgDarkGrey = 0x585858;\n    WasmBoyGBColors.bgBlack = 0x080808;\n    // Obj 0\n    WasmBoyGBColors.obj0White = 0xf2f2f2;\n    WasmBoyGBColors.obj0LightGrey = 0xa0a0a0;\n    WasmBoyGBColors.obj0DarkGrey = 0x585858;\n    WasmBoyGBColors.obj0Black = 0x080808;\n    // Obj1\n    WasmBoyGBColors.obj1White = 0xf2f2f2;\n    WasmBoyGBColors.obj1LightGrey = 0xa0a0a0;\n    WasmBoyGBColors.obj1DarkGrey = 0x585858;\n    WasmBoyGBColors.obj1Black = 0x080808;\n    return WasmBoyGBColors;\n}());\n// Action Button: Right\nvar GreenColors = /** @class */ (function () {\n    function GreenColors() {\n    }\n    //Bg\n    GreenColors.bgWhite = 0xffffff;\n    GreenColors.bgLightGrey = 0x52ff00;\n    GreenColors.bgDarkGrey = 0xff4200;\n    GreenColors.bgBlack = 0x000000;\n    // Obj 0\n    GreenColors.obj0White = 0xffffff;\n    GreenColors.obj0LightGrey = 0x52ff00;\n    GreenColors.obj0DarkGrey = 0xff4200;\n    GreenColors.obj0Black = 0x000000;\n    // Obj1\n    GreenColors.obj1White = 0xffffff;\n    GreenColors.obj1LightGrey = 0x52ff00;\n    GreenColors.obj1DarkGrey = 0xff4200;\n    GreenColors.obj1Black = 0x000000;\n    return GreenColors;\n}());\n// Action Button: A + Down\nvar OrangeColors = /** @class */ (function () {\n    function OrangeColors() {\n    }\n    //Bg\n    OrangeColors.bgWhite = 0xffffff;\n    OrangeColors.bgLightGrey = 0xffff00;\n    OrangeColors.bgDarkGrey = 0xff0000;\n    OrangeColors.bgBlack = 0x000000;\n    // Obj 0\n    OrangeColors.obj0White = 0xffffff;\n    OrangeColors.obj0LightGrey = 0xffff00;\n    OrangeColors.obj0DarkGrey = 0xff0000;\n    OrangeColors.obj0Black = 0x000000;\n    // Obj1\n    OrangeColors.obj1White = 0xffffff;\n    OrangeColors.obj1LightGrey = 0xffff00;\n    OrangeColors.obj1DarkGrey = 0xff0000;\n    OrangeColors.obj1Black = 0x000000;\n    return OrangeColors;\n}());\n// Action Button: Up\nvar BrownColors = /** @class */ (function () {\n    function BrownColors() {\n    }\n    //Bg\n    BrownColors.bgWhite = 0xffffff;\n    BrownColors.bgLightGrey = 0xffad63;\n    BrownColors.bgDarkGrey = 0x843100;\n    BrownColors.bgBlack = 0x000000;\n    // Obj 0\n    BrownColors.obj0White = 0xffffff;\n    BrownColors.obj0LightGrey = 0xffad63;\n    BrownColors.obj0DarkGrey = 0x843100;\n    BrownColors.obj0Black = 0x000000;\n    // Obj1\n    BrownColors.obj1White = 0xffffff;\n    BrownColors.obj1LightGrey = 0xffad63;\n    BrownColors.obj1DarkGrey = 0x843100;\n    BrownColors.obj1Black = 0x000000;\n    return BrownColors;\n}());\n// Action Button: B + Right\nvar InvertedColors = /** @class */ (function () {\n    function InvertedColors() {\n    }\n    //Bg\n    InvertedColors.bgWhite = 0x000000;\n    InvertedColors.bgLightGrey = 0x008484;\n    InvertedColors.bgDarkGrey = 0xffde00;\n    InvertedColors.bgBlack = 0xffffff;\n    // Obj 0\n    InvertedColors.obj0White = 0x000000;\n    InvertedColors.obj0LightGrey = 0x008484;\n    InvertedColors.obj0DarkGrey = 0xffde00;\n    InvertedColors.obj0Black = 0xffffff;\n    // Obj1\n    InvertedColors.obj1White = 0x000000;\n    InvertedColors.obj1LightGrey = 0x008484;\n    InvertedColors.obj1DarkGrey = 0xffde00;\n    InvertedColors.obj1Black = 0xffffff;\n    return InvertedColors;\n}());\n// Action Button: B + Left\nvar GrayscaleColors = /** @class */ (function () {\n    function GrayscaleColors() {\n    }\n    //Bg\n    GrayscaleColors.bgWhite = 0xffffff;\n    GrayscaleColors.bgLightGrey = 0xa5a5a5;\n    GrayscaleColors.bgDarkGrey = 0x525252;\n    GrayscaleColors.bgBlack = 0x000000;\n    // Obj 0\n    GrayscaleColors.obj0White = 0xffffff;\n    GrayscaleColors.obj0LightGrey = 0xa5a5a5;\n    GrayscaleColors.obj0DarkGrey = 0x525252;\n    GrayscaleColors.obj0Black = 0x000000;\n    // Obj1\n    GrayscaleColors.obj1White = 0xffffff;\n    GrayscaleColors.obj1LightGrey = 0xa5a5a5;\n    GrayscaleColors.obj1DarkGrey = 0x525252;\n    GrayscaleColors.obj1Black = 0x000000;\n    return GrayscaleColors;\n}());\n// Action Button: Down\nvar PastelMixColors = /** @class */ (function () {\n    function PastelMixColors() {\n    }\n    //Bg\n    PastelMixColors.bgWhite = 0xffffa5;\n    PastelMixColors.bgLightGrey = 0xff9494;\n    PastelMixColors.bgDarkGrey = 0x9494ff;\n    PastelMixColors.bgBlack = 0x000000;\n    // Obj 0\n    PastelMixColors.obj0White = 0xffffa5;\n    PastelMixColors.obj0LightGrey = 0xff9494;\n    PastelMixColors.obj0DarkGrey = 0x9494ff;\n    PastelMixColors.obj0Black = 0x000000;\n    // Obj1\n    PastelMixColors.obj1White = 0xffffa5;\n    PastelMixColors.obj1LightGrey = 0xff9494;\n    PastelMixColors.obj1DarkGrey = 0x9494ff;\n    PastelMixColors.obj1Black = 0x000000;\n    return PastelMixColors;\n}());\n// Action Button: B + Up\nvar DarkBrownColors = /** @class */ (function () {\n    function DarkBrownColors() {\n    }\n    //Bg\n    DarkBrownColors.bgWhite = 0xffe6c5;\n    DarkBrownColors.bgLightGrey = 0xce9c84;\n    DarkBrownColors.bgDarkGrey = 0x846b29;\n    DarkBrownColors.bgBlack = 0x5a3108;\n    // Obj 0\n    DarkBrownColors.obj0White = 0xffffff;\n    DarkBrownColors.obj0LightGrey = 0xffad63;\n    DarkBrownColors.obj0DarkGrey = 0x843100;\n    DarkBrownColors.obj0Black = 0x000000;\n    // Obj1\n    DarkBrownColors.obj1White = 0xffffff;\n    DarkBrownColors.obj1LightGrey = 0xffad63;\n    DarkBrownColors.obj1DarkGrey = 0x843100;\n    DarkBrownColors.obj1Black = 0x000000;\n    return DarkBrownColors;\n}());\n// Action Button: A + Right\nvar DarkGreenColors = /** @class */ (function () {\n    function DarkGreenColors() {\n    }\n    //Bg\n    DarkGreenColors.bgWhite = 0xffffff;\n    DarkGreenColors.bgLightGrey = 0x7bff31;\n    DarkGreenColors.bgDarkGrey = 0x0063c5;\n    DarkGreenColors.bgBlack = 0x000000;\n    // Obj 0\n    DarkGreenColors.obj0White = 0xffffff;\n    DarkGreenColors.obj0LightGrey = 0xff8484;\n    DarkGreenColors.obj0DarkGrey = 0x943a3a;\n    DarkGreenColors.obj0Black = 0x000000;\n    // Obj1\n    DarkGreenColors.obj1White = 0xffffff;\n    DarkGreenColors.obj1LightGrey = 0xff8484;\n    DarkGreenColors.obj1DarkGrey = 0x943a3a;\n    DarkGreenColors.obj1Black = 0x000000;\n    return DarkGreenColors;\n}());\n// Action Button: A + Left\nvar DarkBlueColors = /** @class */ (function () {\n    function DarkBlueColors() {\n    }\n    //Bg\n    DarkBlueColors.bgWhite = 0xffffff;\n    DarkBlueColors.bgLightGrey = 0x8c8cde;\n    DarkBlueColors.bgDarkGrey = 0x52528c;\n    DarkBlueColors.bgBlack = 0x000000;\n    // Obj 0\n    DarkBlueColors.obj0White = 0xffffff;\n    DarkBlueColors.obj0LightGrey = 0xff8484;\n    DarkBlueColors.obj0DarkGrey = 0x943a3a;\n    DarkBlueColors.obj0Black = 0x000000;\n    // Obj1\n    DarkBlueColors.obj1White = 0xffffff;\n    DarkBlueColors.obj1LightGrey = 0xffad63;\n    DarkBlueColors.obj1DarkGrey = 0x843100;\n    DarkBlueColors.obj1Black = 0x000000;\n    return DarkBlueColors;\n}());\n// Action Button: A + Up\nvar RedColors = /** @class */ (function () {\n    function RedColors() {\n    }\n    //Bg\n    RedColors.bgWhite = 0xffffff;\n    RedColors.bgLightGrey = 0xff8484;\n    RedColors.bgDarkGrey = 0x943a3a;\n    RedColors.bgBlack = 0x000000;\n    // Obj 0\n    RedColors.obj0White = 0xffffff;\n    RedColors.obj0LightGrey = 0x7bff31;\n    RedColors.obj0DarkGrey = 0x008400;\n    RedColors.obj0Black = 0x000000;\n    // Obj1\n    RedColors.obj1White = 0xffffff;\n    RedColors.obj1LightGrey = 0x63a5ff;\n    RedColors.obj1DarkGrey = 0x0000ff;\n    RedColors.obj1Black = 0x000000;\n    return RedColors;\n}());\n// Action Button: Left\nvar BlueColors = /** @class */ (function () {\n    function BlueColors() {\n    }\n    //Bg\n    BlueColors.bgWhite = 0xffffff;\n    BlueColors.bgLightGrey = 0x63a5ff;\n    BlueColors.bgDarkGrey = 0x0000ff;\n    BlueColors.bgBlack = 0x000000;\n    // Obj 0\n    BlueColors.obj0White = 0xffffff;\n    BlueColors.obj0LightGrey = 0xff8484;\n    BlueColors.obj0DarkGrey = 0x943a3a;\n    BlueColors.obj0Black = 0x000000;\n    // Obj1\n    BlueColors.obj1White = 0xffffff;\n    BlueColors.obj1LightGrey = 0x7bff31;\n    BlueColors.obj1DarkGrey = 0x008400;\n    BlueColors.obj1Black = 0x000000;\n    return BlueColors;\n}());\n// Action Button: B + Down\nvar YellowColors = /** @class */ (function () {\n    function YellowColors() {\n    }\n    //Bg\n    YellowColors.bgWhite = 0xffffff;\n    YellowColors.bgLightGrey = 0xffff00;\n    YellowColors.bgDarkGrey = 0x7b4a00;\n    YellowColors.bgBlack = 0x000000;\n    // Obj 0\n    YellowColors.obj0White = 0xffffff;\n    YellowColors.obj0LightGrey = 0x63a5ff;\n    YellowColors.obj0DarkGrey = 0x0000ff;\n    YellowColors.obj0Black = 0x000000;\n    // Obj1\n    YellowColors.obj1White = 0xffffff;\n    YellowColors.obj1LightGrey = 0x7bff31;\n    YellowColors.obj1DarkGrey = 0x008400;\n    YellowColors.obj1Black = 0x000000;\n    return YellowColors;\n}());\n// Assigned Color Palettes\n// Alleyway\nvar Table00Entry08Colors = /** @class */ (function () {\n    function Table00Entry08Colors() {\n    }\n    //Bg\n    Table00Entry08Colors.bgWhite = 0xa59cff;\n    Table00Entry08Colors.bgLightGrey = 0xffff00;\n    Table00Entry08Colors.bgDarkGrey = 0x006300;\n    Table00Entry08Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table00Entry08Colors.obj0White = 0xa59cff;\n    Table00Entry08Colors.obj0LightGrey = 0xffff00;\n    Table00Entry08Colors.obj0DarkGrey = 0x006300;\n    Table00Entry08Colors.obj0Black = 0x000000;\n    // Obj1\n    Table00Entry08Colors.obj1White = 0xa59cff;\n    Table00Entry08Colors.obj1LightGrey = 0xffff00;\n    Table00Entry08Colors.obj1DarkGrey = 0x006300;\n    Table00Entry08Colors.obj1Black = 0x000000;\n    return Table00Entry08Colors;\n}());\n// Pokemon Blue\nvar Table01Entry0BColors = /** @class */ (function () {\n    function Table01Entry0BColors() {\n    }\n    //Bg\n    Table01Entry0BColors.bgWhite = 0xffffff;\n    Table01Entry0BColors.bgLightGrey = 0x63a5ff;\n    Table01Entry0BColors.bgDarkGrey = 0x0000ff;\n    Table01Entry0BColors.bgBlack = 0x000000;\n    // Obj 0\n    Table01Entry0BColors.obj0White = 0xffffff;\n    Table01Entry0BColors.obj0LightGrey = 0xff8484;\n    Table01Entry0BColors.obj0DarkGrey = 0x943a3a;\n    Table01Entry0BColors.obj0Black = 0x000000;\n    // Obj1\n    Table01Entry0BColors.obj1White = 0xffffff;\n    Table01Entry0BColors.obj1LightGrey = 0x63a5ff;\n    Table01Entry0BColors.obj1DarkGrey = 0x0000ff;\n    Table01Entry0BColors.obj1Black = 0x000000;\n    return Table01Entry0BColors;\n}());\n// Pokemon Red\nvar Table01Entry10Colors = /** @class */ (function () {\n    function Table01Entry10Colors() {\n    }\n    //Bg\n    Table01Entry10Colors.bgWhite = 0xffffff;\n    Table01Entry10Colors.bgLightGrey = 0xff8484;\n    Table01Entry10Colors.bgDarkGrey = 0x943a3a;\n    Table01Entry10Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table01Entry10Colors.obj0White = 0xffffff;\n    Table01Entry10Colors.obj0LightGrey = 0x7bff31;\n    Table01Entry10Colors.obj0DarkGrey = 0x008400;\n    Table01Entry10Colors.obj0Black = 0x000000;\n    // Obj1\n    Table01Entry10Colors.obj1White = 0xffffff;\n    Table01Entry10Colors.obj1LightGrey = 0xff8484;\n    Table01Entry10Colors.obj1DarkGrey = 0x943a3a;\n    Table01Entry10Colors.obj1Black = 0x000000;\n    return Table01Entry10Colors;\n}());\n// Super Mario Land\nvar Table03Entry0AColors = /** @class */ (function () {\n    function Table03Entry0AColors() {\n    }\n    //Bg\n    Table03Entry0AColors.bgWhite = 0xb5b5ff;\n    Table03Entry0AColors.bgLightGrey = 0xffff94;\n    Table03Entry0AColors.bgDarkGrey = 0xad5a42;\n    Table03Entry0AColors.bgBlack = 0x000000;\n    // Obj 0\n    Table03Entry0AColors.obj0White = 0x000000;\n    Table03Entry0AColors.obj0LightGrey = 0xffffff;\n    Table03Entry0AColors.obj0DarkGrey = 0xff8484;\n    Table03Entry0AColors.obj0Black = 0x943a3a;\n    // Obj1\n    Table03Entry0AColors.obj1White = 0x000000;\n    Table03Entry0AColors.obj1LightGrey = 0xffffff;\n    Table03Entry0AColors.obj1DarkGrey = 0xff8484;\n    Table03Entry0AColors.obj1Black = 0x943a3a;\n    return Table03Entry0AColors;\n}());\n// Super Mario Land 3 - WarioLand\nvar Table05Entry00Colors = /** @class */ (function () {\n    function Table05Entry00Colors() {\n    }\n    //Bg\n    Table05Entry00Colors.bgWhite = 0xffffff;\n    Table05Entry00Colors.bgLightGrey = 0xadad84;\n    Table05Entry00Colors.bgDarkGrey = 0x42737b;\n    Table05Entry00Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry00Colors.obj0White = 0xffffff;\n    Table05Entry00Colors.obj0LightGrey = 0xff7300;\n    Table05Entry00Colors.obj0DarkGrey = 0x944200;\n    Table05Entry00Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry00Colors.obj1White = 0xffffff;\n    Table05Entry00Colors.obj1LightGrey = 0x5abdff;\n    Table05Entry00Colors.obj1DarkGrey = 0xff0000;\n    Table05Entry00Colors.obj1Black = 0x0000ff;\n    return Table05Entry00Colors;\n}());\n// Donkey Kong\nvar Table05Entry01Colors = /** @class */ (function () {\n    function Table05Entry01Colors() {\n    }\n    //Bg\n    Table05Entry01Colors.bgWhite = 0xffff9c;\n    Table05Entry01Colors.bgLightGrey = 0x94b5ff;\n    Table05Entry01Colors.bgDarkGrey = 0x639473;\n    Table05Entry01Colors.bgBlack = 0x003a3a;\n    // Obj 0\n    Table05Entry01Colors.obj0White = 0xffc542;\n    Table05Entry01Colors.obj0LightGrey = 0xffd600;\n    Table05Entry01Colors.obj0DarkGrey = 0x943a00;\n    Table05Entry01Colors.obj0Black = 0x4a0000;\n    // Obj1\n    Table05Entry01Colors.obj1White = 0xffffff;\n    Table05Entry01Colors.obj1LightGrey = 0xff8484;\n    Table05Entry01Colors.obj1DarkGrey = 0x943a3a;\n    Table05Entry01Colors.obj1Black = 0x000000;\n    return Table05Entry01Colors;\n}());\n// Tennis\nvar Table05Entry02Colors = /** @class */ (function () {\n    function Table05Entry02Colors() {\n    }\n    //Bg\n    Table05Entry02Colors.bgWhite = 0x6bff00;\n    Table05Entry02Colors.bgLightGrey = 0xffffff;\n    Table05Entry02Colors.bgDarkGrey = 0xff524a;\n    Table05Entry02Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry02Colors.obj0White = 0xffffff;\n    Table05Entry02Colors.obj0LightGrey = 0xffffff;\n    Table05Entry02Colors.obj0DarkGrey = 0x63a5ff;\n    Table05Entry02Colors.obj0Black = 0x0000ff;\n    // Obj1\n    Table05Entry02Colors.obj1White = 0xffffff;\n    Table05Entry02Colors.obj1LightGrey = 0xffad63;\n    Table05Entry02Colors.obj1DarkGrey = 0x843100;\n    Table05Entry02Colors.obj1Black = 0x000000;\n    return Table05Entry02Colors;\n}());\n// Kirby's Dream Land\nvar Table05Entry08Colors = /** @class */ (function () {\n    function Table05Entry08Colors() {\n    }\n    //Bg\n    Table05Entry08Colors.bgWhite = 0xa59cff;\n    Table05Entry08Colors.bgLightGrey = 0xffff00;\n    Table05Entry08Colors.bgDarkGrey = 0x006300;\n    Table05Entry08Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry08Colors.obj0White = 0xff6352;\n    Table05Entry08Colors.obj0LightGrey = 0xd60000;\n    Table05Entry08Colors.obj0DarkGrey = 0x630000;\n    Table05Entry08Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry08Colors.obj1White = 0x0000ff;\n    Table05Entry08Colors.obj1LightGrey = 0xffffff;\n    Table05Entry08Colors.obj1DarkGrey = 0xffff7b;\n    Table05Entry08Colors.obj1Black = 0x0084ff;\n    return Table05Entry08Colors;\n}());\n// Super Mario Land 2 BAYYYBEEE\nvar Table05Entry09Colors = /** @class */ (function () {\n    function Table05Entry09Colors() {\n    }\n    //Bg\n    Table05Entry09Colors.bgWhite = 0xffffce;\n    Table05Entry09Colors.bgLightGrey = 0x63efef;\n    Table05Entry09Colors.bgDarkGrey = 0x9c8431;\n    Table05Entry09Colors.bgBlack = 0x5a5a5a;\n    // Obj 0\n    Table05Entry09Colors.obj0White = 0xffffff;\n    Table05Entry09Colors.obj0LightGrey = 0xff7300;\n    Table05Entry09Colors.obj0DarkGrey = 0x944200;\n    Table05Entry09Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry09Colors.obj1White = 0xffffff;\n    Table05Entry09Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry09Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry09Colors.obj1Black = 0x000000;\n    return Table05Entry09Colors;\n}());\n// Link's Awakening\nvar Table05Entry11Colors = /** @class */ (function () {\n    function Table05Entry11Colors() {\n    }\n    // Bg\n    Table05Entry11Colors.bgWhite = 0xffffff;\n    Table05Entry11Colors.bgLightGrey = 0xff8484;\n    Table05Entry11Colors.bgDarkGrey = 0x943a3a;\n    Table05Entry11Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry11Colors.obj0White = 0xffffff;\n    Table05Entry11Colors.obj0LightGrey = 0x00ff00;\n    Table05Entry11Colors.obj0DarkGrey = 0x318400;\n    Table05Entry11Colors.obj0Black = 0x004a00;\n    // Obj1\n    Table05Entry11Colors.obj1White = 0xffffff;\n    Table05Entry11Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry11Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry11Colors.obj1Black = 0x000000;\n    return Table05Entry11Colors;\n}());\n// Metroid 2\nvar Table05Entry14Colors = /** @class */ (function () {\n    function Table05Entry14Colors() {\n    }\n    //Bg\n    Table05Entry14Colors.bgWhite = 0xffffff;\n    Table05Entry14Colors.bgLightGrey = 0x63a5ff;\n    Table05Entry14Colors.bgDarkGrey = 0x0000ff;\n    Table05Entry14Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry14Colors.obj0White = 0xffff00;\n    Table05Entry14Colors.obj0LightGrey = 0xff0000;\n    Table05Entry14Colors.obj0DarkGrey = 0x630000;\n    Table05Entry14Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry14Colors.obj1White = 0xffffff;\n    Table05Entry14Colors.obj1LightGrey = 0x7bff31;\n    Table05Entry14Colors.obj1DarkGrey = 0x008400;\n    Table05Entry14Colors.obj1Black = 0x000000;\n    return Table05Entry14Colors;\n}());\n// WarioLand 2\nvar Table05Entry15Colors = /** @class */ (function () {\n    function Table05Entry15Colors() {\n    }\n    //Bg\n    Table05Entry15Colors.bgWhite = 0xffffff;\n    Table05Entry15Colors.bgLightGrey = 0xadad84;\n    Table05Entry15Colors.bgDarkGrey = 0x42737b;\n    Table05Entry15Colors.bgBlack = 0x000000;\n    // Obj 0\n    Table05Entry15Colors.obj0White = 0xffffff;\n    Table05Entry15Colors.obj0LightGrey = 0xffad63;\n    Table05Entry15Colors.obj0DarkGrey = 0xffad63;\n    Table05Entry15Colors.obj0Black = 0x000000;\n    // Obj1\n    Table05Entry15Colors.obj1White = 0xffffff;\n    Table05Entry15Colors.obj1LightGrey = 0x63a5ff;\n    Table05Entry15Colors.obj1DarkGrey = 0x0000ff;\n    Table05Entry15Colors.obj1Black = 0x000000;\n    return Table05Entry15Colors;\n}());\n\n// File for all of the logic of setting gameboy color plaettes\n// Current / exported color\nvar Colors = /** @class */ (function () {\n    function Colors() {\n    }\n    //Bg\n    Colors.bgWhite = WasmBoyGBColors.bgWhite;\n    Colors.bgLightGrey = WasmBoyGBColors.bgLightGrey;\n    Colors.bgDarkGrey = WasmBoyGBColors.bgDarkGrey;\n    Colors.bgBlack = WasmBoyGBColors.bgBlack;\n    // Obj 0\n    Colors.obj0White = WasmBoyGBColors.obj0White;\n    Colors.obj0LightGrey = WasmBoyGBColors.obj0LightGrey;\n    Colors.obj0DarkGrey = WasmBoyGBColors.obj0DarkGrey;\n    Colors.obj0Black = WasmBoyGBColors.obj0Black;\n    // Obj1\n    Colors.obj1White = WasmBoyGBColors.obj1White;\n    Colors.obj1LightGrey = WasmBoyGBColors.obj1LightGrey;\n    Colors.obj1DarkGrey = WasmBoyGBColors.obj1DarkGrey;\n    Colors.obj1Black = WasmBoyGBColors.obj1Black;\n    return Colors;\n}());\n// Inlined because closure compiler inlines\nfunction initializeColors() {\n    setManualColorizationPalette(0);\n    if (Cpu.GBCEnabled) {\n        // Don't need to continue this if a GBC game\n        return;\n    }\n    if (Cpu.BootROMEnabled) {\n        if (!Cpu.GBCEnabled) {\n            // GB\n            return;\n        }\n    }\n    // Do some automatic color palette swapping if we have a loaded ROM\n    var titleChecksum = 0x00;\n    for (var i = 0x0134; i <= 0x0143; i++) {\n        titleChecksum += eightBitLoadFromGBMemory(i);\n    }\n    // Set the colorization for the game automatically if assigned\n    // https://tcrf.net/Notes:Game_Boy_Color_Bootstrap_ROM\n    var hash = titleChecksum & 0xff;\n    setHashColorizationPalette(hash);\n}\nfunction getRedFromHexColor(color) {\n    return (color & 0xff0000) >> 16;\n}\nfunction getGreenFromHexColor(color) {\n    return (color & 0x00ff00) >> 8;\n}\nfunction getBlueFromHexColor(color) {\n    return color & 0x0000ff;\n}\n// Function to set the colorization\n// By manually pressing buttons\nfunction setManualColorizationPalette(colorizationId) {\n    // Set the colorizationId clockwise according to:\n    // https://en.wikipedia.org/wiki/Game_Boy_Color\n    switch (colorizationId) {\n        case 0:\n            Colors.bgWhite = WasmBoyGBColors.bgWhite;\n            Colors.bgLightGrey = WasmBoyGBColors.bgLightGrey;\n            Colors.bgDarkGrey = WasmBoyGBColors.bgDarkGrey;\n            Colors.bgBlack = WasmBoyGBColors.bgBlack;\n            Colors.obj0White = WasmBoyGBColors.obj0White;\n            Colors.obj0LightGrey = WasmBoyGBColors.obj0LightGrey;\n            Colors.obj0DarkGrey = WasmBoyGBColors.obj0DarkGrey;\n            Colors.obj0Black = WasmBoyGBColors.obj0Black;\n            Colors.obj1White = WasmBoyGBColors.obj1White;\n            Colors.obj1LightGrey = WasmBoyGBColors.obj1LightGrey;\n            Colors.obj1DarkGrey = WasmBoyGBColors.obj1DarkGrey;\n            Colors.obj1Black = WasmBoyGBColors.obj1Black;\n            break;\n        case 1:\n            // Up, Brown\n            Colors.bgWhite = BrownColors.bgWhite;\n            Colors.bgLightGrey = BrownColors.bgLightGrey;\n            Colors.bgDarkGrey = BrownColors.bgDarkGrey;\n            Colors.bgBlack = BrownColors.bgBlack;\n            Colors.obj0White = BrownColors.obj0White;\n            Colors.obj0LightGrey = BrownColors.obj0LightGrey;\n            Colors.obj0DarkGrey = BrownColors.obj0DarkGrey;\n            Colors.obj0Black = BrownColors.obj0Black;\n            Colors.obj1White = BrownColors.obj1White;\n            Colors.obj1LightGrey = BrownColors.obj1LightGrey;\n            Colors.obj1DarkGrey = BrownColors.obj1DarkGrey;\n            Colors.obj1Black = BrownColors.obj1Black;\n            break;\n        case 2:\n            // Up + A, Red\n            Colors.bgWhite = RedColors.bgWhite;\n            Colors.bgLightGrey = RedColors.bgLightGrey;\n            Colors.bgDarkGrey = RedColors.bgDarkGrey;\n            Colors.bgBlack = RedColors.bgBlack;\n            Colors.obj0White = RedColors.obj0White;\n            Colors.obj0LightGrey = RedColors.obj0LightGrey;\n            Colors.obj0DarkGrey = RedColors.obj0DarkGrey;\n            Colors.obj0Black = RedColors.obj0Black;\n            Colors.obj1White = RedColors.obj1White;\n            Colors.obj1LightGrey = RedColors.obj1LightGrey;\n            Colors.obj1DarkGrey = RedColors.obj1DarkGrey;\n            Colors.obj1Black = RedColors.obj1Black;\n            break;\n        case 3:\n            // Up + B, DarkBrown\n            Colors.bgWhite = DarkBrownColors.bgWhite;\n            Colors.bgLightGrey = DarkBrownColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkBrownColors.bgDarkGrey;\n            Colors.bgBlack = DarkBrownColors.bgBlack;\n            Colors.obj0White = DarkBrownColors.obj0White;\n            Colors.obj0LightGrey = DarkBrownColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkBrownColors.obj0DarkGrey;\n            Colors.obj0Black = DarkBrownColors.obj0Black;\n            Colors.obj1White = DarkBrownColors.obj1White;\n            Colors.obj1LightGrey = DarkBrownColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkBrownColors.obj1DarkGrey;\n            Colors.obj1Black = DarkBrownColors.obj1Black;\n            break;\n        case 4:\n            // Right, Green\n            Colors.bgWhite = GreenColors.bgWhite;\n            Colors.bgLightGrey = GreenColors.bgLightGrey;\n            Colors.bgDarkGrey = GreenColors.bgDarkGrey;\n            Colors.bgBlack = GreenColors.bgBlack;\n            Colors.obj0White = GreenColors.obj0White;\n            Colors.obj0LightGrey = GreenColors.obj0LightGrey;\n            Colors.obj0DarkGrey = GreenColors.obj0DarkGrey;\n            Colors.obj0Black = GreenColors.obj0Black;\n            Colors.obj1White = GreenColors.obj1White;\n            Colors.obj1LightGrey = GreenColors.obj1LightGrey;\n            Colors.obj1DarkGrey = GreenColors.obj1DarkGrey;\n            Colors.obj1Black = GreenColors.obj1Black;\n            break;\n        case 5:\n            // Right + A, DarkGreenColors\n            Colors.bgWhite = DarkGreenColors.bgWhite;\n            Colors.bgLightGrey = DarkGreenColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkGreenColors.bgDarkGrey;\n            Colors.bgBlack = DarkGreenColors.bgBlack;\n            Colors.obj0White = DarkGreenColors.obj0White;\n            Colors.obj0LightGrey = DarkGreenColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkGreenColors.obj0DarkGrey;\n            Colors.obj0Black = DarkGreenColors.obj0Black;\n            Colors.obj1White = DarkGreenColors.obj1White;\n            Colors.obj1LightGrey = DarkGreenColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkGreenColors.obj1DarkGrey;\n            Colors.obj1Black = DarkGreenColors.obj1Black;\n            break;\n        case 6:\n            // Right + B, InvertedColors\n            Colors.bgWhite = InvertedColors.bgWhite;\n            Colors.bgLightGrey = InvertedColors.bgLightGrey;\n            Colors.bgDarkGrey = InvertedColors.bgDarkGrey;\n            Colors.bgBlack = InvertedColors.bgBlack;\n            Colors.obj0White = InvertedColors.obj0White;\n            Colors.obj0LightGrey = InvertedColors.obj0LightGrey;\n            Colors.obj0DarkGrey = InvertedColors.obj0DarkGrey;\n            Colors.obj0Black = InvertedColors.obj0Black;\n            Colors.obj1White = InvertedColors.obj1White;\n            Colors.obj1LightGrey = InvertedColors.obj1LightGrey;\n            Colors.obj1DarkGrey = InvertedColors.obj1DarkGrey;\n            Colors.obj1Black = InvertedColors.obj1Black;\n            break;\n        case 7:\n            // Down, PastelMixColors\n            Colors.bgWhite = PastelMixColors.bgWhite;\n            Colors.bgLightGrey = PastelMixColors.bgLightGrey;\n            Colors.bgDarkGrey = PastelMixColors.bgDarkGrey;\n            Colors.bgBlack = PastelMixColors.bgBlack;\n            Colors.obj0White = PastelMixColors.obj0White;\n            Colors.obj0LightGrey = PastelMixColors.obj0LightGrey;\n            Colors.obj0DarkGrey = PastelMixColors.obj0DarkGrey;\n            Colors.obj0Black = PastelMixColors.obj0Black;\n            Colors.obj1White = PastelMixColors.obj1White;\n            Colors.obj1LightGrey = PastelMixColors.obj1LightGrey;\n            Colors.obj1DarkGrey = PastelMixColors.obj1DarkGrey;\n            Colors.obj1Black = PastelMixColors.obj1Black;\n            break;\n        case 8:\n            // Down + A, Orange\n            Colors.bgWhite = OrangeColors.bgWhite;\n            Colors.bgLightGrey = OrangeColors.bgLightGrey;\n            Colors.bgDarkGrey = OrangeColors.bgDarkGrey;\n            Colors.bgBlack = OrangeColors.bgBlack;\n            Colors.obj0White = OrangeColors.obj0White;\n            Colors.obj0LightGrey = OrangeColors.obj0LightGrey;\n            Colors.obj0DarkGrey = OrangeColors.obj0DarkGrey;\n            Colors.obj0Black = OrangeColors.obj0Black;\n            Colors.obj1White = OrangeColors.obj1White;\n            Colors.obj1LightGrey = OrangeColors.obj1LightGrey;\n            Colors.obj1DarkGrey = OrangeColors.obj1DarkGrey;\n            Colors.obj1Black = OrangeColors.obj1Black;\n            break;\n        case 9:\n            // Down + B, Yellow\n            Colors.bgWhite = YellowColors.bgWhite;\n            Colors.bgLightGrey = YellowColors.bgLightGrey;\n            Colors.bgDarkGrey = YellowColors.bgDarkGrey;\n            Colors.bgBlack = YellowColors.bgBlack;\n            Colors.obj0White = YellowColors.obj0White;\n            Colors.obj0LightGrey = YellowColors.obj0LightGrey;\n            Colors.obj0DarkGrey = YellowColors.obj0DarkGrey;\n            Colors.obj0Black = YellowColors.obj0Black;\n            Colors.obj1White = YellowColors.obj1White;\n            Colors.obj1LightGrey = YellowColors.obj1LightGrey;\n            Colors.obj1DarkGrey = YellowColors.obj1DarkGrey;\n            Colors.obj1Black = YellowColors.obj1Black;\n            break;\n        case 10:\n            // Left, Blue\n            Colors.bgWhite = BlueColors.bgWhite;\n            Colors.bgLightGrey = BlueColors.bgLightGrey;\n            Colors.bgDarkGrey = BlueColors.bgDarkGrey;\n            Colors.bgBlack = BlueColors.bgBlack;\n            Colors.obj0White = BlueColors.obj0White;\n            Colors.obj0LightGrey = BlueColors.obj0LightGrey;\n            Colors.obj0DarkGrey = BlueColors.obj0DarkGrey;\n            Colors.obj0Black = BlueColors.obj0Black;\n            Colors.obj1White = BlueColors.obj1White;\n            Colors.obj1LightGrey = BlueColors.obj1LightGrey;\n            Colors.obj1DarkGrey = BlueColors.obj1DarkGrey;\n            Colors.obj1Black = BlueColors.obj1Black;\n            break;\n        case 11:\n            // Left + A, Dark Blue\n            Colors.bgWhite = DarkBlueColors.bgWhite;\n            Colors.bgLightGrey = DarkBlueColors.bgLightGrey;\n            Colors.bgDarkGrey = DarkBlueColors.bgDarkGrey;\n            Colors.bgBlack = DarkBlueColors.bgBlack;\n            Colors.obj0White = DarkBlueColors.obj0White;\n            Colors.obj0LightGrey = DarkBlueColors.obj0LightGrey;\n            Colors.obj0DarkGrey = DarkBlueColors.obj0DarkGrey;\n            Colors.obj0Black = DarkBlueColors.obj0Black;\n            Colors.obj1White = DarkBlueColors.obj1White;\n            Colors.obj1LightGrey = DarkBlueColors.obj1LightGrey;\n            Colors.obj1DarkGrey = DarkBlueColors.obj1DarkGrey;\n            Colors.obj1Black = DarkBlueColors.obj1Black;\n            break;\n        case 12:\n            // Left + B, GrayScale\n            Colors.bgWhite = GrayscaleColors.bgWhite;\n            Colors.bgLightGrey = GrayscaleColors.bgLightGrey;\n            Colors.bgDarkGrey = GrayscaleColors.bgDarkGrey;\n            Colors.bgBlack = GrayscaleColors.bgBlack;\n            Colors.obj0White = GrayscaleColors.obj0White;\n            Colors.obj0LightGrey = GrayscaleColors.obj0LightGrey;\n            Colors.obj0DarkGrey = GrayscaleColors.obj0DarkGrey;\n            Colors.obj0Black = GrayscaleColors.obj0Black;\n            Colors.obj1White = GrayscaleColors.obj1White;\n            Colors.obj1LightGrey = GrayscaleColors.obj1LightGrey;\n            Colors.obj1DarkGrey = GrayscaleColors.obj1DarkGrey;\n            Colors.obj1Black = GrayscaleColors.obj1Black;\n            break;\n    }\n}\n// Function to set the colorization\n// By checksum of the title\n// https://forums.nesdev.com/viewtopic.php?f=20&t=10226\n// TODO: torch2424 need to find how to get the \"disambiguation\"\n// Inlined because closure compiler inlines\nfunction setHashColorizationPalette(hash) {\n    switch (hash) {\n        case 0x88:\n            Colors.bgWhite = Table00Entry08Colors.bgWhite;\n            Colors.bgLightGrey = Table00Entry08Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table00Entry08Colors.bgDarkGrey;\n            Colors.bgBlack = Table00Entry08Colors.bgBlack;\n            Colors.obj0White = Table00Entry08Colors.obj0White;\n            Colors.obj0LightGrey = Table00Entry08Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table00Entry08Colors.obj0DarkGrey;\n            Colors.obj0Black = Table00Entry08Colors.obj0Black;\n            Colors.obj1White = Table00Entry08Colors.obj1White;\n            Colors.obj1LightGrey = Table00Entry08Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table00Entry08Colors.obj1DarkGrey;\n            Colors.obj1Black = Table00Entry08Colors.obj1Black;\n            break;\n        case 0x61:\n            Colors.bgWhite = Table01Entry0BColors.bgWhite;\n            Colors.bgLightGrey = Table01Entry0BColors.bgLightGrey;\n            Colors.bgDarkGrey = Table01Entry0BColors.bgDarkGrey;\n            Colors.bgBlack = Table01Entry0BColors.bgBlack;\n            Colors.obj0White = Table01Entry0BColors.obj0White;\n            Colors.obj0LightGrey = Table01Entry0BColors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table01Entry0BColors.obj0DarkGrey;\n            Colors.obj0Black = Table01Entry0BColors.obj0Black;\n            Colors.obj1White = Table01Entry0BColors.obj1White;\n            Colors.obj1LightGrey = Table01Entry0BColors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table01Entry0BColors.obj1DarkGrey;\n            Colors.obj1Black = Table01Entry0BColors.obj1Black;\n            break;\n        case 0x14:\n            Colors.bgWhite = Table01Entry10Colors.bgWhite;\n            Colors.bgLightGrey = Table01Entry10Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table01Entry10Colors.bgDarkGrey;\n            Colors.bgBlack = Table01Entry10Colors.bgBlack;\n            Colors.obj0White = Table01Entry10Colors.obj0White;\n            Colors.obj0LightGrey = Table01Entry10Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table01Entry10Colors.obj0DarkGrey;\n            Colors.obj0Black = Table01Entry10Colors.obj0Black;\n            Colors.obj1White = Table01Entry10Colors.obj1White;\n            Colors.obj1LightGrey = Table01Entry10Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table01Entry10Colors.obj1DarkGrey;\n            Colors.obj1Black = Table01Entry10Colors.obj1Black;\n            break;\n        case 0x46:\n            Colors.bgWhite = Table03Entry0AColors.bgWhite;\n            Colors.bgLightGrey = Table03Entry0AColors.bgLightGrey;\n            Colors.bgDarkGrey = Table03Entry0AColors.bgDarkGrey;\n            Colors.bgBlack = Table03Entry0AColors.bgBlack;\n            Colors.obj0White = Table03Entry0AColors.obj0White;\n            Colors.obj0LightGrey = Table03Entry0AColors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table03Entry0AColors.obj0DarkGrey;\n            Colors.obj0Black = Table03Entry0AColors.obj0Black;\n            Colors.obj1White = Table03Entry0AColors.obj1White;\n            Colors.obj1LightGrey = Table03Entry0AColors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table03Entry0AColors.obj1DarkGrey;\n            Colors.obj1Black = Table03Entry0AColors.obj1Black;\n            break;\n        case 0x59:\n        case 0xc6:\n            Colors.bgWhite = Table05Entry00Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry00Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry00Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry00Colors.bgBlack;\n            Colors.obj0White = Table05Entry00Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry00Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry00Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry00Colors.obj0Black;\n            Colors.obj1White = Table05Entry00Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry00Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry00Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry00Colors.obj1Black;\n            break;\n        case 0x86:\n        case 0xa8:\n            Colors.bgWhite = Table05Entry01Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry01Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry01Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry01Colors.bgBlack;\n            Colors.obj0White = Table05Entry01Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry01Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry01Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry01Colors.obj0Black;\n            Colors.obj1White = Table05Entry01Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry01Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry01Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry01Colors.obj1Black;\n            break;\n        case 0xbf:\n        case 0xce:\n        case 0xd1:\n        case 0xf0:\n            Colors.bgWhite = Table05Entry02Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry02Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry02Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry02Colors.bgBlack;\n            Colors.obj0White = Table05Entry02Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry02Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry02Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry02Colors.obj0Black;\n            Colors.obj1White = Table05Entry02Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry02Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry02Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry02Colors.obj1Black;\n            break;\n        case 0x27:\n        case 0x49:\n        case 0x5c:\n        case 0xb3:\n            Colors.bgWhite = Table05Entry08Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry08Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry08Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry08Colors.bgBlack;\n            Colors.obj0White = Table05Entry08Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry08Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry08Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry08Colors.obj0Black;\n            Colors.obj1White = Table05Entry08Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry08Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry08Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry08Colors.obj1Black;\n            break;\n        case 0xc9:\n            Colors.bgWhite = Table05Entry09Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry09Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry09Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry09Colors.bgBlack;\n            Colors.obj0White = Table05Entry09Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry09Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry09Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry09Colors.obj0Black;\n            Colors.obj1White = Table05Entry09Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry09Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry09Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry09Colors.obj1Black;\n            break;\n        case 0x70:\n            Colors.bgWhite = Table05Entry11Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry11Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry11Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry11Colors.bgBlack;\n            Colors.obj0White = Table05Entry11Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry11Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry11Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry11Colors.obj0Black;\n            Colors.obj1White = Table05Entry11Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry11Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry11Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry11Colors.obj1Black;\n            break;\n        case 0x46:\n            Colors.bgWhite = Table05Entry14Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry14Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry14Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry14Colors.bgBlack;\n            Colors.obj0White = Table05Entry14Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry14Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry14Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry14Colors.obj0Black;\n            Colors.obj1White = Table05Entry14Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry14Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry14Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry14Colors.obj1Black;\n            break;\n        case 0xd3:\n            Colors.bgWhite = Table05Entry15Colors.bgWhite;\n            Colors.bgLightGrey = Table05Entry15Colors.bgLightGrey;\n            Colors.bgDarkGrey = Table05Entry15Colors.bgDarkGrey;\n            Colors.bgBlack = Table05Entry15Colors.bgBlack;\n            Colors.obj0White = Table05Entry15Colors.obj0White;\n            Colors.obj0LightGrey = Table05Entry15Colors.obj0LightGrey;\n            Colors.obj0DarkGrey = Table05Entry15Colors.obj0DarkGrey;\n            Colors.obj0Black = Table05Entry15Colors.obj0Black;\n            Colors.obj1White = Table05Entry15Colors.obj1White;\n            Colors.obj1LightGrey = Table05Entry15Colors.obj1LightGrey;\n            Colors.obj1DarkGrey = Table05Entry15Colors.obj1DarkGrey;\n            Colors.obj1Black = Table05Entry15Colors.obj1Black;\n            break;\n    }\n}\n\n// Grouped registers\n// possible overload these later to performace actions\n// AF, BC, DE, HL\nfunction concatenateBytes(highByte, lowByte) {\n    //https://stackoverflow.com/questions/38298412/convert-two-bytes-into-signed-16-bit-integer-in-javascript\n    return ((highByte & 0xff) << 8) | (lowByte & 0xff);\n}\nfunction splitHighByte(groupedByte) {\n    return (groupedByte & 0xff00) >> 8;\n}\nfunction splitLowByte(groupedByte) {\n    return groupedByte & 0x00ff;\n}\nfunction rotateByteLeft(value) {\n    // Rotate left\n    // https://stackoverflow.com/questions/19204750/how-do-i-perform-a-circular-rotation-of-a-byte\n    // 4-bit example:\n    // 1010 -> 0100 | 0001\n    return u8Portable((value << 1) | (value >> 7));\n}\nfunction rotateByteLeftThroughCarry(value) {\n    // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Through carry meaning, instead of raotating the bit that gets dropped off, but the carry there instead\n    return u8Portable((value << 1) | getCarryFlag$$1());\n}\nfunction rotateByteRight(value) {\n    // Rotate right\n    // 4-bit example:\n    // 1010 -> 0101 | 0000\n    return u8Portable((value >> 1) | (value << 7));\n}\nfunction rotateByteRightThroughCarry(value) {\n    // Example: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Through carry meaning, instead of raotating the bit that gets dropped off, put the carry there instead\n    return u8Portable((value >> 1) | (getCarryFlag$$1() << 7));\n}\nfunction setBitOnByte(bitPosition, byte) {\n    return byte | (0x01 << bitPosition);\n}\nfunction resetBitOnByte(bitPosition, byte) {\n    return byte & ~(0x01 << bitPosition);\n}\nfunction checkBitOnByte(bitPosition, byte) {\n    // Perforamnce improvements\n    // https://github.com/AssemblyScript/assemblyscript/issues/40\n    return (byte & (1 << bitPosition)) != 0;\n}\n\n// Class for GBC Color palletes\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\nvar Palette = /** @class */ (function () {\n    function Palette() {\n    }\n    Palette.memoryLocationBackgroundPaletteIndex = 0xff68;\n    Palette.memoryLocationBackgroundPaletteData = 0xff69;\n    Palette.memoryLocationSpritePaletteIndex = 0xff6a;\n    Palette.memoryLocationSpritePaletteData = 0xff6b;\n    // Palettes\n    Palette.memoryLocationBackgroundPalette = 0xff47;\n    Palette.memoryLocationSpritePaletteOne = 0xff48;\n    Palette.memoryLocationSpritePaletteTwo = 0xff49;\n    return Palette;\n}());\n// Inlined because closure compiler inlines\nfunction initializePalette() {\n    if (Cpu.GBCEnabled) {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff68, 0xc0);\n        eightBitStoreIntoGBMemory(0xff69, 0xff);\n        eightBitStoreIntoGBMemory(0xff6a, 0xc1);\n        eightBitStoreIntoGBMemory(0xff6b, 0x0d);\n    }\n    else {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff68, 0xff);\n        eightBitStoreIntoGBMemory(0xff69, 0xff);\n        eightBitStoreIntoGBMemory(0xff6a, 0xff);\n        eightBitStoreIntoGBMemory(0xff6b, 0xff);\n    }\n    // Override some values if using the bootrom\n    if (Cpu.BootROMEnabled && Cpu.GBCEnabled) {\n        // GBC Palettes\n        eightBitStoreIntoGBMemory(0xff69, 0x20);\n        eightBitStoreIntoGBMemory(0xff6b, 0x8a);\n    }\n}\n// Simple get pallete color or monochrome GB\n// shouldRepresentColorByColorId is good for debugging tile data for GBC games that don't have\n// monochromePalettes\n// Inlined because closure compiler inlines\nfunction getMonochromeColorFromPalette(colorId, paletteMemoryLocation, shouldRepresentColorByColorId) {\n    if (shouldRepresentColorByColorId === void 0) { shouldRepresentColorByColorId = false; }\n    // Shift our paletteByte, 2 times for each color ID\n    // And off any extra bytes\n    // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n    var color = colorId;\n    if (!shouldRepresentColorByColorId) {\n        color = (eightBitLoadFromGBMemory(paletteMemoryLocation) >> (colorId << 1)) & 0x03;\n    }\n    // Since our max is 254, and max is 3.\n    // monochrome color palette is modified from bgb\n    // TODO: Make these colors into a constant\n    var rgbColor = 242;\n    switch (color) {\n        case 0:\n            break;\n        case 1:\n            rgbColor = 160;\n            break;\n        case 2:\n            rgbColor = 88;\n            break;\n        case 3:\n            rgbColor = 8;\n            break;\n    }\n    return rgbColor;\n}\n// Function to returns the Colorized color for a GB games\nfunction getColorizedGbHexColorFromPalette(colorId, paletteMemoryLocation) {\n    // Shift our paletteByte, 2 times for each color ID\n    // And off any extra bytes\n    // Return our Color (00 - white, 01 - light grey, 10 Dark grey, or 11 - Black)\n    var color = (eightBitLoadFromGBMemory(paletteMemoryLocation) >> (colorId * 2)) & 0x03;\n    // Check which palette we got, to apply the right color layer\n    var hexColor = 0;\n    if (paletteMemoryLocation === Palette.memoryLocationSpritePaletteOne) {\n        hexColor = Colors.obj0White;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.obj0LightGrey;\n                break;\n            case 2:\n                hexColor = Colors.obj0DarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.obj0Black;\n                break;\n        }\n    }\n    else if (paletteMemoryLocation === Palette.memoryLocationSpritePaletteTwo) {\n        hexColor = Colors.obj1White;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.obj1LightGrey;\n                break;\n            case 2:\n                hexColor = Colors.obj1DarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.obj1Black;\n                break;\n        }\n    }\n    else {\n        hexColor = Colors.bgWhite;\n        switch (color) {\n            case 0:\n                break;\n            case 1:\n                hexColor = Colors.bgLightGrey;\n                break;\n            case 2:\n                hexColor = Colors.bgDarkGrey;\n                break;\n            case 3:\n                hexColor = Colors.bgBlack;\n                break;\n        }\n    }\n    return hexColor;\n}\n// Inlined because closure compiler inlines\nfunction writeColorPaletteToMemory(offset, value) {\n    // FF68\n    //  Bit 0-5   Index (00-3F)\n    var memoryLocationSpritePaletteData = Palette.memoryLocationSpritePaletteData;\n    if (offset === Palette.memoryLocationBackgroundPaletteData || offset === memoryLocationSpritePaletteData) {\n        // Get the palette index\n        var paletteIndex = eightBitLoadFromGBMemory(offset - 1);\n        // Clear the 6th bit, as it does nothing\n        paletteIndex = resetBitOnByte(6, paletteIndex);\n        // Check if we are changing the sprite pallete data\n        var isSprite = offset === memoryLocationSpritePaletteData;\n        storePaletteByteInWasmMemory(paletteIndex, value, isSprite);\n        incrementPaletteIndexIfSet(paletteIndex, offset - 1);\n    }\n}\n// Functions to Handle Write to pallete data registers\n// http://gbdev.gg8.se/wiki/articles/Video_Display#FF68_-_BCPS.2FBGPI_-_CGB_Mode_Only_-_Background_Palette_Index\n// Function to handle incrementing the pallete index if required\n// Inlined because closure compiler inlines\nfunction incrementPaletteIndexIfSet(paletteIndex, offset) {\n    // Check ther auto increment box\n    if (checkBitOnByte(7, paletteIndex)) {\n        // Increment the index, and return the value before the increment\n        // Ensure we don't ouverflow our auto increment bit\n        paletteIndex += 1;\n        paletteIndex = setBitOnByte(7, paletteIndex);\n        eightBitStoreIntoGBMemory(offset, paletteIndex);\n    }\n}\n// FF68\n// Bit 0-5   Index (00-3F)\n// Bit 7     Auto Increment  (0=Disabled, 1=Increment after Writing)\n// Index is 00-0x3F because the means 0 - 63 (64),\n// and apparently there are 8 bytes per pallete to describe Color 0-3 (4 colors),\n// and 0-7 (8 palltetes). Therefore, 64!\nfunction getRgbColorFromPalette(paletteId, colorId, isSprite) {\n    // Each Pallete takes 8 bytes, so multiply by 8 to get the pallete\n    // And Each color takes 2 bytes, therefore, multiple by 2 for the correct color bytes in the palette\n    var paletteIndex = paletteId * 8 + colorId * 2;\n    // Load the Color that is seperated into two bytes\n    var paletteHighByte = loadPaletteByteFromWasmMemory(paletteIndex + 1, isSprite);\n    var paletteLowByte = loadPaletteByteFromWasmMemory(paletteIndex, isSprite);\n    // Return the concatenated color byte\n    return concatenateBytes(paletteHighByte, paletteLowByte);\n}\n// Function to return the color from a passed 16 bit color pallette\nfunction getColorComponentFromRgb(colorId, colorRgb) {\n    // Get our bitmask for the color ID\n    // bit mask tested good :)\n    colorId *= 5;\n    var bitMask = 0x1f << colorId;\n    var colorValue = (colorRgb & bitMask) >> colorId;\n    // Goal is to reach 254 for each color, so 255 / 31 (0x1F) ~8 TODO: Make exact\n    // Want 5 bits for each\n    return colorValue * 8;\n}\n// Function to load a byte from our Gbc Palette memory\nfunction loadPaletteByteFromWasmMemory(paletteIndexByte, isSprite) {\n    // Clear the top two bits to just get the bottom palette Index\n    var paletteIndex = paletteIndexByte & 0x3f;\n    // Move over the palette index to not overlap the background has 0x3F, so Zero for Sprites is 0x40)\n    if (isSprite) {\n        paletteIndex += 0x40;\n    }\n    return load(GBC_PALETTE_LOCATION + paletteIndex);\n}\n// Function to store a byte to our Gbc Palette memory\n// Inlined because closure compiler inlines\nfunction storePaletteByteInWasmMemory(paletteIndexByte, value, isSprite) {\n    // Clear the top two bits to just get the bottom palette Index\n    var paletteIndex = paletteIndexByte & 0x3f;\n    // Move over the palette index to not overlap the background (has 0x3F, so Zero for Sprites is 0x40)\n    if (isSprite) {\n        paletteIndex += 0x40;\n    }\n    store(GBC_PALETTE_LOCATION + paletteIndex, value);\n}\n\n// https://github.com/torch2424/wasmBoy/issues/51\nfunction addPriorityforPixel(x, y, colorId, hasGbcBgPriority) {\n    if (colorId === void 0) { colorId = 0; }\n    if (hasGbcBgPriority === void 0) { hasGbcBgPriority = false; }\n    var bgPriorityByte = colorId & 0x03;\n    if (hasGbcBgPriority) {\n        bgPriorityByte = setBitOnByte(2, bgPriorityByte);\n    }\n    store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), bgPriorityByte);\n}\n// Inlined because closure compiler inlines\nfunction getPriorityforPixel(x, y) {\n    return load(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y));\n}\n// Inlined because closure compiler inlines\nfunction clearPriorityMap() {\n    for (var y = 0; y < 144; ++y) {\n        for (var x = 0; x < 160; ++x) {\n            store(BG_PRIORITY_MAP_LOCATION + getPixelStart(x, y), 0);\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction getPixelStart(x, y) {\n    // Get the pixel number\n    return y * 160 + x;\n}\n\n// Functions for performance hacks, and debugging tiles\nvar TileCache = /** @class */ (function () {\n    function TileCache() {\n    }\n    TileCache.tileId = -1;\n    TileCache.horizontalFlip = false;\n    TileCache.nextXIndexToPerformCacheCheck = -1;\n    return TileCache;\n}());\n// Inlined because closure compiler inlines\nfunction resetTileCache() {\n    TileCache.tileId = -1;\n    TileCache.nextXIndexToPerformCacheCheck = -1;\n}\nfunction drawPixelsFromLineOfTile(tileId, tileDataMemoryLocation, vramBankId, tileLineXStart, tileLineXEnd, tileLineY, outputLineX, outputLineY, outputWidth, wasmMemoryStart, shouldRepresentMonochromeColorByColorId, paletteLocation, bgMapAttributes, spriteAttributes) {\n    // Get our number of pixels drawn\n    var pixelsDrawn = 0;\n    // Get our tile data address\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileId);\n    // Get the bytes for our tile\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2, vramBankId);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + tileLineY * 2 + 1, vramBankId);\n    // Loop through our X values to draw\n    for (var x = tileLineXStart; x <= tileLineXEnd; ++x) {\n        // First find where we are going to do our final output x\n        // And don't allow any width overflow\n        var iteratedOutputX = outputLineX + (x - tileLineXStart);\n        if (iteratedOutputX < outputWidth) {\n            // However, We need to reverse our byte (if not horizontally flipped),\n            // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n            // Therefore, is pixelX was 2, then really is need to be 5\n            // So 2 - 7 = -5, * 1 = 5\n            // Or to simplify, 7 - 2 = 5 haha!\n            var pixelXInTile = x;\n            if (bgMapAttributes < 0 || !checkBitOnByte(5, bgMapAttributes)) {\n                pixelXInTile = 7 - pixelXInTile;\n            }\n            // Get our pallete colors for the tile\n            var paletteColorId = 0;\n            if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n                // Byte one represents the second bit in our color id, so bit shift\n                paletteColorId += 1;\n                paletteColorId = paletteColorId << 1;\n            }\n            if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n                paletteColorId += 1;\n            }\n            // Get the pallete\n            var red = 0;\n            var green = 0;\n            var blue = 0;\n            // Check if we should draw color or not\n            if (Cpu.GBCEnabled && (bgMapAttributes >= 0 || spriteAttributes >= 0)) {\n                // Draw C O L O R\n                var isSprite = spriteAttributes >= 0;\n                // Call the helper function to grab the correct color from the palette\n                // Get the palette index byte\n                var bgPalette = bgMapAttributes & 0x07;\n                if (isSprite) {\n                    bgPalette = spriteAttributes & 0x07;\n                }\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, isSprite);\n                // Split off into red green and blue\n                red = getColorComponentFromRgb(0, rgbColorPalette);\n                green = getColorComponentFromRgb(1, rgbColorPalette);\n                blue = getColorComponentFromRgb(2, rgbColorPalette);\n            }\n            else {\n                // Draw Monochrome\n                // Get the default palette if none\n                if (paletteLocation <= 0) {\n                    paletteLocation = Graphics.memoryLocationBackgroundPalette;\n                }\n                if (shouldRepresentMonochromeColorByColorId) {\n                    var monochromeColor = getMonochromeColorFromPalette(paletteColorId, paletteLocation, shouldRepresentMonochromeColorByColorId);\n                    red = monochromeColor;\n                    green = monochromeColor;\n                    blue = monochromeColor;\n                }\n                else {\n                    var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, paletteLocation);\n                    red = getRedFromHexColor(hexColor);\n                    green = getGreenFromHexColor(hexColor);\n                    blue = getBlueFromHexColor(hexColor);\n                }\n            }\n            // Finally Lets place a pixel in memory\n            // Find where our tile line would start\n            var pixelStart = getTilePixelStart(iteratedOutputX, outputLineY, outputWidth);\n            // Can not optimize wasmMemoryStart any further, as this is in a loop.\n            store(wasmMemoryStart + pixelStart + 0, red);\n            store(wasmMemoryStart + pixelStart + 1, green);\n            store(wasmMemoryStart + pixelStart + 2, blue);\n            var gbcBgPriority = false;\n            if (bgMapAttributes >= 0) {\n                gbcBgPriority = checkBitOnByte(7, bgMapAttributes);\n            }\n            // Lastly, add the pixel to our background priority map\n            // https://github.com/torch2424/wasmBoy/issues/51\n            // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n            // Bit 2 will represent if the Bg/Window has GBC priority.\n            addPriorityforPixel(iteratedOutputX, outputLineY, paletteColorId, gbcBgPriority);\n            pixelsDrawn++;\n        }\n    }\n    return pixelsDrawn;\n}\n// Inlined because closure compiler inlines\nfunction getTilePixelStart(outputLineX, outputLineY, outputWidth) {\n    // Finally Lets place a pixel in memory\n    var pixelStart = outputLineY * outputWidth + outputLineX;\n    // Each pixel takes 3 slots, therefore, multiply by 3!\n    return pixelStart * 3;\n}\nfunction getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap) {\n    // Watch this part of The ultimate gameboy talk: https://youtu.be/HyzD8pNlpwI?t=30m50s\n    // A line of 8 pixels on a single tile, is represented by 2 bytes.\n    // since a single tile is 8x8 pixels, 8 * 2 = 16 bytes\n    // Get the tile ID's tile addess from tile data.\n    // For instance, let's say our first line of tile data represents tiles for letters:\n    // a b c d e f g\n    // And we have tileId 0x02. That means we want the tile for the 'c' character\n    // Since each tile is 16 bytes, it would be the starting tileDataAddress + (tileId * tileSize), to skip over tiles we dont want\n    // The whole signed thing is weird, and has something to do how the second set of tile data is stored :p\n    if (tileDataMemoryLocation === Graphics.memoryLocationTileDataSelectZeroStart) {\n        // Treat the tile Id as a signed int, subtract an offset of 128\n        // if the tileId was 0 then the tile would be in memory region 0x9000-0x900F\n        if (checkBitOnByte(7, tileIdFromTileMap)) {\n            tileIdFromTileMap -= 128;\n        }\n        else {\n            tileIdFromTileMap += 128;\n        }\n    }\n    // if the background layout gave us the tileId 0, then the tile data would be between 0x8000-0x800F.\n    return tileDataMemoryLocation + tileIdFromTileMap * 16;\n}\n\n// Functions to help with Handling Duty on Square Channels\n// Since there are no 2d arrays, we will use a byte to represent duty cycles (wave form from percentages)\nfunction isDutyCycleClockPositiveOrNegativeForWaveform(channelDuty, waveFormPositionOnDuty) {\n    // Get our Wave Form According to the Duty\n    // Default to a duty of 1\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n    switch (channelDuty) {\n        case 0x01:\n            // 1000 0001\n            return checkBitOnByte(waveFormPositionOnDuty, 0x81);\n        case 0x02:\n            // 1000 0111\n            return checkBitOnByte(waveFormPositionOnDuty, 0x87);\n        case 0x03:\n            // 0111 1110\n            return checkBitOnByte(waveFormPositionOnDuty, 0x7e);\n        default:\n            // 0000 0001\n            return checkBitOnByte(waveFormPositionOnDuty, 0x01);\n    }\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel1 = /** @class */ (function () {\n    function Channel1() {\n    }\n    Channel1.updateNRx0 = function (value) {\n        var oldSweepNegate = Channel1.NRx0Negate;\n        Channel1.NRx0SweepPeriod = (value & 0x70) >> 4;\n        Channel1.NRx0Negate = checkBitOnByte(3, value);\n        Channel1.NRx0SweepShift = value & 0x07;\n        // Obscure Behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // Clearing the sweep negate mode bit in NR10 after at least one sweep calculation has been made,\n        // using the negate mode since the last trigger causes the channel to be immediately disabled.\n        // This prevents you from having the sweep lower the frequency then raise the frequency without a trigger inbetween.\n        if (oldSweepNegate && (!Channel1.NRx0Negate && Channel1.sweepNegateShouldDisableChannelOnClear)) {\n            Channel1.isEnabled = false;\n        }\n    };\n    Channel1.updateNRx1 = function (value) {\n        Channel1.NRx1Duty = (value >> 6) & 0x03;\n        Channel1.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel1.lengthCounter = Channel1.MAX_LENGTH - Channel1.NRx1LengthLoad;\n    };\n    Channel1.updateNRx2 = function (value) {\n        Channel1.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel1.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel1.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        var isDacEnabled = (value & 0xf8) > 0;\n        Channel1.isDacEnabled = isDacEnabled;\n        // Blargg length test\n        // Disabling DAC should disable channel immediately\n        if (!isDacEnabled) {\n            Channel1.isEnabled = isDacEnabled;\n        }\n    };\n    Channel1.updateNRx3 = function (value) {\n        Channel1.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel1.frequency = (Channel1.NRx4FrequencyMSB << 8) | value;\n    };\n    // NOTE: Order in which these events happen are very particular\n    // And globals can be affected by other functions\n    // Thus, optimizations here should be extremely careful\n    Channel1.updateNRx4 = function (value) {\n        // Handle our Channel frequency first\n        // As this is modified if we trigger for length.\n        var frequencyMSB = value & 0x07;\n        Channel1.NRx4FrequencyMSB = frequencyMSB;\n        Channel1.frequency = (frequencyMSB << 8) | Channel1.NRx3FrequencyLSB;\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        // Also see blargg's cgb sound test\n        // Extra length clocking occurs when writing to NRx4,\n        // when the frame sequencer's next step is one that,\n        // doesn't clock the length counter.\n        var frameSequencer = Sound.frameSequencer;\n        var doesNextFrameSequencerUpdateLength = (frameSequencer & 1) === 1;\n        var isBeingLengthEnabled = !Channel1.NRx4LengthEnabled && checkBitOnByte(6, value);\n        if (!doesNextFrameSequencerUpdateLength) {\n            // Check lengthEnable\n            if (Channel1.lengthCounter > 0 && isBeingLengthEnabled) {\n                Channel1.lengthCounter -= 1;\n                if (!checkBitOnByte(7, value) && Channel1.lengthCounter === 0) {\n                    Channel1.isEnabled = false;\n                }\n            }\n        }\n        // Set the length enabled from the value\n        Channel1.NRx4LengthEnabled = checkBitOnByte(6, value);\n        // Trigger out channel, unfreeze length if frozen\n        // Triggers should happen after obscure behavior\n        // See test 11 for trigger\n        if (checkBitOnByte(7, value)) {\n            Channel1.trigger();\n            // When we trigger on the obscure behavior, and we reset the length Counter to max\n            // We need to clock\n            if (!doesNextFrameSequencerUpdateLength && Channel1.lengthCounter === Channel1.MAX_LENGTH && Channel1.NRx4LengthEnabled) {\n                Channel1.lengthCounter -= 1;\n            }\n        }\n    };\n    // Function to save the state of the class\n    Channel1.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot), Channel1.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel1.saveStateSlot), Channel1.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot), Channel1.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot), Channel1.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot), Channel1.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel1.saveStateSlot), Channel1.dutyCycle);\n        store(getSaveStateMemoryOffset(0x14, Channel1.saveStateSlot), Channel1.waveFormPositionOnDuty);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x19, Channel1.saveStateSlot), Channel1.isSweepEnabled);\n        store(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot), Channel1.sweepCounter);\n        store(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot), Channel1.sweepShadowFrequency);\n    };\n    // Function to load the save state from memory\n    Channel1.loadState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel1.saveStateSlot), Channel1.isEnabled);\n        Channel1.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel1.saveStateSlot));\n        Channel1.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel1.saveStateSlot));\n        Channel1.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel1.saveStateSlot));\n        Channel1.volume = load(getSaveStateMemoryOffset(0x0e, Channel1.saveStateSlot));\n        Channel1.dutyCycle = load(getSaveStateMemoryOffset(0x13, Channel1.saveStateSlot));\n        Channel1.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x14, Channel1.saveStateSlot));\n        Channel1.isSweepEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x19, Channel1.saveStateSlot));\n        Channel1.sweepCounter = load(getSaveStateMemoryOffset(0x1a, Channel1.saveStateSlot));\n        Channel1.sweepShadowFrequency = load(getSaveStateMemoryOffset(0x1f, Channel1.saveStateSlot));\n    };\n    Channel1.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx0, 0x80);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx1, 0xbf);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx2, 0xf3);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, 0xc1);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, 0xbf);\n        // Override/reset some variables if the boot ROM is enabled\n        // For GBC and GB\n        if (Cpu.BootROMEnabled) {\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx1, 0x3f);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx2, 0x00);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, 0x00);\n            eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, 0xb8);\n        }\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel1.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel1.cycleCounter;\n        Channel1.cycleCounter = 0;\n        return Channel1.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel1.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel1.frequency) << 2;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        if (Cpu.GBCDoubleSpeed) {\n            frequencyTimer = frequencyTimer << 2;\n        }\n        Channel1.frequencyTimer = frequencyTimer;\n    };\n    Channel1.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel1.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        while (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            // A square channel's frequency timer period is set to (2048-frequency)*4.\n            // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n            Channel1.resetTimer();\n            frequencyTimer = Channel1.frequencyTimer;\n            frequencyTimer -= overflowAmount;\n            // Also increment our duty cycle\n            // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n            // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n            Channel1.waveFormPositionOnDuty = (Channel1.waveFormPositionOnDuty + 1) & 7;\n        }\n        Channel1.frequencyTimer = frequencyTimer;\n        // Get our ourput volume\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel1.isEnabled && Channel1.isDacEnabled) {\n            outputVolume = Channel1.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sampleValue\n        var sample = 1;\n        if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel1.NRx1Duty, Channel1.waveFormPositionOnDuty)) {\n            sample = -sample;\n        }\n        sample *= outputVolume;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel1.trigger = function () {\n        Channel1.isEnabled = true;\n        // Set length to maximum done in write\n        if (Channel1.lengthCounter === 0) {\n            Channel1.lengthCounter = Channel1.MAX_LENGTH;\n        }\n        // Reset our timer\n        // A square channel's frequency timer period is set to (2048-frequency)*4.\n        // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n        Channel1.resetTimer();\n        Channel1.envelopeCounter = Channel1.NRx2EnvelopePeriod;\n        Channel1.volume = Channel1.NRx2StartingVolume;\n        // Handle Channel Sweep\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        Channel1.sweepShadowFrequency = Channel1.frequency;\n        // Reset back to the sweep period\n        // Obscure behavior\n        // Sweep timers treat a period o 0 as 8\n        if (Channel1.NRx0SweepPeriod === 0) {\n            Channel1.sweepCounter = 8;\n        }\n        else {\n            Channel1.sweepCounter = Channel1.NRx0SweepPeriod;\n        }\n        // The internal enabled flag is set if either the sweep period or shift are non-zero, cleared otherwise.\n        Channel1.isSweepEnabled = Channel1.NRx0SweepPeriod > 0 || Channel1.NRx0SweepShift > 0;\n        Channel1.sweepNegateShouldDisableChannelOnClear = false;\n        // If the sweep shift is non-zero, frequency calculation and the overflow check are performed immediately.\n        // NOTE: The double calculation thing for the sweep does not happen here.\n        if (Channel1.NRx0SweepShift > 0 && didCalculatedSweepOverflow(calculateSweep())) {\n            Channel1.isEnabled = false;\n        }\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel1.isDacEnabled) {\n            Channel1.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel1.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        var cycleCounter = Channel1.cycleCounter + numberOfCycles;\n        Channel1.cycleCounter = cycleCounter;\n        // Dac enabled status cached by accumulator\n        return !(Channel1.frequencyTimer - cycleCounter > 0);\n    };\n    Channel1.updateSweep = function () {\n        // Dont update period if not enabled\n        if (!Channel1.isEnabled || !Channel1.isSweepEnabled) {\n            return;\n        }\n        // Decrement the sweep counter\n        var sweepCounter = Channel1.sweepCounter - 1;\n        if (sweepCounter <= 0) {\n            // Reset back to the sweep period\n            // Obscure behavior\n            // Sweep timers treat a period of 0 as 8\n            if (Channel1.NRx0SweepPeriod === 0) {\n                // Sweep isn't calculated when the period is 0\n                Channel1.sweepCounter = 8;\n            }\n            else {\n                // Reset our sweep counter to its period\n                Channel1.sweepCounter = Channel1.NRx0SweepPeriod;\n                // Calculate our sweep\n                // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n                // When it generates a clock and the sweep's internal enabled flag is set and the sweep period is not zero,\n                // a new frequency is calculated and the overflow check is performed. If the new frequency is 2047 or less,\n                // and the sweep shift is not zero, this new frequency is written back to the shadow frequency,\n                // and square 1's frequency in NR13 and NR14, then frequency calculation,\n                // and overflow check are run AGAIN immediately using this new value,\n                // but this second new frequency is not written back.\n                var newFrequency = calculateSweep();\n                if (didCalculatedSweepOverflow(newFrequency)) {\n                    Channel1.isEnabled = false;\n                }\n                if (Channel1.NRx0SweepShift > 0) {\n                    Channel1.setFrequency(newFrequency);\n                    if (didCalculatedSweepOverflow(calculateSweep())) {\n                        Channel1.isEnabled = false;\n                    }\n                }\n            }\n        }\n        else {\n            Channel1.sweepCounter = sweepCounter;\n        }\n    };\n    Channel1.updateLength = function () {\n        var lengthCounter = Channel1.lengthCounter;\n        if (lengthCounter > 0 && Channel1.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n            if (lengthCounter === 0) {\n                Channel1.isEnabled = false;\n            }\n        }\n        Channel1.lengthCounter = lengthCounter;\n    };\n    Channel1.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel1.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel1.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            // If notes are sustained for too long, this is probably why\n            if (envelopeCounter !== 0) {\n                var volume = Channel1.volume;\n                if (Channel1.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel1.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel1.volume = volume;\n            }\n        }\n        Channel1.envelopeCounter = envelopeCounter;\n    };\n    Channel1.setFrequency = function (frequency) {\n        // Set our shadowFrequency\n        Channel1.sweepShadowFrequency = frequency;\n        // Get the high and low bits\n        var passedFrequencyHighBits = (frequency >> 8) & 0x07;\n        var passedFrequencyLowBits = frequency & 0xff;\n        // Get the new register 4\n        var register4 = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx4);\n        // Knock off lower 3 bits, and Or on our high bits\n        var newRegister4 = register4 & 0xf8;\n        newRegister4 = newRegister4 | passedFrequencyHighBits;\n        // Set the registers\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx3, passedFrequencyLowBits);\n        eightBitStoreIntoGBMemory(Channel1.memoryLocationNRx4, newRegister4);\n        // Save the frequency for ourselves without triggering memory traps\n        Channel1.NRx3FrequencyLSB = passedFrequencyLowBits;\n        Channel1.NRx4FrequencyMSB = passedFrequencyHighBits;\n        Channel1.frequency = (Channel1.NRx4FrequencyMSB << 8) | Channel1.NRx3FrequencyLSB;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel1.cycleCounter = 0;\n    // Max Length of our Length Load\n    Channel1.MAX_LENGTH = 64;\n    // Squarewave channel with volume envelope and frequency sweep functions.\n    // NR10 -> Sweep Register R/W\n    Channel1.memoryLocationNRx0 = 0xff10;\n    // -PPP NSSS Sweep period, negate, shift\n    Channel1.NRx0SweepPeriod = 0;\n    Channel1.NRx0Negate = false;\n    Channel1.NRx0SweepShift = 0;\n    // NR11 -> Sound length/Wave pattern duty (R/W)\n    Channel1.memoryLocationNRx1 = 0xff11;\n    // DDLL LLLL Duty, Length load (64-L)\n    Channel1.NRx1Duty = 0;\n    Channel1.NRx1LengthLoad = 0;\n    // NR12 -> Volume Envelope (R/W)\n    Channel1.memoryLocationNRx2 = 0xff12;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel1.NRx2StartingVolume = 0;\n    Channel1.NRx2EnvelopeAddMode = false;\n    Channel1.NRx2EnvelopePeriod = 0;\n    // NR13 -> Frequency lo (W)\n    Channel1.memoryLocationNRx3 = 0xff13;\n    // FFFF FFFF Frequency LSB\n    Channel1.NRx3FrequencyLSB = 0;\n    // NR14 -> Frequency hi (R/W)\n    Channel1.memoryLocationNRx4 = 0xff14;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel1.NRx4LengthEnabled = false;\n    Channel1.NRx4FrequencyMSB = 0;\n    // Channel Properties\n    Channel1.channelNumber = 1;\n    Channel1.isEnabled = false;\n    Channel1.isDacEnabled = false;\n    Channel1.frequency = 0;\n    Channel1.frequencyTimer = 0x00;\n    Channel1.envelopeCounter = 0x00;\n    Channel1.lengthCounter = 0x00;\n    Channel1.volume = 0x00;\n    // Square Wave properties\n    Channel1.dutyCycle = 0x00;\n    Channel1.waveFormPositionOnDuty = 0x00;\n    // Channel 1 Sweep\n    Channel1.isSweepEnabled = false;\n    Channel1.sweepCounter = 0x00;\n    Channel1.sweepShadowFrequency = 0x00;\n    Channel1.sweepNegateShouldDisableChannelOnClear = false;\n    // Save States\n    Channel1.saveStateSlot = 7;\n    return Channel1;\n}());\n// Sweep Specific functions\n// Function to determing a new sweep in the current context\nfunction calculateSweep() {\n    // Start our new frequency, by making it equal to the \"shadow frequency\"\n    var oldFrequency = Channel1.sweepShadowFrequency;\n    var newFrequency = oldFrequency >> Channel1.NRx0SweepShift;\n    // Check for sweep negation\n    if (Channel1.NRx0Negate) {\n        Channel1.sweepNegateShouldDisableChannelOnClear = true;\n        newFrequency = oldFrequency - newFrequency;\n    }\n    else {\n        newFrequency = oldFrequency + newFrequency;\n    }\n    return newFrequency;\n}\n// Function to check if a calculated sweep overflowed\nfunction didCalculatedSweepOverflow(calculatedSweep) {\n    // 7FF is the highest value of the frequency: 111 1111 1111\n    // if it overflows, should disable the channel (handled by the caller)\n    if (calculatedSweep > 0x7ff) {\n        return true;\n    }\n    return false;\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel2 = /** @class */ (function () {\n    function Channel2() {\n    }\n    Channel2.updateNRx1 = function (value) {\n        Channel2.NRx1Duty = (value >> 6) & 0x03;\n        Channel2.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel2.lengthCounter = Channel2.MAX_LENGTH - Channel2.NRx1LengthLoad;\n    };\n    Channel2.updateNRx2 = function (value) {\n        Channel2.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel2.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel2.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        var isDacEnabled = (value & 0xf8) > 0;\n        Channel2.isDacEnabled = isDacEnabled;\n        // Blargg length test\n        // Disabling DAC should disable channel immediately\n        if (!isDacEnabled) {\n            Channel2.isEnabled = isDacEnabled;\n        }\n    };\n    Channel2.updateNRx3 = function (value) {\n        Channel2.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel2.frequency = (Channel2.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel2.updateNRx4 = function (value) {\n        // Handle our Channel frequency first\n        // As this is modified if we trigger for length.\n        var frequencyMSB = value & 0x07;\n        Channel2.NRx4FrequencyMSB = frequencyMSB;\n        Channel2.frequency = (frequencyMSB << 8) | Channel2.NRx3FrequencyLSB;\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        // Also see blargg's cgb sound test\n        // Extra length clocking occurs when writing to NRx4,\n        // when the frame sequencer's next step is one that,\n        // doesn't clock the length counter.\n        var frameSequencer = Sound.frameSequencer;\n        var doesNextFrameSequencerUpdateLength = (frameSequencer & 1) === 1;\n        var isBeingLengthEnabled = !Channel2.NRx4LengthEnabled && checkBitOnByte(6, value);\n        if (!doesNextFrameSequencerUpdateLength) {\n            if (Channel2.lengthCounter > 0 && isBeingLengthEnabled) {\n                Channel2.lengthCounter -= 1;\n                if (!checkBitOnByte(7, value) && Channel2.lengthCounter === 0) {\n                    Channel2.isEnabled = false;\n                }\n            }\n        }\n        // Set the length enabled from the value\n        Channel2.NRx4LengthEnabled = checkBitOnByte(6, value);\n        // Trigger out channel, unfreeze length if frozen\n        // Triggers should happen after obscure behavior\n        // See test 11 for trigger\n        if (checkBitOnByte(7, value)) {\n            Channel2.trigger();\n            // When we trigger on the obscure behavior, and we reset the length Counter to max\n            // We need to clock\n            if (!doesNextFrameSequencerUpdateLength && Channel2.lengthCounter === Channel2.MAX_LENGTH && Channel2.NRx4LengthEnabled) {\n                Channel2.lengthCounter -= 1;\n            }\n        }\n    };\n    // Function to save the state of the class\n    Channel2.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot), Channel2.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel2.saveStateSlot), Channel2.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel2.saveStateSlot), Channel2.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel2.saveStateSlot), Channel2.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot), Channel2.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel2.saveStateSlot), Channel2.dutyCycle);\n        store(getSaveStateMemoryOffset(0x14, Channel2.saveStateSlot), Channel2.waveFormPositionOnDuty);\n    };\n    // Function to load the save state from memory\n    Channel2.loadState = function () {\n        Channel2.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel2.saveStateSlot));\n        Channel2.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel2.saveStateSlot));\n        Channel2.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel2.saveStateSlot));\n        Channel2.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel2.saveStateSlot));\n        Channel2.volume = load(getSaveStateMemoryOffset(0x0e, Channel2.saveStateSlot));\n        Channel2.dutyCycle = load(getSaveStateMemoryOffset(0x13, Channel2.saveStateSlot));\n        Channel2.waveFormPositionOnDuty = load(getSaveStateMemoryOffset(0x14, Channel2.saveStateSlot));\n    };\n    Channel2.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1 - 1, 0xff);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx1, 0x3f);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx2, 0x00);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, 0xb8);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel2.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel2.cycleCounter;\n        Channel2.cycleCounter = 0;\n        return Channel2.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel2.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel2.frequency) << 2;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        Channel2.frequencyTimer = frequencyTimer << Cpu.GBCDoubleSpeed;\n    };\n    Channel2.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel2.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        while (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            // A square channel's frequency timer period is set to (2048-frequency)*4.\n            // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n            Channel2.resetTimer();\n            frequencyTimer = Channel2.frequencyTimer;\n            frequencyTimer -= overflowAmount;\n            // Also increment our duty cycle\n            // What is duty? https://en.wikipedia.org/wiki/Duty_cycle\n            // Duty cycle for square wave: http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Square_Wave\n            Channel2.waveFormPositionOnDuty = (Channel2.waveFormPositionOnDuty + 1) & 7;\n        }\n        Channel2.frequencyTimer = frequencyTimer;\n        // Get our ourput volume\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel2.isEnabled && Channel2.isDacEnabled) {\n            outputVolume = Channel2.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get the current sampleValue\n        var sample = 1;\n        if (!isDutyCycleClockPositiveOrNegativeForWaveform(Channel2.NRx1Duty, Channel2.waveFormPositionOnDuty)) {\n            sample = -sample;\n        }\n        sample = sample * outputVolume;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel2.trigger = function () {\n        Channel2.isEnabled = true;\n        // Set length to maximum done in write\n        if (Channel2.lengthCounter === 0) {\n            Channel2.lengthCounter = Channel2.MAX_LENGTH;\n        }\n        // Reset our timer\n        // A square channel's frequency timer period is set to (2048-frequency)*4.\n        // Four duty cycles are available, each waveform taking 8 frequency timer clocks to cycle through:\n        Channel2.resetTimer();\n        Channel2.envelopeCounter = Channel2.NRx2EnvelopePeriod;\n        Channel2.volume = Channel2.NRx2StartingVolume;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel2.isDacEnabled) {\n            Channel2.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel2.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        var cycleCounter = Channel2.cycleCounter + numberOfCycles;\n        Channel2.cycleCounter = cycleCounter;\n        // Dac enabled status cached by accumulator\n        return !(Channel2.frequencyTimer - cycleCounter > 0);\n    };\n    Channel2.updateLength = function () {\n        var lengthCounter = Channel2.lengthCounter;\n        if (lengthCounter > 0 && Channel2.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel2.isEnabled = false;\n        }\n        Channel2.lengthCounter = lengthCounter;\n    };\n    Channel2.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel2.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel2.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            if (envelopeCounter !== 0) {\n                var volume = Channel2.volume;\n                if (Channel2.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel2.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel2.volume = volume;\n            }\n        }\n        Channel2.envelopeCounter = envelopeCounter;\n    };\n    Channel2.setFrequency = function (frequency) {\n        // Get the high and low bits\n        var passedFrequencyHighBits = frequency >> 8;\n        var passedFrequencyLowBits = frequency & 0xff;\n        // Get the new register 4\n        var register4 = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx4);\n        // Knock off lower 3 bits, and Or on our high bits\n        var newRegister4 = register4 & 0xf8;\n        newRegister4 = newRegister4 | passedFrequencyHighBits;\n        // Set the registers\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx3, passedFrequencyLowBits);\n        eightBitStoreIntoGBMemory(Channel2.memoryLocationNRx4, newRegister4);\n        // Save the frequency for ourselves without triggering memory traps\n        Channel2.NRx3FrequencyLSB = passedFrequencyLowBits;\n        Channel2.NRx4FrequencyMSB = passedFrequencyHighBits;\n        Channel2.frequency = (passedFrequencyHighBits << 8) | passedFrequencyLowBits;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel2.cycleCounter = 0;\n    // Max Length of our Length Load\n    Channel2.MAX_LENGTH = 64;\n    // Squarewave channel with volume envelope functions only.\n    // Only used by register reading\n    Channel2.memoryLocationNRx0 = 0xff15;\n    // NR21 -> Sound length/Wave pattern duty (R/W)\n    Channel2.memoryLocationNRx1 = 0xff16;\n    // DDLL LLLL Duty, Length load (64-L)\n    Channel2.NRx1Duty = 0;\n    Channel2.NRx1LengthLoad = 0;\n    // NR22 -> Volume Envelope (R/W)\n    Channel2.memoryLocationNRx2 = 0xff17;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel2.NRx2StartingVolume = 0;\n    Channel2.NRx2EnvelopeAddMode = false;\n    Channel2.NRx2EnvelopePeriod = 0;\n    // NR23 -> Frequency lo (W)\n    Channel2.memoryLocationNRx3 = 0xff18;\n    // FFFF FFFF Frequency LSB\n    Channel2.NRx3FrequencyLSB = 0;\n    // NR24 -> Frequency hi (R/W)\n    Channel2.memoryLocationNRx4 = 0xff19;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel2.NRx4LengthEnabled = false;\n    Channel2.NRx4FrequencyMSB = 0;\n    // Channel Properties\n    Channel2.channelNumber = 2;\n    Channel2.isEnabled = false;\n    Channel2.isDacEnabled = false;\n    Channel2.frequency = 0;\n    Channel2.frequencyTimer = 0x00;\n    Channel2.envelopeCounter = 0x00;\n    Channel2.lengthCounter = 0x00;\n    Channel2.volume = 0x00;\n    // Square Wave properties\n    Channel2.dutyCycle = 0x00;\n    Channel2.waveFormPositionOnDuty = 0x00;\n    // Save States\n    Channel2.saveStateSlot = 8;\n    return Channel2;\n}());\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel3 = /** @class */ (function () {\n    function Channel3() {\n    }\n    // E--- ---- DAC power\n    Channel3.updateNRx0 = function (value) {\n        var isDacEnabled = checkBitOnByte(7, value);\n        // Sample buffer reset to zero when powered on\n        if (!Channel3.isDacEnabled && isDacEnabled) {\n            Channel3.sampleBuffer = 0x00;\n        }\n        Channel3.isDacEnabled = isDacEnabled;\n        // Blargg length test\n        // Disabling DAC should disable channel immediately\n        if (!isDacEnabled) {\n            Channel3.isEnabled = isDacEnabled;\n        }\n    };\n    Channel3.updateNRx1 = function (value) {\n        Channel3.NRx1LengthLoad = value;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        // Supposed to be 256, so subtracting 255 and then adding 1 if that makes sense\n        Channel3.lengthCounter = Channel3.MAX_LENGTH - Channel3.NRx1LengthLoad;\n    };\n    Channel3.updateNRx2 = function (value) {\n        Channel3.NRx2VolumeCode = (value >> 5) & 0x0f;\n    };\n    Channel3.updateNRx3 = function (value) {\n        Channel3.NRx3FrequencyLSB = value;\n        // Update Channel Frequency\n        Channel3.frequency = (Channel3.NRx4FrequencyMSB << 8) | value;\n    };\n    Channel3.updateNRx4 = function (value) {\n        // Handle our frequency\n        // Must be done first for our upcoming trigger\n        // To correctly reset timing\n        var frequencyMSB = value & 0x07;\n        Channel3.NRx4FrequencyMSB = frequencyMSB;\n        Channel3.frequency = (frequencyMSB << 8) | Channel3.NRx3FrequencyLSB;\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        // Also see blargg's cgb sound test\n        // Extra length clocking occurs when writing to NRx4,\n        // when the frame sequencer's next step is one that,\n        // doesn't clock the length counter.\n        var frameSequencer = Sound.frameSequencer;\n        var doesNextFrameSequencerUpdateLength = (frameSequencer & 1) === 1;\n        var isBeingLengthEnabled = false;\n        if (!doesNextFrameSequencerUpdateLength) {\n            // Check lengthEnable\n            isBeingLengthEnabled = !Channel3.NRx4LengthEnabled && checkBitOnByte(6, value);\n            if (Channel3.lengthCounter > 0 && isBeingLengthEnabled) {\n                Channel3.lengthCounter -= 1;\n                if (!checkBitOnByte(7, value) && Channel3.lengthCounter === 0) {\n                    Channel3.isEnabled = false;\n                }\n            }\n        }\n        // Set the length enabled from the value\n        Channel3.NRx4LengthEnabled = checkBitOnByte(6, value);\n        // Trigger our channel, unfreeze length if frozen\n        // Triggers should happen after obscure behavior\n        // See test 11 for trigger\n        if (checkBitOnByte(7, value)) {\n            Channel3.trigger();\n            // When we trigger on the obscure behavior, and we reset the length Counter to max\n            // We need to clock\n            if (!doesNextFrameSequencerUpdateLength && Channel3.lengthCounter === Channel3.MAX_LENGTH && Channel3.NRx4LengthEnabled) {\n                Channel3.lengthCounter -= 1;\n            }\n        }\n    };\n    // Function to save the state of the class\n    Channel3.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot), Channel3.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel3.saveStateSlot), Channel3.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel3.saveStateSlot), Channel3.lengthCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel3.saveStateSlot), Channel3.waveTablePosition);\n    };\n    // Function to load the save state from memory\n    Channel3.loadState = function () {\n        Channel3.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel3.saveStateSlot));\n        Channel3.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel3.saveStateSlot));\n        Channel3.lengthCounter = load(getSaveStateMemoryOffset(0x05, Channel3.saveStateSlot));\n        Channel3.waveTablePosition = load(getSaveStateMemoryOffset(0x09, Channel3.saveStateSlot));\n    };\n    // Memory Read Trap\n    Channel3.handleWaveRamRead = function () {\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // If the wave channel is enabled, accessing any byte from $FF30-$FF3F is equivalent to,\n        // accessing the current byte selected by the waveform position. Further, on the DMG accesses will only work in this manner,\n        // if made within a couple of clocks of the wave channel accessing wave RAM;\n        // if made at any other time, reads return $FF and writes have no effect.\n        // TODO: Handle DMG case\n        return readCurrentSampleByteFromWaveRam();\n    };\n    // Memory Write Trap\n    Channel3.handleWaveRamWrite = function (value) {\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // If the wave channel is enabled, accessing any byte from $FF30-$FF3F is equivalent to,\n        // accessing the current byte selected by the waveform position. Further, on the DMG accesses will only work in this manner,\n        // if made within a couple of clocks of the wave channel accessing wave RAM;\n        // if made at any other time, reads return $FF and writes have no effect.\n        // Thus we want to write the value to the current sample position\n        // Will Find the position, and knock off any remainder\n        var positionIndexToAdd = i32Portable(Channel3.waveTablePosition >> 1);\n        var memoryLocationWaveSample = Channel3.memoryLocationWaveTable + positionIndexToAdd;\n        eightBitStoreIntoGBMemory(memoryLocationWaveSample, value);\n    };\n    Channel3.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx0, 0x7f);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx1, 0xff);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx2, 0x9f);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel3.memoryLocationNRx4, 0xb8);\n        // The volume code changed\n        Channel3.volumeCodeChanged = true;\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel3.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel3.cycleCounter;\n        Channel3.cycleCounter = 0;\n        return Channel3.getSample(accumulatedCycles);\n    };\n    // Function to reset our timer, useful for GBC double speed mode\n    Channel3.resetTimer = function () {\n        var frequencyTimer = (2048 - Channel3.frequency) << 1;\n        // TODO: Ensure this is correct for GBC Double Speed Mode\n        Channel3.frequencyTimer = frequencyTimer << Cpu.GBCDoubleSpeed;\n    };\n    Channel3.getSample = function (numberOfCycles) {\n        // Check if we are enabled\n        if (!Channel3.isEnabled || !Channel3.isDacEnabled) {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Get our volume code\n        // Need this to compute the sample\n        var volumeCode = Channel3.volumeCode;\n        if (Channel3.volumeCodeChanged) {\n            volumeCode = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx2);\n            volumeCode = volumeCode >> 5;\n            volumeCode = volumeCode & 0x0f;\n            Channel3.volumeCode = volumeCode;\n            Channel3.volumeCodeChanged = false;\n        }\n        // Get the current sample\n        var sample = getSampleFromSampleBufferForWaveTablePosition();\n        // Shift our sample and set our volume depending on the volume code\n        // Since we can't multiply by float, simply divide by 4, 2, 1\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n        var outputVolume = 0;\n        switch (volumeCode) {\n            case 0:\n                sample >>= 4;\n                break;\n            case 1:\n                // Dont Shift sample\n                outputVolume = 1;\n                break;\n            case 2:\n                sample >>= 1;\n                outputVolume = 2;\n                break;\n            default:\n                sample >>= 2;\n                outputVolume = 4;\n                break;\n        }\n        // Apply out output volume\n        sample = outputVolume > 0 ? sample / outputVolume : 0;\n        // Square Waves Can range from -15 - 15. Therefore simply add 15\n        sample += 15;\n        // Update the sample based on our timer\n        var frequencyTimer = Channel3.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        while (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            // A wave channel's frequency timer period is set to (2048-frequency) * 2.\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Wave_Channel\n            Channel3.resetTimer();\n            frequencyTimer = Channel3.frequencyTimer;\n            frequencyTimer -= overflowAmount;\n            // Update our sample buffer\n            advanceWavePositionAndSampleBuffer();\n        }\n        Channel3.frequencyTimer = frequencyTimer;\n        // Finally return the sample\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel3.trigger = function () {\n        Channel3.isEnabled = true;\n        // Length counter maximum handled by write\n        if (Channel3.lengthCounter === 0) {\n            Channel3.lengthCounter = Channel3.MAX_LENGTH;\n        }\n        // Reset our timer\n        // A wave channel's frequency timer period is set to (2048-frequency)*2.\n        Channel3.resetTimer();\n        // Add some delay to our frequency timer\n        // So Honestly, lifted this from binjgb\n        // https://github.com/binji/binjgb/blob/68eb4b2f6d5d7a98d270e12c4b8ff065c07f5e94/src/emulator.c#L2625\n        // I have no clue why this is, but it passes 09-wave read while on.s\n        // blargg test.\n        // I think this has to do with obscure behavior?\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware\n        // When triggering the wave channel,\n        // the first sample to play is the previous one still in the high nibble of the sample buffer,\n        // and the next sample is the second nibble from the wave table.\n        // This is because it doesn't load the first byte on trigger like it \"should\".\n        // The first nibble from the wave table is thus not played until the waveform loops.\n        Channel3.frequencyTimer += 6;\n        // Reset our wave table position\n        Channel3.waveTablePosition = 0;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel3.isDacEnabled) {\n            Channel3.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel3.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        Channel3.cycleCounter += numberOfCycles;\n        // Dac enabled status cached by accumulator\n        return !(!Channel3.volumeCodeChanged && Channel3.frequencyTimer - Channel3.cycleCounter > 0);\n    };\n    Channel3.updateLength = function () {\n        var lengthCounter = Channel3.lengthCounter;\n        if (lengthCounter > 0 && Channel3.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel3.isEnabled = false;\n        }\n        Channel3.lengthCounter = lengthCounter;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel3.cycleCounter = 0;\n    // Max Length of our Length Load\n    Channel3.MAX_LENGTH = 256;\n    // Voluntary Wave channel with 32 4-bit programmable samples, played in sequence.\n    // NR30 -> Sound on/off (R/W)\n    Channel3.memoryLocationNRx0 = 0xff1a;\n    // NR31 -> Sound length (R/W)\n    Channel3.memoryLocationNRx1 = 0xff1b;\n    // LLLL LLLL Length load (256-L)\n    Channel3.NRx1LengthLoad = 0;\n    // NR32 -> Select ouput level (R/W)\n    Channel3.memoryLocationNRx2 = 0xff1c;\n    // -VV- ---- Volume code (00=0%, 01=100%, 10=50%, 11=25%)\n    Channel3.NRx2VolumeCode = 0;\n    // NR33 -> Frequency lower data (W)\n    Channel3.memoryLocationNRx3 = 0xff1d;\n    // FFFF FFFF Frequency LSB\n    Channel3.NRx3FrequencyLSB = 0;\n    // NR34 -> Frequency higher data (R/W)\n    Channel3.memoryLocationNRx4 = 0xff1e;\n    // TL-- -FFF Trigger, Length enable, Frequency MSB\n    Channel3.NRx4LengthEnabled = false;\n    Channel3.NRx4FrequencyMSB = 0;\n    // Our wave table location\n    Channel3.memoryLocationWaveTable = 0xff30;\n    // Channel Properties\n    Channel3.channelNumber = 3;\n    Channel3.isEnabled = false;\n    Channel3.isDacEnabled = false;\n    Channel3.frequency = 0;\n    Channel3.frequencyTimer = 0x00;\n    Channel3.lengthCounter = 0x00;\n    Channel3.waveTablePosition = 0x00;\n    Channel3.volumeCode = 0x00;\n    Channel3.volumeCodeChanged = false;\n    Channel3.sampleBuffer = 0x00;\n    // Save States\n    Channel3.saveStateSlot = 9;\n    return Channel3;\n}());\n// Functions specific to wave memory\nfunction advanceWavePositionAndSampleBuffer() {\n    // Advance the wave table position, and loop back if needed\n    var waveTablePosition = Channel3.waveTablePosition;\n    waveTablePosition += 1;\n    while (waveTablePosition >= 32) {\n        waveTablePosition -= 32;\n    }\n    Channel3.waveTablePosition = waveTablePosition;\n    // Load the next sample byte from wave ram,\n    // into the sample buffer\n    Channel3.sampleBuffer = readCurrentSampleByteFromWaveRam();\n}\nfunction readCurrentSampleByteFromWaveRam() {\n    // Will Find the position, and knock off any remainder\n    var positionIndexToAdd = i32Portable(Channel3.waveTablePosition >> 1);\n    var memoryLocationWaveSample = Channel3.memoryLocationWaveTable + positionIndexToAdd;\n    return eightBitLoadFromGBMemory(memoryLocationWaveSample);\n}\nfunction getSampleFromSampleBufferForWaveTablePosition() {\n    var sample = Channel3.sampleBuffer;\n    // Need to grab the top or lower half for the correct sample\n    sample >>= ((Channel3.waveTablePosition & 1) === 0) << 2;\n    sample &= 0x0f;\n    return sample;\n}\n\n// NOTE: Tons of Copy-pasta btween channels, because Classes cannot be instantiated yet in assemblyscript\nvar Channel4 = /** @class */ (function () {\n    function Channel4() {\n    }\n    Channel4.updateNRx1 = function (value) {\n        Channel4.NRx1LengthLoad = value & 0x3f;\n        // Also need to set our length counter. Taken from the old, setChannelLengthCounter\n        // Channel length is determined by 64 (or 256 if channel 3), - the length load\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n        // Note, this will be different for channel 3\n        Channel4.lengthCounter = Channel4.MAX_LENGTH - Channel4.NRx1LengthLoad;\n    };\n    Channel4.updateNRx2 = function (value) {\n        Channel4.NRx2StartingVolume = (value >> 4) & 0x0f;\n        Channel4.NRx2EnvelopeAddMode = checkBitOnByte(3, value);\n        Channel4.NRx2EnvelopePeriod = value & 0x07;\n        // Also, get our channel is dac enabled\n        var isDacEnabled = (value & 0xf8) > 0;\n        Channel4.isDacEnabled = isDacEnabled;\n        // Blargg length test\n        // Disabling DAC should disable channel immediately\n        if (!isDacEnabled) {\n            Channel4.isEnabled = isDacEnabled;\n        }\n    };\n    Channel4.updateNRx3 = function (value) {\n        var divisorCode = value & 0x07;\n        Channel4.NRx3ClockShift = value >> 4;\n        Channel4.NRx3WidthMode = checkBitOnByte(3, value);\n        Channel4.NRx3DivisorCode = divisorCode;\n        // Also, get our divisor\n        divisorCode <<= 1;\n        if (divisorCode < 1)\n            divisorCode = 1;\n        Channel4.divisor = divisorCode << 3;\n    };\n    Channel4.updateNRx4 = function (value) {\n        // Obscure behavior\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Obscure_Behavior\n        // Also see blargg's cgb sound test\n        // Extra length clocking occurs when writing to NRx4,\n        // when the frame sequencer's next step is one that,\n        // doesn't clock the length counter.\n        var frameSequencer = Sound.frameSequencer;\n        var doesNextFrameSequencerUpdateLength = (frameSequencer & 1) === 1;\n        var isBeingLengthEnabled = !Channel4.NRx4LengthEnabled && checkBitOnByte(6, value);\n        if (!doesNextFrameSequencerUpdateLength) {\n            if (Channel4.lengthCounter > 0 && isBeingLengthEnabled) {\n                Channel4.lengthCounter -= 1;\n                if (!checkBitOnByte(7, value) && Channel4.lengthCounter === 0) {\n                    Channel4.isEnabled = false;\n                }\n            }\n        }\n        // Set the length enabled from the value\n        Channel4.NRx4LengthEnabled = checkBitOnByte(6, value);\n        // Trigger out channel, unfreeze length if frozen\n        // Triggers should happen after obscure behavior\n        // See test 11 for trigger\n        if (checkBitOnByte(7, value)) {\n            Channel4.trigger();\n            // When we trigger on the obscure behavior, and we reset the length Counter to max\n            // We need to clock\n            if (!doesNextFrameSequencerUpdateLength && Channel4.lengthCounter === Channel4.MAX_LENGTH && Channel4.NRx4LengthEnabled) {\n                Channel4.lengthCounter -= 1;\n            }\n        }\n    };\n    // Function to save the state of the class\n    Channel4.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot), Channel4.isEnabled);\n        store(getSaveStateMemoryOffset(0x01, Channel4.saveStateSlot), Channel4.frequencyTimer);\n        store(getSaveStateMemoryOffset(0x05, Channel4.saveStateSlot), Channel4.envelopeCounter);\n        store(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot), Channel4.lengthCounter);\n        store(getSaveStateMemoryOffset(0x0e, Channel4.saveStateSlot), Channel4.volume);\n        store(getSaveStateMemoryOffset(0x13, Channel4.saveStateSlot), Channel4.linearFeedbackShiftRegister);\n    };\n    // Function to load the save state from memory\n    Channel4.loadState = function () {\n        Channel4.isEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Channel4.saveStateSlot));\n        Channel4.frequencyTimer = load(getSaveStateMemoryOffset(0x01, Channel4.saveStateSlot));\n        Channel4.envelopeCounter = load(getSaveStateMemoryOffset(0x05, Channel4.saveStateSlot));\n        Channel4.lengthCounter = load(getSaveStateMemoryOffset(0x09, Channel4.saveStateSlot));\n        Channel4.volume = load(getSaveStateMemoryOffset(0x0e, Channel4.saveStateSlot));\n        Channel4.linearFeedbackShiftRegister = load(getSaveStateMemoryOffset(0x13, Channel4.saveStateSlot));\n    };\n    Channel4.initialize = function () {\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1 - 1, 0xff);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx1, 0xff);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx2, 0x00);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx3, 0x00);\n        eightBitStoreIntoGBMemory(Channel4.memoryLocationNRx4, 0xbf);\n    };\n    // Function to get a sample using the cycle counter on the channel\n    Channel4.getSampleFromCycleCounter = function () {\n        var accumulatedCycles = Channel4.cycleCounter;\n        Channel4.cycleCounter = 0;\n        return Channel4.getSample(accumulatedCycles);\n    };\n    Channel4.getSample = function (numberOfCycles) {\n        // Decrement our channel timer\n        var frequencyTimer = Channel4.frequencyTimer;\n        frequencyTimer -= numberOfCycles;\n        // TODO: This can't be a while loop to use up all the cycles,\n        // Since noise is psuedo random and the period can be anything\n        if (frequencyTimer <= 0) {\n            // Get the amount that overflowed so we don't drop cycles\n            var overflowAmount = abs(frequencyTimer);\n            // Reset our timer\n            frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n            frequencyTimer -= overflowAmount;\n            // Do some cool stuff with lfsr\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Noise_Channel\n            // First XOR bit zero and one\n            var linearFeedbackShiftRegister = Channel4.linearFeedbackShiftRegister;\n            var lfsrBitZero = linearFeedbackShiftRegister & 0x01;\n            var lfsrBitOne = linearFeedbackShiftRegister >> 1;\n            lfsrBitOne = lfsrBitOne & 0x01;\n            var xorLfsrBitZeroOne = lfsrBitZero ^ lfsrBitOne;\n            // Shift all lsfr bits by one\n            linearFeedbackShiftRegister = linearFeedbackShiftRegister >> 1;\n            // Place the XOR result on bit 15\n            linearFeedbackShiftRegister = linearFeedbackShiftRegister | (xorLfsrBitZeroOne << 14);\n            // If the width mode is set, set xor on bit 6, and make lfsr 7 bit\n            if (Channel4.NRx3WidthMode) {\n                // Make 7 bit, by knocking off lower bits. Want to keeps bits 8 - 16, and then or on 7\n                linearFeedbackShiftRegister = linearFeedbackShiftRegister & ~0x40;\n                linearFeedbackShiftRegister = linearFeedbackShiftRegister | (xorLfsrBitZeroOne << 6);\n            }\n            Channel4.linearFeedbackShiftRegister = linearFeedbackShiftRegister;\n        }\n        // Make sure period never becomes negative\n        if (frequencyTimer < 0) {\n            frequencyTimer = 0;\n        }\n        Channel4.frequencyTimer = frequencyTimer;\n        // Get our ourput volume, set to zero for silence\n        var outputVolume = 0;\n        // Finally to set our output volume, the channel must be enabled,\n        // Our channel DAC must be enabled, and we must be in an active state\n        // Of our duty cycle\n        if (Channel4.isEnabled && Channel4.isDacEnabled) {\n            outputVolume = Channel4.volume;\n        }\n        else {\n            // Return silence\n            // Since range from -15 - 15, or 0 to 30 for our unsigned\n            return 15;\n        }\n        // Declare our sample\n        var sample = 0;\n        // Wave form output is bit zero of lfsr, INVERTED\n        sample = !checkBitOnByte(0, Channel4.linearFeedbackShiftRegister) ? 1 : -1;\n        sample = sample * outputVolume;\n        // Noise Can range from -15 - 15. Therefore simply add 15\n        sample = sample + 15;\n        return sample;\n    };\n    //http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Trigger_Event\n    Channel4.trigger = function () {\n        Channel4.isEnabled = true;\n        // Length counter maximum handled by write\n        if (Channel4.lengthCounter === 0) {\n            Channel4.lengthCounter = Channel4.MAX_LENGTH;\n        }\n        // Reset our timers\n        Channel4.frequencyTimer = Channel4.getNoiseChannelFrequencyPeriod();\n        Channel4.envelopeCounter = Channel4.NRx2EnvelopePeriod;\n        Channel4.volume = Channel4.NRx2StartingVolume;\n        // Noise channel's LFSR bits are all set to 1.\n        Channel4.linearFeedbackShiftRegister = 0x7fff;\n        // Finally if DAC is off, channel is still disabled\n        if (!Channel4.isDacEnabled) {\n            Channel4.isEnabled = false;\n        }\n    };\n    // Function to determine if the current channel would update when getting the sample\n    // This is used to accumulate samples\n    Channel4.willChannelUpdate = function (numberOfCycles) {\n        //Increment our cycle counter\n        Channel4.cycleCounter += numberOfCycles;\n        // Dac enabled status cached by accumulator\n        return !(Channel4.frequencyTimer - Channel4.cycleCounter > 0);\n    };\n    Channel4.getNoiseChannelFrequencyPeriod = function () {\n        // Get our divisor from the divisor code, and shift by the clock shift\n        var response = Channel4.divisor << Channel4.NRx3ClockShift;\n        return response << Cpu.GBCDoubleSpeed;\n    };\n    Channel4.updateLength = function () {\n        var lengthCounter = Channel4.lengthCounter;\n        if (lengthCounter > 0 && Channel4.NRx4LengthEnabled) {\n            lengthCounter -= 1;\n        }\n        if (lengthCounter === 0) {\n            Channel4.isEnabled = false;\n        }\n        Channel4.lengthCounter = lengthCounter;\n    };\n    Channel4.updateEnvelope = function () {\n        // Obscure behavior\n        // TODO: The volume envelope and sweep timers treat a period of 0 as 8.\n        var envelopeCounter = Channel4.envelopeCounter - 1;\n        if (envelopeCounter <= 0) {\n            envelopeCounter = Channel4.NRx2EnvelopePeriod;\n            // When the timer generates a clock and the envelope period is NOT zero, a new volume is calculated\n            // NOTE: There is some weiirrdd obscure behavior where zero can equal 8, so watch out for that\n            if (envelopeCounter !== 0) {\n                var volume = Channel4.volume;\n                if (Channel4.NRx2EnvelopeAddMode && volume < 15) {\n                    volume += 1;\n                }\n                else if (!Channel4.NRx2EnvelopeAddMode && volume > 0) {\n                    volume -= 1;\n                }\n                Channel4.volume = volume;\n            }\n        }\n        Channel4.envelopeCounter = envelopeCounter;\n    };\n    // Cycle Counter for our sound accumulator\n    Channel4.cycleCounter = 0;\n    // Max Length of our Length Load\n    Channel4.MAX_LENGTH = 64;\n    // Channel 4\n    // 'white noise' channel with volume envelope functions.\n    // Only used by register reading\n    Channel4.memoryLocationNRx0 = 0xff1f;\n    // NR41 -> Sound length (R/W)\n    Channel4.memoryLocationNRx1 = 0xff20;\n    // --LL LLLL Length load (64-L)\n    Channel4.NRx1LengthLoad = 0;\n    // NR42 -> Volume Envelope (R/W)\n    Channel4.memoryLocationNRx2 = 0xff21;\n    // VVVV APPP Starting volume, Envelope add mode, period\n    Channel4.NRx2StartingVolume = 0;\n    Channel4.NRx2EnvelopeAddMode = false;\n    Channel4.NRx2EnvelopePeriod = 0;\n    // NR43 -> Polynomial Counter (R/W)\n    Channel4.memoryLocationNRx3 = 0xff22;\n    // SSSS WDDD Clock shift, Width mode of LFSR, Divisor code\n    Channel4.NRx3ClockShift = 0;\n    Channel4.NRx3WidthMode = false;\n    Channel4.NRx3DivisorCode = 0;\n    // NR44 -> Trigger, Length Enable\n    Channel4.memoryLocationNRx4 = 0xff23;\n    // TL-- ---- Trigger, Length enable\n    Channel4.NRx4LengthEnabled = false;\n    // Channel Properties\n    Channel4.channelNumber = 4;\n    Channel4.isEnabled = false;\n    Channel4.isDacEnabled = false;\n    Channel4.frequencyTimer = 0x00;\n    Channel4.envelopeCounter = 0x00;\n    Channel4.lengthCounter = 0x00;\n    Channel4.volume = 0x00;\n    Channel4.divisor = 0;\n    // Noise properties\n    // NOTE: Is only 15 bits\n    Channel4.linearFeedbackShiftRegister = 0x00;\n    // Save States\n    Channel4.saveStateSlot = 10;\n    return Channel4;\n}());\n\n// Another class simply for accumulating samples\n// Default everything to silence\nvar SoundAccumulator = /** @class */ (function () {\n    function SoundAccumulator() {\n    }\n    SoundAccumulator.channel1Sample = 15;\n    SoundAccumulator.channel2Sample = 15;\n    SoundAccumulator.channel3Sample = 15;\n    SoundAccumulator.channel4Sample = 15;\n    SoundAccumulator.channel1DacEnabled = false;\n    SoundAccumulator.channel2DacEnabled = false;\n    SoundAccumulator.channel3DacEnabled = false;\n    SoundAccumulator.channel4DacEnabled = false;\n    SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n    SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n    SoundAccumulator.mixerVolumeChanged = false;\n    SoundAccumulator.mixerEnabledChanged = false;\n    //If a channel was updated, need to also track if we need to need to mix them again\n    SoundAccumulator.needToRemixSamples = false;\n    return SoundAccumulator;\n}());\n// Inlined because closure compiler inlines\nfunction initializeSoundAccumulator() {\n    SoundAccumulator.channel1Sample = 15;\n    SoundAccumulator.channel2Sample = 15;\n    SoundAccumulator.channel3Sample = 15;\n    SoundAccumulator.channel4Sample = 15;\n    SoundAccumulator.channel1DacEnabled = false;\n    SoundAccumulator.channel2DacEnabled = false;\n    SoundAccumulator.channel3DacEnabled = false;\n    SoundAccumulator.channel4DacEnabled = false;\n    SoundAccumulator.leftChannelSampleUnsignedByte = 127;\n    SoundAccumulator.rightChannelSampleUnsignedByte = 127;\n    SoundAccumulator.mixerVolumeChanged = true;\n    SoundAccumulator.mixerEnabledChanged = true;\n    SoundAccumulator.needToRemixSamples = false;\n}\n// Inlined because closure compiler inlines\nfunction accumulateSound(numberOfCycles) {\n    // Check if any of the individual channels will update\n    var channel1WillUpdate = Channel1.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel1.channelNumber);\n    var channel2WillUpdate = Channel2.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel2.channelNumber);\n    var channel3WillUpdate = Channel3.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel3.channelNumber);\n    var channel4WillUpdate = Channel4.willChannelUpdate(numberOfCycles) || didChannelDacChange(Channel4.channelNumber);\n    if (channel1WillUpdate) {\n        SoundAccumulator.channel1Sample = Channel1.getSampleFromCycleCounter();\n    }\n    if (channel2WillUpdate) {\n        SoundAccumulator.channel2Sample = Channel2.getSampleFromCycleCounter();\n    }\n    if (channel3WillUpdate) {\n        SoundAccumulator.channel3Sample = Channel3.getSampleFromCycleCounter();\n    }\n    if (channel4WillUpdate) {\n        SoundAccumulator.channel4Sample = Channel4.getSampleFromCycleCounter();\n    }\n    // If any channel updated, we need to re-mix our samples\n    if (channel1WillUpdate || channel2WillUpdate || channel3WillUpdate || channel4WillUpdate) {\n        SoundAccumulator.needToRemixSamples = true;\n    }\n    // Do Some downsampling magic\n    var downSampleCycleCounter = Sound.downSampleCycleCounter;\n    downSampleCycleCounter += numberOfCycles;\n    var maxDownSampleCycles = Sound.maxDownSampleCycles();\n    if (downSampleCycleCounter >= maxDownSampleCycles) {\n        // Reset the downsample counter\n        // Don't set to zero to catch overflowed cycles\n        downSampleCycleCounter -= maxDownSampleCycles;\n        if (SoundAccumulator.needToRemixSamples || SoundAccumulator.mixerVolumeChanged || SoundAccumulator.mixerEnabledChanged) {\n            mixChannelSamples(SoundAccumulator.channel1Sample, SoundAccumulator.channel2Sample, SoundAccumulator.channel3Sample, SoundAccumulator.channel4Sample);\n        }\n        else {\n            Sound.downSampleCycleCounter = downSampleCycleCounter;\n        }\n        // Finally Simply place the accumulated sample in memory\n        // Set our volumes in memory\n        // +1 so it can not be zero\n        setLeftAndRightOutputForAudioQueue(SoundAccumulator.leftChannelSampleUnsignedByte + 1, SoundAccumulator.rightChannelSampleUnsignedByte + 1, AUDIO_BUFFER_LOCATION);\n        var audioQueueIndex = Sound.audioQueueIndex + 1;\n        // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n        // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n        // Not 0xFFFF because we need half of 64kb since we store left and right channel\n        var maxIndex = i32Portable(Sound.wasmBoyMemoryMaxBufferSize >> 1) - 1;\n        if (audioQueueIndex >= maxIndex) {\n            audioQueueIndex -= 1;\n        }\n        Sound.audioQueueIndex = audioQueueIndex;\n    }\n    Sound.downSampleCycleCounter = downSampleCycleCounter;\n}\n// Function used by SoundAccumulator to find out if a channel Dac Changed\nfunction didChannelDacChange(channelNumber) {\n    switch (channelNumber) {\n        case Channel1.channelNumber: {\n            var isDacEnabled = Channel1.isDacEnabled;\n            var channel1EnabledChanged = SoundAccumulator.channel1DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel1DacEnabled = isDacEnabled;\n            return channel1EnabledChanged;\n        }\n        case Channel2.channelNumber: {\n            var isDacEnabled = Channel2.isDacEnabled;\n            var channel2EnabledChanged = SoundAccumulator.channel2DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel2DacEnabled = isDacEnabled;\n            return channel2EnabledChanged;\n        }\n        case Channel3.channelNumber: {\n            var isDacEnabled = Channel3.isDacEnabled;\n            var channel3EnabledChanged = SoundAccumulator.channel3DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel3DacEnabled = isDacEnabled;\n            return channel3EnabledChanged;\n        }\n        case Channel4.channelNumber: {\n            var isDacEnabled = Channel4.isDacEnabled;\n            var channel4EnabledChanged = SoundAccumulator.channel4DacEnabled !== isDacEnabled;\n            SoundAccumulator.channel4DacEnabled = isDacEnabled;\n            return channel4EnabledChanged;\n        }\n    }\n    return false;\n}\n\n// https://emu-docs.org/Game%20Boy/gb_sound.txt\nvar Sound = /** @class */ (function () {\n    function Sound() {\n    }\n    // Number of cycles to run in each batch process\n    // This number should be in sync so that sound doesn't run too many cyles at once\n    // and does not exceed the minimum number of cyles for either down sampling, or\n    // How often we change the frame, or a channel's update process\n    // Number of cycles is 87, because:\n    // Number of cycles before downsampling a single sample\n    // TODO: Find out how to make this number bigger\n    // Or, don't call this in syncCycles, and make the lib responsible.\n    Sound.batchProcessCycles = function () {\n        // return Cpu.GBCDoubleSpeed ? 174 : 87;\n        return 87 << Cpu.GBCDoubleSpeed;\n    };\n    Sound.updateNR50 = function (value) {\n        Sound.NR50LeftMixerVolume = (value >> 4) & 0x07;\n        Sound.NR50RightMixerVolume = value & 0x07;\n    };\n    Sound.updateNR51 = function (value) {\n        Sound.NR51IsChannel4EnabledOnLeftOutput = checkBitOnByte(7, value);\n        Sound.NR51IsChannel3EnabledOnLeftOutput = checkBitOnByte(6, value);\n        Sound.NR51IsChannel2EnabledOnLeftOutput = checkBitOnByte(5, value);\n        Sound.NR51IsChannel1EnabledOnLeftOutput = checkBitOnByte(4, value);\n        Sound.NR51IsChannel4EnabledOnRightOutput = checkBitOnByte(3, value);\n        Sound.NR51IsChannel3EnabledOnRightOutput = checkBitOnByte(2, value);\n        Sound.NR51IsChannel2EnabledOnRightOutput = checkBitOnByte(1, value);\n        Sound.NR51IsChannel1EnabledOnRightOutput = checkBitOnByte(0, value);\n    };\n    Sound.updateNR52 = function (value) {\n        Sound.NR52IsSoundEnabled = checkBitOnByte(7, value);\n    };\n    Sound.maxFrameSequenceCycles = function () {\n        // return Cpu.GBCDoubleSpeed ? 16384 : 8192;\n        return 8192 << Cpu.GBCDoubleSpeed;\n    };\n    Sound.maxDownSampleCycles = function () {\n        return Cpu.CLOCK_SPEED() / Sound.sampleRate;\n    };\n    // Function to save the state of the class\n    Sound.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot), Sound.frameSequenceCycleCounter);\n        store(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot), Sound.downSampleCycleCounter);\n        store(getSaveStateMemoryOffset(0x05, Sound.saveStateSlot), Sound.frameSequencer);\n    };\n    // Function to load the save state from memory\n    Sound.loadState = function () {\n        Sound.frameSequenceCycleCounter = load(getSaveStateMemoryOffset(0x00, Sound.saveStateSlot));\n        Sound.downSampleCycleCounter = load(getSaveStateMemoryOffset(0x04, Sound.saveStateSlot));\n        Sound.frameSequencer = load(getSaveStateMemoryOffset(0x05, Sound.saveStateSlot));\n        clearAudioBuffer();\n    };\n    // Current cycles\n    // This will be used for batch processing\n    // https://github.com/binji/binjgb/commit/e028f45e805bc0b0aa4697224a209f9ae514c954\n    // TODO: May Also need to do this for Reads\n    Sound.currentCycles = 0;\n    // Channel control / On-OFF / Volume (RW)\n    Sound.memoryLocationNR50 = 0xff24;\n    Sound.NR50LeftMixerVolume = 0;\n    Sound.NR50RightMixerVolume = 0;\n    // 0xFF25 selects which output each channel goes to, Referred to as NR51\n    Sound.memoryLocationNR51 = 0xff25;\n    Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel1EnabledOnRightOutput = true;\n    Sound.NR51IsChannel2EnabledOnRightOutput = true;\n    Sound.NR51IsChannel3EnabledOnRightOutput = true;\n    Sound.NR51IsChannel4EnabledOnRightOutput = true;\n    // Sound on/off\n    Sound.memoryLocationNR52 = 0xff26;\n    Sound.NR52IsSoundEnabled = true;\n    // $FF30 -- $FF3F is the load register space for the 4-bit samples for channel 3\n    Sound.memoryLocationChannel3LoadRegisterStart = 0xff30;\n    // Need to count how often we need to increment our frame sequencer\n    // Which you can read about below\n    Sound.frameSequenceCycleCounter = 0x0000;\n    // Also need to downsample our audio to average audio qualty\n    // https://www.reddit.com/r/EmuDev/comments/5gkwi5/gb_apu_sound_emulation/\n    // Want to do 44100hz, so CpuRate / Sound Rate, 4194304 / 44100 ~ 91 cycles\n    Sound.downSampleCycleCounter = 0x00;\n    Sound.sampleRate = 44100;\n    // Frame sequencer controls what should be updated and and ticked\n    // Every time the sound is updated :) It is updated everytime the\n    // Cycle counter reaches the max cycle\n    Sound.frameSequencer = 0x00;\n    // Our current sample number we are passing back to the wasmboy memory map\n    // Found that a static number of samples doesn't work well on mobile\n    // Will just update the queue index, grab as much as we can whenever we need more audio, then reset\n    // NOTE: Giving a really large sample rate gives more latency, but less pops!\n    //static readonly MAX_NUMBER_OF_SAMPLES: i32 = 4096;\n    Sound.audioQueueIndex = 0x0000;\n    Sound.wasmBoyMemoryMaxBufferSize = 0x20000;\n    // Save States\n    Sound.saveStateSlot = 6;\n    return Sound;\n}());\n// Initialize sound registers\n// From: https://emu-docs.org/Game%20Boy/gb_sound.txt\n// Inlined because closure compiler inlines\nfunction initializeSound() {\n    // Reset Stateful variables\n    Sound.currentCycles = 0;\n    Sound.NR50LeftMixerVolume = 0;\n    Sound.NR50RightMixerVolume = 0;\n    Sound.NR51IsChannel1EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel2EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel3EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel4EnabledOnLeftOutput = true;\n    Sound.NR51IsChannel1EnabledOnRightOutput = true;\n    Sound.NR51IsChannel2EnabledOnRightOutput = true;\n    Sound.NR51IsChannel3EnabledOnRightOutput = true;\n    Sound.NR51IsChannel4EnabledOnRightOutput = true;\n    Sound.NR52IsSoundEnabled = true;\n    Sound.frameSequenceCycleCounter = 0x0000;\n    Sound.downSampleCycleCounter = 0x00;\n    Sound.frameSequencer = 0x00;\n    Sound.audioQueueIndex = 0x0000;\n    // intiialize our channels\n    Channel1.initialize();\n    Channel2.initialize();\n    Channel3.initialize();\n    Channel4.initialize();\n    // Other Sound Registers\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR50, 0x77);\n    Sound.updateNR50(0x77);\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR51, 0xf3);\n    Sound.updateNR51(0xf3);\n    eightBitStoreIntoGBMemory(Sound.memoryLocationNR52, 0xf1);\n    Sound.updateNR52(0xf1);\n    // Override/reset some variables if the boot ROM is enabled\n    // For both GB and GBC\n    if (Cpu.BootROMEnabled) {\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR50, 0x00);\n        Sound.updateNR50(0x00);\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR51, 0x00);\n        Sound.updateNR51(0x00);\n        eightBitStoreIntoGBMemory(Sound.memoryLocationNR52, 0x70);\n        Sound.updateNR52(0x70);\n    }\n    initializeSoundAccumulator();\n}\n// Function to batch process our audio after we skipped so many cycles\nfunction batchProcessAudio() {\n    var batchProcessCycles = Sound.batchProcessCycles();\n    var currentCycles = Sound.currentCycles;\n    while (currentCycles >= batchProcessCycles) {\n        updateSound(batchProcessCycles);\n        currentCycles -= batchProcessCycles;\n    }\n    Sound.currentCycles = currentCycles;\n}\n// Function for updating sound\nfunction updateSound(numberOfCycles) {\n    // Check if our frameSequencer updated\n    var frameSequencerUpdated = updateFrameSequencer(numberOfCycles);\n    if (Config.audioAccumulateSamples && !frameSequencerUpdated) {\n        accumulateSound(numberOfCycles);\n    }\n    else {\n        calculateSound(numberOfCycles);\n    }\n}\n// Funciton to get the current Audio Queue index\nfunction getNumberOfSamplesInAudioBuffer() {\n    return Sound.audioQueueIndex;\n}\n// Function to reset the audio queue\nfunction clearAudioBuffer() {\n    Sound.audioQueueIndex = 0;\n}\n// Inlined because closure compiler inlines\nfunction calculateSound(numberOfCycles) {\n    // Update all of our channels\n    // All samples will be returned as 0 to 30\n    // 0 being -1.0, and 30 being 1.0\n    // (see blurb at top)\n    var channel1Sample = i32Portable(Channel1.getSample(numberOfCycles));\n    var channel2Sample = i32Portable(Channel2.getSample(numberOfCycles));\n    var channel3Sample = i32Portable(Channel3.getSample(numberOfCycles));\n    var channel4Sample = i32Portable(Channel4.getSample(numberOfCycles));\n    // TODO: Allow individual channels to be muted\n    // let channel1Sample: i32 = 15;\n    // let channel2Sample: i32 = 15;\n    // let channel3Sample: i32 = 15;\n    // let channel4Sample: i32 = 15;\n    // Save the samples in the accumulator\n    SoundAccumulator.channel1Sample = channel1Sample;\n    SoundAccumulator.channel2Sample = channel2Sample;\n    SoundAccumulator.channel3Sample = channel3Sample;\n    SoundAccumulator.channel4Sample = channel4Sample;\n    // Do Some downsampling magic\n    var downSampleCycleCounter = Sound.downSampleCycleCounter + numberOfCycles;\n    if (downSampleCycleCounter >= Sound.maxDownSampleCycles()) {\n        // Reset the downsample counter\n        // Don't set to zero to catch overflowed cycles\n        downSampleCycleCounter -= Sound.maxDownSampleCycles();\n        // Mix our samples\n        var mixedSample = mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample);\n        var leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n        var rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n        // Set our volumes in memory\n        // +1 so it can not be zero\n        setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, AUDIO_BUFFER_LOCATION);\n        if (Config.enableAudioDebugging) {\n            // Channel 1\n            mixedSample = mixChannelSamples(channel1Sample, 15, 15, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_1_BUFFER_LOCATION);\n            // Channel 2\n            mixedSample = mixChannelSamples(15, channel2Sample, 15, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_2_BUFFER_LOCATION);\n            // Channel 3\n            mixedSample = mixChannelSamples(15, 15, channel3Sample, 15);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_3_BUFFER_LOCATION);\n            // Channel 4\n            mixedSample = mixChannelSamples(15, 15, 15, channel4Sample);\n            leftChannelSampleUnsignedByte = splitHighByte(mixedSample);\n            rightChannelSampleUnsignedByte = splitLowByte(mixedSample);\n            setLeftAndRightOutputForAudioQueue(leftChannelSampleUnsignedByte + 1, rightChannelSampleUnsignedByte + 1, CHANNEL_4_BUFFER_LOCATION);\n        }\n        var audioQueueIndex = Sound.audioQueueIndex + 1;\n        // Don't allow our audioQueueIndex to overflow into other parts of the wasmBoy memory map\n        // https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit#gid=0\n        // Not 0xFFFF because we need half of 64kb since we store left and right channel\n        var maxIndex = i32Portable(Sound.wasmBoyMemoryMaxBufferSize >> 1) - 1;\n        if (audioQueueIndex >= maxIndex) {\n            audioQueueIndex -= 1;\n        }\n        Sound.audioQueueIndex = audioQueueIndex;\n    }\n    Sound.downSampleCycleCounter = downSampleCycleCounter;\n}\n// Inlined because closure compiler inlines\nfunction updateFrameSequencer(numberOfCycles) {\n    // APU runs at 4194304 / 512\n    // Or Cpu.clockSpeed / 512\n    // Which means, we need to update once every 8192 cycles :)\n    var maxFrameSequenceCycles = Sound.maxFrameSequenceCycles();\n    var frameSequenceCycleCounter = Sound.frameSequenceCycleCounter + numberOfCycles;\n    if (frameSequenceCycleCounter >= maxFrameSequenceCycles) {\n        // Reset the frameSequenceCycleCounter\n        // Not setting to zero as we do not want to drop cycles\n        frameSequenceCycleCounter -= maxFrameSequenceCycles;\n        Sound.frameSequenceCycleCounter = frameSequenceCycleCounter;\n        // Update our frame sequencer\n        // https://gist.github.com/drhelius/3652407\n        var frameSequencer = (Sound.frameSequencer + 1) & 7;\n        switch (frameSequencer) {\n            case 0:\n                // Update Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                break;\n            /* Do Nothing on one */\n            case 2:\n                // Update Sweep and Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                Channel1.updateSweep();\n                break;\n            /* Do Nothing on three */\n            case 4:\n                // Update Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                break;\n            /* Do Nothing on five */\n            case 6:\n                // Update Sweep and Length on Channels\n                Channel1.updateLength();\n                Channel2.updateLength();\n                Channel3.updateLength();\n                Channel4.updateLength();\n                Channel1.updateSweep();\n                break;\n            case 7:\n                // Update Envelope on channels\n                Channel1.updateEnvelope();\n                Channel2.updateEnvelope();\n                Channel4.updateEnvelope();\n                break;\n        }\n        // Save our frame sequencer\n        Sound.frameSequencer = frameSequencer;\n        return true;\n    }\n    else {\n        Sound.frameSequenceCycleCounter = frameSequenceCycleCounter;\n    }\n    return false;\n}\nfunction mixChannelSamples(channel1Sample, channel2Sample, channel3Sample, channel4Sample) {\n    // Do Some Cool mixing\n    // NR50 FF24 ALLL BRRR Vin L enable, Left vol, Vin R enable, Right vol\n    // NR51 FF25 NW21 NW21 Left enables, Right enables\n    // NR52 FF26 P--- NW21 Power control/status, Channel length statuses\n    // NW21 = 4 bits on byte\n    // 3 -> Channel 4, 2 -> Channel 3, 1 -> Channel 2, 0 -> Channel 1\n    if (channel1Sample === void 0) { channel1Sample = 15; }\n    if (channel2Sample === void 0) { channel2Sample = 15; }\n    if (channel3Sample === void 0) { channel3Sample = 15; }\n    if (channel4Sample === void 0) { channel4Sample = 15; }\n    // Matt's Proccess\n    // I push out 1024 samples at a time and use 96000 hz sampling rate, so I guess i'm a bit less than one frame,\n    // but I let the queue fill up with 4 x 1024 samples before I start waiting for the audio\n    // TODO: Vin Mixing\n    SoundAccumulator.mixerVolumeChanged = false;\n    // Get our channel volume for left/right\n    var leftChannelSample = 0;\n    var rightChannelSample = 0;\n    // Find the sample for the left if enabled\n    // other wise add silence (15) for the channel\n    leftChannelSample += Sound.NR51IsChannel1EnabledOnLeftOutput ? channel1Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel2EnabledOnLeftOutput ? channel2Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel3EnabledOnLeftOutput ? channel3Sample : 15;\n    leftChannelSample += Sound.NR51IsChannel4EnabledOnLeftOutput ? channel4Sample : 15;\n    // Find the sample for the right if enabled\n    // other wise add silence (15) for the channel\n    rightChannelSample += Sound.NR51IsChannel1EnabledOnRightOutput ? channel1Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel2EnabledOnRightOutput ? channel2Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel3EnabledOnRightOutput ? channel3Sample : 15;\n    rightChannelSample += Sound.NR51IsChannel4EnabledOnRightOutput ? channel4Sample : 15;\n    // Update our accumulator\n    SoundAccumulator.mixerEnabledChanged = false;\n    SoundAccumulator.needToRemixSamples = false;\n    // Finally multiply our volumes by the mixer volume\n    // Mixer volume can be at most 7 + 1\n    // Can be at most 7, because we only have 3 bits, 111 = 7\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Mixer\n    // Done in the getSampleAsUnsignedByte(), since we are doing some weirdness there :)\n    // Convert our samples from unsigned 32 to unsigned byte\n    // Reason being, We want to be able to pass in wasm memory as usigned byte. Javascript will handle the conversion back\n    var leftChannelSampleUnsignedByte = getSampleAsUnsignedByte(leftChannelSample, Sound.NR50LeftMixerVolume + 1);\n    var rightChannelSampleUnsignedByte = getSampleAsUnsignedByte(rightChannelSample, Sound.NR50RightMixerVolume + 1);\n    // Save these samples in the accumulator\n    SoundAccumulator.leftChannelSampleUnsignedByte = leftChannelSampleUnsignedByte;\n    SoundAccumulator.rightChannelSampleUnsignedByte = rightChannelSampleUnsignedByte;\n    return concatenateBytes(leftChannelSampleUnsignedByte, rightChannelSampleUnsignedByte);\n}\nfunction getSampleAsUnsignedByte(sample, mixerVolume) {\n    // If the sample is silence, return silence as unsigned byte\n    // Silence is common, and should be checked for performance\n    if (sample === 60) {\n        return 127;\n    }\n    // convert to a signed, precise scale of -6000 to 6000 (cheap way of -1.0 to 1.0)\n    // Multiply by the mixer volume fraction (to find the actual volume)\n    var precision = 100000;\n    var convertedSample = sample - 60;\n    convertedSample = convertedSample * precision;\n    // Multiply by the mixer volume fraction (to find the actual volume)\n    convertedSample = (convertedSample * mixerVolume) >> 3;\n    // Convert back to scale of 0 to 120\n    convertedSample = i32Portable(convertedSample / precision) + 60;\n    // Finally, convert to an unsigned byte scale\n    // With Four Channels (0 to 30) and no global volume. Max is 120\n    // max unsigned byte goal is 254 (see blurb at top).\n    // 120 / 254 should give the correct conversion\n    // For example, 120 / 254 = 0.47244094488188976\n    // Multiply by 1000 to increase the float into an int\n    // so, 120 * 1000 / (0.47244094488188976 * 1000) should give approximate answer for max mixer volume\n    var maxDivider = i32Portable((120 * precision) / 254);\n    convertedSample = i32Portable((convertedSample * precision) / maxDivider);\n    // Ensure we have an i32 and not a float for JS builds\n    convertedSample = i32Portable(convertedSample);\n    return convertedSample;\n}\n// Function to set our left and right channels at the correct queue index\nfunction setLeftAndRightOutputForAudioQueue(leftVolume, rightVolume, bufferLocation) {\n    // Get our stereo index\n    var audioQueueOffset = bufferLocation + (Sound.audioQueueIndex << 1);\n    // Store our volumes\n    // +1 that way we don't have empty data to ensure that the value is set\n    store(audioQueueOffset + 0, (leftVolume + 1));\n    store(audioQueueOffset + 1, (rightVolume + 1));\n}\n\n// Functions involved in R/W of sound registers\n// Function to check and handle writes to sound registers\n// Inlined because closure compiler inlines\n// NOTE: For write traps, return false = don't write to memory,\n// return true = allow the write to memory\nfunction SoundRegisterWriteTraps(offset, value) {\n    if (offset !== Sound.memoryLocationNR52 && !Sound.NR52IsSoundEnabled) {\n        // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Power_Control\n        // When sound is turned off / enabled\n        // Block all writes to any sound register EXCEPT NR52!\n        // This is under the assumption that the check for\n        // offset >= 0xFF10 && offset <= 0xFF26\n        // is done in writeTraps.ts (which it is)\n        // NOTE: Except on DMG, length can still be written (whatever that means)\n        return false;\n    }\n    switch (offset) {\n        // Handle NRx0 on Channels\n        case Channel1.memoryLocationNRx0:\n            Channel1.updateNRx0(value);\n            return true;\n        case Channel3.memoryLocationNRx0:\n            Channel3.updateNRx0(value);\n            return true;\n        // Handle NRx1 (Length Counter) on Channels\n        case Channel1.memoryLocationNRx1:\n            Channel1.updateNRx1(value);\n            return true;\n        case Channel2.memoryLocationNRx1:\n            Channel2.updateNRx1(value);\n            return true;\n        case Channel3.memoryLocationNRx1:\n            Channel3.updateNRx1(value);\n            return true;\n        case Channel4.memoryLocationNRx1:\n            Channel4.updateNRx1(value);\n            return true;\n        // Handle NRx2 (Envelope / Volume) on Channels\n        case Channel1.memoryLocationNRx2:\n            Channel1.updateNRx2(value);\n            return true;\n        case Channel2.memoryLocationNRx2:\n            Channel2.updateNRx2(value);\n            return true;\n        case Channel3.memoryLocationNRx2:\n            // Check if channel 3's volume code was written too\n            // This is handcy to know for accumulation of samples\n            Channel3.volumeCodeChanged = true;\n            Channel3.updateNRx2(value);\n            return true;\n        case Channel4.memoryLocationNRx2:\n            Channel4.updateNRx2(value);\n            return true;\n        // Handle NRx3 (Frequency / Noise Properties) on Channels\n        case Channel1.memoryLocationNRx3:\n            Channel1.updateNRx3(value);\n            return true;\n        case Channel2.memoryLocationNRx3:\n            Channel2.updateNRx3(value);\n            return true;\n        case Channel3.memoryLocationNRx3:\n            Channel3.updateNRx3(value);\n            return true;\n        case Channel4.memoryLocationNRx3:\n            Channel4.updateNRx3(value);\n            return true;\n        // Check our NRx4 registers to trap our trigger bits\n        case Channel1.memoryLocationNRx4:\n            Channel1.updateNRx4(value);\n            return true;\n        case Channel2.memoryLocationNRx4:\n            Channel2.updateNRx4(value);\n            return true;\n        case Channel3.memoryLocationNRx4:\n            Channel3.updateNRx4(value);\n            return true;\n        case Channel4.memoryLocationNRx4:\n            Channel4.updateNRx4(value);\n            return true;\n        // Tell the sound accumulator if volumes changes\n        case Sound.memoryLocationNR50:\n            Sound.updateNR50(value);\n            SoundAccumulator.mixerVolumeChanged = true;\n            return true;\n        // Tell the sound accumulator if volumes changes\n        case Sound.memoryLocationNR51:\n            Sound.updateNR51(value);\n            SoundAccumulator.mixerEnabledChanged = true;\n            return true;\n        case Sound.memoryLocationNR52:\n            // Reset all registers except NR52\n            // See if we were enabled, then update the register.\n            var wasNR52Enabled = Sound.NR52IsSoundEnabled;\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Power_Control\n            // When powered on, the frame sequencer is reset so that the next step will be 0,\n            // the square duty units are reset to the first step of the waveform,\n            // and the wave channel's sample buffer is reset to 0.\n            if (!wasNR52Enabled && checkBitOnByte(7, value)) {\n                Sound.frameSequencer = 0x07;\n                Channel1.waveFormPositionOnDuty = 0x00;\n                Channel2.waveFormPositionOnDuty = 0x00;\n                // TODO: Wave Channel Sample Buffer?\n                // I don't think we clear wave RAM here...\n            }\n            // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Power_Control\n            // When powered off, all registers (NR10-NR51) are instantly written with zero\n            // and any writes to those registers are ignored while power remains off\n            if (wasNR52Enabled && !checkBitOnByte(7, value)) {\n                for (var i = 0xff10; i < 0xff26; ++i) {\n                    eightBitStoreIntoGBMemoryWithTraps(i, 0x00);\n                }\n            }\n            // Need to update our new value here, that way writes go through :p\n            Sound.updateNR52(value);\n            return true;\n    }\n    // We did not handle the write, Allow the write\n    return true;\n}\n// http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n// Inlined because closure compiler inlines\nfunction SoundRegisterReadTraps(offset) {\n    // Registers must be OR'd with values when being read\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    switch (offset) {\n        // Handle NRx0 on Channels\n        case Channel1.memoryLocationNRx0: {\n            var register = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx0);\n            return register | 0x80;\n        }\n        case Channel2.memoryLocationNRx0: {\n            var register = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx0);\n            return register | 0xff;\n        }\n        case Channel3.memoryLocationNRx0: {\n            var register = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx0);\n            return register | 0x7f;\n        }\n        case Channel4.memoryLocationNRx0: {\n            var register = eightBitLoadFromGBMemory(Channel4.memoryLocationNRx0);\n            return register | 0xff;\n        }\n        case Sound.memoryLocationNR50: {\n            var register = eightBitLoadFromGBMemory(Sound.memoryLocationNR50);\n            return register | 0x00;\n        }\n        // Handle NRx1 on Channels\n        case Channel1.memoryLocationNRx1: {\n            var register = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx1);\n            return register | 0x3f;\n        }\n        case Channel2.memoryLocationNRx1: {\n            var register = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx1);\n            return register | 0x3f;\n        }\n        case Channel3.memoryLocationNRx1: {\n            var register = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx1);\n            return register | 0xff;\n        }\n        case Channel4.memoryLocationNRx1: {\n            var register = eightBitLoadFromGBMemory(Channel4.memoryLocationNRx1);\n            return register | 0xff;\n        }\n        case Sound.memoryLocationNR51: {\n            var register = eightBitLoadFromGBMemory(Sound.memoryLocationNR51);\n            return register | 0x00;\n        }\n        // Handle NRx2 on Channels\n        case Channel1.memoryLocationNRx2: {\n            var register = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx2);\n            return register | 0x00;\n        }\n        case Channel2.memoryLocationNRx2: {\n            var register = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx2);\n            return register | 0x00;\n        }\n        case Channel3.memoryLocationNRx2: {\n            var register = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx2);\n            return register | 0x9f;\n        }\n        case Channel4.memoryLocationNRx2: {\n            var register = eightBitLoadFromGBMemory(Channel4.memoryLocationNRx2);\n            return register | 0x00;\n        }\n        case Sound.memoryLocationNR52: {\n            // This will fix bugs in orcale of ages :)\n            // Start our registerNR52\n            var registerNR52 = 0x00;\n            // Set the first bit to the sound paower status\n            if (Sound.NR52IsSoundEnabled) {\n                registerNR52 = setBitOnByte(7, registerNR52);\n            }\n            else {\n                registerNR52 = resetBitOnByte(7, registerNR52);\n            }\n            // Set our lower 4 bits to our channel length statuses\n            if (Channel1.isEnabled) {\n                registerNR52 = setBitOnByte(0, registerNR52);\n            }\n            else {\n                registerNR52 = resetBitOnByte(0, registerNR52);\n            }\n            if (Channel2.isEnabled) {\n                registerNR52 = setBitOnByte(1, registerNR52);\n            }\n            else {\n                registerNR52 = resetBitOnByte(1, registerNR52);\n            }\n            if (Channel3.isEnabled) {\n                registerNR52 = setBitOnByte(2, registerNR52);\n            }\n            else {\n                registerNR52 = resetBitOnByte(2, registerNR52);\n            }\n            if (Channel4.isEnabled) {\n                registerNR52 = setBitOnByte(3, registerNR52);\n            }\n            else {\n                registerNR52 = resetBitOnByte(3, registerNR52);\n            }\n            // Or from the table\n            registerNR52 |= 0x70;\n            return registerNR52;\n        }\n        // Handle NRx3 on Channels\n        case Channel1.memoryLocationNRx3: {\n            var register = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx3);\n            return register | 0xff;\n        }\n        case Channel2.memoryLocationNRx3: {\n            var register = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx3);\n            return register | 0xff;\n        }\n        case Channel3.memoryLocationNRx3: {\n            var register = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx3);\n            return register | 0xff;\n        }\n        case Channel4.memoryLocationNRx3: {\n            var register = eightBitLoadFromGBMemory(Channel4.memoryLocationNRx3);\n            return register | 0x00;\n        }\n        // Handle NRx4 on Channels\n        case Channel1.memoryLocationNRx4: {\n            var register = eightBitLoadFromGBMemory(Channel1.memoryLocationNRx4);\n            return register | 0xbf;\n        }\n        case Channel2.memoryLocationNRx4: {\n            var register = eightBitLoadFromGBMemory(Channel2.memoryLocationNRx4);\n            return register | 0xbf;\n        }\n        case Channel3.memoryLocationNRx4: {\n            var register = eightBitLoadFromGBMemory(Channel3.memoryLocationNRx4);\n            return register | 0xbf;\n        }\n        case Channel4.memoryLocationNRx4: {\n            var register = eightBitLoadFromGBMemory(Channel4.memoryLocationNRx4);\n            return register | 0xbf;\n        }\n    }\n    return -1;\n}\n\nvar Interrupts = /** @class */ (function () {\n    function Interrupts() {\n    }\n    Interrupts.updateInterruptEnabled = function (value) {\n        Interrupts.isVBlankInterruptEnabled = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n        Interrupts.isLcdInterruptEnabled = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n        Interrupts.isTimerInterruptEnabled = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n        Interrupts.isSerialInterruptEnabled = checkBitOnByte(Interrupts.bitPositionSerialInterrupt, value);\n        Interrupts.isJoypadInterruptEnabled = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n        Interrupts.interruptsEnabledValue = value;\n    };\n    Interrupts.updateInterruptRequested = function (value) {\n        Interrupts.isVBlankInterruptRequested = checkBitOnByte(Interrupts.bitPositionVBlankInterrupt, value);\n        Interrupts.isLcdInterruptRequested = checkBitOnByte(Interrupts.bitPositionLcdInterrupt, value);\n        Interrupts.isTimerInterruptRequested = checkBitOnByte(Interrupts.bitPositionTimerInterrupt, value);\n        Interrupts.isSerialInterruptRequested = checkBitOnByte(Interrupts.bitPositionSerialInterrupt, value);\n        Interrupts.isJoypadInterruptRequested = checkBitOnByte(Interrupts.bitPositionJoypadInterrupt, value);\n        Interrupts.interruptsRequestedValue = value;\n    };\n    // Function to return if we have any pending interrupts\n    Interrupts.areInterruptsPending = function () {\n        return (Interrupts.interruptsRequestedValue & Interrupts.interruptsEnabledValue & 0x1f) > 0;\n    };\n    // Function to save the state of the class\n    Interrupts.saveState = function () {\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitch);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot), Interrupts.masterInterruptSwitchDelay);\n        // Interrupts enabled and requested are stored in actual GB memory, thus, don't need to be saved\n    };\n    // Function to load the save state from memory\n    Interrupts.loadState = function () {\n        Interrupts.masterInterruptSwitch = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x00, Interrupts.saveStateSlot));\n        Interrupts.masterInterruptSwitchDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x01, Interrupts.saveStateSlot));\n        Interrupts.updateInterruptEnabled(eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptEnabled));\n        Interrupts.updateInterruptRequested(eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest));\n    };\n    Interrupts.masterInterruptSwitch = false;\n    // According to mooneye, interrupts are not handled until AFTER\n    // Next instruction\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown\n    Interrupts.masterInterruptSwitchDelay = false;\n    // Biut position for each part of the interrupts HW registers\n    Interrupts.bitPositionVBlankInterrupt = 0;\n    Interrupts.bitPositionLcdInterrupt = 1;\n    Interrupts.bitPositionTimerInterrupt = 2;\n    Interrupts.bitPositionSerialInterrupt = 3;\n    Interrupts.bitPositionJoypadInterrupt = 4;\n    Interrupts.memoryLocationInterruptEnabled = 0xffff; // A.K.A interrupt Flag (IE)\n    // Cache which Interrupts are enabled\n    Interrupts.interruptsEnabledValue = 0;\n    Interrupts.isVBlankInterruptEnabled = false;\n    Interrupts.isLcdInterruptEnabled = false;\n    Interrupts.isTimerInterruptEnabled = false;\n    Interrupts.isSerialInterruptEnabled = false;\n    Interrupts.isJoypadInterruptEnabled = false;\n    Interrupts.memoryLocationInterruptRequest = 0xff0f; // A.K.A interrupt Flag (IF)\n    // Cache which Interrupts are requested\n    Interrupts.interruptsRequestedValue = 0;\n    Interrupts.isVBlankInterruptRequested = false;\n    Interrupts.isLcdInterruptRequested = false;\n    Interrupts.isTimerInterruptRequested = false;\n    Interrupts.isSerialInterruptRequested = false;\n    Interrupts.isJoypadInterruptRequested = false;\n    // Save States\n    Interrupts.saveStateSlot = 2;\n    return Interrupts;\n}());\n// Inlined because closure compiler inlines\nfunction initializeInterrupts() {\n    // Values from BGB\n    // IE\n    Interrupts.updateInterruptEnabled(0x00);\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptEnabled, Interrupts.interruptsEnabledValue);\n    // IF\n    Interrupts.updateInterruptRequested(0xe1);\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, Interrupts.interruptsRequestedValue);\n}\n// NOTE: Interrupts should be handled before reading an opcode\n// Inlined because closure compiler inlines\nfunction checkInterrupts() {\n    // First check for our delay was enabled\n    if (Interrupts.masterInterruptSwitchDelay) {\n        Interrupts.masterInterruptSwitch = true;\n        Interrupts.masterInterruptSwitchDelay = false;\n    }\n    // Check if we have an enabled and requested interrupt\n    var isAnInterruptRequestedAndEnabledValue = Interrupts.interruptsEnabledValue & Interrupts.interruptsRequestedValue & 0x1f;\n    if (isAnInterruptRequestedAndEnabledValue > 0) {\n        // Boolean to track if interrupts were handled\n        // Interrupt handling requires 20 cycles\n        // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n        var wasInterruptHandled = false;\n        // Service our interrupts, if we have the master switch enabled\n        // https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/\n        if (Interrupts.masterInterruptSwitch && !Cpu.isHaltNoJump) {\n            if (Interrupts.isVBlankInterruptEnabled && Interrupts.isVBlankInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionVBlankInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isLcdInterruptEnabled && Interrupts.isLcdInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionLcdInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isTimerInterruptEnabled && Interrupts.isTimerInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionTimerInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isSerialInterruptEnabled && Interrupts.isSerialInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionSerialInterrupt);\n                wasInterruptHandled = true;\n            }\n            else if (Interrupts.isJoypadInterruptEnabled && Interrupts.isJoypadInterruptRequested) {\n                _handleInterrupt(Interrupts.bitPositionJoypadInterrupt);\n                wasInterruptHandled = true;\n            }\n        }\n        var interuptHandlerCycles = 0;\n        if (wasInterruptHandled) {\n            // Interrupt handling requires 20 cycles, TCAGBD\n            interuptHandlerCycles = 20;\n            if (Cpu.isHalted()) {\n                // If the CPU was halted, now is the time to un-halt\n                // Should be done here when the jump occurs according to:\n                // https://www.reddit.com/r/EmuDev/comments/6fmjch/gb_glitches_in_links_awakening_and_pok%C3%A9mon_gold/\n                Cpu.exitHaltAndStop();\n                interuptHandlerCycles += 4;\n            }\n        }\n        if (Cpu.isHalted()) {\n            Cpu.exitHaltAndStop();\n        }\n        return interuptHandlerCycles;\n    }\n    return 0;\n}\nfunction _handleInterrupt(bitPosition) {\n    // Disable the master switch\n    setInterrupts(false);\n    // Disable the bit on the interruptRequest\n    var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n    interruptRequest = resetBitOnByte(bitPosition, interruptRequest);\n    Interrupts.interruptsRequestedValue = interruptRequest;\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n    // Push the programCounter onto the stacks\n    // Push the next instruction, not the halt itself (TCAGBD).\n    Cpu.stackPointer = Cpu.stackPointer - 2;\n    if (Cpu.isHalted()) {\n        // TODO: This breaks Pokemon Yellow, And OG Link's awakening. Find out why...\n        // sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter + 1);\n        sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter);\n    }\n    else {\n        sixteenBitStoreIntoGBMemory(Cpu.stackPointer, Cpu.programCounter);\n    }\n    // Jump to the correct interrupt location\n    // Also piggyback off of the switch to reset our HW Register caching\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/interupts.html\n    switch (bitPosition) {\n        case Interrupts.bitPositionVBlankInterrupt:\n            Interrupts.isVBlankInterruptRequested = false;\n            Cpu.programCounter = 0x40;\n            break;\n        case Interrupts.bitPositionLcdInterrupt:\n            Interrupts.isLcdInterruptRequested = false;\n            Cpu.programCounter = 0x48;\n            break;\n        case Interrupts.bitPositionTimerInterrupt:\n            Interrupts.isTimerInterruptRequested = false;\n            Cpu.programCounter = 0x50;\n            break;\n        case Interrupts.bitPositionSerialInterrupt:\n            Interrupts.isSerialInterruptRequested = false;\n            Cpu.programCounter = 0x58;\n            break;\n        case Interrupts.bitPositionJoypadInterrupt:\n            Interrupts.isJoypadInterruptRequested = false;\n            Cpu.programCounter = 0x60;\n            break;\n    }\n}\nfunction _requestInterrupt(bitPosition) {\n    var interruptRequest = eightBitLoadFromGBMemory(Interrupts.memoryLocationInterruptRequest);\n    // Pass to set the correct interrupt bit on interruptRequest\n    interruptRequest = setBitOnByte(bitPosition, interruptRequest);\n    Interrupts.interruptsRequestedValue = interruptRequest;\n    eightBitStoreIntoGBMemory(Interrupts.memoryLocationInterruptRequest, interruptRequest);\n}\nfunction setInterrupts(value) {\n    // If we are enabling interrupts,\n    // we want to wait 4 cycles before enabling\n    if (value) {\n        Interrupts.masterInterruptSwitchDelay = true;\n    }\n    else {\n        Interrupts.masterInterruptSwitch = false;\n    }\n}\n// Inlined because closure compiler inlines\nfunction requestVBlankInterrupt() {\n    Interrupts.isVBlankInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionVBlankInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestLcdInterrupt() {\n    Interrupts.isLcdInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionLcdInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestTimerInterrupt() {\n    Interrupts.isTimerInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionTimerInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestJoypadInterrupt() {\n    Interrupts.isJoypadInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionJoypadInterrupt);\n}\n// Inlined because closure compiler inlines\nfunction requestSerialInterrupt() {\n    Interrupts.isSerialInterruptRequested = true;\n    _requestInterrupt(Interrupts.bitPositionSerialInterrupt);\n}\n\nvar Timers = /** @class */ (function () {\n    function Timers() {\n    }\n    // Number of cycles to run in each batch process\n    Timers.batchProcessCycles = function () {\n        return 256;\n    };\n    Timers.updateDividerRegister = function () {\n        var oldDividerRegister = Timers.dividerRegister;\n        Timers.dividerRegister = 0;\n        eightBitStoreIntoGBMemory(Timers.memoryLocationDividerRegister, 0);\n        if (Timers.timerEnabled && _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, 0)) {\n            _incrementTimerCounter();\n        }\n    };\n    Timers.updateTimerCounter = function (value) {\n        if (Timers.timerEnabled) {\n            // From binjgb, dont write TIMA if we were just reset\n            if (Timers.timerCounterWasReset) {\n                return;\n            }\n            // Mooneye Test, tima_write_reloading\n            // Writing in this strange delay cycle, will cancel\n            // Both the interrupt and the TMA reload\n            if (Timers.timerCounterOverflowDelay) {\n                Timers.timerCounterOverflowDelay = false;\n            }\n        }\n        Timers.timerCounter = value;\n    };\n    Timers.updateTimerModulo = function (value) {\n        Timers.timerModulo = value;\n        // Mooneye Test, tma_write_reloading\n        // Don't update if we were reloading\n        if (Timers.timerEnabled && Timers.timerCounterWasReset) {\n            Timers.timerCounter = value;\n            Timers.timerCounterWasReset = false;\n        }\n    };\n    Timers.updateTimerControl = function (value) {\n        // Get some initial values\n        var oldTimerEnabled = Timers.timerEnabled;\n        Timers.timerEnabled = checkBitOnByte(2, value);\n        var newTimerInputClock = value & 0x03;\n        // Do some obscure behavior for if we should increment TIMA\n        // This does the timer increments from rapid_toggle mooneye tests\n        if (!oldTimerEnabled) {\n            var oldTimerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n            var newTimerCounterMaskBit = _getTimerCounterMaskBit(newTimerInputClock);\n            var shouldIncrementTimerCounter = false;\n            var dividerRegister = Timers.dividerRegister;\n            if (Timers.timerEnabled) {\n                shouldIncrementTimerCounter = checkBitOnByte(oldTimerCounterMaskBit, dividerRegister);\n            }\n            else {\n                shouldIncrementTimerCounter =\n                    checkBitOnByte(oldTimerCounterMaskBit, dividerRegister) && checkBitOnByte(newTimerCounterMaskBit, dividerRegister);\n            }\n            if (shouldIncrementTimerCounter) {\n                _incrementTimerCounter();\n            }\n        }\n        Timers.timerInputClock = newTimerInputClock;\n    };\n    // Function to save the state of the class\n    // TODO: Save state for new properties on Timers\n    Timers.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot), Timers.currentCycles);\n        store(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot), Timers.dividerRegister);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot), Timers.timerCounterOverflowDelay);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0b, Timers.saveStateSlot), Timers.timerCounterWasReset);\n        eightBitStoreIntoGBMemory(Timers.memoryLocationTimerCounter, Timers.timerCounter);\n    };\n    // Function to load the save state from memory\n    Timers.loadState = function () {\n        Timers.currentCycles = load(getSaveStateMemoryOffset(0x00, Timers.saveStateSlot));\n        Timers.dividerRegister = load(getSaveStateMemoryOffset(0x04, Timers.saveStateSlot));\n        Timers.timerCounterOverflowDelay = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Timers.saveStateSlot));\n        Timers.timerCounterWasReset = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0b, Timers.saveStateSlot));\n        Timers.timerCounter = eightBitLoadFromGBMemory(Timers.memoryLocationTimerCounter);\n        Timers.timerModulo = eightBitLoadFromGBMemory(Timers.memoryLocationTimerModulo);\n        Timers.timerInputClock = eightBitLoadFromGBMemory(Timers.memoryLocationTimerControl);\n    };\n    // Current cycles\n    // This will be used for batch processing\n    Timers.currentCycles = 0;\n    // Divider Register = DIV\n    // Divider Register is 16 bits.\n    // Divider Register when read is just the upper 8 bits\n    // But internally is used as the full 16\n    // Essentially dividerRegister is an always counting clock\n    // DIV Drives everything, it is the heart of the timer.\n    // All other timing registers base them selves relative to the DIV register\n    // Think of the div register as like a cycle counter :)\n    // DIV will increment TIMA, whenever there is a falling edge, see below for that.\n    Timers.memoryLocationDividerRegister = 0xff04; // DIV\n    Timers.dividerRegister = 0;\n    // timerCounter = TIMA\n    // TIMA is the actual counter.\n    // Whenever the DIV gets the falling edge, and other obscure cases,\n    // This is incremented. When this overflows, we need to fire an interrupt.\n    Timers.memoryLocationTimerCounter = 0xff05;\n    Timers.timerCounter = 0;\n    Timers.timerCounterOverflowDelay = false;\n    Timers.timerCounterWasReset = false;\n    Timers.timerCounterMask = 0;\n    // Timer Modulo = TMA\n    // TMA is what TIMA (Notice the I :p) is counting from, and TIMA will load\n    // Whenever TIMA overflow.\n    // For instance, we count like 1,2,3,4,5,6,7,8,9, and then overflow to 10.\n    // TMA would be like \"Hey, start counting from 5 whenever we reset\"\n    // Then we would be like 5,6,7,8,9...5,6,7,8,9...etc...\n    Timers.memoryLocationTimerModulo = 0xff06;\n    Timers.timerModulo = 0;\n    // Timer Control = TAC\n    // TAC Says how fast we are counting.\n    // TAC controls which bit we are watching for the falling edge on the DIV register\n    // And whenever the bit has the falling edge, we increment TIMA (The thing counting).\n    // Therefore, depending on the value, we will either count faster or slower.\n    Timers.memoryLocationTimerControl = 0xff07;\n    // Bit 2    - Timer Stop  (0=Stop, 1=Start)\n    // Bits 1-0 - Input Clock Select\n    //            00:   4096 Hz    (~4194 Hz SGB) (1024 cycles)\n    //            01: 262144 Hz  (~268400 Hz SGB) (16 cycles)\n    //            10:  65536 Hz   (~67110 Hz SGB) (64 cycles)\n    //            11:  16384 Hz   (~16780 Hz SGB) (256 cycles)\n    Timers.timerEnabled = false;\n    Timers.timerInputClock = 0;\n    // Save States\n    Timers.saveStateSlot = 5;\n    return Timers;\n}());\n// Inlined because closure compiler inlines\nfunction initializeTimers() {\n    // Reset stateful Variables\n    Timers.currentCycles = 0;\n    Timers.dividerRegister = 0;\n    Timers.timerCounter = 0;\n    Timers.timerModulo = 0;\n    Timers.timerEnabled = false;\n    Timers.timerInputClock = 0;\n    Timers.timerCounterOverflowDelay = false;\n    Timers.timerCounterWasReset = false;\n    if (Cpu.GBCEnabled) {\n        // DIV\n        eightBitStoreIntoGBMemory(0xff04, 0x1e);\n        Timers.dividerRegister = 0x1ea0;\n        // 0xFF05 -> 0xFF06 = 0x00\n        // TAC\n        eightBitStoreIntoGBMemory(0xff07, 0xf8);\n        Timers.timerInputClock = 0xf8;\n    }\n    else {\n        // DIV\n        eightBitStoreIntoGBMemory(0xff04, 0xab);\n        Timers.dividerRegister = 0xabcc;\n        // 0xFF05 -> 0xFF06 = 0x00\n        // TAC\n        eightBitStoreIntoGBMemory(0xff07, 0xf8);\n        Timers.timerInputClock = 0xf8;\n    }\n    // Override/reset some variables if the boot ROM is enabled\n    if (Cpu.BootROMEnabled) {\n        if (Cpu.GBCEnabled) ;\n        else {\n            // GB\n            // DIV\n            eightBitStoreIntoGBMemory(0xff04, 0x00);\n            Timers.dividerRegister = 0x0004;\n        }\n    }\n}\n// Batch Process Timers\n// Only checked on writes\n// Function to batch process our Timers after we skipped so many cycles\nfunction batchProcessTimers() {\n    // TODO: Did a timer rewrite, make a proper batch processing\n    // For timers\n    updateTimers(Timers.currentCycles);\n    Timers.currentCycles = 0;\n}\nfunction updateTimers(numberOfCycles) {\n    // Want to increment 4 cycles at a time like an actual GB would\n    var cyclesIncreased = 0;\n    while (cyclesIncreased < numberOfCycles) {\n        var oldDividerRegister = Timers.dividerRegister;\n        var curDividerRegister = oldDividerRegister;\n        cyclesIncreased += 4;\n        curDividerRegister += 4;\n        curDividerRegister &= 0xffff;\n        Timers.dividerRegister = curDividerRegister;\n        if (Timers.timerEnabled) {\n            var timerCounterWasReset = Timers.timerCounterWasReset;\n            if (Timers.timerCounterOverflowDelay) {\n                Timers.timerCounter = Timers.timerModulo;\n                // Fire off timer interrupt\n                requestTimerInterrupt();\n                Timers.timerCounterOverflowDelay = false;\n                Timers.timerCounterWasReset = true;\n            }\n            else if (timerCounterWasReset) {\n                Timers.timerCounterWasReset = false;\n            }\n            if (_checkDividerRegisterFallingEdgeDetector(oldDividerRegister, curDividerRegister)) {\n                _incrementTimerCounter();\n            }\n        }\n    }\n}\n// Function to increment our Timer Counter\n// This fires off interrupts once we overflow\nfunction _incrementTimerCounter() {\n    var counter = Timers.timerCounter;\n    if (++counter > 255) {\n        // Whenever the timer overflows, there is a slight delay (4 cycles)\n        // Of when TIMA gets TMA's value, and the interrupt is fired.\n        // Thus we will set the delay, which can be handled in the update timer or write trap\n        Timers.timerCounterOverflowDelay = true;\n        counter = 0;\n    }\n    Timers.timerCounter = counter;\n}\n// Function to act as our falling edge detector\n// Whenever we have a falling edge, we need to increment TIMA\n// http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n// https://github.com/binji/binjgb/blob/master/src/emulator.c#L1944\nfunction _checkDividerRegisterFallingEdgeDetector(oldDividerRegister, newDividerRegister) {\n    // Get our mask\n    var timerCounterMaskBit = _getTimerCounterMaskBit(Timers.timerInputClock);\n    // If the old register's watched bit was zero,\n    // but after adding the new registers wastch bit is now 1\n    return checkBitOnByte(timerCounterMaskBit, oldDividerRegister) && !checkBitOnByte(timerCounterMaskBit, newDividerRegister);\n}\n// Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\nfunction _getTimerCounterMaskBit(timerInputClock) {\n    switch (timerInputClock) {\n        case 0x00:\n            return 9;\n        case 0x01:\n            return 3;\n        case 0x02:\n            return 5;\n        case 0x03:\n            return 7;\n    }\n    return 0;\n}\n\n// Link cable / serial implementation\nvar Serial = /** @class */ (function () {\n    function Serial() {\n    }\n    Serial.updateTransferControl = function (value) {\n        Serial.isShiftClockInternal = checkBitOnByte(0, value);\n        Serial.isClockSpeedFast = checkBitOnByte(1, value);\n        Serial.transferStartFlag = checkBitOnByte(7, value);\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    };\n    // Cycle counter\n    Serial.currentCycles = 0x00;\n    // Register locations\n    Serial.memoryLocationSerialTransferData = 0xff01; // SB\n    Serial.memoryLocationSerialTransferControl = 0xff02; // SC\n    // Number of bits transferred\n    Serial.numberOfBitsTransferred = 0;\n    // Transfer control variables\n    Serial.isShiftClockInternal = false;\n    Serial.isClockSpeedFast = false;\n    Serial.transferStartFlag = false;\n    return Serial;\n}());\n// Function to initialize our serial values\n// Inlined because closure compiler inlines\nfunction initializeSerial() {\n    Serial.currentCycles = 0x00;\n    Serial.numberOfBitsTransferred = 0;\n    if (Cpu.GBCEnabled) {\n        // FF01 = 0x00\n        eightBitStoreIntoGBMemory(0xff02, 0x7c);\n        Serial.updateTransferControl(0x7c);\n    }\n    else {\n        // FF01 = 0x00\n        eightBitStoreIntoGBMemory(0xff02, 0x7e);\n        Serial.updateTransferControl(0x7e);\n    }\n}\n// TODO: Finish serial\n// See minimal serial: https://github.com/binji/binjgb/commit/64dece05c4ef5a052c4b9b75eb3ddbbfc6677cbe\n// Inlined because closure compiler inlines\nfunction updateSerial(numberOfCycles) {\n    // If we aren't starting our transfer, or transferring,\n    // return\n    if (!Serial.transferStartFlag) {\n        return;\n    }\n    // Want to increment 4 cycles at a time like an actual GB would\n    var cyclesIncreased = 0;\n    while (cyclesIncreased < numberOfCycles) {\n        var oldCycles = Serial.currentCycles;\n        var curCycles = oldCycles;\n        cyclesIncreased += 4;\n        curCycles += 4;\n        if (curCycles > 0xffff) {\n            curCycles -= 0x10000;\n        }\n        Serial.currentCycles = curCycles;\n        if (_checkFallingEdgeDetector(oldCycles, curCycles)) {\n            // TODO: Since no actual connection, always transfer 1\n            // Need to fix this\n            var memoryLocationSerialTransferData = Serial.memoryLocationSerialTransferData;\n            var transferData = eightBitLoadFromGBMemory(memoryLocationSerialTransferData);\n            transferData = (transferData << 1) + 1;\n            transferData = transferData & 0xff;\n            eightBitStoreIntoGBMemory(memoryLocationSerialTransferData, transferData);\n            var numberOfBitsTransferred = Serial.numberOfBitsTransferred;\n            if (++numberOfBitsTransferred === 8) {\n                Serial.numberOfBitsTransferred = 0;\n                requestSerialInterrupt();\n                // Disable transfer start\n                var memoryLocationSerialTransferControl = Serial.memoryLocationSerialTransferControl;\n                var transferControl = eightBitLoadFromGBMemory(memoryLocationSerialTransferControl);\n                eightBitStoreIntoGBMemory(memoryLocationSerialTransferControl, resetBitOnByte(7, transferControl));\n                Serial.transferStartFlag = false;\n            }\n            else {\n                Serial.numberOfBitsTransferred = numberOfBitsTransferred;\n            }\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction _checkFallingEdgeDetector(oldCycles, newCycles) {\n    // Get our mask\n    var maskBit = _getFallingEdgeMaskBit();\n    // If the old register's watched bit was zero,\n    // but after adding the new registers wastch bit is now 1\n    return checkBitOnByte(maskBit, oldCycles) && !checkBitOnByte(maskBit, newCycles);\n}\n// Function to get our current tima mask bit\n// used for our falling edge detector\n// See The docs linked above, or TCAGB for this bit mapping\n// Inlined because closure compiler inlines\nfunction _getFallingEdgeMaskBit() {\n    return Serial.isClockSpeedFast ? 2 : 7;\n}\n\n// http://www.codeslinger.co.uk/pages/projects/gameboy/joypad.html\n// Joypad Register\n// Taken from pandocs\n// Bit 7 - Not used\n// Bit 6 - Not used\n// Bit 5 - P15 Select Button Keys (0=Select)\n// Bit 4 - P14 Select Direction Keys (0=Select)\n// Bit 3 - P13 Input Down or Start (0=Pressed) (Read Only)\n// Bit 2 - P12 Input Up or Select (0=Pressed) (Read Only)\n// Bit 1 - P11 Input Left or Button B (0=Pressed) (Read Only)\n// Bit 0 - P10 Input Right or Button A (0=Pressed) (Read Only)\n// Button Ids will be the following:\n// UP - 0\n// RIGHT - 1\n// DOWN - 2\n// LEFT - 3\n// A - 4\n// B - 5\n// SELECT - 6\n// START - 7\nvar Joypad = /** @class */ (function () {\n    function Joypad() {\n    }\n    Joypad.updateJoypad = function (value) {\n        Joypad.joypadRegisterFlipped = value ^ 0xff;\n        Joypad.isDpadType = checkBitOnByte(4, Joypad.joypadRegisterFlipped);\n        Joypad.isButtonType = checkBitOnByte(5, Joypad.joypadRegisterFlipped);\n    };\n    // Function to save the state of the class\n    Joypad.saveState = function () { };\n    // Function to load the save state from memory\n    Joypad.loadState = function () {\n        Joypad.updateJoypad(eightBitLoadFromGBMemory(Joypad.memoryLocationJoypadRegister));\n    };\n    Joypad.up = false;\n    Joypad.down = false;\n    Joypad.left = false;\n    Joypad.right = false;\n    Joypad.a = false;\n    Joypad.b = false;\n    Joypad.select = false;\n    Joypad.start = false;\n    Joypad.memoryLocationJoypadRegister = 0xff00;\n    // Cache some values on the Joypad register\n    Joypad.joypadRegisterFlipped = 0;\n    Joypad.isDpadType = false;\n    Joypad.isButtonType = false;\n    // Save States\n    // Not doing anything for Joypad for now\n    Joypad.saveStateSlot = 3;\n    return Joypad;\n}());\n// Inlined because closure compiler inlines\nfunction getJoypadState() {\n    // Get the joypad register\n    var joypadRegister = Joypad.joypadRegisterFlipped;\n    if (Joypad.isDpadType) {\n        // D-pad buttons\n        // Up\n        if (Joypad.up) {\n            joypadRegister = resetBitOnByte(2, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(2, joypadRegister);\n        }\n        // Right\n        if (Joypad.right) {\n            joypadRegister = resetBitOnByte(0, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(0, joypadRegister);\n        }\n        // Down\n        if (Joypad.down) {\n            joypadRegister = resetBitOnByte(3, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(3, joypadRegister);\n        }\n        // Left\n        if (Joypad.left) {\n            joypadRegister = resetBitOnByte(1, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(1, joypadRegister);\n        }\n    }\n    else if (Joypad.isButtonType) {\n        // A\n        if (Joypad.a) {\n            joypadRegister = resetBitOnByte(0, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(0, joypadRegister);\n        }\n        // B\n        if (Joypad.b) {\n            joypadRegister = resetBitOnByte(1, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(1, joypadRegister);\n        }\n        // Select\n        if (Joypad.select) {\n            joypadRegister = resetBitOnByte(2, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(2, joypadRegister);\n        }\n        // Start\n        if (Joypad.start) {\n            joypadRegister = resetBitOnByte(3, joypadRegister);\n        }\n        else {\n            joypadRegister = setBitOnByte(3, joypadRegister);\n        }\n    }\n    // Set the top 4 bits to on\n    joypadRegister = joypadRegister | 0xf0;\n    return joypadRegister;\n}\nfunction setJoypadState(up, right, down, left, a, b, select, start) {\n    if (up > 0) {\n        _pressJoypadButton(0);\n    }\n    else {\n        _releaseJoypadButton(0);\n    }\n    if (right > 0) {\n        _pressJoypadButton(1);\n    }\n    else {\n        _releaseJoypadButton(1);\n    }\n    if (down > 0) {\n        _pressJoypadButton(2);\n    }\n    else {\n        _releaseJoypadButton(2);\n    }\n    if (left > 0) {\n        _pressJoypadButton(3);\n    }\n    else {\n        _releaseJoypadButton(3);\n    }\n    if (a > 0) {\n        _pressJoypadButton(4);\n    }\n    else {\n        _releaseJoypadButton(4);\n    }\n    if (b > 0) {\n        _pressJoypadButton(5);\n    }\n    else {\n        _releaseJoypadButton(5);\n    }\n    if (select > 0) {\n        _pressJoypadButton(6);\n    }\n    else {\n        _releaseJoypadButton(6);\n    }\n    if (start > 0) {\n        _pressJoypadButton(7);\n    }\n    else {\n        _releaseJoypadButton(7);\n    }\n}\nfunction _pressJoypadButton(buttonId) {\n    // Un stop the CPU\n    Cpu.isStopped = false;\n    // Check if the button state changed from not pressed\n    var isButtonStateChanging = false;\n    if (!_getJoypadButtonStateFromButtonId(buttonId)) {\n        isButtonStateChanging = true;\n    }\n    // Set our joypad state\n    _setJoypadButtonStateFromButtonId(buttonId, true);\n    // If the button state is changing, check for an interrupt\n    if (isButtonStateChanging) {\n        // Determine if it is a button or a dpad button\n        var isDpadTypeButton = false;\n        if (buttonId <= 3) {\n            isDpadTypeButton = true;\n        }\n        // Determine if we should request an interrupt\n        var shouldRequestInterrupt = false;\n        // Check if the game is looking for a dpad type button press\n        if (Joypad.isDpadType && isDpadTypeButton) {\n            shouldRequestInterrupt = true;\n        }\n        // Check if the game is looking for a button type button press\n        if (Joypad.isButtonType && !isDpadTypeButton) {\n            shouldRequestInterrupt = true;\n        }\n        // Finally, request the interrupt, if the button state actually changed\n        if (shouldRequestInterrupt) {\n            requestJoypadInterrupt();\n        }\n    }\n}\n// Inlined because closure compiler inlines\nfunction _releaseJoypadButton(buttonId) {\n    // Set our joypad state\n    _setJoypadButtonStateFromButtonId(buttonId, false);\n}\nfunction _getJoypadButtonStateFromButtonId(buttonId) {\n    switch (buttonId) {\n        case 0:\n            return Joypad.up;\n        case 1:\n            return Joypad.right;\n        case 2:\n            return Joypad.down;\n        case 3:\n            return Joypad.left;\n        case 4:\n            return Joypad.a;\n        case 5:\n            return Joypad.b;\n        case 6:\n            return Joypad.select;\n        case 7:\n            return Joypad.start;\n        default:\n            return false;\n    }\n}\nfunction _setJoypadButtonStateFromButtonId(buttonId, isPressed) {\n    switch (buttonId) {\n        case 0:\n            Joypad.up = isPressed;\n            break;\n        case 1:\n            Joypad.right = isPressed;\n            break;\n        case 2:\n            Joypad.down = isPressed;\n            break;\n        case 3:\n            Joypad.left = isPressed;\n            break;\n        case 4:\n            Joypad.a = isPressed;\n            break;\n        case 5:\n            Joypad.b = isPressed;\n            break;\n        case 6:\n            Joypad.select = isPressed;\n            break;\n        case 7:\n            Joypad.start = isPressed;\n            break;\n    }\n}\n\n// Function to handle rom/rambanking\n// Inlined because closure compiler inlines\nfunction handleBanking(offset, value) {\n    // Is rom Only does not bank\n    if (Memory.isRomOnly) {\n        return;\n    }\n    var isMBC1 = Memory.isMBC1;\n    var isMBC2 = Memory.isMBC2;\n    // Enable Ram Banking\n    if (offset <= 0x1fff) {\n        if (isMBC2 && !checkBitOnByte(4, value)) {\n            // Do Nothing\n            return;\n        }\n        else {\n            var romEnableByte = value & 0x0f;\n            if (romEnableByte === 0x00) {\n                Memory.isRamBankingEnabled = false;\n            }\n            else if (romEnableByte === 0x0a) {\n                Memory.isRamBankingEnabled = true;\n            }\n        }\n    }\n    else if (offset <= 0x3fff) {\n        var isMBC5 = Memory.isMBC5;\n        if (!isMBC5 || offset <= 0x2fff) {\n            // Change Low Bits on the Current Rom Bank\n            var currentRomBank = Memory.currentRomBank;\n            if (isMBC2) {\n                currentRomBank = value & 0x0f;\n            }\n            // Set the number of bottom bytes from the MBC type\n            var romBankLowerBits = value;\n            if (isMBC1) {\n                // Only want the bottom 5\n                romBankLowerBits = romBankLowerBits & 0x1f;\n                currentRomBank &= 0xe0;\n            }\n            else if (Memory.isMBC3) {\n                // Only Want the bottom 7\n                romBankLowerBits = romBankLowerBits & 0x7f;\n                currentRomBank &= 0x80;\n            }\n            else if (isMBC5) {\n                // Going to switch the whole thing\n                currentRomBank &= 0x00;\n            }\n            // Set the lower bytes\n            currentRomBank |= romBankLowerBits;\n            Memory.currentRomBank = currentRomBank;\n            return;\n        }\n        else {\n            // TODO: MBC5 High bits Rom bank, check if this works, not sure about the value\n            var lowByte = splitLowByte(Memory.currentRomBank);\n            var highByte = (value > 0);\n            Memory.currentRomBank = concatenateBytes(highByte, lowByte);\n        }\n    }\n    else if (!isMBC2 && offset <= 0x5fff) {\n        // ROM / RAM Banking, MBC2 doesn't do this\n        if (isMBC1 && Memory.isMBC1RomModeEnabled) {\n            // Do an upper bit rom bank for MBC 1\n            // Remove upper bits of currentRomBank\n            var currentRomBank = Memory.currentRomBank & 0x1f;\n            var romBankHigherBits = value & 0xe0;\n            currentRomBank |= romBankHigherBits;\n            Memory.currentRomBank = currentRomBank;\n            return;\n        }\n        var ramBankBits = value;\n        if (!Memory.isMBC5) {\n            // Get the bottom 2 bits\n            ramBankBits &= 0x03;\n        }\n        else {\n            // Get the bottom nibble\n            ramBankBits &= 0x0f;\n        }\n        // Set our ram bank\n        Memory.currentRamBank = ramBankBits;\n        return;\n    }\n    else if (!isMBC2 && offset <= 0x7fff) {\n        if (isMBC1) {\n            Memory.isMBC1RomModeEnabled = checkBitOnByte(0, value);\n        }\n        // TODO: MBC3 Latch Clock Data\n    }\n}\n// Inlined because closure compiler inlines\nfunction getRomBankAddress(gameboyOffset) {\n    var currentRomBank = Memory.currentRomBank;\n    if (!Memory.isMBC5 && currentRomBank === 0) {\n        currentRomBank = 1;\n    }\n    // Adjust our gameboy offset relative to zero for the gameboy memory map\n    return (0x4000 * currentRomBank + (gameboyOffset - Memory.switchableCartridgeRomLocation));\n}\n// Inlined because closure compiler inlines\nfunction getRamBankAddress(gameboyOffset) {\n    // Adjust our gameboy offset relative to zero for the gameboy memory map\n    return (0x2000 * Memory.currentRamBank + (gameboyOffset - Memory.cartridgeRamLocation));\n}\n\n// Inlined because closure compiler inlines\nfunction initializeDma() {\n    if (Cpu.GBCEnabled) {\n        // GBC DMA\n        eightBitStoreIntoGBMemory(0xff51, 0xff);\n        eightBitStoreIntoGBMemory(0xff52, 0xff);\n        eightBitStoreIntoGBMemory(0xff53, 0xff);\n        eightBitStoreIntoGBMemory(0xff54, 0xff);\n        eightBitStoreIntoGBMemory(0xff55, 0xff);\n    }\n    else {\n        // GB DMA\n        eightBitStoreIntoGBMemory(0xff51, 0xff);\n        eightBitStoreIntoGBMemory(0xff52, 0xff);\n        eightBitStoreIntoGBMemory(0xff53, 0xff);\n        eightBitStoreIntoGBMemory(0xff54, 0xff);\n        eightBitStoreIntoGBMemory(0xff55, 0xff);\n    }\n}\n// Inlined because closure compiler inlines\nfunction startDmaTransfer(sourceAddressOffset) {\n    var sourceAddress = sourceAddressOffset << 8;\n    for (var i = 0; i <= 0x9f; ++i) {\n        var spriteInformationByte = eightBitLoadFromGBMemory(sourceAddress + i);\n        var spriteInformationAddress = Memory.spriteInformationTableLocation + i;\n        eightBitStoreIntoGBMemory(spriteInformationAddress, spriteInformationByte);\n    }\n    // TCAGBD:  This copy (DMA) needs 160 × 4 + 4 clocks to complete in both double speed and single speeds modes\n    // Increment all of our Cycle coiunters in ../cpu/opcodes\n    Memory.DMACycles = 644;\n}\n// https://gist.github.com/drhelius/3394856\n// http://bgb.bircd.org/pandocs.htm\n// Inlined because closure compiler inlines\nfunction startHdmaTransfer(hdmaTriggerByteToBeWritten) {\n    // Check if we are Gbc\n    if (!Cpu.GBCEnabled) {\n        return;\n    }\n    // Check if we are trying to terminate an already active HBLANK HDMA\n    if (Memory.isHblankHdmaActive && !checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n        // Don't reset anything, just set bit 7 to 1 on the trigger byte\n        Memory.isHblankHdmaActive = false;\n        var hdmaTriggerByte = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaTrigger);\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, setBitOnByte(7, hdmaTriggerByte));\n        return;\n    }\n    // Get our source and destination for the HDMA\n    var hdmaSource = getHdmaSourceFromMemory();\n    var hdmaDestination = getHdmaDestinationFromMemory();\n    // Get the length from the trigger\n    // Lower 7 bits, Add 1, times 16\n    // https://gist.github.com/drhelius/3394856\n    var transferLength = resetBitOnByte(7, hdmaTriggerByteToBeWritten);\n    transferLength = (transferLength + 1) << 4;\n    // Get bit 7 of the trigger for the HDMA type\n    if (checkBitOnByte(7, hdmaTriggerByteToBeWritten)) {\n        // H-Blank DMA\n        Memory.isHblankHdmaActive = true;\n        Memory.hblankHdmaTransferLengthRemaining = transferLength;\n        Memory.hblankHdmaSource = hdmaSource;\n        Memory.hblankHdmaDestination = hdmaDestination;\n        // This will be handled in updateHblankHdma()\n        // Since we return false in write traps, we need to now write the byte\n        // Be sure to reset bit 7, to show that the hdma is active\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, resetBitOnByte(7, hdmaTriggerByteToBeWritten));\n    }\n    else {\n        // General DMA\n        hdmaTransfer(hdmaSource, hdmaDestination, transferLength);\n        // Stop the DMA\n        eightBitStoreIntoGBMemory(Memory.memoryLocationHdmaTrigger, 0xff);\n    }\n}\n// Inlined because closure compiler inlines\nfunction updateHblankHdma() {\n    if (!Memory.isHblankHdmaActive) {\n        return;\n    }\n    // Get our amount of bytes to transfer (Only 0x10 bytes at a time)\n    var bytesToTransfer = 0x10;\n    var hblankHdmaTransferLengthRemaining = Memory.hblankHdmaTransferLengthRemaining;\n    if (hblankHdmaTransferLengthRemaining < bytesToTransfer) {\n        // Set to the difference\n        bytesToTransfer = hblankHdmaTransferLengthRemaining;\n    }\n    // Do the transfer (Only 0x10 bytes at a time)\n    hdmaTransfer(Memory.hblankHdmaSource, Memory.hblankHdmaDestination, bytesToTransfer);\n    // Update our source and destination\n    Memory.hblankHdmaSource += bytesToTransfer;\n    Memory.hblankHdmaDestination += bytesToTransfer;\n    hblankHdmaTransferLengthRemaining -= bytesToTransfer;\n    Memory.hblankHdmaTransferLengthRemaining = hblankHdmaTransferLengthRemaining;\n    var memoryLocationHdmaTrigger = Memory.memoryLocationHdmaTrigger;\n    if (hblankHdmaTransferLengthRemaining <= 0) {\n        // End the transfer\n        Memory.isHblankHdmaActive = false;\n        // Need to clear the HDMA with 0xFF, which sets bit 7 to 1 to show the HDMA has ended\n        eightBitStoreIntoGBMemory(memoryLocationHdmaTrigger, 0xff);\n    }\n    else {\n        // Set our new transfer length, make sure it is in the weird format,\n        // and make sure bit 7 is 0, to show that the HDMA is Active\n        var remainingTransferLength = hblankHdmaTransferLengthRemaining;\n        var transferLengthAsByte = (remainingTransferLength >> 4) - 1;\n        eightBitStoreIntoGBMemory(memoryLocationHdmaTrigger, resetBitOnByte(7, transferLengthAsByte));\n    }\n}\n// Simple Function to transfer the bytes from a destination to a source for a general pourpose or Hblank HDMA\nfunction hdmaTransfer(hdmaSource, hdmaDestination, transferLength) {\n    for (var i = 0; i < transferLength; ++i) {\n        var sourceByte = eightBitLoadFromGBMemoryWithTraps(hdmaSource + i);\n        // get the hdmaDestination with wrapping\n        // See issue #61: https://github.com/torch2424/wasmBoy/issues/61\n        var hdmaDestinationWithWrapping = hdmaDestination + i;\n        while (hdmaDestinationWithWrapping > 0x9fff) {\n            // Simply clear the top 3 bits\n            hdmaDestinationWithWrapping -= 0x2000;\n        }\n        eightBitStoreIntoGBMemoryWithTraps(hdmaDestinationWithWrapping, sourceByte);\n    }\n    // Set our Cycles used for the HDMA\n    // Since DMA in GBC Double Speed Mode takes 80 micro seconds,\n    // And HDMA takes 8 micro seconds per 0x10 bytes in GBC Double Speed mode (and GBC Normal Mode)\n    // Will assume (644 / 10) cycles for GBC Double Speed Mode,\n    // and (644 / 10 / 2) for GBC Normal Mode\n    var hdmaCycles = 32 << Cpu.GBCDoubleSpeed;\n    hdmaCycles = hdmaCycles * (transferLength >> 4);\n    Memory.DMACycles += hdmaCycles;\n}\n// Function to get our HDMA Source\n// Follows the poan docs\n// Inlined because closure compiler inlines\nfunction getHdmaSourceFromMemory() {\n    // Get our source for the HDMA\n    var hdmaSourceHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceHigh);\n    var hdmaSourceLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaSourceLow);\n    var hdmaSource = concatenateBytes(hdmaSourceHigh, hdmaSourceLow);\n    // And off the appopriate bits for the source and destination\n    // And off the bottom 4 bits\n    hdmaSource = hdmaSource & 0xfff0;\n    return hdmaSource;\n}\n// Function to get our HDMA Destination\n// Follows the poan docs\n// Inlined because closure compiler inlines\nfunction getHdmaDestinationFromMemory() {\n    var hdmaDestinationHigh = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationHigh);\n    var hdmaDestinationLow = eightBitLoadFromGBMemory(Memory.memoryLocationHdmaDestinationLow);\n    var hdmaDestination = concatenateBytes(hdmaDestinationHigh, hdmaDestinationLow);\n    // Can only be in VRAM, 0x8000 -> 0x9FF0\n    // Pan docs says to knock off upper 3 bits, and lower 4 bits\n    // Which gives us: 0001111111110000 or 0x1FF0\n    // Meaning we must add 0x8000\n    hdmaDestination = hdmaDestination & 0x1ff0;\n    hdmaDestination += Memory.videoRamLocation;\n    return hdmaDestination;\n}\n\n// Internal function to trap any modify data trying to be written to Gameboy memory\n// Follows the Gameboy memory map\n// Return true if you want to continue the write, return false to end it here\nfunction checkWriteTraps(offset, value) {\n    // Cpu\n    if (offset === Cpu.memoryLocationSpeedSwitch) {\n        // TCAGBD, only Bit 0 is writable\n        eightBitStoreIntoGBMemory(Cpu.memoryLocationSpeedSwitch, value & 0x01);\n        // We did the write, dont need to\n        return false;\n    }\n    // Handle Boot ROM Switch\n    if (Cpu.BootROMEnabled && offset === Cpu.memoryLocationBootROMSwitch) {\n        // Disable the boot rom\n        Cpu.BootROMEnabled = false;\n        // Set the program counter to be incremented after this command\n        Cpu.programCounter = 0x00ff;\n        // Allow the write\n        return true;\n    }\n    // Graphics\n    // Cache globals used multiple times for performance\n    var videoRamLocation = Memory.videoRamLocation;\n    var spriteInformationTableLocation = Memory.spriteInformationTableLocation;\n    // Handle banking\n    if (offset < videoRamLocation) {\n        handleBanking(offset, value);\n        return false;\n    }\n    // Check the graphics mode to see if we can write to VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n    if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n        // Can only read/write from VRAM During Modes 0 - 2\n        // See graphics/lcd.ts\n        // TODO: This can do more harm than good in a beta emulator,\n        // requires precise timing disabling for now\n        // if (Graphics.currentLcdMode > 2) {\n        //   return false;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Be sure to copy everything in EchoRam to Work Ram\n    // Codeslinger: The ECHO memory region (0xE000-0xFDFF) is quite different because any data written here is also written in the equivelent ram memory region 0xC000-0xDDFF.\n    // Hence why it is called echo\n    if (offset >= Memory.echoRamLocation && offset < spriteInformationTableLocation) {\n        var wramOffset = offset - 0x2000;\n        eightBitStoreIntoGBMemory(wramOffset, value);\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Also check for individal writes\n    // Can only read/write from OAM During Modes 0 - 1\n    // See graphics/lcd.ts\n    if (offset >= spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n        // Can only read/write from OAM During Mode 2\n        // See graphics/lcd.ts\n        // if (Lcd.currentLcdMode < 2) {\n        // return false;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // Allow the original write, and return since we dont need to look anymore\n        // return true;\n        return Lcd.currentLcdMode >= 2;\n    }\n    if (offset >= Memory.unusableMemoryLocation && offset <= Memory.unusableMemoryEndLocation) {\n        return false;\n    }\n    // Serial\n    if (offset === Serial.memoryLocationSerialTransferControl) {\n        // SC\n        return Serial.updateTransferControl(value);\n    }\n    // Sound\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    if (offset >= 0xff10 && offset <= 0xff26) {\n        batchProcessAudio();\n        return SoundRegisterWriteTraps(offset, value);\n    }\n    // FF27 - FF2F not used\n    // Final Wave Table for Channel 3\n    if (offset >= 0xff30 && offset <= 0xff3f) {\n        batchProcessAudio();\n        // Need to handle the write if channel 3 is enabled\n        if (Channel3.isEnabled) {\n            Channel3.handleWaveRamWrite(value);\n            return false;\n        }\n        return true;\n    }\n    // Other Memory effects fomr read/write to Lcd/Graphics\n    if (offset >= Lcd.memoryLocationLcdControl && offset <= Graphics.memoryLocationWindowX) {\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        if (offset === Lcd.memoryLocationLcdControl) {\n            // Shorcut for isLCD Enabled since it gets \"hot\"\n            Lcd.updateLcdControl(value);\n            return true;\n        }\n        if (offset === Lcd.memoryLocationLcdStatus) {\n            // We are handling the write here\n            Lcd.updateLcdStatus(value);\n            return false;\n        }\n        // reset the current scanline if the game tries to write to it\n        if (offset === Graphics.memoryLocationScanlineRegister) {\n            Graphics.scanlineRegister = 0;\n            eightBitStoreIntoGBMemory(offset, 0);\n            return false;\n        }\n        // Cache our coincidence compare\n        if (offset === Lcd.memoryLocationCoincidenceCompare) {\n            Lcd.coincidenceCompare = value;\n            return true;\n        }\n        // Do the direct memory access transfer for spriteInformationTable\n        // Check the graphics mode to see if we can write to VRAM\n        // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n        if (offset === Graphics.memoryLocationDmaTransfer) {\n            // otherwise, perform a DMA transfer\n            // And allow the original write\n            startDmaTransfer(value);\n            return true;\n        }\n        // Scroll and Window XY\n        switch (offset) {\n            case Graphics.memoryLocationScrollX:\n                Graphics.scrollX = value;\n                return true;\n            case Graphics.memoryLocationScrollY:\n                Graphics.scrollY = value;\n                return true;\n            case Graphics.memoryLocationWindowX:\n                Graphics.windowX = value;\n                return true;\n            case Graphics.memoryLocationWindowY:\n                Graphics.windowY = value;\n                return true;\n        }\n        // Allow the original write, and return since we dont need to look anymore\n        return true;\n    }\n    // Do an HDMA\n    if (offset === Memory.memoryLocationHdmaTrigger) {\n        startHdmaTransfer(value);\n        return false;\n    }\n    // Don't allow banking if we are doing an Hblank HDM transfer\n    // https://gist.github.com/drhelius/3394856\n    if (offset === Memory.memoryLocationGBCWRAMBank || offset === Memory.memoryLocationGBCVRAMBank) {\n        if (Memory.isHblankHdmaActive) {\n            var hblankHdmaSource = Memory.hblankHdmaSource;\n            if ((hblankHdmaSource >= 0x4000 && hblankHdmaSource <= 0x7fff) || (hblankHdmaSource >= 0xd000 && hblankHdmaSource <= 0xdfff)) {\n                return false;\n            }\n        }\n    }\n    // Handle GBC Pallete Write\n    if (offset >= Palette.memoryLocationBackgroundPaletteIndex && offset <= Palette.memoryLocationSpritePaletteData) {\n        // Incremeenting the palette handled by the write\n        writeColorPaletteToMemory(offset, value);\n        return true;\n    }\n    // Handle timer writes\n    if (offset >= Timers.memoryLocationDividerRegister && offset <= Timers.memoryLocationTimerControl) {\n        // Batch Process\n        batchProcessTimers();\n        switch (offset) {\n            case Timers.memoryLocationDividerRegister:\n                Timers.updateDividerRegister();\n                return false;\n            case Timers.memoryLocationTimerCounter:\n                Timers.updateTimerCounter(value);\n                return true;\n            case Timers.memoryLocationTimerModulo:\n                Timers.updateTimerModulo(value);\n                return true;\n            case Timers.memoryLocationTimerControl:\n                Timers.updateTimerControl(value);\n                return true;\n        }\n        return true;\n    }\n    // Handle Joypad writes for HW reg caching\n    if (offset === Joypad.memoryLocationJoypadRegister) {\n        Joypad.updateJoypad(value);\n    }\n    // Handle Interrupt writes\n    if (offset === Interrupts.memoryLocationInterruptRequest) {\n        Interrupts.updateInterruptRequested(value);\n        return true;\n    }\n    if (offset === Interrupts.memoryLocationInterruptEnabled) {\n        Interrupts.updateInterruptEnabled(value);\n        return true;\n    }\n    // Allow the original write\n    return true;\n}\n\n// WasmBoy memory map:\n// Private function to translate a offset meant for the gameboy memory map\n// To the wasmboy memory map\n// Following: http://gameboy.mongenel.com/dmg/asmmemmap.html\n// And https://github.com/Dooskington/GameLad/wiki/Part-11---Memory-Bank-Controllers\n// Performance help from @dcodeIO, and awesome-gbdev\nfunction getWasmBoyOffsetFromGameBoyOffset(gameboyOffset) {\n    // Get the top byte and switch\n    var gameboyOffsetHighByte = gameboyOffset >> 12;\n    switch (gameboyOffsetHighByte) {\n        case 0x00:\n            // Check if we are currently executing the boot rom\n            // Otherwise, bottom 0x0000 -> 0x03FF is Cartridge ROM Ram Bank 1\n            if (Cpu.BootROMEnabled) {\n                if (Cpu.GBCEnabled) {\n                    // See: http://gbdev.gg8.se/wiki/articles/Gameboy_Bootstrap_ROM\n                    // \"The rom dump includes the 256 byte rom (0x0000-0x00FF) and the,\n                    // 1792 byte rom (0x0200-0x08FF) which Dr. Decapitator observed,\n                    // but not the 512 byte rom,\n                    // which may be cpu microcode or lcd color lookup related.\"\n                    // First 0xFF bytes are BOOT rom\n                    if (gameboyOffset < 0x0100) {\n                        return gameboyOffset + BOOT_ROM_LOCATION;\n                    }\n                    // 0x100 -> 0x1FF is the actual ROM\n                    // Everything from 0x200 -> 0x8FF is BOOT ROM Again\n                    if (gameboyOffset > 0x01ff && gameboyOffset < 0x0900) {\n                        return gameboyOffset + BOOT_ROM_LOCATION;\n                    }\n                }\n                else if (!Cpu.GBCEnabled && gameboyOffset < 0x0100) {\n                    return gameboyOffset + BOOT_ROM_LOCATION;\n                }\n            }\n        case 0x01:\n        case 0x02:\n        case 0x03:\n            // Cartridge ROM - Bank 0 (fixed)\n            // 0x0000 -> 0x0D2400\n            return gameboyOffset + CARTRIDGE_ROM_LOCATION;\n        case 0x04:\n        case 0x05:\n        case 0x06:\n        case 0x07:\n            // Cartridge ROM - Switchable Banks 1-xx\n            // 0x4000 -> (0x0D2400 + 0x4000)\n            return getRomBankAddress(gameboyOffset) + CARTRIDGE_ROM_LOCATION;\n        case 0x08:\n        case 0x09:\n            // Video RAM\n            // 0x8000 -> 0x000400\n            var vramBankId = 0;\n            if (Cpu.GBCEnabled) {\n                // Find our current VRAM Bank\n                vramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCVRAMBank) & 0x01;\n                // Even though We added another 0x2000, the Cartridge ram is pulled out of our Internal Memory Space\n                // Therefore, we do not need to adjust for this extra 0x2000\n            }\n            return gameboyOffset - Memory.videoRamLocation + VIDEO_RAM_LOCATION + 0x2000 * vramBankId;\n        case 0x0a:\n        case 0x0b:\n            // Cartridge RAM - A.K.A External RAM\n            // 0xA000 -> 0x008400\n            return getRamBankAddress(gameboyOffset) + CARTRIDGE_RAM_LOCATION;\n        case 0x0c:\n            // Gameboy Ram Bank 0\n            // 0xC000 -> 0x000400\n            // Don't need to add head, since we move out 0x200 from the cartridge ram\n            return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION;\n        case 0x0d:\n            // Gameboy Ram Banks, Switchable in GBC Mode\n            // 0xD000 -> 0x000400\n            // In CGB Mode 32 KBytes internal RAM are available.\n            // This memory is divided into 8 banks of 4 KBytes each.\n            // Bank 0 is always available in memory at C000-CFFF,\n            // Bank 1-7 can be selected into the address space at D000-DFFF.\n            // http://gbdev.gg8.se/wiki/articles/CGB_Registers#FF70_-_SVBK_-_CGB_Mode_Only_-_WRAM_Bank\n            // Get the last 3 bits to find our wram ID\n            var wramBankId = 0;\n            if (Cpu.GBCEnabled) {\n                wramBankId = eightBitLoadFromGBMemory(Memory.memoryLocationGBCWRAMBank) & 0x07;\n            }\n            wramBankId = wramBankId < 1 ? 1 : wramBankId;\n            // (0x1000 * (wramBankId - 1)) -> To find the correct wram bank.\n            // wramBankId - 1, because we alreayd have the space for wramBank 1, and are currently in it\n            // So need to address space for 6 OTHER banks\n            return gameboyOffset - Memory.internalRamBankZeroLocation + WORK_RAM_LOCATION + 0x1000 * (wramBankId - 1);\n        default:\n            // Everything Else after Gameboy Ram Banks\n            // 0xE000 -> 0x000400\n            // 0x6000 For the Extra WRAM Banks\n            return gameboyOffset - Memory.echoRamLocation + OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION;\n    }\n}\n\n// Breakpoints for memory / cpu\nvar Breakpoints = /** @class */ (function () {\n    function Breakpoints() {\n    }\n    Breakpoints.programCounter = -1;\n    Breakpoints.readGbMemory = -1;\n    Breakpoints.writeGbMemory = -1;\n    Breakpoints.reachedBreakpoint = false;\n    return Breakpoints;\n}());\nfunction setProgramCounterBreakpoint(breakpoint) {\n    Breakpoints.programCounter = breakpoint;\n}\nfunction resetProgramCounterBreakpoint() {\n    Breakpoints.programCounter = -1;\n}\nfunction setReadGbMemoryBreakpoint(breakpoint) {\n    Breakpoints.readGbMemory = breakpoint;\n}\nfunction resetReadGbMemoryBreakpoint() {\n    Breakpoints.readGbMemory = -1;\n}\nfunction setWriteGbMemoryBreakpoint(breakpoint) {\n    Breakpoints.writeGbMemory = breakpoint;\n}\nfunction resetWriteGbMemoryBreakpoint() {\n    Breakpoints.writeGbMemory = -1;\n}\n\n// Store / Write memory access\nfunction eightBitStoreIntoGBMemory(gameboyOffset, value) {\n    store(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset), value);\n}\nfunction eightBitStoreIntoGBMemoryWithTraps(offset, value) {\n    if (offset === Breakpoints.writeGbMemory) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    if (checkWriteTraps(offset, value)) {\n        eightBitStoreIntoGBMemory(offset, value);\n    }\n}\nfunction sixteenBitStoreIntoGBMemoryWithTraps(offset, value) {\n    // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n    // Split the value into two seperate bytes\n    var highByte = splitHighByte(value);\n    var lowByte = splitLowByte(value);\n    if (checkWriteTraps(offset, lowByte)) {\n        eightBitStoreIntoGBMemory(offset, lowByte);\n    }\n    var nextOffset = offset + 1;\n    if (checkWriteTraps(nextOffset, highByte)) {\n        eightBitStoreIntoGBMemory(nextOffset, highByte);\n    }\n}\nfunction sixteenBitStoreIntoGBMemory(offset, value) {\n    // Dividing into two seperate eight bit calls to help with debugging tilemap overwrites\n    // Split the value into two seperate bytes\n    var highByte = splitHighByte(value);\n    var lowByte = splitLowByte(value);\n    eightBitStoreIntoGBMemory(offset + 0, lowByte);\n    eightBitStoreIntoGBMemory(offset + 1, highByte);\n}\nfunction storeBooleanDirectlyToWasmMemory(offset, value) {\n    store(offset, value);\n}\n\n// Funcitons for setting and checking the LCD\nvar Lcd = /** @class */ (function () {\n    function Lcd() {\n    }\n    // Function called in write traps to update our hardware registers\n    Lcd.updateLcdStatus = function (value) {\n        // Bottom three bits are read only\n        var currentLcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        var valueNoBottomBits = value & 0xf8;\n        var lcdStatusOnlyBottomBits = currentLcdStatus & 0x07;\n        value = valueNoBottomBits | lcdStatusOnlyBottomBits;\n        // Top bit is always 1\n        value = setBitOnByte(7, value);\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, value);\n    };\n    // Function called in write traps to update our hardware registers\n    Lcd.updateLcdControl = function (value) {\n        var wasLcdEnabled = Lcd.enabled;\n        Lcd.enabled = checkBitOnByte(7, value);\n        Lcd.windowTileMapDisplaySelect = checkBitOnByte(6, value);\n        Lcd.windowDisplayEnabled = checkBitOnByte(5, value);\n        Lcd.bgWindowTileDataSelect = checkBitOnByte(4, value);\n        Lcd.bgTileMapDisplaySelect = checkBitOnByte(3, value);\n        Lcd.tallSpriteSize = checkBitOnByte(2, value);\n        Lcd.spriteDisplayEnable = checkBitOnByte(1, value);\n        Lcd.bgDisplayEnabled = checkBitOnByte(0, value);\n        if (wasLcdEnabled && !Lcd.enabled) {\n            // Disable the LCD\n            resetLcd(true);\n        }\n        if (!wasLcdEnabled && Lcd.enabled) {\n            // Re-enable the LCD\n            resetLcd(false);\n        }\n    };\n    // Memory Locations\n    // Also known at STAT\n    // LCD Status (0xFF41) bits Explanation\n    // 0                0                    000                    0             00\n    //       |Coicedence Interrupt|     |Mode Interrupts|  |coincidence flag|  | Mode |\n    // Modes:\n    // 0 or 00: H-Blank\n    // 1 or 01: V-Blank\n    // 2 or 10: Searching Sprites Atts\n    // 3 or 11: Transfering Data to LCD Driver\n    Lcd.memoryLocationLcdStatus = 0xff41;\n    Lcd.currentLcdMode = 0;\n    Lcd.memoryLocationCoincidenceCompare = 0xff45;\n    Lcd.coincidenceCompare = 0;\n    // Also known as LCDC\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    // Bit 7 - LCD Display Enable (0=Off, 1=On)\n    // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 5 - Window Display Enable (0=Off, 1=On)\n    // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n    // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n    // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n    // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On\n    Lcd.memoryLocationLcdControl = 0xff40;\n    // Decoupled LCDC for caching\n    Lcd.enabled = true;\n    Lcd.windowTileMapDisplaySelect = false;\n    Lcd.windowDisplayEnabled = false;\n    Lcd.bgWindowTileDataSelect = false;\n    Lcd.bgTileMapDisplaySelect = false;\n    Lcd.tallSpriteSize = false;\n    Lcd.spriteDisplayEnable = false;\n    Lcd.bgDisplayEnabled = false;\n    return Lcd;\n}());\nfunction resetLcd(shouldBlankScreen) {\n    // Reset scanline cycle counter\n    Graphics.scanlineCycleCounter = 0;\n    Graphics.scanlineRegister = 0;\n    eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, 0);\n    // Set to mode 0\n    // https://www.reddit.com/r/EmuDev/comments/4w6479/gb_dr_mario_level_generation_issues/\n    var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n    lcdStatus = resetBitOnByte(1, lcdStatus);\n    lcdStatus = resetBitOnByte(0, lcdStatus);\n    Lcd.currentLcdMode = 0;\n    // Store the status in memory\n    eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    // Blank the screen\n    if (shouldBlankScreen) {\n        for (var i = 0; i < FRAME_SIZE; ++i) {\n            store(FRAME_LOCATION + i, 255);\n        }\n    }\n}\n// Pass in the lcd status for performance\n// Inlined because closure compiler inlines\nfunction setLcdStatus() {\n    // Check if the Lcd was disabled\n    if (!Lcd.enabled) {\n        return;\n    }\n    // Get our current scanline, and lcd mode\n    var scanlineRegister = Graphics.scanlineRegister;\n    var lcdMode = Lcd.currentLcdMode;\n    // Default to  H-Blank\n    var newLcdMode = 0;\n    // Find our newLcd mode\n    if (scanlineRegister >= 144) {\n        // VBlank mode\n        newLcdMode = 1;\n    }\n    else {\n        var scanlineCycleCounter = Graphics.scanlineCycleCounter;\n        var MIN_CYCLES_SPRITES_LCD_MODE = Graphics.MIN_CYCLES_SPRITES_LCD_MODE();\n        if (scanlineCycleCounter >= MIN_CYCLES_SPRITES_LCD_MODE) {\n            // Searching Sprites Atts\n            newLcdMode = 2;\n        }\n        else if (scanlineCycleCounter >= MIN_CYCLES_SPRITES_LCD_MODE) {\n            // Transferring data to lcd\n            newLcdMode = 3;\n        }\n    }\n    if (lcdMode !== newLcdMode) {\n        // Get our lcd status\n        var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        // Save our lcd mode\n        Lcd.currentLcdMode = newLcdMode;\n        var shouldRequestInterrupt = false;\n        // Set our LCD Status accordingly\n        switch (newLcdMode) {\n            case 0x00:\n                lcdStatus = resetBitOnByte(0, lcdStatus);\n                lcdStatus = resetBitOnByte(1, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(3, lcdStatus);\n                break;\n            case 0x01:\n                lcdStatus = resetBitOnByte(1, lcdStatus);\n                lcdStatus = setBitOnByte(0, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(4, lcdStatus);\n                break;\n            case 0x02:\n                lcdStatus = resetBitOnByte(0, lcdStatus);\n                lcdStatus = setBitOnByte(1, lcdStatus);\n                shouldRequestInterrupt = checkBitOnByte(5, lcdStatus);\n                break;\n            case 0x03:\n                lcdStatus = setBitOnByte(0, lcdStatus);\n                lcdStatus = setBitOnByte(1, lcdStatus);\n                break;\n        }\n        // Check if we want to request an interrupt, and we JUST changed modes\n        if (shouldRequestInterrupt) {\n            requestLcdInterrupt();\n        }\n        // Check for updating the Hblank HDMA\n        if (newLcdMode === 0) {\n            // Update the Hblank DMA, will simply return if not active\n            updateHblankHdma();\n        }\n        // Check for requesting a VBLANK interrupt\n        if (newLcdMode === 1) {\n            requestVBlankInterrupt();\n        }\n        // Check for the coincidence\n        lcdStatus = checkCoincidence(newLcdMode, lcdStatus);\n        // Finally, save our status\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    }\n    else if (scanlineRegister === 153) {\n        // Special Case, need to check LYC\n        // Fix prehistorik man freeze\n        var lcdStatus = eightBitLoadFromGBMemory(Lcd.memoryLocationLcdStatus);\n        lcdStatus = checkCoincidence(newLcdMode, lcdStatus);\n        eightBitStoreIntoGBMemory(Lcd.memoryLocationLcdStatus, lcdStatus);\n    }\n}\nfunction checkCoincidence(lcdMode, lcdStatus) {\n    // Check for the coincidence flag\n    // Need to check on every mode, and not just HBLANK, as checking on hblank breaks shantae, which checks on vblank\n    if ((lcdMode === 0 || lcdMode === 1) && Graphics.scanlineRegister === Lcd.coincidenceCompare) {\n        lcdStatus = setBitOnByte(2, lcdStatus);\n        if (checkBitOnByte(6, lcdStatus)) {\n            requestLcdInterrupt();\n        }\n    }\n    else {\n        lcdStatus = resetBitOnByte(2, lcdStatus);\n    }\n    return lcdStatus;\n}\n\n// Functions for rendering the background\n// NOTE: i32Portable wraps modulo here as somehow it gets converted to a double:\n// https://github.com/torch2424/wasmboy/issues/216\n// Inlined because closure compiler inlines\nfunction renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n    // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n    // Get our scrollX and scrollY (u16 to play nice with assemblyscript)\n    // let scrollX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollX);\n    // let scrollY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScrollY);\n    var scrollX = Graphics.scrollX;\n    var scrollY = Graphics.scrollY;\n    // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n    // this is done by getting the current scroll Y position,\n    // and adding it do what Y Value the scanline is drawing on the camera.\n    var pixelYPositionInMap = scanlineRegister + scrollY;\n    // Gameboy camera will \"wrap\" around the background map,\n    // meaning that if the pixelValue is 350, then we need to subtract 256 (decimal) to get it's actual value\n    // pixel values (scrollX and scrollY) range from 0x00 - 0xFF\n    pixelYPositionInMap &= 0x100 - 1;\n    // Draw the Background scanline\n    drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, 0, scrollX);\n}\n// Inlined because closure compiler inlines\nfunction renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation) {\n    // Get our windowX and windowY\n    // let windowX: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowX);\n    // let windowY: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationWindowY);\n    var windowX = Graphics.windowX;\n    var windowY = Graphics.windowY;\n    // NOTE: Camera is reffering to what you can see inside the 160x144 viewport of the entire rendered 256x256 map.\n    // First ensure that the scanline is greater than our window\n    if (scanlineRegister < windowY) {\n        // Window is not within the current camera view\n        return;\n    }\n    // WindowX is offset by 7\n    windowX -= 7;\n    // Get our current pixel y positon on the 160x144 camera (Row that the scanline draws across)\n    var pixelYPositionInMap = scanlineRegister - windowY;\n    // xOffset is simply a neagative window x\n    // NOTE: This can become negative zero?\n    // https://github.com/torch2424/wasmboy/issues/216\n    var xOffset = i32Portable(-windowX);\n    // Draw the Background scanline\n    drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, windowX, xOffset);\n}\n// Function frankenstein'd together to allow background and window to share the same draw scanline function\nfunction drawBackgroundWindowScanline(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation, pixelYPositionInMap, iStart, xOffset) {\n    // Get our tile Y position in the map\n    var tileYPositionInMap = pixelYPositionInMap >> 3;\n    // Loop through x to draw the line like a CRT\n    for (var i = iStart; i < 160; ++i) {\n        // Get our Current X position of our pixel on the on the 160x144 camera\n        // this is done by getting the current scroll X position,\n        // and adding it do what X Value the scanline is drawing on the camera.\n        var pixelXPositionInMap = i + xOffset;\n        // This is to compensate wrapping, same as pixelY\n        if (pixelXPositionInMap >= 0x100) {\n            pixelXPositionInMap -= 0x100;\n        }\n        // Divide our pixel position by 8 to get our tile.\n        // Since, there are 256x256 pixels, and 32x32 tiles.\n        // 256 / 8 = 32.\n        // Also, bitshifting by 3, do do a division by 8\n        // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n        var tileXPositionInMap = pixelXPositionInMap >> 3;\n        // Get our tile address on the tileMap\n        // NOTE: (tileMap represents where each tile is displayed on the screen)\n        // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n        // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n        // And we have x pixel 160. 160 / 8 = 20.\n        // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n        // Think like indexing a 2d array, as a 1d array and it make sense :)\n        var tileMapAddress = tileMapMemoryLocation + (tileYPositionInMap << 5) + tileXPositionInMap;\n        // Get the tile Id on the Tile Map\n        var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n        // Now that we have our Tile Id, let's check our Tile Cache\n        var usedTileCache = false;\n        if (Config.tileCaching) {\n            var pixelsDrawn = drawLineOfTileFromTileCache(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            // Increment i by 7, not 8 because i will be incremented at end of for loop\n            if (pixelsDrawn > 0) {\n                i += pixelsDrawn - 1;\n                usedTileCache = true;\n            }\n        }\n        if (Config.tileRendering && !usedTileCache) {\n            var pixelsDrawn = drawLineOfTileFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            // A line of a tile is 8 pixels wide, therefore increase i by (pixelsDrawn - 1), and then the for loop will increment by 1\n            // For a net increment for 8\n            if (pixelsDrawn > 0) {\n                i += pixelsDrawn - 1;\n            }\n        }\n        else if (!usedTileCache) {\n            if (Cpu.GBCEnabled) {\n                // Draw the individual pixel\n                drawColorPixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap);\n            }\n            else {\n                // Draw the individual pixel\n                drawMonochromePixelFromTileId(i, scanlineRegister, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap);\n            }\n        }\n    }\n}\n// Function to draw a pixel for the standard GB\n// Inlined because closure compiler inlines\nfunction drawMonochromePixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Now we can process the the individual bytes that represent the pixel on a tile\n    // Now get our tileDataAddress for the corresponding tileID we found in the map\n    // Read the comments in _getTileDataAddress() to see what's going on.\n    // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n    // This funcitons returns the start of memory locaiton for the tile 'c'.\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n    // Get the y pixel of the 8 by 8 tile.\n    // Simply modulo the scanline.\n    // For instance, let's say we are printing the first line of pixels on our camera,\n    // And the first line of pixels on our tile.\n    // yPixel = 1. 1 % 8 = 1.\n    // And for the last line\n    // yPixel = 144. 144 % 8 = 0.\n    // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n    // Because remember, we are counting lines on the display NOT including zero\n    var pixelYInTile = i32Portable(pixelYPositionInMap & 7);\n    // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n    // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n    // Again, think like you had to map a 2d array as a 1d.\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, 0);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, 0);\n    // Same logic as pixelYInTile.\n    // However, We need to reverse our byte,\n    // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n    // Therefore, is pixelX was 2, then really is need to be 5\n    // So 2 - 7 = -5, * 1 = 5\n    // Or to simplify, 7 - 2 = 5 haha!\n    var pixelXInTile = i32Portable(pixelXPositionInMap & 7);\n    pixelXInTile = 7 - pixelXInTile;\n    // Now we can get the color for that pixel\n    // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n    // To Get the color Id.\n    // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n    // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    var paletteColorId = 0;\n    if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n    }\n    if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n    }\n    // Not checking u8 Portability overflow here, since it can't be greater than i32 over :p\n    // Now get the colorId from the pallete, to get our final color\n    // Developers could change colorIds to represents different colors\n    // in their palette, thus we need to grab the color from there\n    //let pixelColorInTileFromPalette: u8 = getColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n    // Moved below for perofrmance\n    // FINALLY, RENDER THAT PIXEL!\n    // Only rendering camera for now, so coordinates are for the camera.\n    // Get the rgb value for the color Id, will be repeated into R, G, B. if not colorized\n    var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n    setPixelOnFrame(xPixel, yPixel, 0, getRedFromHexColor(hexColor));\n    setPixelOnFrame(xPixel, yPixel, 1, getGreenFromHexColor(hexColor));\n    setPixelOnFrame(xPixel, yPixel, 2, getBlueFromHexColor(hexColor));\n    // Lastly, add the pixel to our background priority map\n    // https://github.com/torch2424/wasmBoy/issues/51\n    // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n    // Bit 2 will represent if the Bg/Window has GBC priority.\n    addPriorityforPixel(xPixel, yPixel, paletteColorId);\n}\n// Function to draw a pixel from a tile in C O L O R\n// See above for more context on some variables\n// Inlined because closure compiler inlines\nfunction drawColorPixelFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Now get our tileDataAddress for the corresponding tileID we found in the map\n    // Read the comments in _getTileDataAddress() to see what's going on.\n    // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n    // This funcitons returns the start of memory locaiton for the tile 'c'.\n    var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n    // Get the GB Map Attributes\n    // Bit 0-2  Background Palette number  (BGP0-7)\n    // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n    // Bit 4    Not used\n    // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n    // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n    // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n    var bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n    // See above for explanation\n    var pixelYInTile = i32Portable(pixelYPositionInMap & 7);\n    if (checkBitOnByte(6, bgMapAttributes)) {\n        // We are mirroring the tile, therefore, we need to opposite byte\n        // So if our pixel was 0 our of 8, it wild become 7 :)\n        pixelYInTile = 7 - pixelYInTile;\n    }\n    // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n    // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n    // But we need to load the time from a specific Vram bank\n    var vramBankId = i32Portable(checkBitOnByte(3, bgMapAttributes));\n    var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n    var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId);\n    // Get our X pixel. Need to NOT reverse it if it was flipped.\n    // See above, you have to reverse this normally\n    var pixelXInTile = i32Portable(pixelXPositionInMap & 7);\n    if (!checkBitOnByte(5, bgMapAttributes)) {\n        pixelXInTile = 7 - pixelXInTile;\n    }\n    // Now we can get the color for that pixel\n    // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n    // To Get the color Id.\n    // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n    // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    var paletteColorId = 0;\n    if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n        // Byte one represents the second bit in our color id, so bit shift\n        paletteColorId += 1;\n        paletteColorId = paletteColorId << 1;\n    }\n    if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n        paletteColorId += 1;\n    }\n    // Finally lets add some, C O L O R\n    // Want the botom 3 bits\n    var bgPalette = bgMapAttributes & 0x07;\n    // Call the helper function to grab the correct color from the palette\n    var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false);\n    // Split off into red green and blue\n    var red = getColorComponentFromRgb(0, rgbColorPalette);\n    var green = getColorComponentFromRgb(1, rgbColorPalette);\n    var blue = getColorComponentFromRgb(2, rgbColorPalette);\n    // Finally Place our colors on the things\n    setPixelOnFrame(xPixel, yPixel, 0, red);\n    setPixelOnFrame(xPixel, yPixel, 1, green);\n    setPixelOnFrame(xPixel, yPixel, 2, blue);\n    // Lastly, add the pixel to our background priority map\n    // https://github.com/torch2424/wasmBoy/issues/51\n    // Bits 0 & 1 will represent the color Id drawn by the BG/Window\n    // Bit 2 will represent if the Bg/Window has GBC priority.\n    addPriorityforPixel(xPixel, yPixel, paletteColorId, checkBitOnByte(7, bgMapAttributes));\n}\n// Function to attempt to draw the tile from the tile cache\n// Inlined because closure compiler inlines\nfunction drawLineOfTileFromTileCache(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // First, initialize how many pixels we have drawn\n    var pixelsDrawn = 0;\n    // Check if the current tile matches our tileId\n    // TODO: Allow the first line to use the tile cache, for some odd reason it doesn't work when scanline is 0\n    var nextXIndexToPerformCacheCheck = TileCache.nextXIndexToPerformCacheCheck;\n    if (yPixel > 0 && xPixel > 8 && tileIdFromTileMap === TileCache.tileId && xPixel === nextXIndexToPerformCacheCheck) {\n        // Was last tile flipped\n        var wasLastTileHorizontallyFlipped = checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress - 1));\n        var isCurrentTileHorizontallyFlipped = checkBitOnByte(5, eightBitLoadFromGBMemory(tileMapAddress));\n        // Simply copy the last 8 pixels from memory to copy the line from the tile\n        for (var tileCacheIndex = 0; tileCacheIndex < 8; ++tileCacheIndex) {\n            // Check if we need to render backwards for flipping\n            if (wasLastTileHorizontallyFlipped !== isCurrentTileHorizontallyFlipped) {\n                tileCacheIndex = 7 - tileCacheIndex;\n            }\n            var xPos = xPixel + tileCacheIndex;\n            // First check for overflow\n            if (xPos <= 160) {\n                // Get the pixel location in memory of the tile\n                var previousXPixel = xPixel - (8 - tileCacheIndex);\n                var previousTilePixelLocation = FRAME_LOCATION + getRgbPixelStart(xPos, yPixel);\n                // Cycle through the RGB\n                // for (let tileCacheRgb = 0; tileCacheRgb < 3; ++tileCacheRgb) {\n                //  setPixelOnFrame(xPixel + tileCacheIndex, yPixel, tileCacheRgb, load<u8>(previousTilePixelLocation + tileCacheRgb));\n                // }\n                // unroll\n                setPixelOnFrame(xPos, yPixel, 0, load(previousTilePixelLocation, 0));\n                setPixelOnFrame(xPos, yPixel, 1, load(previousTilePixelLocation, 1));\n                setPixelOnFrame(xPos, yPixel, 2, load(previousTilePixelLocation, 2));\n                // Copy the priority for the pixel\n                var pixelPriority = getPriorityforPixel(previousXPixel, yPixel);\n                addPriorityforPixel(xPos, yPixel, resetBitOnByte(2, pixelPriority), checkBitOnByte(2, pixelPriority));\n                pixelsDrawn++;\n            }\n        }\n    }\n    else {\n        // Save our current tile Id, and the next x value we should check the x index\n        TileCache.tileId = tileIdFromTileMap;\n    }\n    // Calculate when we should do the tileCache calculation again\n    if (xPixel >= nextXIndexToPerformCacheCheck) {\n        nextXIndexToPerformCacheCheck = xPixel + 8;\n        var xOffsetTileWidthRemainder = i32Portable(pixelXPositionInMap & 7);\n        if (xPixel < xOffsetTileWidthRemainder) {\n            nextXIndexToPerformCacheCheck += xOffsetTileWidthRemainder;\n        }\n    }\n    TileCache.nextXIndexToPerformCacheCheck = nextXIndexToPerformCacheCheck;\n    return pixelsDrawn;\n}\n// Function to draw a line of a tile in Color\n// This is for tile rendering shortcuts\n// Inlined because closure compiler inlines\nfunction drawLineOfTileFromTileId(xPixel, yPixel, pixelXPositionInMap, pixelYPositionInMap, tileMapAddress, tileDataMemoryLocation, tileIdFromTileMap) {\n    // Get the which line of the tile we are rendering\n    var tileLineY = i32Portable(pixelYPositionInMap & 7);\n    // Now lets find our tileX start and end\n    // This is for the case where i = 0, but scroll X was 3.\n    // Or i is 157, and our camera is only 160 pixels wide\n    var tileXStart = 0;\n    if (xPixel == 0) {\n        tileXStart = pixelXPositionInMap - ((pixelXPositionInMap >> 3) << 3);\n    }\n    var tileXEnd = 7;\n    if (xPixel + 8 > 160) {\n        tileXEnd = 160 - xPixel;\n    }\n    // initialize some variables for GBC\n    var bgMapAttributes = -1;\n    var vramBankId = 0;\n    if (Cpu.GBCEnabled) {\n        // Get Our GBC properties\n        bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n        vramBankId = i32Portable(checkBitOnByte(3, bgMapAttributes));\n        if (checkBitOnByte(6, bgMapAttributes)) {\n            // We are mirroring the tile, therefore, we need to opposite byte\n            // So if our pixel was 0 our of 8, it wild become 7 :)\n            tileLineY = 7 - tileLineY;\n        }\n    }\n    // Return the number of pixels drawn\n    return drawPixelsFromLineOfTile(tileIdFromTileMap, tileDataMemoryLocation, vramBankId, tileXStart, tileXEnd, tileLineY, xPixel, yPixel, 160, FRAME_LOCATION, false, 0, bgMapAttributes, -1);\n}\n\n// Functions for rendering the sprites\n// Inlined because closure compiler inlines\nfunction renderSprites(scanlineRegister, useLargerSprites) {\n    // Need to loop through all 40 sprites to check their status\n    // Going backwards since lower sprites draw over higher ones\n    // Will fix dragon warrior 3 intro\n    for (var i = 39; i >= 0; --i) {\n        // Sprites occupy 4 bytes in the sprite attribute table\n        var spriteTableIndex = i * 4;\n        // Y positon is offset by 16, X position is offset by 8\n        var index = Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex;\n        var spriteYPosition = eightBitLoadFromGBMemory(index + 0);\n        var spriteXPosition = eightBitLoadFromGBMemory(index + 1);\n        var spriteTileId = eightBitLoadFromGBMemory(index + 2);\n        // Pan docs of sprite attirbute table\n        // Bit7   OBJ-to-BG Priority (0=OBJ Above BG, 1=OBJ Behind BG color 1-3)\n        //      (Used for both BG and Window. BG color 0 is always behind OBJ)\n        // Bit6   Y flip          (0=Normal, 1=Vertically mirrored)\n        // Bit5   X flip          (0=Normal, 1=Horizontally mirrored)\n        // Bit4   Palette number  **Non CGB Mode Only** (0=OBP0, 1=OBP1)\n        // Bit3   Tile VRAM-Bank  **CGB Mode Only**     (0=Bank 0, 1=Bank 1)\n        // Bit2-0 Palette number  **CGB Mode Only**     (OBP0-7)\n        // Apply sprite X and Y offset\n        // TODO: Sprites are overflowing on x if less than 8\n        spriteYPosition -= 16;\n        spriteXPosition -= 8;\n        // Find our sprite height\n        var spriteHeight = 8;\n        if (useLargerSprites) {\n            spriteHeight = 16;\n            // @binji says in 8x16 mode, even tileId always drawn first\n            // This will fix shantae sprites which always uses odd numbered indexes\n            // TODO: Do the actual Pandocs thing:\n            // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n            // So just knock off the last bit? :)\n            spriteTileId -= spriteTileId & 1;\n        }\n        // Find if our sprite is on the current scanline\n        if (scanlineRegister >= spriteYPosition && scanlineRegister < spriteYPosition + spriteHeight) {\n            // Then we need to draw the current sprite\n            // Get our sprite attributes since we know we shall be drawing the tile\n            var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n            // Check sprite Priority\n            var isSpritePriorityBehindWindowAndBackground = checkBitOnByte(7, spriteAttributes);\n            // Check if we should flip the sprite on the x or y axis\n            var flipSpriteY = checkBitOnByte(6, spriteAttributes);\n            var flipSpriteX = checkBitOnByte(5, spriteAttributes);\n            // TODO: Torch2424 continue here.\n            // Find which line on the sprite we are on\n            var currentSpriteLine = scanlineRegister - spriteYPosition;\n            // If we fliiped the Y axis on our sprite, need to read from memory backwards to acheive the same effect\n            if (flipSpriteY) {\n                currentSpriteLine = spriteHeight - currentSpriteLine;\n                // Bug fix for the flipped flies in link's awakening\n                currentSpriteLine -= 1;\n            }\n            // Each line of a tile takes two bytes of memory\n            currentSpriteLine <<= 1;\n            // Get our sprite tile address, need to also add the current sprite line to get the correct bytes\n            var spriteTileAddressStart = getTileDataAddress(Graphics.memoryLocationTileDataSelectOneStart, spriteTileId);\n            spriteTileAddressStart += currentSpriteLine;\n            var spriteTileAddress = spriteTileAddressStart;\n            // Find which VRAM Bank to load from\n            var vramBankId = (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes));\n            var spriteDataByteOneForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 0, vramBankId);\n            var spriteDataByteTwoForLineOfTilePixels = loadFromVramBank(spriteTileAddress + 1, vramBankId);\n            // Iterate over the width of our sprite to find our individual pixels\n            for (var tilePixel = 7; tilePixel >= 0; --tilePixel) {\n                // Get our spritePixel, and check for flipping\n                var spritePixelXInTile = tilePixel;\n                if (flipSpriteX) {\n                    spritePixelXInTile -= 7;\n                    spritePixelXInTile = -spritePixelXInTile;\n                }\n                // Get the color Id of our sprite, similar to renderBackground()\n                // With the first byte, and second byte lined up method thing\n                // Yes, the second byte comes before the first, see ./background.ts\n                var spriteColorId = 0;\n                if (checkBitOnByte(spritePixelXInTile, spriteDataByteTwoForLineOfTilePixels)) {\n                    // Byte one represents the second bit in our color id, so bit shift\n                    spriteColorId = (spriteColorId + 1) << 1;\n                }\n                if (checkBitOnByte(spritePixelXInTile, spriteDataByteOneForLineOfTilePixels)) {\n                    spriteColorId += 1;\n                }\n                // ColorId zero (last two bits of pallette) are transparent\n                // http://gbdev.gg8.se/wiki/articles/Video_Display\n                if (spriteColorId !== 0) {\n                    // Find our actual X pixel location on the gameboy \"camera\" view\n                    // This cannot be less than zero, i32 will overflow\n                    var spriteXPixelLocationInCameraView = spriteXPosition + (7 - tilePixel);\n                    if (spriteXPixelLocationInCameraView >= 0 && spriteXPixelLocationInCameraView <= 160) {\n                        // There are two cases where wouldnt draw the pixel on top of the Bg/window\n                        // 1. if isSpritePriorityBehindWindowAndBackground, sprite can only draw over color 0\n                        // 2. if bit 2 of our priority is set, then BG-to-OAM Priority from pandoc\n                        //  is active, meaning BG tile will have priority above all OBJs\n                        //  (regardless of the priority bits in OAM memory)\n                        // But if GBC and Bit 0 of LCDC is set, we always draw the object\n                        var shouldShowFromLcdcPriority = Cpu.GBCEnabled && !Lcd.bgDisplayEnabled; // LCDC Priority\n                        var shouldHideFromOamPriority = false;\n                        var shouldHideFromBgPriority = false;\n                        if (!shouldShowFromLcdcPriority) {\n                            // Now that we have our coordinates, check for sprite priority\n                            // Lets get the priority byte we put in memory\n                            var bgPriorityByte = getPriorityforPixel(spriteXPixelLocationInCameraView, scanlineRegister);\n                            var bgColorFromPriorityByte = bgPriorityByte & 0x03;\n                            // Doing an else if, since either will automatically stop drawing the pixel\n                            if (isSpritePriorityBehindWindowAndBackground && bgColorFromPriorityByte > 0) {\n                                // OAM Priority\n                                shouldHideFromOamPriority = true;\n                            }\n                            else if (Cpu.GBCEnabled && checkBitOnByte(2, bgPriorityByte) && bgColorFromPriorityByte > 0) {\n                                // Bg priority\n                                shouldHideFromBgPriority = true;\n                            }\n                        }\n                        if (shouldShowFromLcdcPriority || (!shouldHideFromOamPriority && !shouldHideFromBgPriority)) {\n                            if (!Cpu.GBCEnabled) {\n                                // Get our monochrome color RGB from the current sprite pallete\n                                // Get our sprite pallete\n                                var spritePaletteLocation = Graphics.memoryLocationSpritePaletteOne;\n                                if (checkBitOnByte(4, spriteAttributes)) {\n                                    spritePaletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                                }\n                                var hexColor = getColorizedGbHexColorFromPalette(spriteColorId, spritePaletteLocation);\n                                // Finally set the pixel!\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, getRedFromHexColor(hexColor));\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, getGreenFromHexColor(hexColor));\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, getBlueFromHexColor(hexColor));\n                            }\n                            else {\n                                // Get our RGB Color\n                                // Finally lets add some, C O L O R\n                                // Want the botom 3 bits\n                                var bgPalette = spriteAttributes & 0x07;\n                                // Call the helper function to grab the correct color from the palette\n                                var rgbColorPalette = getRgbColorFromPalette(bgPalette, spriteColorId, true);\n                                // Split off into red green and blue\n                                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                                var blue = getColorComponentFromRgb(2, rgbColorPalette);\n                                // Finally Place our colors on the things\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 0, red);\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 1, green);\n                                setPixelOnFrame(spriteXPixelLocationInCameraView, scanlineRegister, 2, blue);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Main Class and funcitons for rendering the gameboy display\nvar Graphics = /** @class */ (function () {\n    function Graphics() {\n    }\n    // Number of cycles to run in each batch process\n    // This number should be in sync so that graphics doesn't run too many cyles at once\n    // and does not exceed the minimum number of cyles for either scanlines, or\n    // How often we change the frame, or a channel's update process\n    Graphics.batchProcessCycles = function () {\n        return Graphics.MAX_CYCLES_PER_SCANLINE();\n    };\n    // TCAGBD says 456 per scanline, but 153 only a handful\n    Graphics.MAX_CYCLES_PER_SCANLINE = function () {\n        if (Graphics.scanlineRegister === 153) {\n            return 4 << Cpu.GBCDoubleSpeed;\n        }\n        else {\n            return 456 << Cpu.GBCDoubleSpeed;\n        }\n    };\n    Graphics.MIN_CYCLES_SPRITES_LCD_MODE = function () {\n        // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n        return 376 << Cpu.GBCDoubleSpeed;\n    };\n    Graphics.MIN_CYCLES_TRANSFER_DATA_LCD_MODE = function () {\n        // TODO: Confirm these clock cyles, double similar to scanline, which TCAGBD did\n        return 249 << Cpu.GBCDoubleSpeed;\n    };\n    // Function to save the state of the class\n    Graphics.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot), Graphics.scanlineCycleCounter);\n        store(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot), Lcd.currentLcdMode);\n        eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, Graphics.scanlineRegister);\n    };\n    // Function to load the save state from memory\n    Graphics.loadState = function () {\n        Graphics.scanlineCycleCounter = load(getSaveStateMemoryOffset(0x00, Graphics.saveStateSlot));\n        Lcd.currentLcdMode = load(getSaveStateMemoryOffset(0x04, Graphics.saveStateSlot));\n        Graphics.scanlineRegister = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n        Lcd.updateLcdControl(eightBitLoadFromGBMemory(Lcd.memoryLocationLcdControl));\n    };\n    // Current cycles\n    // This will be used for batch processing\n    Graphics.currentCycles = 0;\n    // Count the number of cycles to keep synced with cpu cycles\n    // Found GBC cycles by finding clock speed from Gb Cycles\n    // See TCAGBD For cycles\n    Graphics.scanlineCycleCounter = 0x00;\n    // LCD\n    // scanlineRegister also known as LY\n    // See: http://bgb.bircd.org/pandocs.txt , and search \" LY \"\n    Graphics.memoryLocationScanlineRegister = 0xff44;\n    Graphics.scanlineRegister = 0;\n    Graphics.memoryLocationDmaTransfer = 0xff46;\n    // Scroll and Window\n    Graphics.memoryLocationScrollX = 0xff43;\n    Graphics.scrollX = 0;\n    Graphics.memoryLocationScrollY = 0xff42;\n    Graphics.scrollY = 0;\n    Graphics.memoryLocationWindowX = 0xff4b;\n    Graphics.windowX = 0;\n    Graphics.memoryLocationWindowY = 0xff4a;\n    Graphics.windowY = 0;\n    // Tile Maps And Data\n    Graphics.memoryLocationTileMapSelectZeroStart = 0x9800;\n    Graphics.memoryLocationTileMapSelectOneStart = 0x9c00;\n    Graphics.memoryLocationTileDataSelectZeroStart = 0x8800;\n    Graphics.memoryLocationTileDataSelectOneStart = 0x8000;\n    // Sprites\n    Graphics.memoryLocationSpriteAttributesTable = 0xfe00;\n    // Palettes\n    Graphics.memoryLocationBackgroundPalette = 0xff47;\n    Graphics.memoryLocationSpritePaletteOne = 0xff48;\n    Graphics.memoryLocationSpritePaletteTwo = 0xff49;\n    // Screen data needs to be stored in wasm memory\n    // Save States\n    Graphics.saveStateSlot = 1;\n    return Graphics;\n}());\n// Batch Process Graphics\n// http://gameboy.mongenel.com/dmg/asmmemmap.html and http://gbdev.gg8.se/wiki/articles/Video_Display\n// Function to batch process our graphics after we skipped so many cycles\n// This is not currently checked in memory read/write\nfunction batchProcessGraphics() {\n    var batchProcessCycles = Graphics.batchProcessCycles();\n    while (Graphics.currentCycles >= batchProcessCycles) {\n        updateGraphics(batchProcessCycles);\n        Graphics.currentCycles -= batchProcessCycles;\n    }\n}\n// Inlined because closure compiler inlines\nfunction initializeGraphics() {\n    // Reset Stateful Variables\n    Graphics.currentCycles = 0;\n    Graphics.scanlineCycleCounter = 0x00;\n    Graphics.scanlineRegister = 0;\n    Graphics.scrollX = 0;\n    Graphics.scrollY = 0;\n    Graphics.windowX = 0;\n    Graphics.windowY = 0;\n    Graphics.scanlineRegister = 0x90;\n    if (Cpu.GBCEnabled) {\n        eightBitStoreIntoGBMemory(0xff41, 0x81);\n        // 0xFF42 -> 0xFF43 = 0x00\n        eightBitStoreIntoGBMemory(0xff44, 0x90);\n        // 0xFF45 -> 0xFF46 = 0x00\n        eightBitStoreIntoGBMemory(0xff47, 0xfc);\n        // 0xFF48 -> 0xFF4B = 0x00\n    }\n    else {\n        eightBitStoreIntoGBMemory(0xff41, 0x85);\n        // 0xFF42 -> 0xFF45 = 0x00\n        eightBitStoreIntoGBMemory(0xff46, 0xff);\n        eightBitStoreIntoGBMemory(0xff47, 0xfc);\n        eightBitStoreIntoGBMemory(0xff48, 0xff);\n        eightBitStoreIntoGBMemory(0xff49, 0xff);\n        // 0xFF4A -> 0xFF4B = 0x00\n        // GBC VRAM Banks (Handled by Memory, initializeCartridge)\n    }\n    // Scanline\n    // Bgb says LY is 90 on boot\n    Graphics.scanlineRegister = 0x90;\n    eightBitStoreIntoGBMemory(0xff40, 0x90);\n    // GBC VRAM Banks\n    eightBitStoreIntoGBMemory(0xff4f, 0x00);\n    eightBitStoreIntoGBMemory(0xff70, 0x01);\n    // Override/reset some variables if the boot ROM is enabled\n    if (Cpu.BootROMEnabled) {\n        if (Cpu.GBCEnabled) {\n            // GBC\n            Graphics.scanlineRegister = 0x00;\n            eightBitStoreIntoGBMemory(0xff40, 0x00);\n            eightBitStoreIntoGBMemory(0xff41, 0x80);\n            eightBitStoreIntoGBMemory(0xff44, 0x00);\n        }\n        else {\n            // GB\n            Graphics.scanlineRegister = 0x00;\n            eightBitStoreIntoGBMemory(0xff40, 0x00);\n            eightBitStoreIntoGBMemory(0xff41, 0x84);\n        }\n    }\n    initializeColors();\n}\nfunction updateGraphics(numberOfCycles) {\n    if (Lcd.enabled) {\n        Graphics.scanlineCycleCounter += numberOfCycles;\n        var graphicsDisableScanlineRendering = Config.graphicsDisableScanlineRendering;\n        while (Graphics.scanlineCycleCounter >= Graphics.MAX_CYCLES_PER_SCANLINE()) {\n            // Reset the scanlineCycleCounter\n            // Don't set to zero to catch extra cycles\n            Graphics.scanlineCycleCounter -= Graphics.MAX_CYCLES_PER_SCANLINE();\n            // Move to next scanline\n            // let scanlineRegister: i32 = eightBitLoadFromGBMemory(Graphics.memoryLocationScanlineRegister);\n            var scanlineRegister = Graphics.scanlineRegister;\n            // Check if we've reached the last scanline\n            if (scanlineRegister === 144) {\n                // Draw the scanline\n                if (!graphicsDisableScanlineRendering) {\n                    _drawScanline(scanlineRegister);\n                }\n                else {\n                    _renderEntireFrame();\n                }\n                // Clear the priority map\n                clearPriorityMap();\n                // Reset the tile cache\n                resetTileCache();\n            }\n            else if (scanlineRegister < 144) {\n                // Draw the scanline\n                if (!graphicsDisableScanlineRendering) {\n                    _drawScanline(scanlineRegister);\n                }\n            }\n            // Post increment the scanline register after drawing\n            // TODO: Need to fix graphics timing\n            if (scanlineRegister > 153) {\n                // Check if we overflowed scanlines\n                // if so, reset our scanline number\n                scanlineRegister = 0;\n            }\n            else {\n                scanlineRegister += 1;\n            }\n            // Store our new scanline value\n            Graphics.scanlineRegister = scanlineRegister;\n            // eightBitStoreIntoGBMemory(Graphics.memoryLocationScanlineRegister, scanlineRegister);\n        }\n    }\n    // Games like Pokemon crystal want the vblank right as it turns to the value, and not have it increment after\n    // It will break and lead to an infinite loop in crystal\n    // Therefore, we want to be checking/Setting our LCD status after the scanline updates\n    setLcdStatus();\n}\n// TODO: Make this a _drawPixelOnScanline, as values can be updated while drawing a scanline\nfunction _drawScanline(scanlineRegister) {\n    // Get our seleted tile data memory location\n    var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n    if (Lcd.bgWindowTileDataSelect) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n    }\n    // Check if the background is enabled\n    // NOTE: On Gameboy color, Pandocs says this does something completely different\n    // LCDC.0 - 2) CGB in CGB Mode: BG and Window Master Priority\n    // When Bit 0 is cleared, the background and window lose their priority -\n    // the sprites will be always displayed on top of background and window,\n    // independently of the priority flags in OAM and BG Map attributes.\n    // TODO: Enable this different feature for GBC\n    if (Cpu.GBCEnabled || Lcd.bgDisplayEnabled) {\n        // Get our map memory location\n        var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n        if (Lcd.bgTileMapDisplaySelect) {\n            tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n        }\n        // Finally, pass everything to draw the background\n        renderBackground(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n    }\n    // Check if the window is enabled, and we are currently\n    // Drawing lines on the window\n    if (Lcd.windowDisplayEnabled) {\n        // Get our map memory location\n        var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n        if (Lcd.windowTileMapDisplaySelect) {\n            tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n        }\n        // Finally, pass everything to draw the background\n        renderWindow(scanlineRegister, tileDataMemoryLocation, tileMapMemoryLocation);\n    }\n    if (Lcd.spriteDisplayEnable) {\n        // Sprites are enabled, render them!\n        renderSprites(scanlineRegister, Lcd.tallSpriteSize);\n    }\n}\n// Function to render everything for a frame at once\n// This is to improve performance\n// See above for comments on how things are donw\nfunction _renderEntireFrame() {\n    // Scanline needs to be in sync while we draw, thus, we can't shortcut anymore than here\n    for (var i = 0; i <= 144; ++i) {\n        _drawScanline(i);\n    }\n}\n// Function to get the start of a RGB pixel (R, G, B)\n// Inlined because closure compiler inlines\nfunction getRgbPixelStart(x, y) {\n    // Get the pixel number\n    // let pixelNumber: i32 = (y * 160) + x;\n    // Each pixel takes 3 slots, therefore, multiply by 3!\n    return (y * 160 + x) * 3;\n}\n// Also need to store current frame in memory to be read by JS\nfunction setPixelOnFrame(x, y, colorId, color) {\n    // Currently only supports 160x144\n    // Storing in X, then y\n    // So need an offset\n    store(FRAME_LOCATION + getRgbPixelStart(x, y) + colorId, color);\n}\n// Function to shortcut the memory map, and load directly from the VRAM Bank\nfunction loadFromVramBank(gameboyOffset, vramBankId) {\n    var wasmBoyAddress = gameboyOffset - Memory.videoRamLocation + GAMEBOY_INTERNAL_MEMORY_LOCATION + 0x2000 * (vramBankId & 0x01);\n    return load(wasmBoyAddress);\n}\n\n// Returns -1 if no trap found, otherwise returns a value that should be fed for the address\nfunction checkReadTraps(offset) {\n    // Cache globals used multiple times for performance\n    var videoRamLocation = Memory.videoRamLocation;\n    // Try to break early for most common scenario\n    if (offset < videoRamLocation) {\n        return -1;\n    }\n    // Check the graphics mode to see if we can read VRAM\n    // http://gbdev.gg8.se/wiki/articles/Video_Display#Accessing_VRAM_and_OAM\n    if (offset >= videoRamLocation && offset < Memory.cartridgeRamLocation) {\n        // Can only read/write from VRAM During Modes 0 - 2\n        // See graphics/lcd.ts\n        // TODO: This can do more harm than good in a beta emulator,\n        // requres precise timing, disabling for now\n        // if (Graphics.currentLcdMode > 2) {\n        //   return 0xFF;\n        // }\n        return -1;\n    }\n    // ECHO Ram, E000\tFDFF\tMirror of C000~DDFF (ECHO RAM)\n    // http://gbdev.gg8.se/wiki/articles/Memory_Map\n    if (offset >= Memory.echoRamLocation && offset < Memory.spriteInformationTableLocation) {\n        // Simply return the mirror'd value\n        return eightBitLoadFromGBMemory(offset - 0x2000);\n    }\n    // Check for individal writes\n    // Can only read/write from OAM During Modes 0 - 1\n    // See graphics/lcd.ts\n    if (offset >= Memory.spriteInformationTableLocation && offset <= Memory.spriteInformationTableLocationEnd) {\n        // Can only read/write from OAM During Mode 2\n        // See graphics/lcd.ts\n        // if (Lcd.currentLcdMode < 2) {\n        // return 0xff;\n        // }\n        // Not batch processing here for performance\n        // batchProcessGraphics();\n        // return -1;\n        return Lcd.currentLcdMode < 2 ? 0xff : -1;\n    }\n    // CPU\n    if (offset === Cpu.memoryLocationSpeedSwitch) {\n        // TCAGBD, only Bit 7 and 0 are readable, all others are 1\n        var response = 0xff;\n        var currentSpeedSwitchRegister = eightBitLoadFromGBMemory(Cpu.memoryLocationSpeedSwitch);\n        if (!checkBitOnByte(0, currentSpeedSwitchRegister)) {\n            response = resetBitOnByte(0, response);\n        }\n        if (!Cpu.GBCDoubleSpeed) {\n            response = resetBitOnByte(7, response);\n        }\n        return response;\n    }\n    // Graphics\n    // Not batch processing here for performance\n    // batchProcessGraphics();\n    if (offset === Graphics.memoryLocationScanlineRegister) {\n        eightBitStoreIntoGBMemory(offset, Graphics.scanlineRegister);\n        return Graphics.scanlineRegister;\n    }\n    // Sound\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Registers\n    // TODO: Put these bounds on the Sound Class\n    if (offset >= 0xff10 && offset <= 0xff26) {\n        batchProcessAudio();\n        return SoundRegisterReadTraps(offset);\n    }\n    // FF27 - FF2F not used\n    // http://gbdev.gg8.se/wiki/articles/Gameboy_sound_hardware#Register_Reading\n    // Always read as 0xFF\n    if (offset >= 0xff27 && offset <= 0xff2f) {\n        return 0xff;\n    }\n    // Final Wave Table for Channel 3\n    if (offset >= 0xff30 && offset <= 0xff3f) {\n        batchProcessAudio();\n        if (Channel3.isEnabled) {\n            return Channel3.handleWaveRamRead();\n        }\n        return -1;\n    }\n    // Timers\n    if (offset === Timers.memoryLocationDividerRegister) {\n        // Divider register in memory is just the upper 8 bits\n        // http://gbdev.gg8.se/wiki/articles/Timer_Obscure_Behaviour\n        var upperDividerRegisterBits = splitHighByte(Timers.dividerRegister);\n        eightBitStoreIntoGBMemory(offset, upperDividerRegisterBits);\n        return upperDividerRegisterBits;\n    }\n    if (offset === Timers.memoryLocationTimerCounter) {\n        eightBitStoreIntoGBMemory(offset, Timers.timerCounter);\n        return Timers.timerCounter;\n    }\n    // Interrupts\n    if (offset === Interrupts.memoryLocationInterruptRequest) {\n        // TCAGB and BGB say the top 5 bits are always 1.\n        return 0xe0 | Interrupts.interruptsRequestedValue;\n    }\n    // Joypad\n    if (offset === Joypad.memoryLocationJoypadRegister) {\n        return getJoypadState();\n    }\n    return -1;\n}\n\n// Load/Read functionality for memory\nfunction eightBitLoadFromGBMemory(gameboyOffset) {\n    return load(getWasmBoyOffsetFromGameBoyOffset(gameboyOffset));\n}\nfunction eightBitLoadFromGBMemoryWithTraps(offset) {\n    if (offset === Breakpoints.readGbMemory) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    var readTrapResult = checkReadTraps(offset);\n    return readTrapResult === -1 ? eightBitLoadFromGBMemory(offset) : readTrapResult;\n}\n// TODO: Rename this to sixteenBitLoadFromGBMemoryWithTraps\n// Inlined because closure compiler inlines\nfunction sixteenBitLoadFromGBMemory(offset) {\n    // Get our low byte\n    var lowByteReadTrapResult = checkReadTraps(offset);\n    var lowByte = lowByteReadTrapResult === -1 ? eightBitLoadFromGBMemory(offset) : lowByteReadTrapResult;\n    // Get the next offset for the second byte\n    var nextOffset = offset + 1;\n    // Get our high byte\n    var highByteReadTrapResult = checkReadTraps(nextOffset);\n    var highByte = highByteReadTrapResult === -1 ? eightBitLoadFromGBMemory(nextOffset) : highByteReadTrapResult;\n    // Concatenate the bytes and return\n    return concatenateBytes(highByte, lowByte);\n}\nfunction loadBooleanDirectlyFromWasmMemory(offset) {\n    return load(offset) > 0;\n}\n\n// WasmBoy memory map:\nvar Memory = /** @class */ (function () {\n    function Memory() {\n    }\n    // Function to save the state of the class\n    Memory.saveState = function () {\n        store(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot), Memory.currentRomBank);\n        store(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot), Memory.currentRamBank);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot), Memory.isRamBankingEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot), Memory.isMBC1RomModeEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot), Memory.isRomOnly);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot), Memory.isMBC1);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot), Memory.isMBC2);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot), Memory.isMBC3);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot), Memory.isMBC5);\n    };\n    // Function to load the save state from memory\n    Memory.loadState = function () {\n        Memory.currentRomBank = load(getSaveStateMemoryOffset(0x00, Memory.saveStateSlot));\n        Memory.currentRamBank = load(getSaveStateMemoryOffset(0x02, Memory.saveStateSlot));\n        Memory.isRamBankingEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x04, Memory.saveStateSlot));\n        Memory.isMBC1RomModeEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x05, Memory.saveStateSlot));\n        Memory.isRomOnly = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x06, Memory.saveStateSlot));\n        Memory.isMBC1 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x07, Memory.saveStateSlot));\n        Memory.isMBC2 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x08, Memory.saveStateSlot));\n        Memory.isMBC3 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x09, Memory.saveStateSlot));\n        Memory.isMBC5 = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x0a, Memory.saveStateSlot));\n    };\n    // ----------------------------------\n    // Gameboy Memory Map\n    // ----------------------------------\n    // https://github.com/AntonioND/giibiiadvance/blob/master/docs/TCAGBD.pdf\n    // http://gameboy.mongenel.com/dmg/asmmemmap.html\n    // using Arrays, first index is start, second is end\n    Memory.cartridgeRomLocation = 0x0000;\n    Memory.switchableCartridgeRomLocation = 0x4000;\n    Memory.videoRamLocation = 0x8000;\n    Memory.cartridgeRamLocation = 0xa000;\n    Memory.internalRamBankZeroLocation = 0xc000;\n    // This ram bank is switchable\n    Memory.internalRamBankOneLocation = 0xd000;\n    Memory.echoRamLocation = 0xe000;\n    Memory.spriteInformationTableLocation = 0xfe00;\n    Memory.spriteInformationTableLocationEnd = 0xfe9f;\n    Memory.unusableMemoryLocation = 0xfea0;\n    Memory.unusableMemoryEndLocation = 0xfeff;\n    // Hardware I/O, 0xFF00 -> 0xFF7F\n    // Zero Page, 0xFF80 -> 0xFFFE\n    // Intterupt Enable Flag, 0xFFFF\n    // ----------------------------------\n    // Rom/Ram Banking\n    // ----------------------------------\n    // http://gbdev.gg8.se/wiki/articles/Memory_Bank_Controllers#MBC3_.28max_2MByte_ROM_and.2For_32KByte_RAM_and_Timer.29\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/banking.html\n    Memory.currentRomBank = 0x00;\n    Memory.currentRamBank = 0x00;\n    Memory.isRamBankingEnabled = false;\n    Memory.isMBC1RomModeEnabled = true;\n    // Cartridge Types\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    Memory.isRomOnly = true;\n    Memory.isMBC1 = false;\n    Memory.isMBC2 = false;\n    Memory.isMBC3 = false;\n    Memory.isMBC5 = false;\n    // DMA\n    Memory.memoryLocationHdmaSourceHigh = 0xff51;\n    Memory.memoryLocationHdmaSourceLow = 0xff52;\n    Memory.memoryLocationHdmaDestinationHigh = 0xff53;\n    Memory.memoryLocationHdmaDestinationLow = 0xff54;\n    Memory.memoryLocationHdmaTrigger = 0xff55;\n    // Cycles accumulated for DMA\n    Memory.DMACycles = 0;\n    // Boolean we will mirror to indicate if Hdma is active\n    Memory.isHblankHdmaActive = false;\n    Memory.hblankHdmaTransferLengthRemaining = 0x00;\n    // Store the source and destination for performance, and update as needed\n    Memory.hblankHdmaSource = 0x00;\n    Memory.hblankHdmaDestination = 0x00;\n    // GBC Registers\n    Memory.memoryLocationGBCVRAMBank = 0xff4f;\n    Memory.memoryLocationGBCWRAMBank = 0xff70;\n    // Save States\n    Memory.saveStateSlot = 4;\n    return Memory;\n}());\n// Inlined because closure compiler inlines\nfunction initializeCartridge() {\n    // Reset stateful variables\n    Memory.isRamBankingEnabled = false;\n    Memory.isMBC1RomModeEnabled = true;\n    // Get our game MBC type from the cartridge header\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    var cartridgeType = eightBitLoadFromGBMemory(0x0147);\n    // Reset our Cartridge types\n    Memory.isRomOnly = cartridgeType === 0x00;\n    Memory.isMBC1 = cartridgeType >= 0x01 && cartridgeType <= 0x03;\n    Memory.isMBC2 = cartridgeType >= 0x05 && cartridgeType <= 0x06;\n    Memory.isMBC3 = cartridgeType >= 0x0f && cartridgeType <= 0x13;\n    Memory.isMBC5 = cartridgeType >= 0x19 && cartridgeType <= 0x1e;\n    Memory.currentRomBank = 0x01;\n    Memory.currentRamBank = 0x00;\n    // Set our GBC Banks\n    eightBitStoreIntoGBMemory(Memory.memoryLocationGBCVRAMBank, 0x00);\n    eightBitStoreIntoGBMemory(Memory.memoryLocationGBCWRAMBank, 0x01);\n}\n\n// WasmBoy memory map:\n\n// Everything Static as class instances just aren't quite there yet\n// https://github.com/AssemblyScript/assemblyscript/blob/master/tests/compiler/showcase.ts\nvar Cpu = /** @class */ (function () {\n    function Cpu() {\n    }\n    Cpu.CLOCK_SPEED = function () {\n        // 2^23, thanks binji!\n        // return Cpu.GBCDoubleSpeed ? 8388608 : 4194304;\n        return 4194304 << Cpu.GBCDoubleSpeed;\n    };\n    // Cycles Per Frame = Clock Speed / fps\n    // So: 4194304 / 59.73\n    Cpu.MAX_CYCLES_PER_FRAME = function () {\n        // return Cpu.GBCDoubleSpeed ? 140448 : 70224;\n        return 70224 << Cpu.GBCDoubleSpeed;\n    };\n    // See section 4.10 of TCAGBD\n    // Cpu Halting explained: https://www.reddit.com/r/EmuDev/comments/5ie3k7/infinite_loop_trying_to_pass_blarggs_interrupt/db7xnbe/\n    Cpu.enableHalt = function () {\n        if (Interrupts.masterInterruptSwitch) {\n            Cpu.isHaltNormal = true;\n            return;\n        }\n        var haltTypeValue = Interrupts.interruptsEnabledValue & Interrupts.interruptsRequestedValue & 0x1f;\n        if (haltTypeValue === 0) {\n            Cpu.isHaltNoJump = true;\n            return;\n        }\n        Cpu.isHaltBug = true;\n    };\n    Cpu.exitHaltAndStop = function () {\n        Cpu.isHaltNoJump = false;\n        Cpu.isHaltNormal = false;\n        Cpu.isHaltBug = false;\n        Cpu.isStopped = false;\n    };\n    Cpu.isHalted = function () {\n        return Cpu.isHaltNormal || Cpu.isHaltNoJump;\n    };\n    // Function to save the state of the class\n    Cpu.saveState = function () {\n        // Registers\n        store(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot), Cpu.registerA);\n        store(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot), Cpu.registerB);\n        store(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot), Cpu.registerC);\n        store(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot), Cpu.registerD);\n        store(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot), Cpu.registerE);\n        store(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot), Cpu.registerH);\n        store(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot), Cpu.registerL);\n        store(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot), Cpu.registerF);\n        store(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot), Cpu.stackPointer);\n        store(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot), Cpu.programCounter);\n        store(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot), Cpu.currentCycles);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot), Cpu.isHaltNormal);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot), Cpu.isHaltNoJump);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x13, Cpu.saveStateSlot), Cpu.isHaltBug);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x14, Cpu.saveStateSlot), Cpu.isStopped);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x15, Cpu.saveStateSlot), Cpu.BootROMEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x16, Cpu.saveStateSlot), Cpu.GBCEnabled);\n        storeBooleanDirectlyToWasmMemory(getSaveStateMemoryOffset(0x17, Cpu.saveStateSlot), Cpu.GBCDoubleSpeed);\n    };\n    // Function to load the save state from memory\n    Cpu.loadState = function () {\n        // Registers\n        Cpu.registerA = load(getSaveStateMemoryOffset(0x00, Cpu.saveStateSlot));\n        Cpu.registerB = load(getSaveStateMemoryOffset(0x01, Cpu.saveStateSlot));\n        Cpu.registerC = load(getSaveStateMemoryOffset(0x02, Cpu.saveStateSlot));\n        Cpu.registerD = load(getSaveStateMemoryOffset(0x03, Cpu.saveStateSlot));\n        Cpu.registerE = load(getSaveStateMemoryOffset(0x04, Cpu.saveStateSlot));\n        Cpu.registerH = load(getSaveStateMemoryOffset(0x05, Cpu.saveStateSlot));\n        Cpu.registerL = load(getSaveStateMemoryOffset(0x06, Cpu.saveStateSlot));\n        Cpu.registerF = load(getSaveStateMemoryOffset(0x07, Cpu.saveStateSlot));\n        Cpu.stackPointer = load(getSaveStateMemoryOffset(0x08, Cpu.saveStateSlot));\n        Cpu.programCounter = load(getSaveStateMemoryOffset(0x0a, Cpu.saveStateSlot));\n        Cpu.currentCycles = load(getSaveStateMemoryOffset(0x0c, Cpu.saveStateSlot));\n        Cpu.isHaltNormal = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x11, Cpu.saveStateSlot));\n        Cpu.isHaltNoJump = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x12, Cpu.saveStateSlot));\n        Cpu.isHaltBug = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x13, Cpu.saveStateSlot));\n        Cpu.isStopped = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x14, Cpu.saveStateSlot));\n        Cpu.BootROMEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x15, Cpu.saveStateSlot));\n        Cpu.GBCEnabled = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x16, Cpu.saveStateSlot));\n        Cpu.GBCDoubleSpeed = loadBooleanDirectlyFromWasmMemory(getSaveStateMemoryOffset(0x17, Cpu.saveStateSlot));\n    };\n    // Status to track if we are currently executing the boot rom\n    Cpu.memoryLocationBootROMSwitch = 0xff50;\n    Cpu.BootROMEnabled = false;\n    // Status to track if we are in Gameboy Color Mode, and GBC State\n    Cpu.GBCEnabled = false;\n    // Memory Location for the GBC Speed switch\n    // And the current status\n    Cpu.memoryLocationSpeedSwitch = 0xff4d;\n    Cpu.GBCDoubleSpeed = false;\n    // 8-bit Cpu.registers\n    Cpu.registerA = 0;\n    Cpu.registerB = 0;\n    Cpu.registerC = 0;\n    Cpu.registerD = 0;\n    Cpu.registerE = 0;\n    Cpu.registerH = 0;\n    Cpu.registerL = 0;\n    Cpu.registerF = 0;\n    // 16-bit Cpu.registers\n    Cpu.stackPointer = 0;\n    // Boot rom from 0x00 to 0x99, all games start at 0x100\n    Cpu.programCounter = 0x00;\n    // Current number of cycles, shouldn't execeed max number of cycles\n    Cpu.currentCycles = 0;\n    // HALT and STOP instructions need to stop running opcodes, but simply check timers\n    // https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // Matt said is should work to, so it must work!\n    // TCAGBD shows three different HALT states. Therefore, we need to handle each\n    Cpu.isHaltNormal = false;\n    Cpu.isHaltNoJump = false;\n    Cpu.isHaltBug = false;\n    Cpu.isStopped = false;\n    // Save States\n    Cpu.saveStateSlot = 0;\n    return Cpu;\n}());\n// Inlined because closure compiler does so\nfunction initializeCpu() {\n    // Reset all stateful Cpu variables\n    // Cpu.GBCEnabled is done by core/initialize\n    Cpu.GBCDoubleSpeed = false;\n    Cpu.registerA = 0;\n    Cpu.registerB = 0;\n    Cpu.registerC = 0;\n    Cpu.registerD = 0;\n    Cpu.registerE = 0;\n    Cpu.registerH = 0;\n    Cpu.registerL = 0;\n    Cpu.registerF = 0;\n    Cpu.stackPointer = 0;\n    Cpu.programCounter = 0x00;\n    Cpu.currentCycles = 0;\n    Cpu.isHaltNormal = false;\n    Cpu.isHaltNoJump = false;\n    Cpu.isHaltBug = false;\n    Cpu.isStopped = false;\n    // Everything is done by Boot ROM is enabled.\n    if (Cpu.BootROMEnabled) {\n        return;\n    }\n    if (Cpu.GBCEnabled) {\n        // CPU Registers\n        Cpu.registerA = 0x11;\n        Cpu.registerF = 0x80;\n        Cpu.registerB = 0x00;\n        Cpu.registerC = 0x00;\n        Cpu.registerD = 0xff;\n        Cpu.registerE = 0x56;\n        Cpu.registerH = 0x00;\n        Cpu.registerL = 0x0d;\n    }\n    else {\n        // Cpu Registers\n        Cpu.registerA = 0x01;\n        Cpu.registerF = 0xb0;\n        Cpu.registerB = 0x00;\n        Cpu.registerC = 0x13;\n        Cpu.registerD = 0x00;\n        Cpu.registerE = 0xd8;\n        Cpu.registerH = 0x01;\n        Cpu.registerL = 0x4d;\n    }\n    // Cpu Control Flow\n    Cpu.programCounter = 0x100;\n    Cpu.stackPointer = 0xfffe;\n}\n\n// Imports\n// General Logic Instructions\n// Such as the ones found on the CB table and 0x40 - 0xBF\n// NOTE: Only CB table uses these for now, was mostly me realizing that I messed up, trying to be all cute and verbose :p\n// NOTE: TODO: Refactor honestly shouldn't take that long, and may happen once assembly script is improved\nfunction addARegister(register) {\n    var registerA = Cpu.registerA;\n    checkAndSetEightBitHalfCarryFlag(registerA, register);\n    checkAndSetEightBitCarryFlag(registerA, register);\n    registerA = u8Portable(registerA + register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n}\nfunction addAThroughCarryRegister(register) {\n    // Handling flags manually as they require some special overflow\n    // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F adc\n    var registerA = Cpu.registerA;\n    var result = u8Portable(registerA + register + getCarryFlag$$1());\n    setHalfCarryFlag(((u8Portable(registerA ^ register ^ result) & 0x10) != 0));\n    var overflowedResult = u16Portable(registerA + register + getCarryFlag$$1());\n    setCarryFlag(((overflowedResult & 0x100) > 0));\n    Cpu.registerA = result;\n    setZeroFlag$$1((result === 0));\n    setSubtractFlag(0);\n}\nfunction subARegister(register) {\n    // Need to convert the register on one line, and flip the sign on another\n    var negativeRegister = register;\n    negativeRegister = negativeRegister * -1;\n    var registerA = Cpu.registerA;\n    checkAndSetEightBitHalfCarryFlag(registerA, negativeRegister);\n    checkAndSetEightBitCarryFlag(registerA, negativeRegister);\n    registerA = u8Portable(registerA - register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(1);\n}\nfunction subAThroughCarryRegister(register) {\n    // Handling flags manually as they require some special overflow\n    // From: https://github.com/nakardo/node-gameboy/blob/master/lib/cpu/opcodes.js\n    // CTRL+F adc\n    var registerA = Cpu.registerA;\n    var result = u8Portable(registerA - register - getCarryFlag$$1());\n    var carryRegisterCheck = u8Portable((registerA ^ register ^ result) & 0x10);\n    setHalfCarryFlag((carryRegisterCheck != 0));\n    var overflowedResult = u16Portable(registerA - register - getCarryFlag$$1());\n    setCarryFlag(((overflowedResult & 0x100) > 0));\n    Cpu.registerA = result;\n    setZeroFlag$$1((result === 0));\n    setSubtractFlag(1);\n}\nfunction andARegister(register) {\n    var registerA = Cpu.registerA & register;\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(1);\n    setCarryFlag(0);\n}\nfunction xorARegister(register) {\n    var registerA = u8Portable(Cpu.registerA ^ register);\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n}\nfunction orARegister(register) {\n    var registerA = Cpu.registerA | register;\n    Cpu.registerA = registerA;\n    setZeroFlag$$1((registerA === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n}\nfunction cpARegister(register) {\n    // 0xB8 - 0xBF\n    // CP B\n    // 1  4\n    // Z 1 H C\n    var registerA = Cpu.registerA;\n    var negativeRegister = register;\n    negativeRegister = negativeRegister * -1;\n    checkAndSetEightBitHalfCarryFlag(registerA, negativeRegister);\n    checkAndSetEightBitCarryFlag(registerA, negativeRegister);\n    var tempResult = registerA + negativeRegister;\n    setZeroFlag$$1((tempResult === 0));\n    setSubtractFlag(1);\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterLeft(register) {\n    // RLC register 8-bit\n    // Z 0 0 C\n    setCarryFlag(((register & 0x80) === 0x80));\n    register = rotateByteLeft(register);\n    setZeroFlag$$1((register === 0));\n    // Set all other flags to zero\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    // Return the register\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterRight(register) {\n    // RLC register 8-bit\n    // Z 0 0 C\n    // Check for the last bit, to see if it will be carried\n    setCarryFlag(((register & 0x01) > 0));\n    register = rotateByteRight(register);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    // Return the register\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterLeftThroughCarry(register) {\n    // RL register 8-bit\n    // Z 0 0 C\n    // setting has first bit since we need to use carry\n    var hasHighbit = (register & 0x80) === 0x80;\n    register = rotateByteLeftThroughCarry(register);\n    setCarryFlag(hasHighbit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction rotateRegisterRightThroughCarry(register) {\n    // RR register 8-bit\n    // Z 0 0 C\n    var hasLowBit = (register & 0x01) === 0x01;\n    register = rotateByteRightThroughCarry(register);\n    setCarryFlag(hasLowBit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftLeftRegister(register) {\n    // SLA register 8-bit\n    // Z 0 0 C\n    var hasHighbit = (register & 0x80) === 0x80;\n    register = u8Portable(register << 1);\n    setCarryFlag(hasHighbit);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftRightArithmeticRegister(register) {\n    // SRA register 8-bit\n    // Z 0 0 C\n    // NOTE: This C flag may need to be set to 0;\n    // This preserves the MSB (Most significant bit)\n    var hasHighbit = (register & 0x80) === 0x80;\n    var hasLowbit = (register & 0x01) === 0x01;\n    register = u8Portable(register >> 1);\n    if (hasHighbit) {\n        register = register | 0x80;\n    }\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(hasLowbit);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction swapNibblesOnRegister(register) {\n    // SWAP register 8-bit\n    // Z 0 0 0\n    var highNibble = register & 0xf0;\n    var lowNibble = register & 0x0f;\n    register = u8Portable((lowNibble << 4) | (highNibble >> 4));\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(0);\n    return register;\n}\n// Inlined because closure compiler inlines\nfunction shiftRightLogicalRegister(register) {\n    // SRA register 8-bit\n    // Z 0 0 C\n    // NOTE: This C flag may need to be set to 0;\n    // This does NOT preserve MSB (most significant bit)\n    var hasLowbit = (register & 0x01) === 0x01;\n    register = u8Portable(register >> 1);\n    setZeroFlag$$1((register === 0));\n    setSubtractFlag(0);\n    setHalfCarryFlag(0);\n    setCarryFlag(hasLowbit);\n    return register;\n}\nfunction testBitOnRegister(bitPosition, register) {\n    // BIT bitPosition ,register 8-bit\n    // Z 0 1 -\n    var testByte = 0x01 << bitPosition;\n    var result = register & testByte;\n    setZeroFlag$$1((result === 0x00));\n    setSubtractFlag(0);\n    setHalfCarryFlag(1);\n    return register;\n}\nfunction setBitOnRegister(bitPosition, bitValue, register) {\n    // RES 0,B or SET 0,B depending on bit value\n    if (bitValue > 0) {\n        var setByte = 0x01 << bitPosition;\n        register = register | setByte;\n    }\n    else {\n        // NOT (byte we want)\n        // 0000 0100 becomes 1111 1011\n        var setByte = ~(0x01 << bitPosition);\n        register = register & setByte;\n    }\n    return register;\n}\n// Private function for our relative jumps\nfunction relativeJump(value) {\n    // Need to convert the value to i8, since in this case, u8 can be negative\n    var relativeJumpOffset = i8Portable(value);\n    var programCounter = Cpu.programCounter;\n    programCounter = u16Portable(programCounter + relativeJumpOffset);\n    // Realtive jump, using bgb debugger\n    // and my debugger shows,\n    // on JR you need to jump to the relative jump offset,\n    // However, if the jump fails (such as conditional), only jump +2 in total\n    programCounter = u16Portable(programCounter + 1);\n    Cpu.programCounter = programCounter;\n}\n\n// Imports\n// Handle CB Opcodes\n// NOTE: Program stpes and cycles are standardized depending on the register type\n// NOTE: Doing some funny stuff to get around not having arrays or objects\n// Inlined because closure compiler inlines.\nfunction handleCbOpcode(cbOpcode) {\n    var numberOfCycles = -1;\n    var handledOpcode = false;\n    // The result of our cb logic instruction\n    var instructionRegisterValue = 0;\n    var instructionRegisterResult = 0;\n    // Get our register number by modulo 0x08 (number of registers)\n    // cbOpcode % 0x08\n    var registerNumber = cbOpcode & 0x07;\n    // NOTE: registerNumber = register on CB table. Cpu.registerB = 0, Cpu.registerC = 1....Cpu.registerA = 7\n    switch (registerNumber) {\n        case 0:\n            instructionRegisterValue = Cpu.registerB;\n            break;\n        case 1:\n            instructionRegisterValue = Cpu.registerC;\n            break;\n        case 2:\n            instructionRegisterValue = Cpu.registerD;\n            break;\n        case 3:\n            instructionRegisterValue = Cpu.registerE;\n            break;\n        case 4:\n            instructionRegisterValue = Cpu.registerH;\n            break;\n        case 5:\n            instructionRegisterValue = Cpu.registerL;\n            break;\n        case 6:\n            // Value at register HL\n            // 4 cycles\n            instructionRegisterValue = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            break;\n        case 7:\n            instructionRegisterValue = Cpu.registerA;\n            break;\n    }\n    // Grab the high nibble to perform skips to speed up performance\n    var opcodeHighNibble = cbOpcode & 0xf0;\n    opcodeHighNibble = opcodeHighNibble >> 4;\n    // Send to the correct function\n    switch (opcodeHighNibble) {\n        case 0x00:\n            if (cbOpcode <= 0x07) {\n                // RLC register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterLeft(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x0f) {\n                // RRC register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterRight(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x01:\n            if (cbOpcode <= 0x17) {\n                // RL register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterLeftThroughCarry(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x1f) {\n                // RR register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = rotateRegisterRightThroughCarry(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x02:\n            if (cbOpcode <= 0x27) {\n                // SLA register 8-bit\n                // Z 0 0 C\n                instructionRegisterResult = shiftLeftRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x2f) {\n                // SRA register 8-bit\n                // Z 0 0 0\n                instructionRegisterResult = shiftRightArithmeticRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x03:\n            if (cbOpcode <= 0x37) {\n                // SWAP register 8-bit\n                // Z 0 0 0\n                instructionRegisterResult = swapNibblesOnRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x3f) {\n                // SRL B\n                // Z 0 0 C\n                instructionRegisterResult = shiftRightLogicalRegister(instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x04:\n            if (cbOpcode <= 0x47) {\n                // BIT 0,register 8-bit\n                // Z 0 1 -\n                //TODO: Optimize this not to do logic of setting register back\n                instructionRegisterResult = testBitOnRegister(0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x4f) {\n                // BIT 1,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x05:\n            if (cbOpcode <= 0x57) {\n                // BIT 2,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(2, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x5f) {\n                // BIT 3,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(3, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x06:\n            if (cbOpcode <= 0x67) {\n                // BIT 4,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(4, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x6f) {\n                // BIT 5,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(5, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x07:\n            if (cbOpcode <= 0x77) {\n                // BIT 6,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(6, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x7f) {\n                // BIT 7,register 8-bit\n                // Z 0 1 -\n                instructionRegisterResult = testBitOnRegister(7, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x08:\n            if (cbOpcode <= 0x87) {\n                // Res 0,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(0, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x8f) {\n                // Res 1,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(1, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x09:\n            if (cbOpcode <= 0x97) {\n                // Res 2,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(2, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0x9f) {\n                // Res 3,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(3, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0a:\n            if (cbOpcode <= 0xa7) {\n                // Res 4,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(4, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xaf) {\n                // Res 5,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(5, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0b:\n            if (cbOpcode <= 0xb7) {\n                // Res 6,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(6, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xbf) {\n                // Res 7,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(7, 0, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0c:\n            if (cbOpcode <= 0xc7) {\n                // SET 0,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(0, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xcf) {\n                // SET 1,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(1, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0d:\n            if (cbOpcode <= 0xd7) {\n                // SET 2,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(2, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xdf) {\n                // SET 3,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(3, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0e:\n            if (cbOpcode <= 0xe7) {\n                // SET 4,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(4, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xef) {\n                // SET 5,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(5, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n        case 0x0f:\n            if (cbOpcode <= 0xf7) {\n                // SET 6,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(6, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            else if (cbOpcode <= 0xff) {\n                // SET 7,register 8-bit\n                // - - - -\n                instructionRegisterResult = setBitOnRegister(7, 1, instructionRegisterValue);\n                handledOpcode = true;\n            }\n            break;\n    }\n    // Finally Pass back into the correct register\n    switch (registerNumber) {\n        case 0:\n            Cpu.registerB = instructionRegisterResult;\n            break;\n        case 1:\n            Cpu.registerC = instructionRegisterResult;\n            break;\n        case 2:\n            Cpu.registerD = instructionRegisterResult;\n            break;\n        case 3:\n            Cpu.registerE = instructionRegisterResult;\n            break;\n        case 4:\n            Cpu.registerH = instructionRegisterResult;\n            break;\n        case 5:\n            Cpu.registerL = instructionRegisterResult;\n            break;\n        case 6:\n            // Value at register HL\n            // Opcodes 0x40 -> 0x7F only do simple\n            // Bit test, and don't need to be stored back in memory\n            // Thus they take 4 less cycles to run\n            if (opcodeHighNibble < 0x04 || opcodeHighNibble > 0x07) {\n                // Store the result back\n                // 4 cycles\n                eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), instructionRegisterResult);\n            }\n            break;\n        case 7:\n            Cpu.registerA = instructionRegisterResult;\n            break;\n    }\n    // Finally our number of cycles\n    // Set if we handled the opcode\n    if (handledOpcode) {\n        numberOfCycles = 4;\n    }\n    // Return our number of cycles\n    return numberOfCycles;\n}\n\n// Imports\n// Take in any opcode, and decode it, and return the number of cycles\n// Program counter can be gotten from getProgramCounter();\n// Setting return value to i32 instead of u16, as we want to return a negative number on error\n// https://rednex.github.io/rgbds/gbz80.7.html\n// http://pastraiser.com/cpu/gameboy/gameboyopcodes.html\nfunction executeOpcode$$1(opcode) {\n    // Always implement the program counter by one\n    // Any other value can just subtract or add however much offset before reaching this line\n    var programCounter = Cpu.programCounter;\n    programCounter = u16Portable(programCounter + 1);\n    // Check if we are in the halt bug\n    if (Cpu.isHaltBug) {\n        // Need to not increment program counter,\n        // thus, running the next opcode twice\n        // E.g\n        // 0x76 - halt\n        // FA 34 12 - ld a,(1234)\n        // Becomes\n        // FA FA 34 ld a,(34FA)\n        // 12 ld (de),a\n        programCounter = u16Portable(programCounter - 1);\n    }\n    Cpu.programCounter = programCounter;\n    // Split our opcode into a high nibble to speed up performance\n    // Running 255 if statements is slow, even in wasm haha!\n    var opcodeHighNibble = opcode & 0xf0;\n    opcodeHighNibble = opcodeHighNibble >> 4;\n    // NOTE: @binji rule of thumb: it takes 4 cpu cycles to read one byte\n    // Therefore isntructions that use more than just the opcode (databyte one and two) will take at least\n    // 8 cyckles to use getDataByteOne(), and two cycles to use the concatented\n    // Not using a switch statement to avoid cannot redeclare this variable errors\n    // And it would be a ton of work :p\n    switch (opcodeHighNibble) {\n        case 0x00:\n            return handleOpcode0x(opcode);\n        case 0x01:\n            return handleOpcode1x(opcode);\n        case 0x02:\n            return handleOpcode2x(opcode);\n        case 0x03:\n            return handleOpcode3x(opcode);\n        case 0x04:\n            return handleOpcode4x(opcode);\n        case 0x05:\n            return handleOpcode5x(opcode);\n        case 0x06:\n            return handleOpcode6x(opcode);\n        case 0x07:\n            return handleOpcode7x(opcode);\n        case 0x08:\n            return handleOpcode8x(opcode);\n        case 0x09:\n            return handleOpcode9x(opcode);\n        case 0x0a:\n            return handleOpcodeAx(opcode);\n        case 0x0b:\n            return handleOpcodeBx(opcode);\n        case 0x0c:\n            return handleOpcodeCx(opcode);\n        case 0x0d:\n            return handleOpcodeDx(opcode);\n        case 0x0e:\n            return handleOpcodeEx(opcode);\n        default:\n            return handleOpcodeFx(opcode);\n    }\n}\n// Wrapper functions around loading and storing memory, and syncing those cycles\nfunction eightBitLoadSyncCycles(gameboyOffset) {\n    syncCycles(4);\n    return eightBitLoadFromGBMemoryWithTraps(gameboyOffset);\n}\nfunction eightBitStoreSyncCycles(gameboyOffset, value) {\n    syncCycles(4);\n    eightBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\nfunction sixteenBitLoadSyncCycles(gameboyOffset) {\n    syncCycles(8);\n    // sixteen bit load has traps even though it has no label\n    return sixteenBitLoadFromGBMemory(gameboyOffset);\n}\nfunction sixteenBitStoreSyncCycles(gameboyOffset, value) {\n    syncCycles(8);\n    sixteenBitStoreIntoGBMemoryWithTraps(gameboyOffset, value);\n}\n// Functions to access the next operands of a opcode, reffering to them as \"dataBytes\"\nfunction getDataByteOne() {\n    syncCycles(4);\n    return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\nfunction getDataByteTwo() {\n    syncCycles(4);\n    return eightBitLoadFromGBMemory(u16Portable(Cpu.programCounter + 1));\n}\n// Get our concatenated databyte one and getDataByteTwo()\n// Find and replace with : getConcatenatedDataByte()\nfunction getConcatenatedDataByte() {\n    return concatenateBytes(getDataByteTwo(), getDataByteOne());\n}\nfunction handleOpcode0x(opcode) {\n    switch (opcode) {\n        case 0x00:\n            // NOP\n            // 1  4\n            // No Operation\n            return 4;\n        case 0x01: {\n            // LD BC,d16\n            // 3  12\n            // 8 cycles\n            var concatenatedDataByte = getConcatenatedDataByte();\n            Cpu.registerB = splitHighByte(concatenatedDataByte);\n            Cpu.registerC = splitLowByte(concatenatedDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x02: {\n            // LD (BC),A\n            // 1  8\n            // () means load into address pointed by BC\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC), Cpu.registerA);\n            return 4;\n        }\n        case 0x03: {\n            // INC BC\n            // 1  8\n            var registerBC3 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            registerBC3++;\n            Cpu.registerB = splitHighByte(registerBC3);\n            Cpu.registerC = splitLowByte(registerBC3);\n            return 8;\n        }\n        case 0x04: {\n            // INC B\n            // 1  4\n            // Z 0 H -\n            var registerB = Cpu.registerB;\n            checkAndSetEightBitHalfCarryFlag(registerB, 1);\n            registerB = u8Portable(registerB + 1);\n            Cpu.registerB = registerB;\n            setZeroFlag$$1((registerB === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x05: {\n            // DEC B\n            // 1  4\n            // Z 1 H -\n            var registerB = Cpu.registerB;\n            checkAndSetEightBitHalfCarryFlag(registerB, -1);\n            registerB = u8Portable(registerB - 1);\n            Cpu.registerB = registerB;\n            setZeroFlag$$1((registerB === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x06: {\n            // LD B,d8\n            // 2  8\n            // 4 cycles\n            Cpu.registerB = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x07: {\n            // RLCA\n            // 1  4\n            // 0 0 0 C\n            // Check for the carry\n            var registerA = Cpu.registerA;\n            setCarryFlag(((registerA & 0x80) === 0x80));\n            Cpu.registerA = rotateByteLeft(registerA);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n        case 0x08: {\n            // LD (a16),SP\n            // 3  20\n            // Load the stack pointer into the 16 bit address represented by the two data bytes\n            // 16 cycles, 8 from data byte, 8 from sixteenbit store\n            sixteenBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.stackPointer);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x09: {\n            // ADD HL,BC\n            // 1 8\n            // - 0 H C\n            var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            var registerBC9 = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerBC9, false);\n            var result = u16Portable((registerHL + registerBC9));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x0a: {\n            // LD A,(BC)\n            // 1 8\n            // 4 cycles from load\n            Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerB, Cpu.registerC));\n            return 4;\n        }\n        case 0x0b: {\n            // DEC BC\n            // 1  8\n            var registerBCB = concatenateBytes(Cpu.registerB, Cpu.registerC);\n            registerBCB = u16Portable(registerBCB - 1);\n            Cpu.registerB = splitHighByte(registerBCB);\n            Cpu.registerC = splitLowByte(registerBCB);\n            return 8;\n        }\n        case 0x0c: {\n            // INC C\n            // 1  4\n            // Z 0 H -\n            var registerC = Cpu.registerC;\n            checkAndSetEightBitHalfCarryFlag(registerC, 1);\n            registerC = u8Portable(registerC + 1);\n            Cpu.registerC = registerC;\n            setZeroFlag$$1((registerC === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x0d: {\n            // DEC C\n            // 1  4\n            // Z 1 H -\n            var registerC = Cpu.registerC;\n            checkAndSetEightBitHalfCarryFlag(registerC, -1);\n            registerC = u8Portable(registerC - 1);\n            Cpu.registerC = registerC;\n            setZeroFlag$$1((registerC === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x0e: {\n            // LD C,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerC = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x0f: {\n            // RRCA\n            // 1 4\n            // 0 0 0 C\n            // Check for the last bit, to see if it will be carried\n            var registerA = Cpu.registerA;\n            setCarryFlag(((registerA & 0x01) > 0));\n            Cpu.registerA = rotateByteRight(registerA);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode1x(opcode) {\n    switch (opcode) {\n        case 0x10: {\n            // STOP 0\n            // 2 4\n            // Enter CPU very low power mode. Also used to switch between double and normal speed CPU modes in GBC.\n            // Meaning Don't Decode anymore opcodes , or updated the LCD until joypad interrupt (or when button is pressed if I am wrong)\n            // See HALT\n            // If we are in gameboy color mode, set the new speed\n            if (Cpu.GBCEnabled) {\n                // 4 cycles\n                var speedSwitch = eightBitLoadSyncCycles(Cpu.memoryLocationSpeedSwitch);\n                if (checkBitOnByte(0, speedSwitch)) {\n                    // Reset the prepare bit\n                    speedSwitch = resetBitOnByte(0, speedSwitch);\n                    // Switch to the new mode, and set the speed switch to the OTHER speed, to represent our new speed\n                    if (!checkBitOnByte(7, speedSwitch)) {\n                        Cpu.GBCDoubleSpeed = true;\n                        speedSwitch = setBitOnByte(7, speedSwitch);\n                    }\n                    else {\n                        Cpu.GBCDoubleSpeed = false;\n                        speedSwitch = resetBitOnByte(7, speedSwitch);\n                    }\n                    // Store the final speed switch\n                    // 4 cycles\n                    eightBitStoreSyncCycles(Cpu.memoryLocationSpeedSwitch, speedSwitch);\n                    // Cycle accurate gameboy docs says this takes 76 clocks\n                    // 76 - 8 cycles (from load/store) = 68\n                    return 68;\n                }\n            }\n            // NOTE: This breaks Blarggs CPU tests if CGB Stop is not implemented\n            Cpu.isStopped = true;\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x11: {\n            // LD DE,d16\n            // 3  12\n            // 8 cycles\n            var concatenatedDataByte = getConcatenatedDataByte();\n            Cpu.registerD = splitHighByte(concatenatedDataByte);\n            Cpu.registerE = splitLowByte(concatenatedDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x12: {\n            // LD (DE),A\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerD, Cpu.registerE), Cpu.registerA);\n            return 4;\n        }\n        case 0x13: {\n            // INC DE\n            // 1 8\n            var registerDE3 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            registerDE3 = u16Portable(registerDE3 + 1);\n            Cpu.registerD = splitHighByte(registerDE3);\n            Cpu.registerE = splitLowByte(registerDE3);\n            return 8;\n        }\n        case 0x14: {\n            // INC D\n            // 1  4\n            // Z 0 H -\n            var registerD = Cpu.registerD;\n            checkAndSetEightBitHalfCarryFlag(registerD, 1);\n            registerD = u8Portable(registerD + 1);\n            Cpu.registerD = registerD;\n            setZeroFlag$$1((Cpu.registerD === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x15: {\n            // DEC D\n            // 1  4\n            // Z 1 H -\n            var registerD = Cpu.registerD;\n            checkAndSetEightBitHalfCarryFlag(registerD, -1);\n            registerD = u8Portable(registerD - 1);\n            Cpu.registerD = registerD;\n            setZeroFlag$$1((Cpu.registerD === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x16: {\n            // LD D,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerD = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x17: {\n            // RLA\n            // 1 4\n            // 0 0 0 C\n            // Check for the carry\n            // setting has first bit since we need to use carry\n            var hasHighbit = (Cpu.registerA & 0x80) === 0x80;\n            Cpu.registerA = rotateByteLeftThroughCarry(Cpu.registerA);\n            // OR the carry flag to the end\n            setCarryFlag(hasHighbit);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n        case 0x18: {\n            // JR r8\n            // 2  12\n            // NOTE: Discoved dataByte is signed\n            // However the relative Jump Function handles this\n            // 4 cycles\n            relativeJump(getDataByteOne());\n            return 8;\n        }\n        // Relative Jump Function Handles program counter\n        case 0x19: {\n            // ADD HL,DE\n            // 1  8\n            // - 0 H C\n            var registerHL = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            var registerDE9 = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL, registerDE9, false);\n            var result = u16Portable((registerHL + registerDE9));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x1a: {\n            // LD A,(DE)\n            // 1 8\n            var registerDEA = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerDEA);\n            return 4;\n        }\n        case 0x1b: {\n            // DEC DE\n            // 1 8\n            var registerDEB = concatenateBytes(Cpu.registerD, Cpu.registerE);\n            registerDEB = u16Portable(registerDEB - 1);\n            Cpu.registerD = splitHighByte(registerDEB);\n            Cpu.registerE = splitLowByte(registerDEB);\n            return 8;\n        }\n        case 0x1c: {\n            // INC E\n            // 1  4\n            // Z 0 H -\n            var registerE = Cpu.registerE;\n            checkAndSetEightBitHalfCarryFlag(registerE, 1);\n            registerE = u8Portable(registerE + 1);\n            Cpu.registerE = registerE;\n            setZeroFlag$$1((registerE === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x1d: {\n            // DEC E\n            // 1  4\n            // Z 1 H -\n            var registerE = Cpu.registerE;\n            checkAndSetEightBitHalfCarryFlag(registerE, -1);\n            registerE = u8Portable(registerE - 1);\n            Cpu.registerE = registerE;\n            setZeroFlag$$1((registerE === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x1e: {\n            // LD E,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerE = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x1f: {\n            // RRA\n            // 1 4\n            // 0 0 0 C\n            // Check for the carry\n            // setting has low bit since we need to use carry\n            var hasLowBit = (Cpu.registerA & 0x01) === 0x01;\n            Cpu.registerA = rotateByteRightThroughCarry(Cpu.registerA);\n            setCarryFlag(hasLowBit);\n            // Set all other flags to zero\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode2x(opcode) {\n    switch (opcode) {\n        case 0x20: {\n            // JR NZ,r8\n            // 2  12/8\n            // NOTE: NZ stands for not [flag], so in this case, not zero flag\n            // Also, / means, if condition. so if met, 12 cycles, otherwise 8 cycles\n            if (getZeroFlag$$1() === 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump Funciton handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x21: {\n            // LD HL,d16\n            // 3  12\n            // 8 cycles\n            var sixteenBitDataByte = getConcatenatedDataByte();\n            Cpu.registerH = splitHighByte(sixteenBitDataByte);\n            Cpu.registerL = splitLowByte(sixteenBitDataByte);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x22: {\n            // LD (HL+),A\n            // 1 8\n            var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n            registerHL2 = u16Portable(registerHL2 + 1);\n            Cpu.registerH = splitHighByte(registerHL2);\n            Cpu.registerL = splitLowByte(registerHL2);\n            return 4;\n        }\n        case 0x23: {\n            // INC HL\n            // 1  8\n            var registerHL3 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            registerHL3 = u16Portable(registerHL3 + 1);\n            Cpu.registerH = splitHighByte(registerHL3);\n            Cpu.registerL = splitLowByte(registerHL3);\n            return 8;\n        }\n        case 0x24: {\n            // INC H\n            // 1  4\n            // Z 0 H -\n            var registerH = Cpu.registerH;\n            checkAndSetEightBitHalfCarryFlag(registerH, 1);\n            registerH = u8Portable(registerH + 1);\n            Cpu.registerH = registerH;\n            setZeroFlag$$1((registerH === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x25: {\n            // DEC H\n            // 1  4\n            // Z 1 H -\n            var registerH = Cpu.registerH;\n            checkAndSetEightBitHalfCarryFlag(registerH, -1);\n            registerH = u8Portable(registerH - 1);\n            Cpu.registerH = registerH;\n            setZeroFlag$$1((registerH === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x26: {\n            // LD H,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerH = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x27: {\n            // DAA\n            // 1 4\n            // Z - 0 C\n            var adjustedRegister = 0;\n            var adjustment = 0;\n            if (getHalfCarryFlag() > 0) {\n                adjustment = adjustment | 0x06;\n            }\n            if (getCarryFlag$$1() > 0) {\n                adjustment = adjustment | 0x60;\n            }\n            var registerA = Cpu.registerA;\n            if (getSubtractFlag() > 0) {\n                adjustedRegister = u8Portable(registerA - adjustment);\n            }\n            else {\n                if ((registerA & 0x0f) > 0x09) {\n                    adjustment = adjustment | 0x06;\n                }\n                if (registerA > 0x99) {\n                    adjustment = adjustment | 0x60;\n                }\n                adjustedRegister = u8Portable(registerA + adjustment);\n            }\n            // Now set our flags to the correct values\n            setZeroFlag$$1((adjustedRegister === 0));\n            setCarryFlag(((adjustment & 0x60) !== 0));\n            setHalfCarryFlag(0);\n            Cpu.registerA = adjustedRegister;\n            return 4;\n        }\n        case 0x28: {\n            // JR Z,r8\n            // 2  12/8\n            if (getZeroFlag$$1() > 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump funciton handles pogram counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x29: {\n            // ADD HL,HL\n            // 1  8\n            // - 0 H C\n            var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL9, registerHL9, false);\n            registerHL9 = u16Portable(registerHL9 * 2);\n            Cpu.registerH = splitHighByte(registerHL9);\n            Cpu.registerL = splitLowByte(registerHL9);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x2a: {\n            // LD A,(HL+)\n            // 1  8\n            var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n            registerHLA = u16Portable(registerHLA + 1);\n            Cpu.registerH = splitHighByte(registerHLA);\n            Cpu.registerL = splitLowByte(registerHLA);\n            return 4;\n        }\n        case 0x2b: {\n            // DEC HL\n            // 1 8\n            var registerHLB = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            registerHLB = u16Portable(registerHLB - 1);\n            Cpu.registerH = splitHighByte(registerHLB);\n            Cpu.registerL = splitLowByte(registerHLB);\n            return 8;\n        }\n        case 0x2c: {\n            // INC L\n            // 1  4\n            // Z 0 H -\n            var registerL = Cpu.registerL;\n            checkAndSetEightBitHalfCarryFlag(registerL, 1);\n            registerL = u8Portable(registerL + 1);\n            Cpu.registerL = registerL;\n            setZeroFlag$$1((registerL === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x2d: {\n            // DEC L\n            // 1  4\n            // Z 1 H -\n            var registerL = Cpu.registerL;\n            checkAndSetEightBitHalfCarryFlag(registerL, -1);\n            registerL = u8Portable(registerL - 1);\n            Cpu.registerL = registerL;\n            setZeroFlag$$1((registerL === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x2e: {\n            // LD L,d8\n            // 2  8\n            // 4 cycles\n            Cpu.registerL = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x2f: {\n            // CPL\n            // 1 4\n            // - 1 1 -\n            Cpu.registerA = ~Cpu.registerA;\n            setSubtractFlag(1);\n            setHalfCarryFlag(1);\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode3x(opcode) {\n    switch (opcode) {\n        case 0x30: {\n            // JR NC,r8\n            // 2 12 / 8\n            if (getCarryFlag$$1() === 0) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump function handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x31: {\n            // LD SP,d16\n            // 3 12\n            // 8 cycles\n            Cpu.stackPointer = getConcatenatedDataByte();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0x32: {\n            // LD (HL-),A\n            // 1 8\n            var registerHL2 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL2, Cpu.registerA);\n            registerHL2 = u16Portable(registerHL2 - 1);\n            Cpu.registerH = splitHighByte(registerHL2);\n            Cpu.registerL = splitLowByte(registerHL2);\n            return 4;\n        }\n        case 0x33: {\n            // INC SP\n            // 1 8\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + 1);\n            return 8;\n        }\n        case 0x34: {\n            // INC (HL)\n            // 1  12\n            // Z 0 H -\n            var registerHL4 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            var valueAtHL4 = eightBitLoadSyncCycles(registerHL4);\n            // Creating a varible for this to fix assemblyscript overflow bug\n            // Requires explicit casting\n            // https://github.com/AssemblyScript/assemblyscript/issues/26\n            var incrementer = 1;\n            checkAndSetEightBitHalfCarryFlag(valueAtHL4, incrementer);\n            valueAtHL4 = u8Portable(valueAtHL4 + incrementer);\n            setZeroFlag$$1((valueAtHL4 === 0));\n            setSubtractFlag(0);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL4, valueAtHL4);\n            return 4;\n        }\n        case 0x35: {\n            // DEC (HL)\n            // 1  12\n            // Z 1 H -\n            var registerHL5 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            var valueAtHL5 = eightBitLoadSyncCycles(registerHL5);\n            // NOTE: This opcode may not overflow correctly,\n            // Please see previous opcode\n            checkAndSetEightBitHalfCarryFlag(valueAtHL5, -1);\n            valueAtHL5 = u8Portable(valueAtHL5 - 1);\n            setZeroFlag$$1((valueAtHL5 === 0));\n            setSubtractFlag(1);\n            // 4 cycles\n            eightBitStoreSyncCycles(registerHL5, valueAtHL5);\n            return 4;\n        }\n        case 0x36: {\n            // LD (HL),d8\n            // 2  12\n            // 8 cycles, 4 from store, 4 from data byte\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x37: {\n            // SCF\n            // 1  4\n            // - 0 0 1\n            // Simply set the carry flag\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            setCarryFlag(1);\n            return 4;\n        }\n        case 0x38: {\n            // JR C,r8\n            // 2 12/8\n            if (getCarryFlag$$1() === 1) {\n                // 4 cycles\n                relativeJump(getDataByteOne());\n                // Relative Jump Funciton handles program counter\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            }\n            return 8;\n        }\n        case 0x39: {\n            // ADD HL,SP\n            // 1 8\n            // - 0 H C\n            var registerHL9 = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            checkAndSetSixteenBitFlagsAddOverflow(registerHL9, Cpu.stackPointer, false);\n            var result = u16Portable((registerHL9 + Cpu.stackPointer));\n            Cpu.registerH = splitHighByte(result);\n            Cpu.registerL = splitLowByte(result);\n            setSubtractFlag(0);\n            return 8;\n        }\n        case 0x3a: {\n            // LD A,(HL-)\n            // 1 8\n            var registerHLA = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(registerHLA);\n            registerHLA = u16Portable(registerHLA - 1);\n            Cpu.registerH = splitHighByte(registerHLA);\n            Cpu.registerL = splitLowByte(registerHLA);\n            return 4;\n        }\n        case 0x3b: {\n            // DEC SP\n            // 1 8\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer - 1);\n            return 8;\n        }\n        case 0x3c: {\n            // INC A\n            // 1  4\n            // Z 0 H -\n            var registerA = Cpu.registerA;\n            checkAndSetEightBitHalfCarryFlag(registerA, 1);\n            registerA = u8Portable(registerA + 1);\n            Cpu.registerA = registerA;\n            setZeroFlag$$1((registerA === 0));\n            setSubtractFlag(0);\n            return 4;\n        }\n        case 0x3d: {\n            // DEC A\n            // 1  4\n            // Z 1 H -\n            var registerA = Cpu.registerA;\n            checkAndSetEightBitHalfCarryFlag(registerA, -1);\n            registerA = u8Portable(registerA - 1);\n            Cpu.registerA = registerA;\n            setZeroFlag$$1((registerA === 0));\n            setSubtractFlag(1);\n            return 4;\n        }\n        case 0x3e: {\n            // LD A,d8\n            // 2 8\n            // 4 cycles\n            Cpu.registerA = getDataByteOne();\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0x3f: {\n            // CCF\n            // 1 4\n            // - 0 0 C\n            setSubtractFlag(0);\n            setHalfCarryFlag(0);\n            setCarryFlag((getCarryFlag$$1() <= 0));\n            return 4;\n        }\n    }\n    return -1;\n}\nfunction handleOpcode4x(opcode) {\n    switch (opcode) {\n        case 0x40:\n            // LD B,B\n            // 1 4\n            // Load B into B, Do nothing\n            return 4;\n        case 0x41:\n            // LD B,C\n            // 1 4\n            Cpu.registerB = Cpu.registerC;\n            return 4;\n        case 0x42:\n            // LD B,D\n            // 1 4\n            Cpu.registerB = Cpu.registerD;\n            return 4;\n        case 0x43:\n            // LD B,E\n            // 1 4\n            Cpu.registerB = Cpu.registerE;\n            return 4;\n        case 0x44:\n            // LD B,H\n            // 1 4\n            Cpu.registerB = Cpu.registerH;\n            return 4;\n        case 0x45:\n            // LD B,L\n            // 1 4\n            Cpu.registerB = Cpu.registerL;\n            return 4;\n        case 0x46:\n            // LD B,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerB = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x47:\n            // LD B,A\n            // 1 4\n            Cpu.registerB = Cpu.registerA;\n            return 4;\n        case 0x48:\n            // LD C,B\n            // 1 4\n            Cpu.registerC = Cpu.registerB;\n            return 4;\n        case 0x49:\n            // LD C,C\n            // 1 4\n            // Do nothing\n            return 4;\n        case 0x4a:\n            // LD C,D\n            // 1 4\n            Cpu.registerC = Cpu.registerD;\n            return 4;\n        case 0x4b:\n            // LD C,E\n            // 1 4\n            Cpu.registerC = Cpu.registerE;\n            return 4;\n        case 0x4c:\n            // LD C,H\n            // 1 4\n            Cpu.registerC = Cpu.registerH;\n            return 4;\n        case 0x4d:\n            // LD C,L\n            // 1 4\n            Cpu.registerC = Cpu.registerL;\n            return 4;\n        case 0x4e:\n            // LD C,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerC = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x4f:\n            // LD C,A\n            // 1 4\n            Cpu.registerC = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode5x(opcode) {\n    switch (opcode) {\n        case 0x50:\n            // LD D,B\n            // 1 4\n            Cpu.registerD = Cpu.registerB;\n            return 4;\n        case 0x51:\n            // LD D,C\n            // 1 4\n            Cpu.registerD = Cpu.registerC;\n            return 4;\n        case 0x52:\n            // LD D,D\n            // 1 4\n            // Do Nothing\n            return 4;\n        case 0x53:\n            // LD D,E\n            // 1 4\n            Cpu.registerD = Cpu.registerE;\n            return 4;\n        case 0x54:\n            // LD D,H\n            // 1 4\n            Cpu.registerD = Cpu.registerH;\n            return 4;\n        case 0x55:\n            // LD D,L\n            // 1 4\n            Cpu.registerD = Cpu.registerL;\n            return 4;\n        case 0x56:\n            // LD D,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerD = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x57:\n            // LD D,A\n            // 1 4\n            Cpu.registerD = Cpu.registerA;\n            return 4;\n        case 0x58:\n            // LD E,B\n            // 1 4\n            Cpu.registerE = Cpu.registerB;\n            return 4;\n        case 0x59:\n            // LD E,C\n            // 1 4\n            Cpu.registerE = Cpu.registerC;\n            return 4;\n        case 0x5a:\n            // LD E,D\n            // 1 4\n            Cpu.registerE = Cpu.registerD;\n            return 4;\n        case 0x5b:\n            // LD E,E\n            // 1 4\n            // Do Nothing\n            return 4;\n        case 0x5c:\n            // LD E,H\n            // 1 4\n            Cpu.registerE = Cpu.registerH;\n            return 4;\n        case 0x5d:\n            // LD E,L\n            // 1 4\n            Cpu.registerE = Cpu.registerL;\n            return 4;\n        case 0x5e:\n            // LD E,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x5f:\n            // LD E,A\n            // 1 4\n            Cpu.registerE = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode6x(opcode) {\n    switch (opcode) {\n        case 0x60:\n            // LD H,B\n            // 1 4\n            Cpu.registerH = Cpu.registerB;\n            return 4;\n        case 0x61:\n            // LD H,C\n            // 1 4\n            Cpu.registerH = Cpu.registerC;\n            return 4;\n        case 0x62:\n            // LD H,D\n            // 1 4\n            Cpu.registerH = Cpu.registerD;\n            return 4;\n        case 0x63:\n            // LD H,E\n            // 1 4\n            Cpu.registerH = Cpu.registerE;\n            return 4;\n        case 0x64:\n            // LD H,H\n            // 1 4\n            Cpu.registerH = Cpu.registerH;\n            return 4;\n        case 0x65:\n            // LD H,L\n            // 1 4\n            Cpu.registerH = Cpu.registerL;\n            return 4;\n        case 0x66:\n            // LD H,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerH = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x67:\n            // LD H,A\n            // 1 4\n            Cpu.registerH = Cpu.registerA;\n            return 4;\n        case 0x68:\n            // LD L,B\n            // 1 4\n            Cpu.registerL = Cpu.registerB;\n            return 4;\n        case 0x69:\n            // LD L,C\n            // 1 4\n            Cpu.registerL = Cpu.registerC;\n            return 4;\n        case 0x6a:\n            // LD L,D\n            // 1 4\n            Cpu.registerL = Cpu.registerD;\n            return 4;\n        case 0x6b:\n            // LD L,E\n            // 1 4\n            Cpu.registerL = Cpu.registerE;\n            return 4;\n        case 0x6c:\n            // LD L,H\n            // 1 4\n            Cpu.registerL = Cpu.registerH;\n            return 4;\n        case 0x6d:\n            // LD L,L\n            // 1 4\n            Cpu.registerL = Cpu.registerL;\n            return 4;\n        case 0x6e:\n            // LD L,(HL)\n            // 1 8\n            // 4 cycles\n            Cpu.registerL = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x6f:\n            // LD L,A\n            // 1 4\n            Cpu.registerL = Cpu.registerA;\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode7x(opcode) {\n    switch (opcode) {\n        case 0x70:\n            // LD (HL),B\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerB);\n            return 4;\n        case 0x71:\n            // LD (HL),C\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerC);\n            return 4;\n        case 0x72:\n            // LD (HL),D\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerD);\n            return 4;\n        case 0x73:\n            // LD (HL),E\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerE);\n            return 4;\n        case 0x74:\n            // LD (HL),H\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerH);\n            return 4;\n        case 0x75:\n            // LD (HL),L\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerL);\n            return 4;\n        case 0x76:\n            // HALT\n            // 1 4\n            // Enter CPU very low power mode\n            // Meaning Don't Decode anymore opcodes until an interrupt occurs\n            // Still need to do timers and things\n            // Can't Halt during an HDMA\n            // https://gist.github.com/drhelius/3394856\n            if (!Memory.isHblankHdmaActive) {\n                Cpu.enableHalt();\n            }\n            return 4;\n        case 0x77:\n            // LD (HL),A\n            // 1 8\n            // 4 cycles\n            eightBitStoreSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL), Cpu.registerA);\n            return 4;\n        case 0x78:\n            // LD A,B\n            // 1 4\n            Cpu.registerA = Cpu.registerB;\n            return 4;\n        case 0x79:\n            // LD A,C\n            // 1 4\n            Cpu.registerA = Cpu.registerC;\n            return 4;\n        case 0x7a:\n            // LD A,D\n            // 1 4\n            Cpu.registerA = Cpu.registerD;\n            return 4;\n        case 0x7b:\n            // LD A,E\n            // 1 4\n            Cpu.registerA = Cpu.registerE;\n            return 4;\n        case 0x7c:\n            // LD A,H\n            // 1 4\n            Cpu.registerA = Cpu.registerH;\n            return 4;\n        case 0x7d:\n            // LD A,L\n            // 1 4\n            Cpu.registerA = Cpu.registerL;\n            return 4;\n        case 0x7e:\n            // LD A,(HL)\n            // 1 8\n            // NOTE: Thanks to @binji for catching that this should be 8 cycles, not 4\n            // 4 cycles\n            Cpu.registerA = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 4;\n        case 0x7f:\n            // LD A,A\n            // 1 4\n            // Do Nothing\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode8x(opcode) {\n    switch (opcode) {\n        case 0x80:\n            // ADD A,B\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerB);\n            return 4;\n        case 0x81:\n            // ADD A,C\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerC);\n            return 4;\n        case 0x82:\n            // ADD A,D\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerD);\n            return 4;\n        case 0x83:\n            // ADD A,E\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerE);\n            return 4;\n        case 0x84:\n            // ADD A,H\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerH);\n            return 4;\n        case 0x85:\n            // ADD A,L\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerL);\n            return 4;\n        case 0x86:\n            // ADD A,(HL)\n            // 1 8\n            // Z 0 H C\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            addARegister(valueAtHL6);\n            return 4;\n        case 0x87:\n            // ADD A,A\n            // 1 4\n            // Z 0 H C\n            addARegister(Cpu.registerA);\n            return 4;\n        case 0x88:\n            // ADC A,B\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerB);\n            return 4;\n        case 0x89:\n            // ADC A,C\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerC);\n            return 4;\n        case 0x8a:\n            // ADC A,D\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerD);\n            return 4;\n        case 0x8b:\n            // ADC A,E\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerE);\n            return 4;\n        case 0x8c:\n            // ADC A,H\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerH);\n            return 4;\n        case 0x8d:\n            // ADC A,L\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerL);\n            return 4;\n        case 0x8e:\n            // ADC A,(HL)\n            // 1 8\n            // Z 0 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            addAThroughCarryRegister(valueAtHLE);\n            return 4;\n        case 0x8f:\n            // ADC A,A\n            // 1 4\n            // Z 0 H C\n            addAThroughCarryRegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcode9x(opcode) {\n    switch (opcode) {\n        case 0x90:\n            // SUB B\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerB);\n            return 4;\n        case 0x91:\n            // SUB C\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerC);\n            return 4;\n        case 0x92:\n            // SUB D\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerD);\n            return 4;\n        case 0x93:\n            // SUB E\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerE);\n            return 4;\n        case 0x94:\n            // SUB H\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerH);\n            return 4;\n        case 0x95:\n            // SUB L\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerL);\n            return 4;\n        case 0x96:\n            // SUB (HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            subARegister(valueAtHL6);\n            return 4;\n        case 0x97:\n            // SUB A\n            // 1  4\n            // Z 1 H C\n            subARegister(Cpu.registerA);\n            return 4;\n        case 0x98:\n            // SBC A,B\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerB);\n            return 4;\n        case 0x99:\n            // SBC A,C\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerC);\n            return 4;\n        case 0x9a:\n            // SBC A,D\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerD);\n            return 4;\n        case 0x9b:\n            // SBC A,E\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerE);\n            return 4;\n        case 0x9c:\n            // SBC A,H\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerH);\n            return 4;\n        case 0x9d:\n            // SBC A,L\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerL);\n            return 4;\n        case 0x9e:\n            // SBC A,(HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            subAThroughCarryRegister(valueAtHLE);\n            return 4;\n        case 0x9f:\n            // SBC A,A\n            // 1  4\n            // Z 1 H C\n            subAThroughCarryRegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeAx(opcode) {\n    switch (opcode) {\n        case 0xa0:\n            // AND B\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerB);\n            return 4;\n        case 0xa1:\n            // AND C\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerC);\n            return 4;\n        case 0xa2:\n            // AND D\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerD);\n            return 4;\n        case 0xa3:\n            // AND E\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerE);\n            return 4;\n        case 0xa4:\n            // AND H\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerH);\n            return 4;\n        case 0xa5:\n            // AND L\n            // 1  4\n            // Z 0 1 0\n            andARegister(Cpu.registerL);\n            return 4;\n        case 0xa6:\n            // AND (HL)\n            // 1  8\n            // Z 0 1 0\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            andARegister(valueAtHL6);\n            return 4;\n        case 0xa7:\n            // AND A\n            // 1  4\n            // Z 0 1 0\n            // NOTE: & Yourself, does nothing\n            andARegister(Cpu.registerA);\n            return 4;\n        case 0xa8:\n            // XOR B\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerB);\n            return 4;\n        case 0xa9:\n            // XOR C\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerC);\n            return 4;\n        case 0xaa:\n            // XOR D\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerD);\n            return 4;\n        case 0xab:\n            // XOR E\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerE);\n            return 4;\n        case 0xac:\n            // XOR H\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerH);\n            return 4;\n        case 0xad:\n            // XOR L\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerL);\n            return 4;\n        case 0xae:\n            // XOR (HL)\n            // 1  8\n            // Z 0 0 0\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            xorARegister(valueAtHLE);\n            return 4;\n        case 0xaf:\n            // XOR A\n            // 1  4\n            // Z 0 0 0\n            xorARegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeBx(opcode) {\n    switch (opcode) {\n        case 0xb0:\n            // OR B\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerB);\n            return 4;\n        case 0xb1:\n            // OR C\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerC);\n            return 4;\n        case 0xb2:\n            // OR D\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerD);\n            return 4;\n        case 0xb3:\n            // OR E\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerE);\n            return 4;\n        case 0xb4:\n            // OR H\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerH);\n            return 4;\n        case 0xb5:\n            // OR L\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerL);\n            return 4;\n        case 0xb6:\n            // OR (HL)\n            // 1  8\n            // Z 0 0 0\n            // 4 cycles\n            var valueAtHL6 = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            orARegister(valueAtHL6);\n            return 4;\n        case 0xb7:\n            // OR A\n            // 1  4\n            // Z 0 0 0\n            orARegister(Cpu.registerA);\n            return 4;\n        case 0xb8:\n            // CP B\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerB);\n            return 4;\n        case 0xb9:\n            // CP C\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerC);\n            return 4;\n        case 0xba:\n            // CP D\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerD);\n            return 4;\n        case 0xbb:\n            // CP E\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerE);\n            return 4;\n        case 0xbc:\n            // CP H\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerH);\n            return 4;\n        case 0xbd:\n            // CP L\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerL);\n            return 4;\n        case 0xbe:\n            // CP (HL)\n            // 1  8\n            // Z 1 H C\n            // 4 cycles\n            var valueAtHLE = eightBitLoadSyncCycles(concatenateBytes(Cpu.registerH, Cpu.registerL));\n            cpARegister(valueAtHLE);\n            return 4;\n        case 0xbf:\n            // CP A\n            // 1  4\n            // Z 1 H C\n            cpARegister(Cpu.registerA);\n            return 4;\n    }\n    return -1;\n}\nfunction handleOpcodeCx(opcode) {\n    switch (opcode) {\n        case 0xc0: {\n            // RET NZ\n            // 1  20/8\n            if (getZeroFlag$$1() === 0) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xc1: {\n            // POP BC\n            // 1  12\n            // 8 cycles\n            var registerBC1 = sixteenBitLoadSyncCycles(Cpu.stackPointer);\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + 2);\n            Cpu.registerB = splitHighByte(registerBC1);\n            Cpu.registerC = splitLowByte(registerBC1);\n            return 4;\n        }\n        case 0xc2: {\n            // JP NZ,a16\n            // 3  16/12\n            if (getZeroFlag$$1() === 0) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xc3: {\n            // JP a16\n            // 3  16\n            // 8 cycles\n            Cpu.programCounter = getConcatenatedDataByte();\n            return 8;\n        }\n        case 0xc4: {\n            // CALL NZ,a16\n            // 3  24/12\n            if (getZeroFlag$$1() === 0) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xc5: {\n            // PUSH BC\n            // 1  16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerB, Cpu.registerC));\n            return 8;\n        }\n        case 0xc6: {\n            // ADD A,d8\n            // 2 8\n            // Z 0 H C\n            // 4 cycles\n            addARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xc7: {\n            // RST 00H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x00;\n            return 8;\n        }\n        case 0xc8: {\n            // RET Z\n            // 1  20/8\n            if (getZeroFlag$$1() === 1) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xc9: {\n            // RET\n            // 1 16\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            return 8;\n        }\n        case 0xca: {\n            // JP Z,a16\n            // 3 16/12\n            if (getZeroFlag$$1() === 1) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xcb: {\n            // PREFIX CB\n            // 1  4\n            // 4 cycles\n            var cbCycles = handleCbOpcode(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return cbCycles;\n        }\n        case 0xcc: {\n            // CALL Z,a16\n            // 3  24/12\n            if (getZeroFlag$$1() === 1) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter + 2);\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xcd: {\n            // CALL a16\n            // 3  24\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n            // 8 cycles\n            Cpu.programCounter = getConcatenatedDataByte();\n            return 8;\n        }\n        case 0xce: {\n            // ADC A,d8\n            // 2  8\n            // Z 0 H C\n            // 4 cycles\n            addAThroughCarryRegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xcf: {\n            // RST 08H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x08;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeDx(opcode) {\n    switch (opcode) {\n        case 0xd0: {\n            // RET NC\n            // 1  20/8\n            if (getCarryFlag$$1() === 0) {\n                // 8 cycles\n                var stackPointer = Cpu.stackPointer;\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xd1: {\n            // POP DE\n            // 1  12\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerDE1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerD = splitHighByte(registerDE1);\n            Cpu.registerE = splitLowByte(registerDE1);\n            return 4;\n        }\n        case 0xd2: {\n            // JP NC,a16\n            // 3  16/12\n            if (getCarryFlag$$1() === 0) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xD3 */\n        case 0xd4: {\n            // CALL NC,a16\n            // 3  24/12\n            if (getCarryFlag$$1() === 0) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter + 2);\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        case 0xd5: {\n            // PUSH DE\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerD, Cpu.registerE));\n            return 8;\n        }\n        case 0xd6: {\n            // SUB d8\n            // 2  8\n            // Z 1 H C\n            // 4 cycles\n            subARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xd7: {\n            // RST 10H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x10;\n            return 8;\n        }\n        case 0xd8: {\n            // RET C\n            // 1  20/8\n            if (getCarryFlag$$1() === 1) {\n                var stackPointer = Cpu.stackPointer;\n                // 8 cycles\n                Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n                Cpu.stackPointer = u16Portable(stackPointer + 2);\n                return 12;\n            }\n            else {\n                return 8;\n            }\n        }\n        case 0xd9: {\n            // RETI\n            // 1  16\n            var stackPointer = Cpu.stackPointer;\n            // 8 cycles\n            Cpu.programCounter = sixteenBitLoadSyncCycles(stackPointer);\n            // Enable interrupts\n            setInterrupts(true);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            return 8;\n        }\n        case 0xda: {\n            // JP C,a16\n            // 3 16/12\n            if (getCarryFlag$$1() === 1) {\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xDB */\n        case 0xdc: {\n            // CALL C,a16\n            // 3  24/12\n            if (getCarryFlag$$1() === 1) {\n                var stackPointer = u16Portable(Cpu.stackPointer - 2);\n                Cpu.stackPointer = stackPointer;\n                // 8 cycles\n                sixteenBitStoreSyncCycles(stackPointer, u16Portable(Cpu.programCounter + 2));\n                // 8 cycles\n                Cpu.programCounter = getConcatenatedDataByte();\n                return 8;\n            }\n            else {\n                Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n                return 12;\n            }\n        }\n        /* No Opcode for: 0xDD */\n        case 0xde: {\n            // SBC A,d8\n            // 2 8\n            // Z 1 H C\n            // 4 cycles\n            subAThroughCarryRegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xdf: {\n            // RST 18H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x18;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeEx(opcode) {\n    switch (opcode) {\n        case 0xe0: {\n            // LDH (a8),A\n            // 2  12\n            // Store value in high RAM ($FF00 + a8)\n            // 4 cycles\n            var largeDataByteOne = getDataByteOne();\n            // 4 cycles\n            eightBitStoreSyncCycles(0xff00 + largeDataByteOne, Cpu.registerA);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xe1: {\n            // POP HL\n            // 1  12\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerHL1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerH = splitHighByte(registerHL1);\n            Cpu.registerL = splitLowByte(registerHL1);\n            return 4;\n        }\n        case 0xe2: {\n            // LD (C),A\n            // 1  8\n            // NOTE: Table says 2 Program counter,\n            // But stepping through the boot rom, should be one\n            // Also should change 0xF2\n            // Store value in high RAM ($FF00 + register c)\n            // 4 cycles\n            eightBitStoreSyncCycles(0xff00 + Cpu.registerC, Cpu.registerA);\n            return 4;\n        }\n        /* No Opcode for: 0xE3, 0xE4 */\n        case 0xe5: {\n            // PUSH HL\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerH, Cpu.registerL));\n            return 8;\n        }\n        case 0xe6: {\n            // AND d8\n            // 2  8\n            // Z 0 1 0\n            // 4 cycles\n            andARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xe7: {\n            // RST 20H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x20;\n            return 8;\n        }\n        case 0xe8: {\n            // ADD SP, r8\n            // 2 16\n            // 0 0 H C\n            // NOTE: Discoved dataByte is signed\n            // 4 cycles\n            var signedDataByteOne = i8Portable(getDataByteOne());\n            checkAndSetSixteenBitFlagsAddOverflow(Cpu.stackPointer, signedDataByteOne, true);\n            Cpu.stackPointer = u16Portable(Cpu.stackPointer + signedDataByteOne);\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 12;\n        }\n        case 0xe9: {\n            // JP HL\n            // 1 4\n            Cpu.programCounter = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            return 4;\n        }\n        case 0xea: {\n            // LD (a16),A\n            // 3 16\n            // 12 cycles, 4 from store, 8 from concatenated data byte\n            eightBitStoreSyncCycles(getConcatenatedDataByte(), Cpu.registerA);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        /* No Opcode for: 0xEB, 0xEC, 0xED */\n        case 0xee: {\n            // XOR d8\n            // 2 8\n            // Z 0 0 0\n            // 4 cycles\n            xorARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xef: {\n            // RST 28H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x28;\n            return 8;\n        }\n    }\n    return -1;\n}\nfunction handleOpcodeFx(opcode) {\n    switch (opcode) {\n        case 0xf0: {\n            // LDH A,(a8)\n            // 2 12\n            // 4 cycles\n            var largeDataByteOne = getDataByteOne();\n            // 4 cycles\n            Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + largeDataByteOne));\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xf1: {\n            // POP AF\n            // 1 12\n            // Z N H C (But No work require, flags are already set)\n            // 8 cycles\n            var stackPointer = Cpu.stackPointer;\n            var registerAF1 = sixteenBitLoadSyncCycles(stackPointer);\n            Cpu.stackPointer = u16Portable(stackPointer + 2);\n            Cpu.registerA = splitHighByte(registerAF1);\n            Cpu.registerF = splitLowByte(registerAF1);\n            return 4;\n        }\n        case 0xf2: {\n            // LD A,(C)\n            // 1 8\n            // 4 cycles\n            Cpu.registerA = u8Portable(eightBitLoadSyncCycles(0xff00 + Cpu.registerC));\n            return 4;\n        }\n        case 0xf3: {\n            // DI\n            // 1 4\n            setInterrupts(false);\n            return 4;\n        }\n        /* No Opcode for: 0xF4 */\n        case 0xf5: {\n            // PUSH AF\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, concatenateBytes(Cpu.registerA, Cpu.registerF));\n            return 8;\n        }\n        case 0xf6: {\n            // OR d8\n            // 2 8\n            // Z 0 0 0\n            // 4 cycles\n            orARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xf7: {\n            // RST 30H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x30;\n            return 8;\n        }\n        case 0xf8: {\n            // LD HL,SP+r8\n            // 2 12\n            // 0 0 H C\n            // NOTE: Discoved dataByte is signed\n            // 4 cycles\n            var signedDataByteOne = i8Portable(getDataByteOne());\n            var stackPointer = Cpu.stackPointer;\n            // First, let's handle flags\n            setZeroFlag$$1(0);\n            setSubtractFlag(0);\n            checkAndSetSixteenBitFlagsAddOverflow(stackPointer, signedDataByteOne, true);\n            var registerHL = u16Portable(stackPointer + signedDataByteOne);\n            Cpu.registerH = splitHighByte(registerHL);\n            Cpu.registerL = splitLowByte(registerHL);\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 8;\n        }\n        case 0xf9: {\n            // LD SP,HL\n            // 1 8\n            Cpu.stackPointer = concatenateBytes(Cpu.registerH, Cpu.registerL);\n            return 8;\n        }\n        case 0xfa: {\n            // LD A,(a16)\n            // 3 16\n            // 12 cycles, 4 from load, 8 from concatenated data byte\n            Cpu.registerA = eightBitLoadSyncCycles(getConcatenatedDataByte());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 2);\n            return 4;\n        }\n        case 0xfb: {\n            // EI\n            // 1 4\n            setInterrupts(true);\n            return 4;\n        }\n        /* No Opcode for: 0xFC, 0xFD */\n        case 0xfe: {\n            // CP d8\n            // 2 8\n            // Z 1 H C\n            // 4 cycles\n            cpARegister(getDataByteOne());\n            Cpu.programCounter = u16Portable(Cpu.programCounter + 1);\n            return 4;\n        }\n        case 0xff: {\n            // RST 38H\n            // 1 16\n            var stackPointer = u16Portable(Cpu.stackPointer - 2);\n            Cpu.stackPointer = stackPointer;\n            // 8 cycles\n            sixteenBitStoreSyncCycles(stackPointer, Cpu.programCounter);\n            Cpu.programCounter = 0x38;\n            return 8;\n        }\n    }\n    return -1;\n}\n\n// NOTE: Code is very verbose, and will have some copy pasta'd lines.\n\n// Syncing and Tracking executed cycles\nvar Cycles = /** @class */ (function () {\n    function Cycles() {\n    }\n    // An even number below the max 32 bit integer\n    Cycles.cyclesPerCycleSet = 2000000000;\n    Cycles.cycleSets = 0;\n    Cycles.cycles = 0;\n    return Cycles;\n}());\nfunction getCyclesPerCycleSet() {\n    return Cycles.cyclesPerCycleSet;\n}\nfunction getCycleSets() {\n    return Cycles.cycleSets;\n}\nfunction getCycles() {\n    return Cycles.cycles;\n}\n// Inlined because closure compiler inlines\nfunction trackCyclesRan(numberOfCycles) {\n    var cycles = Cycles.cycles;\n    cycles += numberOfCycles;\n    if (cycles >= Cycles.cyclesPerCycleSet) {\n        Cycles.cycleSets += 1;\n        cycles -= Cycles.cyclesPerCycleSet;\n    }\n    Cycles.cycles = cycles;\n}\n// Inlined because closure compiler inlines\nfunction resetCycles() {\n    Cycles.cyclesPerCycleSet = 2000000000;\n    Cycles.cycleSets = 0;\n    Cycles.cycles = 0;\n}\n// Sync other GB Components with the number of cycles\nfunction syncCycles(numberOfCycles) {\n    // Check if we did a DMA TRansfer, if we did add the cycles\n    if (Memory.DMACycles > 0) {\n        numberOfCycles += Memory.DMACycles;\n        Memory.DMACycles = 0;\n    }\n    // Finally, Add our number of cycles to the CPU Cycles\n    Cpu.currentCycles += numberOfCycles;\n    // Check other Gameboy components\n    if (!Cpu.isStopped) {\n        if (Config.graphicsBatchProcessing) {\n            // Need to do this, since a lot of things depend on the scanline\n            // Batch processing will simply return if the number of cycles is too low\n            Graphics.currentCycles += numberOfCycles;\n            batchProcessGraphics();\n        }\n        else {\n            updateGraphics(numberOfCycles);\n        }\n        if (Config.audioBatchProcessing) {\n            Sound.currentCycles += numberOfCycles;\n            batchProcessAudio();\n        }\n        else {\n            updateSound(numberOfCycles);\n        }\n        updateSerial(numberOfCycles);\n    }\n    if (Config.timersBatchProcessing) {\n        // Batch processing will simply return if the number of cycles is too low\n        Timers.currentCycles += numberOfCycles;\n        batchProcessTimers();\n    }\n    else {\n        updateTimers(numberOfCycles);\n    }\n    trackCyclesRan(numberOfCycles);\n}\n\n// Functions involving executing/running the emulator after initializtion\nvar Execute = /** @class */ (function () {\n    function Execute() {\n    }\n    // An even number bewlow the max 32 bit integer\n    Execute.stepsPerStepSet = 2000000000;\n    Execute.stepSets = 0;\n    Execute.steps = 0;\n    // Response Codes from Execute Conditions\n    Execute.RESPONSE_CONDITION_ERROR = -1;\n    Execute.RESPONSE_CONDITION_FRAME = 0;\n    Execute.RESPONSE_CONDITION_AUDIO = 1;\n    Execute.RESPONSE_CONDITION_BREAKPOINT = 2;\n    return Execute;\n}());\nfunction getStepsPerStepSet() {\n    return Execute.stepsPerStepSet;\n}\nfunction getStepSets() {\n    return Execute.stepSets;\n}\nfunction getSteps() {\n    return Execute.steps;\n}\n// Inlined because closure compiler inlines\nfunction trackStepsRan(steps) {\n    var esteps = Execute.steps;\n    esteps += steps;\n    if (esteps >= Execute.stepsPerStepSet) {\n        Execute.stepSets += 1;\n        esteps -= Execute.stepsPerStepSet;\n    }\n    Execute.steps = esteps;\n}\n// Inlined because closure compiler inlines\nfunction resetSteps() {\n    Execute.stepsPerStepSet = 2000000000;\n    Execute.stepSets = 0;\n    Execute.steps = 0;\n}\n// // Public funciton to run frames until,\n// the specified number of frames have run or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\nfunction executeMultipleFrames(numberOfFrames) {\n    var frameResponse = 0;\n    var framesRun = 0;\n    while (framesRun < numberOfFrames && frameResponse >= 0) {\n        frameResponse = executeFrame();\n        framesRun += 1;\n    }\n    if (frameResponse < 0) {\n        return frameResponse;\n    }\n    return 0;\n}\n// Public funciton to run opcodes until,\n// a frame is ready, or error.\n// Return values:\n// -1 = error\n// 0 = render a frame\nfunction executeFrame() {\n    return executeUntilCondition(true, -1);\n}\n// Public Function to run opcodes until,\n// a frame is ready, audio bufer is filled, or error\nfunction executeFrameAndCheckAudio(maxAudioBuffer) {\n    if (maxAudioBuffer === void 0) { maxAudioBuffer = 0; }\n    return executeUntilCondition(true, maxAudioBuffer);\n}\n// Base function that executes steps, and checks conditions\n// Return values:\nfunction executeUntilCondition(checkMaxCyclesPerFrame, maxAudioBuffer) {\n    if (checkMaxCyclesPerFrame === void 0) { checkMaxCyclesPerFrame = true; }\n    if (maxAudioBuffer === void 0) { maxAudioBuffer = -1; }\n    // Common tracking variables\n    var numberOfCycles = -1;\n    var audioBufferSize = 1024;\n    if (maxAudioBuffer > 0) {\n        audioBufferSize = maxAudioBuffer;\n    }\n    else if (maxAudioBuffer < 0) {\n        audioBufferSize = -1;\n    }\n    var errorCondition = false;\n    var frameCondition = false;\n    var audioBufferCondition = false;\n    while (!errorCondition && !frameCondition && !audioBufferCondition && !Breakpoints.reachedBreakpoint) {\n        numberOfCycles = executeStep();\n        // Error Condition\n        if (numberOfCycles < 0) {\n            errorCondition = true;\n        }\n        else if (Cpu.currentCycles >= Cpu.MAX_CYCLES_PER_FRAME()) {\n            frameCondition = true;\n        }\n        else if (audioBufferSize > -1 && getNumberOfSamplesInAudioBuffer() >= audioBufferSize) {\n            audioBufferCondition = true;\n        }\n    }\n    // Find our exit reason\n    if (frameCondition) {\n        // Render a frame\n        // Reset our currentCycles\n        Cpu.currentCycles -= Cpu.MAX_CYCLES_PER_FRAME();\n        return Execute.RESPONSE_CONDITION_FRAME;\n    }\n    if (audioBufferCondition) {\n        return Execute.RESPONSE_CONDITION_AUDIO;\n    }\n    if (Breakpoints.reachedBreakpoint) {\n        Breakpoints.reachedBreakpoint = false;\n        return Execute.RESPONSE_CONDITION_BREAKPOINT;\n    }\n    // TODO: Boot ROM handling\n    // There was an error, return -1, and push the program counter back to grab the error opcode\n    Cpu.programCounter = u16Portable(Cpu.programCounter - 1);\n    return -1;\n}\n// Function to execute an opcode, and update other gameboy hardware.\n// http://www.codeslinger.co.uk/pages/projects/gameboy/beginning.html\nfunction executeStep() {\n    // Set has started to 1 since we ran a emulation step\n    setHasCoreStarted(true);\n    // Check if we are in the halt bug\n    if (Cpu.isHaltBug) {\n        // Need to not increment program counter,\n        // thus, running the next opcode twice\n        // E.g\n        // 0x76 - halt\n        // FA 34 12 - ld a,(1234)\n        // Becomes\n        // FA FA 34 ld a,(34FA)\n        // 12 ld (de),a\n        var haltBugOpcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n        // Execute opcode will handle the actual PC behavior\n        var haltBugCycles = executeOpcode$$1(haltBugOpcode);\n        syncCycles(haltBugCycles);\n        Cpu.exitHaltAndStop();\n    }\n    // Interrupts should be handled before reading an opcode\n    // https://github.com/Gekkio/mooneye-gb/blob/master/docs/accuracy.markdown#what-is-the-exact-timing-of-cpu-servicing-an-interrupt\n    var interruptCycles = checkInterrupts();\n    if (interruptCycles > 0) {\n        syncCycles(interruptCycles);\n    }\n    // Get the opcode, and additional bytes to be handled\n    // Number of cycles defaults to 4, because while we're halted, we run 4 cycles (according to matt :))\n    var numberOfCycles = 4;\n    var opcode = 0;\n    // If we are not halted or stopped, run instructions\n    // If we are halted, this will be skipped and just sync the 4 cycles\n    if (!Cpu.isHalted() && !Cpu.isStopped) {\n        opcode = eightBitLoadFromGBMemory(Cpu.programCounter);\n        numberOfCycles = executeOpcode$$1(opcode);\n    }\n    // blarggFixes, don't allow register F to have the bottom nibble\n    Cpu.registerF = Cpu.registerF & 0xf0;\n    // Check if there was an error decoding the opcode\n    if (numberOfCycles <= 0) {\n        return numberOfCycles;\n    }\n    // Sync other GB Components with the number of cycles\n    syncCycles(numberOfCycles);\n    // Update our steps\n    trackStepsRan(1);\n    // Check if we reached the CPU breakpoint\n    if (Cpu.programCounter === Breakpoints.programCounter) {\n        Breakpoints.reachedBreakpoint = true;\n    }\n    return numberOfCycles;\n}\n\n// Imports\n// Grow our memory to the specified size\nif (memory.size() < WASMBOY_WASM_PAGES) {\n    memory.grow(WASMBOY_WASM_PAGES - memory.size());\n}\n// Function to track if the core has started\nvar hasStarted = false;\nfunction setHasCoreStarted(value) {\n    hasStarted = value;\n}\nfunction hasCoreStarted() {\n    return hasStarted;\n}\n// Function to configure & initialize wasmboy\nfunction config(enableBootRom, useGbcWhenAvailable, audioBatchProcessing, graphicsBatchProcessing, timersBatchProcessing, graphicsDisableScanlineRendering, audioAccumulateSamples, tileRendering, tileCaching, enableAudioDebugging) {\n    // TODO: depending on the boot rom, initialization may be different\n    // From: http://www.codeslinger.co.uk/pages/projects/gameboy/hardware.html\n    // All values default to zero in memory, so not setting them yet\n    // log('initializing (includeBootRom=$0)', 1, enableBootRom);\n    Config.enableBootRom = enableBootRom > 0;\n    Config.useGbcWhenAvailable = useGbcWhenAvailable > 0;\n    Config.audioBatchProcessing = audioBatchProcessing > 0;\n    Config.graphicsBatchProcessing = graphicsBatchProcessing > 0;\n    Config.timersBatchProcessing = timersBatchProcessing > 0;\n    Config.graphicsDisableScanlineRendering = graphicsDisableScanlineRendering > 0;\n    Config.audioAccumulateSamples = audioAccumulateSamples > 0;\n    Config.tileRendering = tileRendering > 0;\n    Config.tileCaching = tileCaching > 0;\n    Config.enableAudioDebugging = enableAudioDebugging > 0;\n    initialize();\n}\n// Function to initiialize the core\nfunction initialize() {\n    // Initialization variables from BGB\n    // First, try to switch to Gameboy Color Mode\n    // Get our GBC support from the cartridge header\n    // http://gbdev.gg8.se/wiki/articles/The_Cartridge_Header\n    var gbcType = eightBitLoadFromGBMemory(0x0143);\n    // Detecting GBC http://bgb.bircd.org/pandocs.htm#cgbregisters\n    if (gbcType === 0xc0 || (Config.useGbcWhenAvailable && gbcType === 0x80)) {\n        Cpu.GBCEnabled = true;\n    }\n    else {\n        Cpu.GBCEnabled = false;\n    }\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Reset our cycles ran\n    resetCycles();\n    resetSteps();\n    if (Config.enableBootRom) {\n        Cpu.BootROMEnabled = true;\n    }\n    else {\n        Cpu.BootROMEnabled = false;\n    }\n    // Call our respective classes intialization\n    // NOTE: Boot ROM Only handles some initialization, thus we need to check in each one\n    // respecitvely :p\n    initializeCpu();\n    initializeCartridge();\n    initializeDma();\n    initializeGraphics();\n    initializePalette();\n    initializeSound();\n    initializeInterrupts();\n    initializeTimers();\n    initializeSerial();\n    initializeVarious();\n}\nfunction initializeVarious() {\n    // Various Other Registers\n    if (Cpu.GBCEnabled) {\n        // Various other registers\n        eightBitStoreIntoGBMemory(0xff70, 0xf8);\n        eightBitStoreIntoGBMemory(0xff4f, 0xfe);\n        eightBitStoreIntoGBMemory(0xff4d, 0x7e);\n        eightBitStoreIntoGBMemory(0xff00, 0xcf);\n        eightBitStoreIntoGBMemory(0xff0f, 0xe1);\n        // 0xFFFF = 0x00\n        // Undocumented from Pandocs\n        eightBitStoreIntoGBMemory(0xff6c, 0xfe);\n        eightBitStoreIntoGBMemory(0xff75, 0x8f);\n    }\n    else {\n        eightBitStoreIntoGBMemory(0xff70, 0xff);\n        eightBitStoreIntoGBMemory(0xff4f, 0xff);\n        eightBitStoreIntoGBMemory(0xff4d, 0xff);\n        eightBitStoreIntoGBMemory(0xff00, 0xcf);\n        eightBitStoreIntoGBMemory(0xff0f, 0xe1);\n        // 0xFFFF = 0x00\n    }\n}\n// Function to return if we are currently playing a GBC ROM\nfunction isGBC() {\n    return Cpu.GBCEnabled;\n}\n// Function to return an address to store into save state memory\n// this is to regulate our 20 slots\n// https://docs.google.com/spreadsheets/d/17xrEzJk5-sCB9J2mMJcVnzhbE-XH_NvczVSQH9OHvRk/edit?usp=sharing\n// Inlined because closure compiler inlines\nfunction getSaveStateMemoryOffset(offset, saveStateSlot) {\n    // 50 bytes per save state memory partiton sli32\n    return WASMBOY_STATE_LOCATION + offset + 50 * saveStateSlot;\n}\n// Function to save state to memory for all of our classes\nfunction saveState() {\n    Cpu.saveState();\n    Graphics.saveState();\n    Interrupts.saveState();\n    Joypad.saveState();\n    Memory.saveState();\n    Timers.saveState();\n    Sound.saveState();\n    Channel1.saveState();\n    Channel2.saveState();\n    Channel3.saveState();\n    Channel4.saveState();\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Don't want to reset cycles here, as this does not reset the emulator\n}\n// Function to load state from memory for all of our classes\nfunction loadState() {\n    Cpu.loadState();\n    Graphics.loadState();\n    Interrupts.loadState();\n    Joypad.loadState();\n    Memory.loadState();\n    Timers.loadState();\n    Sound.loadState();\n    Channel1.loadState();\n    Channel2.loadState();\n    Channel3.loadState();\n    Channel4.loadState();\n    // Reset hasStarted, since we are now reset\n    setHasCoreStarted(false);\n    // Reset our cycles ran\n    resetCycles();\n    resetSteps();\n}\n\n// Functions to get information about the emulator for debugging purposes\nfunction getRegisterA() {\n    return Cpu.registerA;\n}\nfunction getRegisterB() {\n    return Cpu.registerB;\n}\nfunction getRegisterC() {\n    return Cpu.registerC;\n}\nfunction getRegisterD() {\n    return Cpu.registerD;\n}\nfunction getRegisterE() {\n    return Cpu.registerE;\n}\nfunction getRegisterH() {\n    return Cpu.registerH;\n}\nfunction getRegisterL() {\n    return Cpu.registerL;\n}\nfunction getRegisterF() {\n    return Cpu.registerF;\n}\nfunction getProgramCounter() {\n    return Cpu.programCounter;\n}\nfunction getStackPointer() {\n    return Cpu.stackPointer;\n}\nfunction getOpcodeAtProgramCounter() {\n    return eightBitLoadFromGBMemory(Cpu.programCounter);\n}\n\n// Functions to debug graphical output\n// Some Simple internal getters\nfunction getLY() {\n    return Graphics.scanlineRegister;\n}\n// TODO: Render by tile, rather than by pixel\nfunction drawBackgroundMapToWasmMemory(showColor) {\n    // http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n    // Bit 7 - LCD Display Enable (0=Off, 1=On)\n    // Bit 6 - Window Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 5 - Window Display Enable (0=Off, 1=On)\n    // Bit 4 - BG & Window Tile Data Select (0=8800-97FF, 1=8000-8FFF)\n    // Bit 3 - BG Tile Map Display Select (0=9800-9BFF, 1=9C00-9FFF)\n    // Bit 2 - OBJ (Sprite) Size (0=8x8, 1=8x16)\n    // Bit 1 - OBJ (Sprite) Display Enable (0=Off, 1=On)\n    // Bit 0 - BG Display (for CGB see below) (0=Off, 1=On)\n    // Get our seleted tile data memory location\n    var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n    if (Lcd.bgWindowTileDataSelect) {\n        tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n    }\n    var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n    if (Lcd.bgTileMapDisplaySelect) {\n        tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n    }\n    for (var y = 0; y < 256; y++) {\n        for (var x = 0; x < 256; x++) {\n            // Get our current Y\n            var pixelYPositionInMap = y;\n            // Get our Current X position of our pixel on the on the 160x144 camera\n            // this is done by getting the current scroll X position,\n            // and adding it do what X Value the scanline is drawing on the camera.\n            var pixelXPositionInMap = x;\n            // Divide our pixel position by 8 to get our tile.\n            // Since, there are 256x256 pixels, and 32x32 tiles.\n            // 256 / 8 = 32.\n            // Also, bitshifting by 3, do do a division by 8\n            // Need to use u16s, as they will be used to compute an address, which will cause weird errors and overflows\n            var tileXPositionInMap = pixelXPositionInMap >> 3;\n            var tileYPositionInMap = pixelYPositionInMap >> 3;\n            // Get our tile address on the tileMap\n            // NOTE: (tileMap represents where each tile is displayed on the screen)\n            // NOTE: (tile map represents the entire map, now just what is within the \"camera\")\n            // For instance, if we have y pixel 144. 144 / 8 = 18. 18 * 32 = line address in map memory.\n            // And we have x pixel 160. 160 / 8 = 20.\n            // * 32, because remember, this is NOT only for the camera, the actual map is 32x32. Therefore, the next tile line of the map, is 32 byte offset.\n            // Think like indexing a 2d array, as a 1d array and it make sense :)\n            var tileMapAddress = tileMapMemoryLocation + tileYPositionInMap * 32 + tileXPositionInMap;\n            // Get the tile Id on the Tile Map\n            var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n            // Now get our tileDataAddress for the corresponding tileID we found in the map\n            // Read the comments in _getTileDataAddress() to see what's going on.\n            // tl;dr if we had the tile map of \"a b c d\", and wanted tileId 2.\n            // This funcitons returns the start of memory locaiton for the tile 'c'.\n            var tileDataAddress = getTileDataAddress(tileDataMemoryLocation, tileIdFromTileMap);\n            // Now we can process the the individual bytes that represent the pixel on a tile\n            // Get the y pixel of the 8 by 8 tile.\n            // Simply modulo the scanline.\n            // For instance, let's say we are printing the first line of pixels on our camera,\n            // And the first line of pixels on our tile.\n            // yPixel = 1. 1 % 8 = 1.\n            // And for the last line\n            // yPixel = 144. 144 % 8 = 0.\n            // 0 Represents last line of pixels in a tile, 1 represents first. 1 2 3 4 5 6 7 0.\n            // Because remember, we are counting lines on the display NOT including zero\n            var pixelYInTile = pixelYPositionInMap % 8;\n            // Same logic as pixelYInTile.\n            // However, We need to reverse our byte,\n            // As pixel 0 is on byte 7, and pixel 1 is on byte 6, etc...\n            // Therefore, is pixelX was 2, then really is need to be 5\n            // So 2 - 7 = -5, * 1 = 5\n            // Or to simplify, 7 - 2 = 5 haha!\n            var pixelXInTile = pixelXPositionInMap % 8;\n            pixelXInTile = 7 - pixelXInTile;\n            // Get the GB Map Attributes\n            // Bit 0-2  Background Palette number  (BGP0-7)\n            // Bit 3    Tile VRAM Bank number      (0=Bank 0, 1=Bank 1)\n            // Bit 4    Not used\n            // Bit 5    Horizontal Flip            (0=Normal, 1=Mirror horizontally)\n            // Bit 6    Vertical Flip              (0=Normal, 1=Mirror vertically)\n            // Bit 7    BG-to-OAM Priority         (0=Use OAM priority bit, 1=BG Priority)\n            var bgMapAttributes = 0;\n            if (Cpu.GBCEnabled && showColor > 0) {\n                bgMapAttributes = loadFromVramBank(tileMapAddress, 1);\n            }\n            if (checkBitOnByte(6, bgMapAttributes)) {\n                // We are mirroring the tile, therefore, we need to opposite byte\n                // So if our pizel was 0 our of 8, it wild become 7 :)\n                // TODO: This may be wrong :p\n                pixelYInTile = 7 - pixelYInTile;\n            }\n            // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n            // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n            // But we need to load the time from a specific Vram bank\n            var vramBankId = 0;\n            if (checkBitOnByte(3, bgMapAttributes)) {\n                vramBankId = 1;\n            }\n            // Remember to represent a single line of 8 pixels on a tile, we need two bytes.\n            // Therefore, we need to times our modulo by 2, to get the correct line of pixels on the tile.\n            // Again, think like you had to map a 2d array as a 1d.\n            var byteOneForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2, vramBankId);\n            var byteTwoForLineOfTilePixels = loadFromVramBank(tileDataAddress + pixelYInTile * 2 + 1, vramBankId);\n            // Now we can get the color for that pixel\n            // Colors are represented by getting X position of ByteTwo, and X positon of Byte One\n            // To Get the color Id.\n            // For example, the result of the color id is 0000 00[xPixelByteTwo][xPixelByteOne]\n            // See: How to draw a tile/sprite from memory: http://www.codeslinger.co.uk/pages/projects/gameboy/graphics.html\n            var paletteColorId = 0;\n            if (checkBitOnByte(pixelXInTile, byteTwoForLineOfTilePixels)) {\n                // Byte one represents the second bit in our color id, so bit shift\n                paletteColorId += 1;\n                paletteColorId = paletteColorId << 1;\n            }\n            if (checkBitOnByte(pixelXInTile, byteOneForLineOfTilePixels)) {\n                paletteColorId += 1;\n            }\n            // FINALLY, RENDER THAT PIXEL!\n            var pixelStart = (y * 256 + x) * 3;\n            if (Cpu.GBCEnabled && showColor > 0) {\n                // Finally lets add some, C O L O R\n                // Want the botom 3 bits\n                var bgPalette = bgMapAttributes & 0x07;\n                // Call the helper function to grab the correct color from the palette\n                var rgbColorPalette = getRgbColorFromPalette(bgPalette, paletteColorId, false);\n                // Split off into red green and blue\n                var red = getColorComponentFromRgb(0, rgbColorPalette);\n                var green = getColorComponentFromRgb(1, rgbColorPalette);\n                var blue = getColorComponentFromRgb(2, rgbColorPalette);\n                var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n                store(offset, red);\n                store(offset + 1, green);\n                store(offset + 2, blue);\n            }\n            else {\n                // Only rendering camera for now, so coordinates are for the camera.\n                // Get the rgb value for the color Id, will be repeated into R, G, B (if not colorized)\n                var hexColor = getColorizedGbHexColorFromPalette(paletteColorId, Graphics.memoryLocationBackgroundPalette);\n                var offset = BACKGROUND_MAP_LOCATION + pixelStart;\n                // Red\n                store(offset + 0, getRedFromHexColor(hexColor));\n                // Green\n                store(offset + 1, getGreenFromHexColor(hexColor));\n                // Blue\n                store(offset + 2, getBlueFromHexColor(hexColor));\n            }\n        }\n    }\n}\nfunction drawTileDataToWasmMemory() {\n    for (var tileDataMapGridY = 0; tileDataMapGridY < 0x17; tileDataMapGridY++) {\n        for (var tileDataMapGridX = 0; tileDataMapGridX < 0x1f; tileDataMapGridX++) {\n            // Get Our VramBankID\n            var vramBankId = 0;\n            if (tileDataMapGridX > 0x0f) {\n                vramBankId = 1;\n            }\n            // Get our tile ID\n            var tileId = tileDataMapGridY;\n            if (tileDataMapGridY > 0x0f) {\n                tileId -= 0x0f;\n            }\n            tileId = tileId << 4;\n            if (tileDataMapGridX > 0x0f) {\n                tileId = tileId + (tileDataMapGridX - 0x0f);\n            }\n            else {\n                tileId = tileId + tileDataMapGridX;\n            }\n            // Finally get our tile Data location\n            var tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectOneStart;\n            if (tileDataMapGridY > 0x0f) {\n                tileDataMemoryLocation = Graphics.memoryLocationTileDataSelectZeroStart;\n            }\n            // Let's see if we have C O L O R\n            // Set the map and sprite attributes to -1\n            // Meaning, we will draw monochrome\n            var paletteLocation = Graphics.memoryLocationBackgroundPalette;\n            var bgMapAttributes = -1;\n            var spriteAttributes = -1;\n            // Let's see if the tile is being used by a sprite\n            for (var spriteRow = 0; spriteRow < 8; spriteRow++) {\n                for (var spriteColumn = 0; spriteColumn < 5; spriteColumn++) {\n                    var spriteIndex = spriteColumn * 8 + spriteRow;\n                    // Sprites occupy 4 bytes in the sprite attribute table\n                    var spriteTableIndex = spriteIndex * 4;\n                    var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2);\n                    if (tileId === spriteTileId) {\n                        var currentSpriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n                        var spriteVramBankId = 0;\n                        if (Cpu.GBCEnabled && checkBitOnByte(3, currentSpriteAttributes)) {\n                            spriteVramBankId = 1;\n                        }\n                        if (spriteVramBankId === vramBankId) {\n                            spriteAttributes = currentSpriteAttributes;\n                            spriteRow = 8;\n                            spriteColumn = 5;\n                            // Set our paletteLocation\n                            paletteLocation = Graphics.memoryLocationSpritePaletteOne;\n                            if (checkBitOnByte(4, spriteAttributes)) {\n                                paletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n                            }\n                        }\n                    }\n                }\n            }\n            // If we didn't find a sprite,\n            // Let's see if the tile is on the bg tile map\n            // If so, use that bg map for attributes\n            if (Cpu.GBCEnabled && spriteAttributes < 0) {\n                var tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectZeroStart;\n                if (Lcd.bgTileMapDisplaySelect) {\n                    tileMapMemoryLocation = Graphics.memoryLocationTileMapSelectOneStart;\n                }\n                // Loop through the tileMap, and find if we have our current ID\n                var foundTileMapAddress = -1;\n                for (var x = 0; x < 32; x++) {\n                    for (var y = 0; y < 32; y++) {\n                        var tileMapAddress = tileMapMemoryLocation + y * 32 + x;\n                        var tileIdFromTileMap = loadFromVramBank(tileMapAddress, 0);\n                        // Check if we found our tileId\n                        if (tileId === tileIdFromTileMap) {\n                            foundTileMapAddress = tileMapAddress;\n                            x = 32;\n                            y = 32;\n                        }\n                    }\n                }\n                if (foundTileMapAddress >= 0) {\n                    bgMapAttributes = loadFromVramBank(foundTileMapAddress, 1);\n                }\n            }\n            // Draw each Y line of the tile\n            for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n                drawPixelsFromLineOfTile(tileId, // tileId\n                tileDataMemoryLocation, // Graphics.memoryLocationTileDataSelect\n                vramBankId, // Vram Bank\n                0, // Tile Line X Start\n                7, // Tile Line X End\n                tileLineY, // Tile Line Y\n                tileDataMapGridX * 8, // Output line X\n                tileDataMapGridY * 8 + tileLineY, // Output line Y\n                0x1f * 8, // Output Width\n                TILE_DATA_LOCATION, // Wasm Memory Start\n                false, // shouldRepresentMonochromeColorByColorId\n                paletteLocation, // paletteLocation\n                bgMapAttributes, // bgMapAttributes\n                spriteAttributes // spriteAttributes\n                );\n            }\n        }\n    }\n}\nfunction drawOamToWasmMemory() {\n    // Draw all 40 sprites\n    // Going to be like BGB and do 8 x 5 sprites\n    for (var spriteRow = 0; spriteRow < 8; spriteRow++) {\n        for (var spriteColumn = 0; spriteColumn < 5; spriteColumn++) {\n            var spriteIndex = spriteColumn * 8 + spriteRow;\n            // Sprites occupy 4 bytes in the sprite attribute table\n            var spriteTableIndex = spriteIndex * 4;\n            // Y positon is offset by 16, X position is offset by 8\n            var spriteYPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex);\n            var spriteXPosition = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 1);\n            var spriteTileId = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 2);\n            var tilesToDraw = 1;\n            if (Lcd.tallSpriteSize) {\n                // @binji says in 8x16 mode, even tileId always drawn first\n                // This will fix shantae sprites which always uses odd numbered indexes\n                // TODO: Do the actual Pandocs thing:\n                // \"In 8x16 mode, the lower bit of the tile number is ignored. Ie. the upper 8x8 tile is \"NN AND FEh\", and the lower 8x8 tile is \"NN OR 01h\".\"\n                // So just knock off the last bit? :)\n                if (spriteTileId % 2 === 1) {\n                    spriteTileId -= 1;\n                }\n                tilesToDraw += 1;\n            }\n            // Get our sprite attributes since we know we shall be drawing the tile\n            var spriteAttributes = eightBitLoadFromGBMemory(Graphics.memoryLocationSpriteAttributesTable + spriteTableIndex + 3);\n            // Find which VRAM Bank to load from\n            var vramBankId = 0;\n            if (Cpu.GBCEnabled && checkBitOnByte(3, spriteAttributes)) {\n                vramBankId = 1;\n            }\n            // Find which monochrome palette we should use\n            var paletteLocation = Graphics.memoryLocationSpritePaletteOne;\n            if (checkBitOnByte(4, spriteAttributes)) {\n                paletteLocation = Graphics.memoryLocationSpritePaletteTwo;\n            }\n            // Start Drawing our tiles\n            for (var i = 0; i < tilesToDraw; i++) {\n                // Draw each Y line of the tile\n                for (var tileLineY = 0; tileLineY < 8; tileLineY++) {\n                    drawPixelsFromLineOfTile(spriteTileId + i, // tileId\n                    Graphics.memoryLocationTileDataSelectOneStart, // Graphics.memoryLocationTileDataSelect\n                    vramBankId, // VRAM Bank\n                    0, // Tile Line X Start\n                    7, // Tile Line X End\n                    tileLineY, // Tile Line Y\n                    spriteRow * 8, // Output line X\n                    spriteColumn * 16 + tileLineY + i * 8, // Output line Y\n                    8 * 8, // Output Width\n                    OAM_TILES_LOCATION, // Wasm Memory Start\n                    false, // shouldRepresentMonochromeColorByColorId\n                    paletteLocation, // paletteLocation\n                    -1, // bgMapAttributes\n                    spriteAttributes // spriteAttributes\n                    );\n                }\n            }\n        }\n    }\n}\n\nfunction getDIV() {\n    return Timers.dividerRegister;\n}\nfunction getTIMA() {\n    return Timers.timerCounter;\n}\nfunction getTMA() {\n    return Timers.timerModulo;\n}\nfunction getTAC() {\n    var response = Timers.timerInputClock;\n    if (Timers.timerEnabled) {\n        response = setBitOnByte(2, response);\n    }\n    return response;\n}\n\n// Functions to debug internal gameboy memory\nfunction updateDebugGBMemory() {\n    for (var i = 0; i < DEBUG_GAMEBOY_MEMORY_SIZE; i++) {\n        store(DEBUG_GAMEBOY_MEMORY_LOCATION + i, eightBitLoadFromGBMemoryWithTraps(i));\n    }\n    // Since we are debugging, we don't want to be responsible for tripping the breakpoints\n    Breakpoints.reachedBreakpoint = false;\n}\n\n// Public Exports\n\nexport { config, hasCoreStarted, saveState, loadState, isGBC, getStepsPerStepSet, getStepSets, getSteps, executeMultipleFrames, executeFrame, executeFrameAndCheckAudio, executeUntilCondition, executeStep, getCyclesPerCycleSet, getCycleSets, getCycles, setJoypadState, getNumberOfSamplesInAudioBuffer, clearAudioBuffer, setManualColorizationPalette, WASMBOY_MEMORY_LOCATION, WASMBOY_MEMORY_SIZE, WASMBOY_WASM_PAGES, ASSEMBLYSCRIPT_MEMORY_LOCATION, ASSEMBLYSCRIPT_MEMORY_SIZE, WASMBOY_STATE_LOCATION, WASMBOY_STATE_SIZE, GAMEBOY_INTERNAL_MEMORY_LOCATION, GAMEBOY_INTERNAL_MEMORY_SIZE, VIDEO_RAM_LOCATION, VIDEO_RAM_SIZE, WORK_RAM_LOCATION, WORK_RAM_SIZE, OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION, OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE, GRAPHICS_OUTPUT_LOCATION, GRAPHICS_OUTPUT_SIZE, GBC_PALETTE_LOCATION, GBC_PALETTE_SIZE, BG_PRIORITY_MAP_LOCATION, BG_PRIORITY_MAP_SIZE, FRAME_LOCATION, FRAME_SIZE, BACKGROUND_MAP_LOCATION, BACKGROUND_MAP_SIZE, TILE_DATA_LOCATION, TILE_DATA_SIZE, OAM_TILES_LOCATION, OAM_TILES_SIZE, AUDIO_BUFFER_LOCATION, AUDIO_BUFFER_SIZE, CHANNEL_1_BUFFER_LOCATION, CHANNEL_1_BUFFER_SIZE, CHANNEL_2_BUFFER_LOCATION, CHANNEL_2_BUFFER_SIZE, CHANNEL_3_BUFFER_LOCATION, CHANNEL_3_BUFFER_SIZE, CHANNEL_4_BUFFER_LOCATION, CHANNEL_4_BUFFER_SIZE, CARTRIDGE_RAM_LOCATION, CARTRIDGE_RAM_SIZE, BOOT_ROM_LOCATION, BOOT_ROM_SIZE, CARTRIDGE_ROM_LOCATION, CARTRIDGE_ROM_SIZE, DEBUG_GAMEBOY_MEMORY_LOCATION, DEBUG_GAMEBOY_MEMORY_SIZE, getWasmBoyOffsetFromGameBoyOffset, setProgramCounterBreakpoint, resetProgramCounterBreakpoint, setReadGbMemoryBreakpoint, resetReadGbMemoryBreakpoint, setWriteGbMemoryBreakpoint, resetWriteGbMemoryBreakpoint, getRegisterA, getRegisterB, getRegisterC, getRegisterD, getRegisterE, getRegisterH, getRegisterL, getRegisterF, getProgramCounter, getStackPointer, getOpcodeAtProgramCounter, getLY, drawBackgroundMapToWasmMemory, drawTileDataToWasmMemory, drawOamToWasmMemory, getDIV, getTIMA, getTMA, getTAC, updateDebugGBMemory };\n","import * as WasmBoyCore from '../../dist/core/core.esm';\n\nconst getWasmBoyTsCore = async () => {\n  const response = {\n    instance: {\n      exports: WasmBoyCore\n    },\n    byteMemory: WasmBoyCore.memory.wasmByteMemory,\n    type: 'TypeScript'\n  };\n  return response;\n};\n\nexport default getWasmBoyTsCore;\n"],"names":["wasmboyMemorySize","wasmByteMemory","Uint8ClampedArray","memory","size","grow","load","offset","store","value","abs","Math","ceil","ASSEMBLYSCRIPT_MEMORY_LOCATION","ASSEMBLYSCRIPT_MEMORY_SIZE","WASMBOY_STATE_LOCATION","WASMBOY_STATE_SIZE","VIDEO_RAM_LOCATION","VIDEO_RAM_SIZE","WORK_RAM_LOCATION","WORK_RAM_SIZE","OTHER_GAMEBOY_INTERNAL_MEMORY_LOCATION","OTHER_GAMEBOY_INTERNAL_MEMORY_SIZE","GAMEBOY_INTERNAL_MEMORY_LOCATION","GAMEBOY_INTERNAL_MEMORY_SIZE","GBC_PALETTE_LOCATION","GBC_PALETTE_SIZE","BG_PRIORITY_MAP_LOCATION","BG_PRIORITY_MAP_SIZE","FRAME_LOCATION","FRAME_SIZE","BACKGROUND_MAP_LOCATION","BACKGROUND_MAP_SIZE","TILE_DATA_LOCATION","TILE_DATA_SIZE","OAM_TILES_LOCATION","OAM_TILES_SIZE","GRAPHICS_OUTPUT_LOCATION","GRAPHICS_OUTPUT_SIZE","CHANNEL_1_BUFFER_LOCATION","CHANNEL_1_BUFFER_SIZE","CHANNEL_2_BUFFER_LOCATION","CHANNEL_2_BUFFER_SIZE","CHANNEL_3_BUFFER_LOCATION","CHANNEL_3_BUFFER_SIZE","CHANNEL_4_BUFFER_LOCATION","CHANNEL_4_BUFFER_SIZE","AUDIO_BUFFER_LOCATION","AUDIO_BUFFER_SIZE","CARTRIDGE_RAM_LOCATION","CARTRIDGE_RAM_SIZE","BOOT_ROM_LOCATION","BOOT_ROM_SIZE","CARTRIDGE_ROM_LOCATION","CARTRIDGE_ROM_SIZE","DEBUG_GAMEBOY_MEMORY_LOCATION","DEBUG_GAMEBOY_MEMORY_SIZE","WASMBOY_MEMORY_LOCATION","WASMBOY_MEMORY_SIZE","WASMBOY_WASM_PAGES","Config","u8Portable","param","u16Portable","i8Portable","i32Portable","setFlagBit","flagBit","flagValue","bitwiseOperand","Cpu","setZeroFlag$$1","setSubtractFlag","setHalfCarryFlag","setCarryFlag","getZeroFlag$$1","getSubtractFlag","getHalfCarryFlag","getCarryFlag$$1","checkAndSetEightBitHalfCarryFlag","amountToAdd","result","checkAndSetEightBitCarryFlag","checkAndSetSixteenBitFlagsAddOverflow","valueOne","valueTwo","useStackPointerBits","flagXor","halfCarryAnd","WasmBoyGBColors","GreenColors","OrangeColors","BrownColors","InvertedColors","GrayscaleColors","PastelMixColors","DarkBrownColors","DarkGreenColors","DarkBlueColors","RedColors","BlueColors","YellowColors","Table00Entry08Colors","Table01Entry0BColors","Table01Entry10Colors","Table03Entry0AColors","Table05Entry00Colors","Table05Entry01Colors","Table05Entry02Colors","Table05Entry08Colors","Table05Entry09Colors","Table05Entry11Colors","Table05Entry14Colors","Table05Entry15Colors","Colors","initializeColors","setManualColorizationPalette","titleChecksum","i","eightBitLoadFromGBMemory","setHashColorizationPalette","getRedFromHexColor","color","getGreenFromHexColor","getBlueFromHexColor","colorizationId","hash","concatenateBytes","highByte","lowByte","splitHighByte","groupedByte","splitLowByte","rotateByteLeft","rotateByteLeftThroughCarry","rotateByteRight","rotateByteRightThroughCarry","setBitOnByte","bitPosition","byte","resetBitOnByte","checkBitOnByte","Palette","initializePalette","eightBitStoreIntoGBMemory","getMonochromeColorFromPalette","colorId","paletteMemoryLocation","shouldRepresentColorByColorId","rgbColor","getColorizedGbHexColorFromPalette","hexColor","writeColorPaletteToMemory","memoryLocationSpritePaletteData","paletteIndex","storePaletteByteInWasmMemory","incrementPaletteIndexIfSet","getRgbColorFromPalette","paletteId","isSprite","paletteHighByte","loadPaletteByteFromWasmMemory","paletteLowByte","getColorComponentFromRgb","colorRgb","paletteIndexByte","addPriorityforPixel","x","y","hasGbcBgPriority","bgPriorityByte","getPixelStart","getPriorityforPixel","clearPriorityMap","TileCache","resetTileCache","drawPixelsFromLineOfTile","tileId","tileDataMemoryLocation","vramBankId","tileLineXStart","tileLineXEnd","tileLineY","outputLineX","outputLineY","outputWidth","wasmMemoryStart","shouldRepresentMonochromeColorByColorId","paletteLocation","bgMapAttributes","spriteAttributes","pixelsDrawn","tileDataAddress","getTileDataAddress","byteOneForLineOfTilePixels","loadFromVramBank","byteTwoForLineOfTilePixels","iteratedOutputX","pixelXInTile","paletteColorId","bgPalette","rgbColorPalette","red","green","blue","Graphics","monochromeColor","pixelStart","getTilePixelStart","gbcBgPriority","tileIdFromTileMap","isDutyCycleClockPositiveOrNegativeForWaveform","channelDuty","waveFormPositionOnDuty","Channel1","Channel1.updateNRx0","oldSweepNegate","Channel1.updateNRx1","Channel1.updateNRx2","isDacEnabled","Channel1.updateNRx3","Channel1.updateNRx4","frequencyMSB","doesNextFrameSequencerUpdateLength","Sound","isBeingLengthEnabled","Channel1.saveState","storeBooleanDirectlyToWasmMemory","getSaveStateMemoryOffset","Channel1.loadState","loadBooleanDirectlyFromWasmMemory","Channel1.initialize","Channel1.getSampleFromCycleCounter","accumulatedCycles","Channel1.resetTimer","frequencyTimer","Channel1.getSample","numberOfCycles","overflowAmount","outputVolume","sample","Channel1.trigger","didCalculatedSweepOverflow","calculateSweep","Channel1.willChannelUpdate","cycleCounter","Channel1.updateSweep","sweepCounter","newFrequency","Channel1.updateLength","lengthCounter","Channel1.updateEnvelope","envelopeCounter","volume","Channel1.setFrequency","frequency","passedFrequencyHighBits","passedFrequencyLowBits","newRegister4","oldFrequency","calculatedSweep","Channel2","Channel2.updateNRx1","Channel2.updateNRx2","Channel2.updateNRx3","Channel2.updateNRx4","Channel2.saveState","Channel2.loadState","Channel2.initialize","Channel2.getSampleFromCycleCounter","Channel2.resetTimer","Channel2.getSample","Channel2.trigger","Channel2.willChannelUpdate","Channel2.updateLength","Channel2.updateEnvelope","Channel2.setFrequency","Channel3","Channel3.updateNRx0","Channel3.updateNRx1","Channel3.updateNRx2","Channel3.updateNRx3","Channel3.updateNRx4","Channel3.saveState","Channel3.loadState","Channel3.handleWaveRamRead","readCurrentSampleByteFromWaveRam","Channel3.handleWaveRamWrite","positionIndexToAdd","Channel3.initialize","Channel3.getSampleFromCycleCounter","Channel3.resetTimer","Channel3.getSample","volumeCode","getSampleFromSampleBufferForWaveTablePosition","advanceWavePositionAndSampleBuffer","Channel3.trigger","Channel3.willChannelUpdate","Channel3.updateLength","waveTablePosition","Channel4","Channel4.updateNRx1","Channel4.updateNRx2","Channel4.updateNRx3","divisorCode","Channel4.updateNRx4","Channel4.saveState","Channel4.loadState","Channel4.initialize","Channel4.getSampleFromCycleCounter","Channel4.getSample","linearFeedbackShiftRegister","xorLfsrBitZeroOne","Channel4.trigger","Channel4.willChannelUpdate","Channel4.getNoiseChannelFrequencyPeriod","Channel4.updateLength","Channel4.updateEnvelope","SoundAccumulator","initializeSoundAccumulator","accumulateSound","channel1WillUpdate","didChannelDacChange","channel2WillUpdate","channel3WillUpdate","channel4WillUpdate","downSampleCycleCounter","maxDownSampleCycles","mixChannelSamples","setLeftAndRightOutputForAudioQueue","audioQueueIndex","maxIndex","channelNumber","channel1EnabledChanged","channel2EnabledChanged","channel3EnabledChanged","channel4EnabledChanged","Sound.batchProcessCycles","Sound.updateNR50","Sound.updateNR51","Sound.updateNR52","Sound.maxFrameSequenceCycles","Sound.maxDownSampleCycles","Sound.saveState","Sound.loadState","clearAudioBuffer","initializeSound","batchProcessAudio","batchProcessCycles","currentCycles","updateSound","frameSequencerUpdated","updateFrameSequencer","calculateSound","getNumberOfSamplesInAudioBuffer","channel1Sample","channel2Sample","channel3Sample","channel4Sample","mixedSample","leftChannelSampleUnsignedByte","rightChannelSampleUnsignedByte","maxFrameSequenceCycles","frameSequenceCycleCounter","frameSequencer","leftChannelSample","rightChannelSample","getSampleAsUnsignedByte","mixerVolume","convertedSample","precision","maxDivider","leftVolume","rightVolume","bufferLocation","audioQueueOffset","SoundRegisterWriteTraps","wasNR52Enabled","eightBitStoreIntoGBMemoryWithTraps","SoundRegisterReadTraps","register","registerNR52","Interrupts","Interrupts.updateInterruptEnabled","Interrupts.updateInterruptRequested","Interrupts.areInterruptsPending","Interrupts.saveState","Interrupts.loadState","initializeInterrupts","checkInterrupts","wasInterruptHandled","_handleInterrupt","interuptHandlerCycles","setInterrupts","interruptRequest","sixteenBitStoreIntoGBMemory","_requestInterrupt","requestVBlankInterrupt","requestLcdInterrupt","requestTimerInterrupt","requestJoypadInterrupt","requestSerialInterrupt","Timers","Timers.batchProcessCycles","Timers.updateDividerRegister","oldDividerRegister","_checkDividerRegisterFallingEdgeDetector","_incrementTimerCounter","Timers.updateTimerCounter","Timers.updateTimerModulo","Timers.updateTimerControl","oldTimerEnabled","newTimerInputClock","oldTimerCounterMaskBit","_getTimerCounterMaskBit","newTimerCounterMaskBit","dividerRegister","Timers.saveState","Timers.loadState","initializeTimers","batchProcessTimers","updateTimers","cyclesIncreased","curDividerRegister","timerCounterWasReset","counter","newDividerRegister","timerCounterMaskBit","timerInputClock","Serial","Serial.updateTransferControl","initializeSerial","updateSerial","oldCycles","curCycles","_checkFallingEdgeDetector","memoryLocationSerialTransferData","transferData","numberOfBitsTransferred","memoryLocationSerialTransferControl","transferControl","newCycles","maskBit","_getFallingEdgeMaskBit","Joypad","Joypad.updateJoypad","Joypad.saveState","Joypad.loadState","getJoypadState","joypadRegister","setJoypadState","up","right","down","left","a","b","select","start","_pressJoypadButton","_releaseJoypadButton","buttonId","isButtonStateChanging","_getJoypadButtonStateFromButtonId","_setJoypadButtonStateFromButtonId","isDpadTypeButton","shouldRequestInterrupt","isPressed","handleBanking","Memory","isMBC1","isMBC2","romEnableByte","isMBC5","currentRomBank","romBankLowerBits","ramBankBits","getRomBankAddress","gameboyOffset","getRamBankAddress","initializeDma","startDmaTransfer","sourceAddressOffset","sourceAddress","spriteInformationByte","startHdmaTransfer","hdmaTriggerByteToBeWritten","hdmaTriggerByte","hdmaSource","getHdmaSourceFromMemory","hdmaDestination","getHdmaDestinationFromMemory","transferLength","hdmaTransfer","updateHblankHdma","bytesToTransfer","hblankHdmaTransferLengthRemaining","memoryLocationHdmaTrigger","sourceByte","eightBitLoadFromGBMemoryWithTraps","hdmaDestinationWithWrapping","hdmaSourceHigh","hdmaSourceLow","hdmaDestinationHigh","hdmaDestinationLow","checkWriteTraps","videoRamLocation","spriteInformationTableLocation","Lcd","hblankHdmaSource","getWasmBoyOffsetFromGameBoyOffset","wramBankId","Breakpoints","setProgramCounterBreakpoint","breakpoint","resetProgramCounterBreakpoint","setReadGbMemoryBreakpoint","resetReadGbMemoryBreakpoint","setWriteGbMemoryBreakpoint","resetWriteGbMemoryBreakpoint","sixteenBitStoreIntoGBMemoryWithTraps","nextOffset","Lcd.updateLcdStatus","currentLcdStatus","Lcd.updateLcdControl","wasLcdEnabled","resetLcd","shouldBlankScreen","lcdStatus","setLcdStatus","scanlineRegister","lcdMode","newLcdMode","scanlineCycleCounter","MIN_CYCLES_SPRITES_LCD_MODE","checkCoincidence","renderBackground","tileMapMemoryLocation","drawBackgroundWindowScanline","renderWindow","windowX","windowY","pixelYPositionInMap","xOffset","iStart","tileYPositionInMap","pixelXPositionInMap","tileMapAddress","usedTileCache","drawLineOfTileFromTileCache","drawLineOfTileFromTileId","drawColorPixelFromTileId","drawMonochromePixelFromTileId","xPixel","yPixel","pixelYInTile","setPixelOnFrame","nextXIndexToPerformCacheCheck","wasLastTileHorizontallyFlipped","isCurrentTileHorizontallyFlipped","tileCacheIndex","xPos","previousXPixel","previousTilePixelLocation","getRgbPixelStart","pixelPriority","xOffsetTileWidthRemainder","tileXStart","tileXEnd","renderSprites","useLargerSprites","spriteTableIndex","index","spriteYPosition","spriteXPosition","spriteTileId","spriteHeight","isSpritePriorityBehindWindowAndBackground","flipSpriteY","flipSpriteX","currentSpriteLine","spriteTileAddressStart","spriteDataByteOneForLineOfTilePixels","spriteTileAddress","spriteDataByteTwoForLineOfTilePixels","tilePixel","spritePixelXInTile","spriteColorId","spriteXPixelLocationInCameraView","shouldShowFromLcdcPriority","shouldHideFromOamPriority","shouldHideFromBgPriority","bgColorFromPriorityByte","spritePaletteLocation","Graphics.batchProcessCycles","Graphics.MAX_CYCLES_PER_SCANLINE","Graphics.MIN_CYCLES_SPRITES_LCD_MODE","Graphics.MIN_CYCLES_TRANSFER_DATA_LCD_MODE","Graphics.saveState","Graphics.loadState","batchProcessGraphics","updateGraphics","initializeGraphics","graphicsDisableScanlineRendering","_renderEntireFrame","_drawScanline","checkReadTraps","response","currentSpeedSwitchRegister","upperDividerRegisterBits","readTrapResult","sixteenBitLoadFromGBMemory","lowByteReadTrapResult","highByteReadTrapResult","Memory.saveState","Memory.loadState","initializeCartridge","cartridgeType","Cpu.CLOCK_SPEED","Cpu.MAX_CYCLES_PER_FRAME","Cpu.enableHalt","Cpu.exitHaltAndStop","Cpu.isHalted","Cpu.saveState","Cpu.loadState","initializeCpu","addARegister","registerA","addAThroughCarryRegister","overflowedResult","subARegister","negativeRegister","subAThroughCarryRegister","carryRegisterCheck","andARegister","xorARegister","orARegister","cpARegister","rotateRegisterLeft","rotateRegisterRight","rotateRegisterLeftThroughCarry","hasHighbit","rotateRegisterRightThroughCarry","hasLowBit","shiftLeftRegister","shiftRightArithmeticRegister","hasLowbit","swapNibblesOnRegister","shiftRightLogicalRegister","testBitOnRegister","setBitOnRegister","bitValue","setByte","relativeJump","relativeJumpOffset","programCounter","handleCbOpcode","cbOpcode","handledOpcode","instructionRegisterValue","instructionRegisterResult","registerNumber","eightBitLoadSyncCycles","opcodeHighNibble","eightBitStoreSyncCycles","executeOpcode$$1","opcode","handleOpcode0x","handleOpcode1x","handleOpcode2x","handleOpcode3x","handleOpcode4x","handleOpcode5x","handleOpcode6x","handleOpcode7x","handleOpcode8x","handleOpcode9x","handleOpcodeAx","handleOpcodeBx","handleOpcodeCx","handleOpcodeDx","handleOpcodeEx","handleOpcodeFx","syncCycles","sixteenBitLoadSyncCycles","sixteenBitStoreSyncCycles","getDataByteOne","getDataByteTwo","getConcatenatedDataByte","concatenatedDataByte","registerBC3","registerB","registerHL","registerBC9","registerBCB","registerC","speedSwitch","registerDE3","registerD","registerDE9","registerDEA","registerDEB","registerE","sixteenBitDataByte","registerHL2","registerHL3","registerH","adjustment","adjustedRegister","registerHL9","registerHLA","registerHLB","registerL","registerHL4","valueAtHL4","incrementer","registerHL5","valueAtHL5","valueAtHL6","valueAtHLE","stackPointer","registerBC1","cbCycles","registerDE1","largeDataByteOne","registerHL1","signedDataByteOne","registerAF1","Cycles","getCyclesPerCycleSet","getCycleSets","getCycles","trackCyclesRan","cycles","resetCycles","Execute","getStepsPerStepSet","getStepSets","getSteps","trackStepsRan","steps","esteps","resetSteps","executeMultipleFrames","numberOfFrames","frameResponse","framesRun","executeFrame","executeUntilCondition","executeFrameAndCheckAudio","maxAudioBuffer","checkMaxCyclesPerFrame","audioBufferSize","errorCondition","frameCondition","audioBufferCondition","executeStep","setHasCoreStarted","haltBugOpcode","haltBugCycles","interruptCycles","hasStarted","hasCoreStarted","config","enableBootRom","useGbcWhenAvailable","audioBatchProcessing","graphicsBatchProcessing","timersBatchProcessing","audioAccumulateSamples","tileRendering","tileCaching","enableAudioDebugging","initialize","gbcType","initializeVarious","isGBC","saveStateSlot","saveState","loadState","getRegisterA","getRegisterB","getRegisterC","getRegisterD","getRegisterE","getRegisterH","getRegisterL","getRegisterF","getProgramCounter","getStackPointer","getOpcodeAtProgramCounter","getLY","drawBackgroundMapToWasmMemory","showColor","drawTileDataToWasmMemory","tileDataMapGridY","tileDataMapGridX","spriteRow","spriteColumn","currentSpriteAttributes","spriteVramBankId","foundTileMapAddress","drawOamToWasmMemory","tilesToDraw","getDIV","getTIMA","getTMA","getTAC","updateDebugGBMemory","getWasmBoyTsCore","instance","exports","WasmBoyCore","byteMemory","type"],"mappings":"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"}